(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("cornerstone-core"), require("cornerstone-math"), require("cornerstone-tools"), require("react"));
	else if(typeof define === 'function' && define.amd)
		define("ohif-segmentation-plugin", ["cornerstone-core", "cornerstone-math", "cornerstone-tools", "react"], factory);
	else if(typeof exports === 'object')
		exports["ohif-segmentation-plugin"] = factory(require("cornerstone-core"), require("cornerstone-math"), require("cornerstone-tools"), require("react"));
	else
		root["ohif-segmentation-plugin"] = factory(root["cornerstone-core"], root["cornerstone-math"], root["cornerstone-tools"], root["react"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_cornerstone_core__, __WEBPACK_EXTERNAL_MODULE_cornerstone_math__, __WEBPACK_EXTERNAL_MODULE_cornerstone_tools__, __WEBPACK_EXTERNAL_MODULE_react__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/GeneralAnatomylist.js":
/*!***********************************!*\
  !*** ./src/GeneralAnatomylist.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var json = "{\n  \"SegmentationCategoryTypeContextName\": \"Segmentation category and type - 3D Slicer General Anatomy list\",\n  \"@schema\": \"https://raw.githubusercontent.com/qiicr/dcmqi/master/doc/schemas/segment-context-schema.json#\",\n  \"SegmentationCodes\": {\n    \"Category\": [\n      {\n        \"CodeMeaning\": \"Tissue\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"85756007\",\n        \"cid\": \"7051\",\n        \"UMLSConceptUID\": \"C0040300\",\n        \"CodeValue\": \"T-D0050\",\n        \"contextGroupName\": \"Segmentation Property Categories\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              128,\n              174,\n              128\n            ],\n            \"CodeMeaning\": \"Tissue\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tissue\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0040300\",\n            \"CodeValue\": \"T-D0050\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"85756007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              101,\n              79\n            ],\n            \"CodeMeaning\": \"Artery\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"artery\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0555806\",\n            \"CodeValue\": \"T-41066\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"275989006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              230,\n              220,\n              70\n            ],\n            \"CodeMeaning\": \"Body fat\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"fat\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0344335\",\n            \"CodeValue\": \"F-03D38\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"248300009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              241,\n              214,\n              145\n            ],\n            \"CodeMeaning\": \"Bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"bone\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0262950\",\n            \"CodeValue\": \"T-D016E\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"272673000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              183,\n              156,\n              220\n            ],\n            \"CodeMeaning\": \"Capillary\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"capillary\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0006901\",\n            \"CodeValue\": \"T-40050\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"20982000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              111,\n              184,\n              210\n            ],\n            \"CodeMeaning\": \"Cartilage\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cartilage\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0007301\",\n            \"CodeValue\": \"T-D021B\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"309312004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              111,\n              184,\n              210\n            ],\n            \"CodeMeaning\": \"Connective tissue\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"connective tissue\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0009780\",\n            \"CodeValue\": \"T-1A200\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"21793004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              183,\n              214,\n              211\n            ],\n            \"CodeMeaning\": \"Ligament\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"ligament\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0023685\",\n            \"CodeValue\": \"T-18010\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"52082005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              68,\n              172,\n              100\n            ],\n            \"CodeMeaning\": \"Lymph node\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lymph node\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0024204\",\n            \"CodeValue\": \"T-C4000\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"59441001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              111,\n              197,\n              131\n            ],\n            \"CodeMeaning\": \"Lymphatic vessel\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lymphatic vessel\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0229889\",\n            \"CodeValue\": \"T-C6010\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"83555006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              178,\n              212,\n              242\n            ],\n            \"CodeMeaning\": \"Meniscus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"meniscus\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0224498\",\n            \"CodeValue\": \"T-15009\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"74135004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              192,\n              104,\n              88\n            ],\n            \"CodeMeaning\": \"Muscle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscle\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0026845\",\n            \"CodeValue\": \"T-13001\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"71616004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              214,\n              49\n            ],\n            \"CodeMeaning\": \"Nerve\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"nerve\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C1268169\",\n            \"CodeValue\": \"T-D0598\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"119410002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              221,\n              130,\n              101\n            ],\n            \"CodeMeaning\": \"Organ\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"organ\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C1285092\",\n            \"CodeValue\": \"T-1A310\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"2861001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"CodeMeaning\": \"Skin\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skin\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C1123023\",\n            \"CodeValue\": \"T-01000\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"39937001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              152,\n              189,\n              207\n            ],\n            \"CodeMeaning\": \"Tendon\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tendon\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0039508\",\n            \"CodeValue\": \"T-17010\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"13024002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              0,\n              151,\n              206\n            ],\n            \"CodeMeaning\": \"Vein\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"vein\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0447146\",\n            \"CodeValue\": \"T-4806E\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"181378009\"\n          }\n        ],\n        \"showAnatomy\": true\n      },\n      {\n        \"CodeMeaning\": \"Anatomical Structure\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"123037004\",\n        \"cid\": \"7051\",\n        \"UMLSConceptUID\": \"C1268086\",\n        \"CodeValue\": \"T-D000A\",\n        \"contextGroupName\": \"Segmentation Property Categories\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"abdomen\",\n            \"CodeValue\": \"T-D4000\",\n            \"UMLSConceptUID\": \"C0000726\",\n            \"CodeMeaning\": \"Abdomen\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"113345001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              186,\n              124,\n              161\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"abdominal cavity\",\n            \"CodeValue\": \"T-D4010\",\n            \"UMLSConceptUID\": \"C0230168\",\n            \"CodeMeaning\": \"Abdominal cavity\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"52731004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              171,\n              85,\n              68\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of abdominal wall\",\n            \"CodeValue\": \"T-14001\",\n            \"UMLSConceptUID\": \"C1279385\",\n            \"CodeMeaning\": \"Abdominal wall muscle\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"195879000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              60,\n              143,\n              83\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"adenohypophysis\",\n            \"CodeValue\": \"T-B1100\",\n            \"UMLSConceptUID\": \"C0032008\",\n            \"CodeMeaning\": \"Adenohypophysis\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"62818001\"\n          },\n          {\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"cid\": \"7154\",\n            \"CodeMeaning\": \"Adrenal gland\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0001625\",\n            \"CodeValue\": \"T-B3000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  249,\n                  186,\n                  150\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right adrenal gland\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  249,\n                  186,\n                  150\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left adrenal gland\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"23451007\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Amygdala\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0002708\",\n            \"CodeValue\": \"T-A3230\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  98,\n                  153,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right amygdaloid complex\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  98,\n                  153,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left amygdaloid complex\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"4958002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              224,\n              199\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"anus\",\n            \"CodeValue\": \"T-59900\",\n            \"UMLSConceptUID\": \"C0003461\",\n            \"CodeMeaning\": \"Anus\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"53505006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              224,\n              97,\n              76\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"aorta\",\n            \"CodeValue\": \"T-42000\",\n            \"UMLSConceptUID\": \"C0003483\",\n            \"CodeMeaning\": \"Aorta\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"15825003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              218,\n              123,\n              97\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"aortic valve\",\n            \"CodeValue\": \"T-35400\",\n            \"UMLSConceptUID\": \"C0003501\",\n            \"CodeMeaning\": \"Aortic Valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"34202007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"arachnoid\",\n            \"CodeValue\": \"T-A1220\",\n            \"UMLSConceptUID\": \"C0003707\",\n            \"CodeMeaning\": \"Arachnoid\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"75042008\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Arcuate Fasciculus\",\n            \"CodingSchemeDesignator\": \"FMA\",\n            \"UMLSConceptUID\": \"C2329633\",\n            \"CodeValue\": \"276650\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  125,\n                  102,\n                  154\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right arcuate fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  125,\n                  102,\n                  154\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left arcuate fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              226,\n              77\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"autonomic nerve\",\n            \"CodeValue\": \"T-A9605\",\n            \"UMLSConceptUID\": \"C0206250\",\n            \"CodeMeaning\": \"Autonomic nerve\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"53520000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              0,\n              145,\n              30\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"biliary tree\",\n            \"CodeValue\": \"T-60610\",\n            \"UMLSConceptUID\": \"C0005400\",\n            \"CodeMeaning\": \"Bile Duct\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"28273000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              222,\n              154,\n              132\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urinary bladder\",\n            \"CodeValue\": \"T-74000\",\n            \"UMLSConceptUID\": \"C0005682\",\n            \"CodeMeaning\": \"Bladder\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"89837001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              239,\n              172\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skeleton of thorax\",\n            \"CodeValue\": \"T-D0170\",\n            \"UMLSConceptUID\": \"C0448157\",\n            \"CodeMeaning\": \"Bone of thorax\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"272710004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              242,\n              206,\n              142\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skeleton of neck\",\n            \"CodeValue\": \"T-D006D\",\n            \"UMLSConceptUID\": \"C0730130\",\n            \"CodeMeaning\": \"Bone structure of head and/or neck\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"312779009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              250,\n              225\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"brain\",\n            \"CodeValue\": \"T-A0100\",\n            \"UMLSConceptUID\": \"C0006104\",\n            \"CodeMeaning\": \"Brain\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"12738006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              85,\n              188,\n              255\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"CSF space\",\n            \"CodeValue\": \"T-A0109\",\n            \"UMLSConceptUID\": \"C0459387\",\n            \"CodeMeaning\": \"Brain cerebrospinal fluid pathway\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"280371009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"ventricles of brain\",\n            \"CodeValue\": \"T-A1600\",\n            \"UMLSConceptUID\": \"C0007799\",\n            \"CodeMeaning\": \"Brain ventricle\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35764002\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Caudate nucleus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0007461\",\n            \"CodeValue\": \"T-A3200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  30,\n                  111,\n                  85\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right caudate nucleus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  30,\n                  111,\n                  85\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left caudate nucleus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"11000004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              214,\n              49\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"central nervous system\",\n            \"CodeValue\": \"T-A0090\",\n            \"UMLSConceptUID\": \"C0927232\",\n            \"CodeMeaning\": \"Central nervous system\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"21483005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              194,\n              195,\n              164\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebellar white matter\",\n            \"CodeValue\": \"T-A6080\",\n            \"UMLSConceptUID\": \"C0152381\",\n            \"CodeMeaning\": \"Cerebellar white matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"33060004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebral aqueduct\",\n            \"CodeValue\": \"T-A1800\",\n            \"UMLSConceptUID\": \"C0007769\",\n            \"CodeMeaning\": \"Cerebral aqueduct\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"80447000\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Cerebral fornix\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152334\",\n            \"CodeValue\": \"T-A2970\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  64,\n                  123,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right fornix\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  64,\n                  123,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left fornix\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"87463005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              128,\n              174,\n              128\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebral cortex\",\n            \"CodeValue\": \"T-A2020\",\n            \"UMLSConceptUID\": \"C0007776\",\n            \"CodeMeaning\": \"Cerebral Grey Matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"40146001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              250,\n              225\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebral white matter\",\n            \"CodeValue\": \"T-A2030\",\n            \"UMLSConceptUID\": \"C0152295\",\n            \"CodeMeaning\": \"Cerebral White Matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"68523003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              255,\n              207\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cervical vertebral column\",\n            \"CodeValue\": \"T-11501\",\n            \"UMLSConceptUID\": \"C0728985\",\n            \"CodeMeaning\": \"Cervical spine\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"122494005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              188,\n              95,\n              76\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of thoracic wall\",\n            \"CodeValue\": \"T-14122\",\n            \"UMLSConceptUID\": \"C1269825\",\n            \"CodeMeaning\": \"Chest wall muscle\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"372074006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Cingulum\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228272\",\n            \"CodeValue\": \"T-A2840\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  146,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right cingulum bundle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  146,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left cingulum bundle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"37035000\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Clavicle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0008913\",\n            \"CodeValue\": \"T-12310\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  205,\n                  179,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right clavicle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  205,\n                  179,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left clavicle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"51299004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              204,\n              168,\n              143\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"colon\",\n            \"CodeValue\": \"T-59300\",\n            \"UMLSConceptUID\": \"C0009368\",\n            \"CodeMeaning\": \"Colon\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"71854001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              97,\n              113,\n              158\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"corpus callosum\",\n            \"CodeValue\": \"T-A2700\",\n            \"UMLSConceptUID\": \"C0010090\",\n            \"CodeMeaning\": \"Corpus callosum\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"88442005\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Corpus striatum\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0010097\",\n            \"CodeValue\": \"T-A3100\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  140,\n                  190\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right striatum\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  140,\n                  190\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left striatum\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"31428008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              234,\n              92\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cranial nerves\",\n            \"CodeValue\": \"T-A8000\",\n            \"UMLSConceptUID\": \"C0010268\",\n            \"CodeMeaning\": \"Cranial nerve\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"25238003\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Diencephalon\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0012144\",\n            \"CodeValue\": \"T-A0102\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  69,\n                  110,\n                  53\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"diencephalon\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"87563008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              253,\n              229\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"duodenum\",\n            \"CodeValue\": \"T-58200\",\n            \"UMLSConceptUID\": \"C0013303\",\n            \"CodeMeaning\": \"Duodenum\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"38848004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"dura mater\",\n            \"CodeValue\": \"T-A1120\",\n            \"UMLSConceptUID\": \"C0013313\",\n            \"CodeMeaning\": \"Dura mater\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"18545000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              211,\n              171,\n              143\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"esophagus\",\n            \"CodeValue\": \"T-56000\",\n            \"UMLSConceptUID\": \"C0014876\",\n            \"CodeMeaning\": \"Esophagus\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"32849002\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"External ear\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0013453\",\n            \"CodeValue\": \"T-AB100\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  122,\n                  90\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right external ear\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  122,\n                  90\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left external ear\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"28347008\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Eyeball\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0229242\",\n            \"CodeValue\": \"T-AA770\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  194,\n                  142,\n                  0\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right eyeball\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  194,\n                  142,\n                  0\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left eyeball\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"79652003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              185,\n              135,\n              134\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"female external genitalia\",\n            \"CodeValue\": \"T-80010\",\n            \"UMLSConceptUID\": \"C0227747\",\n            \"CodeMeaning\": \"Female external genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"86969008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              170,\n              147\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"female internal genitalia\",\n            \"CodeValue\": \"T-80020\",\n            \"UMLSConceptUID\": \"C0227748\",\n            \"CodeMeaning\": \"Female internal genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"87759004\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Foot\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016504\",\n            \"CodeValue\": \"T-D9700\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right foot\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left foot\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"56459004\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Forearm\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016536\",\n            \"CodeValue\": \"T-D8500\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right forearm\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left forearm\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"14975008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"fourth ventricle\",\n            \"CodeValue\": \"T-A1820\",\n            \"UMLSConceptUID\": \"C0149556\",\n            \"CodeMeaning\": \"Fourth ventricle\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35918002\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Frontal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016732\",\n            \"CodeValue\": \"T-11110\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  203,\n                  179,\n                  77\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right frontal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  203,\n                  179,\n                  77\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left frontal bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"74872008\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Frontal lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016733\",\n            \"CodeValue\": \"T-A2200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  83,\n                  146,\n                  164\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right frontal lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  83,\n                  146,\n                  164\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left frontal lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"83251001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              139,\n              150,\n              98\n            ],\n            \"cid\": \"4040\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"gallbladder\",\n            \"CodeValue\": \"T-63000\",\n            \"UMLSConceptUID\": \"C0016976\",\n            \"CodeMeaning\": \"Gallbladder\",\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"28231008\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Globus pallidus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0017651\",\n            \"CodeValue\": \"T-A3500\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  48,\n                  129,\n                  126\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right pallidum\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  48,\n                  129,\n                  126\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left pallidum\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"14738005\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Hand\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0018563\",\n            \"CodeValue\": \"T-D8700\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right hand\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left hand\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"85562004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"head\",\n            \"CodeValue\": \"T-D1100\",\n            \"UMLSConceptUID\": \"C0018670\",\n            \"CodeMeaning\": \"Head\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"69536005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              206,\n              110,\n              84\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"heart\",\n            \"CodeValue\": \"T-32000\",\n            \"UMLSConceptUID\": \"C0018787\",\n            \"CodeMeaning\": \"Heart\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"80891009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              210,\n              139\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"hyoid bone\",\n            \"CodeValue\": \"T-11190\",\n            \"UMLSConceptUID\": \"C0020417\",\n            \"CodeMeaning\": \"Hyoid bone\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"21387005\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Inferior cerebellar peduncle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152393\",\n            \"CodeValue\": \"T-A6640\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  186,\n                  135,\n                  135\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right inferior cerebellar peduncle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  186,\n                  135,\n                  135\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left inferior cerebellar peduncle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"67701001\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Inferior longitudinal fasciculus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228273\",\n            \"CodeValue\": \"T-A2850\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  159,\n                  116,\n                  163\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right inferior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  159,\n                  116,\n                  163\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left inferior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"55233005\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Inner ear\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0022889\",\n            \"CodeValue\": \"T-AB700\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  147,\n                  118\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right inner ear\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  147,\n                  118\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left inner ear\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"22945000\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Insula\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0021640\",\n            \"CodeValue\": \"T-A2610\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  188,\n                  135,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right insular lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  188,\n                  135,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left insular lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"36169008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              233,\n              138,\n              112\n            ],\n            \"cid\": \"6116\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"atrial septum\",\n            \"CodeValue\": \"T-32150\",\n            \"UMLSConceptUID\": \"C0225836\",\n            \"CodeMeaning\": \"Interatrial septum\",\n            \"contextGroupName\": \"Muscular Anatomy\",\n            \"SNOMEDCTConceptID\": \"58095006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              195,\n              100,\n              73\n            ],\n            \"cid\": \"6116\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"ventricular septum\",\n            \"CodeValue\": \"T-32410\",\n            \"UMLSConceptUID\": \"C0225870\",\n            \"CodeMeaning\": \"Interventricular septum\",\n            \"contextGroupName\": \"Muscular Anatomy\",\n            \"SNOMEDCTConceptID\": \"589001\"\n          },\n          {\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"cid\": \"7154\",\n            \"CodeMeaning\": \"Kidney\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0022646\",\n            \"CodeValue\": \"T-71000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  185,\n                  102,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right kidney\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  185,\n                  102,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left kidney\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"64033007\"\n          },\n          {\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"cid\": \"4040\",\n            \"CodeMeaning\": \"Knee\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C1456798\",\n            \"CodeValue\": \"T-D9200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right knee\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left knee\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"72696002\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Lacrimal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0222733\",\n            \"CodeValue\": \"T-1115A\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  250,\n                  160\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lacrimal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"6229007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              150,\n              208,\n              243\n            ],\n            \"cid\": \"4040\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"larynx\",\n            \"CodeValue\": \"T-24100\",\n            \"UMLSConceptUID\": \"C0023078\",\n            \"CodeMeaning\": \"Larynx\",\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"4596009\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Lateral corticospinal tract\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152402\",\n            \"CodeValue\": \"T-A7093\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  160,\n                  133\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right corticospinal tract\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  160,\n                  133\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left corticospinal tract\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"461002\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Lateral ventricle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152279\",\n            \"CodeValue\": \"T-A1650\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  88,\n                  106,\n                  215\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lateral ventricle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  88,\n                  106,\n                  215\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left lateral ventricle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"66720007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              152,\n              55,\n              13\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"left ventricle of heart\",\n            \"CodeValue\": \"T-32600\",\n            \"UMLSConceptUID\": \"C0225897\",\n            \"CodeMeaning\": \"Left Ventricle\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"87878005\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Limbic lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0458337\",\n            \"CodeValue\": \"T-A0036\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  150,\n                  201\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right limbic lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  150,\n                  201\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left limbic lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"279215006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              188,\n              91,\n              95\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lips\",\n            \"CodeValue\": \"T-52000\",\n            \"UMLSConceptUID\": \"C0023759\",\n            \"CodeMeaning\": \"Lip\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"48477009\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Lower leg\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C1140621\",\n            \"CodeValue\": \"T-D9400\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right leg\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left leg\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"30021000\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Lower limb\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0023216\",\n            \"CodeValue\": \"T-D9000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lower limb\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left lower limb\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"61685007\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Lower lobe of lung\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0225758\",\n            \"CodeValue\": \"T-28830\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  224,\n                  186,\n                  162\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"inferior lobe of right lung\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  224,\n                  186,\n                  162\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"inferior lobe of left lung\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"90572001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              212,\n              188,\n              102\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lumbar vertebral column\",\n            \"CodeValue\": \"T-11503\",\n            \"UMLSConceptUID\": \"C0024091\",\n            \"CodeMeaning\": \"Lumbar spine\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"122496007\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Lung\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0024109\",\n            \"CodeValue\": \"T-28000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  197,\n                  165,\n                  145\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lung\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  197,\n                  165,\n                  145\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left lung\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"39607008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              185,\n              135,\n              134\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"male external genitalia\",\n            \"CodeValue\": \"T-90010\",\n            \"UMLSConceptUID\": \"C0227922\",\n            \"CodeMeaning\": \"Male external genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"90418005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              146,\n              127\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"male internal genitalia\",\n            \"CodeValue\": \"T-90020\",\n            \"UMLSConceptUID\": \"C0227923\",\n            \"CodeMeaning\": \"Male internal genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"38242008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              222,\n              198,\n              101\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mandible\",\n            \"CodeValue\": \"T-11180\",\n            \"UMLSConceptUID\": \"C0024687\",\n            \"CodeMeaning\": \"Mandible\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"91609006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Medial Lemniscus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228420\",\n            \"CodeValue\": \"T-A5271\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  140,\n                  103\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right medial lemniscus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  140,\n                  103\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left medial lemniscus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"30114003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mediastinum\",\n            \"CodeValue\": \"T-D3300\",\n            \"UMLSConceptUID\": \"C0025066\",\n            \"CodeMeaning\": \"Mediastinum\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"72410000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"meninges\",\n            \"CodeValue\": \"T-A1110\",\n            \"UMLSConceptUID\": \"C0025285\",\n            \"CodeMeaning\": \"Meninges\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"1231004\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Middle cerebellar peduncle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152392\",\n            \"CodeValue\": \"T-A6630\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  148,\n                  120,\n                  72\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right middle cerebellar peduncle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  148,\n                  120,\n                  72\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left middle cerebellar peduncle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"33723005\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Middle ear\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0013455\",\n            \"CodeValue\": \"T-AB300\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  112,\n                  73\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right middle ear\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  112,\n                  73\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left middle ear\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"25342003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              202,\n              164,\n              140\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"middle lobe of right lung\",\n            \"CodeValue\": \"T-28300\",\n            \"UMLSConceptUID\": \"C0225757\",\n            \"CodeMeaning\": \"Middle lobe of right lung\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"72481006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              159,\n              63,\n              27\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mitral valve\",\n            \"CodeValue\": \"T-35300\",\n            \"UMLSConceptUID\": \"C0026264\",\n            \"CodeMeaning\": \"Mitral Valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"91134007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              201,\n              121,\n              77\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of head\",\n            \"CodeValue\": \"T-13100\",\n            \"UMLSConceptUID\": \"C0224097\",\n            \"CodeMeaning\": \"Muscle of head\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"22688005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              213,\n              124,\n              109\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of neck\",\n            \"CodeValue\": \"T-13300\",\n            \"UMLSConceptUID\": \"C0027532\",\n            \"CodeMeaning\": \"Muscle of neck\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"81727001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"neck\",\n            \"CodeValue\": \"T-D1600\",\n            \"UMLSConceptUID\": \"C0027530\",\n            \"CodeMeaning\": \"Neck\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"45048000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              92,\n              162,\n              109\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"neurohypophysis\",\n            \"CodeValue\": \"T-B1200\",\n            \"UMLSConceptUID\": \"C0032009\",\n            \"CodeMeaning\": \"Neurohypophysis\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"37512009\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Occipital lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0028785\",\n            \"CodeValue\": \"T-A2400\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  182,\n                  166,\n                  110\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right occipital lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  182,\n                  166,\n                  110\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left occipital lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"31065004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              234,\n              234,\n              194\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"omentum\",\n            \"CodeValue\": \"T-D4600\",\n            \"UMLSConceptUID\": \"C0028977\",\n            \"CodeMeaning\": \"Omentum\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"27398004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              99,\n              106,\n              24\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"optic chiasm\",\n            \"CodeValue\": \"T-A800B\",\n            \"UMLSConceptUID\": \"C0029126\",\n            \"CodeMeaning\": \"Optic chiasm\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"244453006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Optic radiation\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228277\",\n            \"CodeValue\": \"T-A2880\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  78,\n                  152,\n                  141\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right optic radiation\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  78,\n                  152,\n                  141\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left optic radiation\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"70105001\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Optic tract\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152405\",\n            \"CodeValue\": \"T-A8060\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  156,\n                  171,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right optic tract\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  156,\n                  171,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left optic tract\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"53238003\"\n          },\n          {\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"cid\": \"7160\",\n            \"CodeMeaning\": \"Ovary\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0029939\",\n            \"CodeValue\": \"T-87000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  213,\n                  141,\n                  113\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right ovary\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  213,\n                  141,\n                  113\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left ovary\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"15497006\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Palatine bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0222734\",\n            \"CodeValue\": \"T-11160\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  242,\n                  217,\n                  123\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right palatine bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  242,\n                  217,\n                  123\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left palatine bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"51283005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              249,\n              180,\n              111\n            ],\n            \"cid\": \"4030\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pancreas\",\n            \"CodeValue\": \"T-65000\",\n            \"UMLSConceptUID\": \"C0030274\",\n            \"CodeMeaning\": \"Pancreas\",\n            \"contextGroupName\": \"CT, MR and PET Anatomy Imaged\",\n            \"SNOMEDCTConceptID\": \"15776009\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Parietal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0030558\",\n            \"CodeValue\": \"T-11120\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  204,\n                  109\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right parietal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  204,\n                  109\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left parietal bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"24924006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Parietal lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0030560\",\n            \"CodeValue\": \"T-A2300\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  141,\n                  93,\n                  137\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right parietal lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  141,\n                  93,\n                  137\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left parietal lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"16630005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              184,\n              122,\n              154\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pericardial cavity\",\n            \"CodeValue\": \"T-39050\",\n            \"UMLSConceptUID\": \"C0225972\",\n            \"CodeMeaning\": \"Pericardial cavity\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"25489000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pericardium\",\n            \"CodeValue\": \"T-39000\",\n            \"UMLSConceptUID\": \"C0031050\",\n            \"CodeMeaning\": \"Pericardium\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"76848001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              224,\n              194,\n              0\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peripheral nerve\",\n            \"CodeValue\": \"T-A0500\",\n            \"UMLSConceptUID\": \"C0031119\",\n            \"CodeMeaning\": \"Peripheral nerve\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"84782009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              186,\n              0\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peripheral nervous system\",\n            \"CodeValue\": \"T-A0140\",\n            \"UMLSConceptUID\": \"C0206417\",\n            \"CodeMeaning\": \"Peripheral nervous system\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"3058005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              255,\n              220\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peritoneum\",\n            \"CodeValue\": \"T-D4400\",\n            \"UMLSConceptUID\": \"C0031153\",\n            \"CodeMeaning\": \"Peritioneum\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"15425007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              204,\n              142,\n              178\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peritoneal cavity\",\n            \"CodeValue\": \"T-D4425\",\n            \"UMLSConceptUID\": \"C1704247\",\n            \"CodeMeaning\": \"Peritoneal cavity\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"83670000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              184,\n              105,\n              108\n            ],\n            \"cid\": \"4040\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pharynx\",\n            \"CodeValue\": \"T-55000\",\n            \"UMLSConceptUID\": \"C0031354\",\n            \"CodeMeaning\": \"Pharynx\",\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"54066008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pia mater\",\n            \"CodeValue\": \"T-A1280\",\n            \"UMLSConceptUID\": \"C0031869\",\n            \"CodeMeaning\": \"Pia mater\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"23180006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              253,\n              135,\n              192\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pineal gland\",\n            \"CodeValue\": \"T-B2000\",\n            \"UMLSConceptUID\": \"C0031939\",\n            \"CodeMeaning\": \"Pineal Gland\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"45793000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              57,\n              157,\n              110\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pituitary gland\",\n            \"CodeValue\": \"T-B1000\",\n            \"UMLSConceptUID\": \"C0032005\",\n            \"CodeMeaning\": \"Pituitary\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"56329008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              126,\n              161,\n              197\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"posterior commissure\",\n            \"CodeValue\": \"T-A4904\",\n            \"UMLSConceptUID\": \"C0152327\",\n            \"CodeMeaning\": \"Posterior cerebral commissure\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"279336005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              230,\n              158,\n              140\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"prostate\",\n            \"CodeValue\": \"T-92000\",\n            \"UMLSConceptUID\": \"C0033572\",\n            \"CodeMeaning\": \"Prostate\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"41216001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              225,\n              130,\n              104\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pulmonary valve\",\n            \"CodeValue\": \"T-35200\",\n            \"UMLSConceptUID\": \"C0034086\",\n            \"CodeMeaning\": \"Pulmonary valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"39057004\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Putamen\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0034169\",\n            \"CodeValue\": \"T-A3400\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  210,\n                  157,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right putamen\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  210,\n                  157,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left putamen\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"89278009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              180,\n              119,\n              153\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"retroperitoneal space\",\n            \"CodeValue\": \"T-D4900\",\n            \"UMLSConceptUID\": \"C0035359\",\n            \"CodeMeaning\": \"Retroperitoneal space\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"82849001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              181,\n              85,\n              57\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"right ventricle of heart\",\n            \"CodeValue\": \"T-32500\",\n            \"UMLSConceptUID\": \"C0225883\",\n            \"CodeMeaning\": \"Right Ventricle\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"53085002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              70,\n              163,\n              117\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"salivary glands\",\n            \"CodeValue\": \"T-61007\",\n            \"UMLSConceptUID\": \"C0036098\",\n            \"CodeMeaning\": \"Salivary gland\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"385294005\"\n          },\n          {\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"cid\": \"7160\",\n            \"CodeMeaning\": \"Seminal Vesicle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0036628\",\n            \"CodeValue\": \"T-93000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  245,\n                  172,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right seminal vesicle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  245,\n                  172,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left seminal vesicle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"64739004\"\n          },\n          {\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"cid\": \"4040\",\n            \"CodeMeaning\": \"Shoulder\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0037004\",\n            \"CodeValue\": \"T-D2220\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right shoulder\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left shoulder\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"16982005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              124,\n              92\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skin of abdominal wall\",\n            \"CodeValue\": \"T-02480\",\n            \"UMLSConceptUID\": \"C0222166\",\n            \"CodeMeaning\": \"Skin of abdomen\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"75093004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              173,\n              121,\n              88\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skin of thoracic wall\",\n            \"CodeValue\": \"T-02424\",\n            \"UMLSConceptUID\": \"C0222149\",\n            \"CodeMeaning\": \"Skin of chest\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"74160004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              241,\n              213,\n              144\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skull\",\n            \"CodeValue\": \"T-11100\",\n            \"UMLSConceptUID\": \"C0037303\",\n            \"CodeMeaning\": \"Skull\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"89546000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              205,\n              167,\n              142\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"small bowel\",\n            \"CodeValue\": \"T-58000\",\n            \"UMLSConceptUID\": \"C0021852\",\n            \"CodeMeaning\": \"Small Intestine\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"30315005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              182,\n              105,\n              107\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"soft palate\",\n            \"CodeValue\": \"T-51120\",\n            \"UMLSConceptUID\": \"C0030219\",\n            \"CodeMeaning\": \"Soft palate\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"49460000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              214,\n              49\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"spinal cord\",\n            \"CodeValue\": \"T-A7010\",\n            \"UMLSConceptUID\": \"C0037925\",\n            \"CodeMeaning\": \"Spinal cord\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"2748008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              200,\n              200,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"gray matter of spinal cord\",\n            \"CodeValue\": \"T-A7020\",\n            \"UMLSConceptUID\": \"C0475853\",\n            \"CodeMeaning\": \"Spinal cord gray matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"12958003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              250,\n              225\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"white matter of spinal cord\",\n            \"CodeValue\": \"T-A7070\",\n            \"UMLSConceptUID\": \"C0458457\",\n            \"CodeMeaning\": \"Spinal cord white matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"27088001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              217,\n              154\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"sternum\",\n            \"CodeValue\": \"T-11210\",\n            \"UMLSConceptUID\": \"C0038293\",\n            \"CodeMeaning\": \"Sternum\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"56873002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              132,\n              105\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"stomach\",\n            \"CodeValue\": \"T-57000\",\n            \"UMLSConceptUID\": \"C0038351\",\n            \"CodeMeaning\": \"Stomach\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"69695003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"subarachnoid space\",\n            \"CodeValue\": \"T-A1500\",\n            \"UMLSConceptUID\": \"C0038527\",\n            \"CodeMeaning\": \"Subarachnoid space\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35951006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Substantia nigra\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0038590\",\n            \"CodeValue\": \"T-A5160\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  0,\n                  108,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right substantia nigra\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  0,\n                  108,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left substantia nigra\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"70007007\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Superior longitudinal fasciculus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228270\",\n            \"CodeValue\": \"T-A2820\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  127,\n                  150,\n                  88\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right superior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  127,\n                  150,\n                  88\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left superior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"89202009\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Temporal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0039484\",\n            \"CodeValue\": \"T-11130\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  243,\n                  152\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right temporal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  243,\n                  152\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left temporal bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"60911003\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Temporal lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0039485\",\n            \"CodeValue\": \"T-A2500\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  162,\n                  115,\n                  105\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right temporal lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  162,\n                  115,\n                  105\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left temporal lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"78277001\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Thalamus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0458271\",\n            \"CodeValue\": \"T-D0593\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  122,\n                  101,\n                  38\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right thalamus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  122,\n                  101,\n                  38\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left thalamus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"119406000\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Thigh\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0039866\",\n            \"CodeValue\": \"T-D9100\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right thigh\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left thigh\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"68367000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              226,\n              202,\n              134\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thoracic vertebral column\",\n            \"CodeValue\": \"T-11502\",\n            \"UMLSConceptUID\": \"C0581269\",\n            \"CodeMeaning\": \"Thoracic spine\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"122495006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thorax\",\n            \"CodeValue\": \"T-D3000\",\n            \"UMLSConceptUID\": \"C0817096\",\n            \"CodeMeaning\": \"Thorax\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"51185008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              47,\n              150,\n              103\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thymus\",\n            \"CodeValue\": \"T-C8000\",\n            \"UMLSConceptUID\": \"C0040113\",\n            \"CodeMeaning\": \"Thymus\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"9875009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              62,\n              162,\n              114\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thyroid gland\",\n            \"CodeValue\": \"T-B6000\",\n            \"UMLSConceptUID\": \"C0040132\",\n            \"CodeMeaning\": \"Thyroid\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"69748006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              166,\n              84,\n              94\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tongue\",\n            \"CodeValue\": \"T-53000\",\n            \"UMLSConceptUID\": \"C0040408\",\n            \"CodeMeaning\": \"Tongue\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"21974007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              250,\n              220\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"teeth\",\n            \"CodeValue\": \"T-54010\",\n            \"UMLSConceptUID\": \"C0040426\",\n            \"CodeMeaning\": \"Tooth\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"38199008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              182,\n              228,\n              255\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"trachea\",\n            \"CodeValue\": \"T-25000\",\n            \"UMLSConceptUID\": \"C0040578\",\n            \"CodeMeaning\": \"Trachea\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"44567001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              166,\n              70,\n              38\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tricuspid valve\",\n            \"CodeValue\": \"T-35100\",\n            \"UMLSConceptUID\": \"C0040960\",\n            \"CodeMeaning\": \"Tricuspid Valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"46030003\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Uncinate fasciculus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228271\",\n            \"CodeValue\": \"T-A2830\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  106,\n                  174,\n                  155\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right uncinate fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  106,\n                  174,\n                  155\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left uncinate fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"26230003\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Upper arm\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0446516\",\n            \"CodeValue\": \"T-D8200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right arm\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left arm\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"40983000\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Upper limb\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016555\",\n            \"CodeValue\": \"T-D8000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right upper limb\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left upper limb\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"53120007\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Upper lobe of lung\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0225756\",\n            \"CodeValue\": \"T-28820\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  172,\n                  138,\n                  115\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"superior lobe of right lung\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  172,\n                  138,\n                  115\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"superior lobe of left lung\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"45653009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              124,\n              186,\n              223\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urethra\",\n            \"CodeValue\": \"T-75000\",\n            \"UMLSConceptUID\": \"C0041967\",\n            \"CodeMeaning\": \"Urethra\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"13648007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              203,\n              136,\n              116\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urinary system\",\n            \"CodeValue\": \"T-70001\",\n            \"UMLSConceptUID\": \"C1508753\",\n            \"CodeMeaning\": \"Urinary system\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"122489005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              181,\n              158\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"uterus\",\n            \"CodeValue\": \"T-83000\",\n            \"UMLSConceptUID\": \"C0042149\",\n            \"CodeMeaning\": \"Uterus\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35039007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              193,\n              123,\n              103\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"vagina\",\n            \"CodeValue\": \"T-82000\",\n            \"UMLSConceptUID\": \"C0042232\",\n            \"CodeMeaning\": \"Vagina\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"76784001\"\n          },\n          {\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"cid\": \"7160\",\n            \"CodeMeaning\": \"Vas deferens\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0042360\",\n            \"CodeValue\": \"T-96000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  241,\n                  172,\n                  151\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right deferent duct\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  241,\n                  172,\n                  151\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left deferent duct\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"57671007\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Zygoma\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0043539\",\n            \"CodeValue\": \"T-11166\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  255,\n                  167\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right zygomatic bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"13881006\"\n          }\n        ],\n        \"showAnatomy\": false\n      },\n      {\n        \"CodeMeaning\": \"Morphologically Altered Structure\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"49755003\",\n        \"cid\": \"7051\",\n        \"UMLSConceptUID\": \"C0221198\",\n        \"CodeValue\": \"M-01000\",\n        \"contextGroupName\": \"Segmentation Property Categories\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              145,\n              60,\n              66\n            ],\n            \"CodeMeaning\": \"Blood clot\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"clot\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0302148\",\n            \"CodeValue\": \"M-35000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"75753009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              205,\n              205,\n              100\n            ],\n            \"CodeMeaning\": \"Cyst\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cyst\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0010709\",\n            \"CodeValue\": \"M-3340A\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"367643001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              140,\n              224,\n              228\n            ],\n            \"CodeMeaning\": \"Edema\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"edema\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0013604\",\n            \"CodeValue\": \"M-36300\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"79654002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              150,\n              98,\n              83\n            ],\n            \"CodeMeaning\": \"Embolus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"embolism\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C1704212\",\n            \"CodeValue\": \"M-35300\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"55584005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              188,\n              65,\n              28\n            ],\n            \"CodeMeaning\": \"Hemorrhage\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"bleeding\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0019080\",\n            \"CodeValue\": \"M-37000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"50960005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              144,\n              238,\n              144\n            ],\n            \"CodeMeaning\": \"Mass\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mass\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0577559\",\n            \"CodeValue\": \"M-03000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"4147007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              191,\n              216\n            ],\n            \"CodeMeaning\": \"Necrosis\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"necrosis\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0027540\",\n            \"CodeValue\": \"M-54000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"6574001\"\n          }\n        ],\n        \"showAnatomy\": true\n      },\n      {\n        \"CodeMeaning\": \"Body Substance\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"91720002\",\n        \"cid\": \"\",\n        \"UMLSConceptUID\": \"C0504082\",\n        \"CodeValue\": \"T-D0080\",\n        \"contextGroupName\": \"\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              0,\n              145,\n              30\n            ],\n            \"CodeMeaning\": \"Bile\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"bile\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0005388\",\n            \"CodeValue\": \"T-60650\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"70150004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              170,\n              250,\n              250\n            ],\n            \"CodeMeaning\": \"Body fluid\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"fluid\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0005889\",\n            \"CodeValue\": \"T-D0070\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"32457005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              78,\n              63,\n              0\n            ],\n            \"CodeMeaning\": \"Feces\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"feces\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0015733\",\n            \"CodeValue\": \"T-59666\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"39477002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              218,\n              255,\n              255\n            ],\n            \"CodeMeaning\": \"Gas\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"gas\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0017110\",\n            \"CodeValue\": \"C-10080\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"74947009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              214,\n              230,\n              130\n            ],\n            \"CodeMeaning\": \"Urine\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urine\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0042036\",\n            \"CodeValue\": \"T-70060\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"78014005\"\n          }\n        ],\n        \"showAnatomy\": false\n      }\n    ]\n  }\n}";
var parsedJson = JSON.parse(json);
/* harmony default export */ __webpack_exports__["default"] = (parsedJson);

/***/ }),

/***/ "./src/components/common/MenuIOButtons.js":
/*!************************************************!*\
  !*** ./src/components/common/MenuIOButtons.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MenuIOButtons; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

 // import './menuIOButtons.styl';

/**
 * @class MenuIOButtons - Renders Import and/or Export buttons if
 * this.props.ImportCallbackOrComponent and/or
 * this.props.ExportCallbackOrComponent are defined.
 */

var MenuIOButtons =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MenuIOButtons, _React$Component);

  function MenuIOButtons() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MenuIOButtons);

    return _possibleConstructorReturn(this, _getPrototypeOf(MenuIOButtons).call(this, props));
  }

  _createClass(MenuIOButtons, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ImportCallbackOrComponent = _this$props.ImportCallbackOrComponent,
          ExportCallbackOrComponent = _this$props.ExportCallbackOrComponent,
          onImportButtonClick = _this$props.onImportButtonClick,
          onExportButtonClick = _this$props.onExportButtonClick;

      if (!ImportCallbackOrComponent && !ExportCallbackOrComponent) {
        return null;
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, ImportCallbackOrComponent && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onImportButtonClick
      }, "Import"), ExportCallbackOrComponent && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onExportButtonClick
      }, "Export"));
    }
  }]);

  return MenuIOButtons;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/common/helpers/onExportButtonClick.js":
/*!**************************************************************!*\
  !*** ./src/components/common/helpers/onExportButtonClick.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onExportButtonClick; });
/**
 * onExportButtonClick - Helper function for annotation menu components.
 * Calls ExportCallbackOrComponent if it is a funciton, or sets
 * this.state.exporting to true if it is a component.
 *
 * @returns {null}
 */
function onExportButtonClick() {
  var ExportCallbackOrComponent = this.props.ExportCallbackOrComponent;

  if (ExportCallbackOrComponent.prototype.isReactComponent) {
    this.setState({
      exporting: true
    });
  } else {
    ExportCallbackOrComponent();
  }
}

/***/ }),

/***/ "./src/components/common/helpers/onIOCancel.js":
/*!*****************************************************!*\
  !*** ./src/components/common/helpers/onIOCancel.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onIOCancel; });
/**
 * onIOCancel - Helper function for annotation menu components. Sets
 * this.state.importing and this.state.exporting to false.
 *
 * @returns {null}
 */
function onIOCancel() {
  this.setState({
    importing: false,
    exporting: false
  });
}

/***/ }),

/***/ "./src/components/common/helpers/onImportButtonClick.js":
/*!**************************************************************!*\
  !*** ./src/components/common/helpers/onImportButtonClick.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onImportButtonClick; });
/**
 * onImportButtonClick - Helper function for annotation menu components.
 * Calls ImportCallbackOrComponent if it is a funciton, or sets
 * this.state.importing to true if it is a component.
 *
 * @returns {null}
 */
function onImportButtonClick() {
  console.log(this);
  var ImportCallbackOrComponent = this.props.ImportCallbackOrComponent;

  if (ImportCallbackOrComponent.prototype.isReactComponent) {
    this.setState({
      importing: true
    });
  } else {
    ImportCallbackOrComponent();
  }
}

/***/ }),

/***/ "./src/components/roiContourMenu/LockedCollectionsList.js":
/*!****************************************************************!*\
  !*** ./src/components/roiContourMenu/LockedCollectionsList.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LockedCollectionsList; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _LockedCollectionsListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LockedCollectionsListItem.js */ "./src/components/roiContourMenu/LockedCollectionsListItem.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }


 // import './roiContourMenu.styl';

/**
 * @class LockedCollectionsList - Renders a list of LockedCollectionsListItems,
 * displaying metadata of locked ROIContour Collections.
 */

var LockedCollectionsList =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LockedCollectionsList, _React$Component);

  function LockedCollectionsList() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LockedCollectionsList);

    return _possibleConstructorReturn(this, _getPrototypeOf(LockedCollectionsList).call(this, props));
  }

  _createClass(LockedCollectionsList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          lockedCollections = _this$props.lockedCollections,
          onUnlockClick = _this$props.onUnlockClick,
          seriesInstanceUid = _this$props.seriesInstanceUid;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, lockedCollections.map(function (collection) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_LockedCollectionsListItem_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          key: collection.metadata.uid,
          collection: collection,
          onUnlockClick: onUnlockClick,
          seriesInstanceUid: seriesInstanceUid
        });
      }));
    }
  }]);

  return LockedCollectionsList;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/LockedCollectionsListItem.js":
/*!********************************************************************!*\
  !*** ./src/components/roiContourMenu/LockedCollectionsListItem.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LockedCollectionsListItem; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }


 // import './roiContourMenu.styl';

var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default.a.store.modules;
/**
 * @class LockedCollectionsListItem - Renders metadata for an individual locked
 * ROIContour Collection.
 */

var LockedCollectionsListItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LockedCollectionsListItem, _React$Component);

  function LockedCollectionsListItem() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LockedCollectionsListItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LockedCollectionsListItem).call(this, props));
    var visible = _this.props.collection.metadata.visible;
    _this.state = {
      expanded: false,
      visible: visible
    };
    _this.onToggleVisibilityClick = _this.onToggleVisibilityClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onShowHideClick = _this.onShowHideClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * onToggleVisibilityClick - Callback that toggles the expands/collapses the
   * list of collection metadata.
   *
   * @returns {null}
   */


  _createClass(LockedCollectionsListItem, [{
    key: "onToggleVisibilityClick",
    value: function onToggleVisibilityClick() {
      var expanded = this.state.expanded;
      this.setState({
        expanded: !expanded
      });
    }
    /**
     * onShowHideClick - Toggles the visibility of the collections ROI Contours.
     *
     * @returns {null}
     */

  }, {
    key: "onShowHideClick",
    value: function onShowHideClick() {
      var _this$props = this.props,
          collection = _this$props.collection,
          seriesInstanceUid = _this$props.seriesInstanceUid;
      var visible = this.state.visible;
      var structureSet = modules.freehand3D.getters.structureSet(seriesInstanceUid, collection.metadata.uid);
      structureSet.visible = !visible;
      this.setState({
        visible: !visible
      }); // Update viewport.
      // const element = OHIF.viewerbase.viewportUtils.getActiveViewportElement();
      // TODO
      // cornerstone.updateImage(element);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          collection = _this$props2.collection,
          onUnlockClick = _this$props2.onUnlockClick;
      var _this$state = this.state,
          expanded = _this$state.expanded,
          visible = _this$state.visible;
      var metadata = collection.metadata;
      var ROIContourArray = collection.ROIContourArray;
      var visibleButton = expanded ? 'fa fa-minus-square' : 'fa fa-plus-square';
      var showHideIcon = visible ? 'fa fa-eye' : 'fa fa-eye-slash';
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
        className: "roi-list-header"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: this.onToggleVisibilityClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: visibleButton
      }))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2"
      }, metadata.name), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: this.onShowHideClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: showHideIcon
      }))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: function onClick() {
          onUnlockClick(metadata.uid);
        }
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-unlock"
      })))), expanded && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Name"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Contours")), ROIContourArray.map(function (roiContour) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
          key: roiContour.metadata.uid
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
          className: "left-aligned-cell"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
          className: "fa fa-square",
          style: {
            color: roiContour.metadata.color
          }
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
          className: "left-aligned-cell"
        }, roiContour.metadata.name), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
          className: "centered-cell"
        }, roiContour.metadata.polygonCount));
      })));
    }
  }]);

  return LockedCollectionsListItem;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/RoiContourMenu.js":
/*!*********************************************************!*\
  !*** ./src/components/roiContourMenu/RoiContourMenu.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RoiContourMenu; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/MenuIOButtons.js */ "./src/components/common/MenuIOButtons.js");
/* harmony import */ var _WorkingCollectionList_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WorkingCollectionList.js */ "./src/components/roiContourMenu/WorkingCollectionList.js");
/* harmony import */ var _LockedCollectionsList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LockedCollectionsList.js */ "./src/components/roiContourMenu/LockedCollectionsList.js");
/* harmony import */ var _RoiContourSettings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RoiContourSettings.js */ "./src/components/roiContourMenu/RoiContourSettings.js");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _util_freehandNameIO_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/freehandNameIO.js */ "./src/util/freehandNameIO.js");
/* harmony import */ var _util_unlockStructureSet_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/unlockStructureSet.js */ "./src/util/unlockStructureSet.js");
/* harmony import */ var _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/helpers/onIOCancel.js */ "./src/components/common/helpers/onIOCancel.js");
/* harmony import */ var _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/helpers/onImportButtonClick.js */ "./src/components/common/helpers/onImportButtonClick.js");
/* harmony import */ var _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/helpers/onExportButtonClick.js */ "./src/components/common/helpers/onExportButtonClick.js");
/* harmony import */ var _util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/getActiveViewportEnabledElement.js */ "./src/util/getActiveViewportEnabledElement.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }











 // import './roiContourMenu.styl';



var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_5___default.a.store.modules;
/**
 * @class RoiContourMenu - Renders a menu for importing, exporting, creating
 * and renaming ROI Contours. As well as setting configuration settings for
 * the Freehand3Dtool.
 */

var RoiContourMenu =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RoiContourMenu, _React$Component);

  function RoiContourMenu() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RoiContourMenu);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoiContourMenu).call(this, props)); // add event listners to cornerstone.

    var enabledElement = Object(_util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__["default"])(props.viewports, props.activeIndex);
    var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_12__["default"])(enabledElement);
    _this.getRoiContourList = _this.getRoiContourList.bind(_assertThisInitialized(_assertThisInitialized(_this)));

    var _this$getRoiContourLi = _this.getRoiContourList(seriesInstanceUid),
        workingCollection = _this$getRoiContourLi.workingCollection,
        lockedCollections = _this$getRoiContourLi.lockedCollections,
        activeROIContourIndex = _this$getRoiContourLi.activeROIContourIndex;

    _this.state = {
      workingCollection: workingCollection,
      lockedCollections: lockedCollections,
      unlockConfirmationOpen: false,
      roiCollectionToUnlock: '',
      activeROIContourIndex: activeROIContourIndex,
      importing: false,
      exporting: false,
      seriesInstanceUid: seriesInstanceUid
    };
    _this.onNewRoiButtonClick = _this.onNewRoiButtonClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onRoiChange = _this.onRoiChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onRenameButtonClick = _this.onRenameButtonClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.confirmUnlockOnUnlockClick = _this.confirmUnlockOnUnlockClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onUnlockCancelClick = _this.onUnlockCancelClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onUnlockConfirmClick = _this.onUnlockConfirmClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOComplete = _this.onIOComplete.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOCancel = _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_8__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onImportButtonClick = _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onExportButtonClick = _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_10__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * getRoiContourList - returns the workingCollection, lockedCollections
   * and th activeROIContourIndex.
   *
   * @returns {null}
   */


  _createClass(RoiContourMenu, [{
    key: "getRoiContourList",
    value: function getRoiContourList(seriesInstanceUid) {
      seriesInstanceUid = seriesInstanceUid || this.state.seriesInstanceUid;
      var workingCollection = [];
      var lockedCollections = [];
      var activeROIContourIndex = 0;

      if (seriesInstanceUid) {
        var freehand3DStore = modules.freehand3D;

        if (modules.freehand3D.getters.series(seriesInstanceUid)) {
          activeROIContourIndex = freehand3DStore.getters.activeROIContourIndex(seriesInstanceUid);
        }

        workingCollection = this.constructor._workingCollection(seriesInstanceUid);
        lockedCollections = this.constructor._lockedCollections(seriesInstanceUid);
      }

      return {
        workingCollection: workingCollection,
        lockedCollections: lockedCollections,
        activeROIContourIndex: activeROIContourIndex
      };
    }
    /**
     * refreshRoiContourList - Grabs the ROI Contours from the freehand3D store and
     * populates state.
     *
     * @returns {null}
     */

  }, {
    key: "refreshRoiContourList",
    value: function refreshRoiContourList() {
      var seriesInstanceUid = this.state.seriesInstanceUid;

      var _this$getRoiContourLi2 = this.getRoiContourList(seriesInstanceUid),
          workingCollection = _this$getRoiContourLi2.workingCollection,
          lockedCollections = _this$getRoiContourLi2.lockedCollections,
          activeROIContourIndex = _this$getRoiContourLi2.activeROIContourIndex;

      this.setState({
        workingCollection: workingCollection,
        lockedCollections: lockedCollections,
        activeROIContourIndex: activeROIContourIndex
      });
    }
    /**
     * onIOComplete - A callback executed on succesful completion of an
     * IO opperation. Recalculates the ROI Contour Collection state.
     *
     * @returns {type}  description
     */

  }, {
    key: "onIOComplete",
    value: function onIOComplete() {
      var seriesInstanceUid = this.state.seriesInstanceUid;
      var freehand3DStore = modules.freehand3D;
      var activeROIContourIndex = 0;

      if (modules.freehand3D.getters.series(seriesInstanceUid)) {
        activeROIContourIndex = freehand3DStore.getters.activeROIContourIndex(seriesInstanceUid);
      }

      var workingCollection = this.constructor._workingCollection(seriesInstanceUid);

      var lockedCollections = this.constructor._lockedCollections(seriesInstanceUid);

      this.setState({
        workingCollection: workingCollection,
        lockedCollections: lockedCollections,
        activeROIContourIndex: activeROIContourIndex,
        importing: false,
        exporting: false
      });
    }
    /**
     * onNewRoiButtonClick - Callback that adds a new ROIContour to the
     * active series.
     *
     * @returns {null}
     */

  }, {
    key: "onNewRoiButtonClick",
    value: function onNewRoiButtonClick() {
      var _this2 = this;

      var seriesInstanceUid = this.state.seriesInstanceUid;

      var callback = function callback(name) {
        // Create and activate new ROIContour
        // Check if default structureSet exists for this series.
        if (!modules.freehand3D.getters.series(seriesInstanceUid)) {
          modules.freehand3D.setters.series(seriesInstanceUid);
        }

        var activeROIContourIndex = modules.freehand3D.setters.ROIContourAndSetIndexActive(seriesInstanceUid, 'DEFAULT', name);

        var workingCollection = _this2.constructor._workingCollection(seriesInstanceUid);

        _this2.setState({
          workingCollection: workingCollection,
          activeROIContourIndex: activeROIContourIndex
        });
      };

      Object(_util_freehandNameIO_js__WEBPACK_IMPORTED_MODULE_6__["createNewVolume"])(callback);
    }
    /**
     * onRoiChange - Callback that changes the active ROI Contour being drawn.
     *
     * @param  {Number} roiContourIndex The index of the ROI Contour.
     * @returns {null}
     */

  }, {
    key: "onRoiChange",
    value: function onRoiChange(roiContourIndex) {
      var seriesInstanceUid = this.state.seriesInstanceUid;
      modules.freehand3D.setters.activeROIContourIndex(roiContourIndex, seriesInstanceUid);
      this.setState({
        activeROIContourIndex: roiContourIndex
      });
    }
    /**
     * onRenameButtonClick - A callback that triggers name input for an ROIContour.
     *
     * @param  {object} metadata The current state of the contour's metadata.
     * @returns {null}
     */

  }, {
    key: "onRenameButtonClick",
    value: function onRenameButtonClick(metadata) {
      var _this3 = this;

      var seriesInstanceUid = this.state.seriesInstanceUid;

      var callback = function callback() {
        var workingCollection = _this3.constructor._workingCollection(seriesInstanceUid);

        _this3.setState({
          workingCollection: workingCollection
        });
      };

      Object(_util_freehandNameIO_js__WEBPACK_IMPORTED_MODULE_6__["setVolumeName"])(seriesInstanceUid, 'DEFAULT', metadata.uid, callback);
    }
    /**
     * confirmUnlockOnUnlockClick - A callback that triggers confirmation of the
     * unlocking of an ROI Contour Collection.
     *
     * @param  {String} structureSetUid The UID of the structureSet.
     * @returns {null}
     */

  }, {
    key: "confirmUnlockOnUnlockClick",
    value: function confirmUnlockOnUnlockClick(structureSetUid) {
      this.setState({
        unlockConfirmationOpen: true,
        roiCollectionToUnlock: structureSetUid
      });
    }
    /**
     * onUnlockConfirmClick - A callback that unlocks an ROI Contour Collection and
     * moves the ROI Contours to the working collection.
     *
     * @returns {type}  description
     */

  }, {
    key: "onUnlockConfirmClick",
    value: function onUnlockConfirmClick() {
      var _this$state = this.state,
          seriesInstanceUid = _this$state.seriesInstanceUid,
          roiCollectionToUnlock = _this$state.roiCollectionToUnlock;
      Object(_util_unlockStructureSet_js__WEBPACK_IMPORTED_MODULE_7__["default"])(seriesInstanceUid, roiCollectionToUnlock);

      var workingCollection = this.constructor._workingCollection(seriesInstanceUid);

      var lockedCollections = this.constructor._lockedCollections(seriesInstanceUid);

      this.setState({
        unlockConfirmationOpen: false,
        workingCollection: workingCollection,
        lockedCollections: lockedCollections
      });
    }
    /**
     * onUnlockCancelClick - A callback that closes the unlock confirmation window
     * and aborts unlocking.
     *
     * @returns {null}
     */

  }, {
    key: "onUnlockCancelClick",
    value: function onUnlockCancelClick() {
      this.setState({
        unlockConfirmationOpen: false
      });
    }
    /**
     * _workingCollection - Returns a list of the ROI Contours
     * in the working collection.
     *
     * @returns {object[]} An array of ROI Contours.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          workingCollection = _this$state2.workingCollection,
          lockedCollections = _this$state2.lockedCollections,
          unlockConfirmationOpen = _this$state2.unlockConfirmationOpen,
          roiCollectionToUnlock = _this$state2.roiCollectionToUnlock,
          activeROIContourIndex = _this$state2.activeROIContourIndex,
          importing = _this$state2.importing,
          exporting = _this$state2.exporting,
          seriesInstanceUid = _this$state2.seriesInstanceUid;
      var _this$props = this.props,
          ImportCallbackOrComponent = _this$props.ImportCallbackOrComponent,
          ExportCallbackOrComponent = _this$props.ExportCallbackOrComponent;
      var freehand3DStore = modules.freehand3D;
      var component;

      if (importing) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ImportCallbackOrComponent, {
          onImportComplete: this.onIOComplete,
          onImportCancel: this.onIOCancel
        });
      } else if (exporting) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ExportCallbackOrComponent, {
          onExportComplete: this.onIOComplete,
          onExportCancel: this.onIOCancel
        });
      } else if (unlockConfirmationOpen) {
        var collection = freehand3DStore.getters.structureSet(seriesInstanceUid, roiCollectionToUnlock);
        var collectionName = collection.name;
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", null, "Unlock"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, "Unlock ", collectionName, " for editing? The ROIs will be moved to the Working ROI Collection.")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
          className: "btn btn-sm btn-primary",
          onClick: this.onUnlockConfirmClick
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
          className: "fa fa fa-check-circle fa-2x"
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
          className: "btn btn-sm btn-primary",
          onClick: this.onUnlockCancelClick
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
          className: "fa fa fa-times-circle fa-2x"
        }))));
      } else {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "roi-contour-menu-component"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "roi-contour-menu-header"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, "ROI Contour Collections"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          ImportCallbackOrComponent: ImportCallbackOrComponent,
          ExportCallbackOrComponent: ExportCallbackOrComponent,
          onImportButtonClick: this.onImportButtonClick,
          onExportButtonClick: this.onExportButtonClick
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "roi-contour-menu-collection-list-body"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("table", {
          className: "peppermint-table"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tbody", null, seriesInstanceUid && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_WorkingCollectionList_js__WEBPACK_IMPORTED_MODULE_2__["default"], {
          workingCollection: workingCollection,
          activeROIContourIndex: activeROIContourIndex,
          onRoiChange: this.onRoiChange,
          onRenameButtonClick: this.onRenameButtonClick,
          onNewRoiButtonClick: this.onNewRoiButtonClick
        }), lockedCollections.length !== 0 && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_LockedCollectionsList_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
          lockedCollections: lockedCollections,
          onUnlockClick: this.confirmUnlockOnUnlockClick,
          seriesInstanceUid: seriesInstanceUid
        })))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_RoiContourSettings_js__WEBPACK_IMPORTED_MODULE_4__["default"], null));
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, component);
    }
  }], [{
    key: "_workingCollection",
    value: function _workingCollection(seriesInstanceUid) {
      var freehand3DStore = modules.freehand3D;
      var series = freehand3DStore.getters.series(seriesInstanceUid);

      if (!series) {
        freehand3DStore.setters.series(seriesInstanceUid);
        series = freehand3DStore.getters.series(seriesInstanceUid);
      }

      var structureSet = freehand3DStore.getters.structureSet(seriesInstanceUid);
      var ROIContourCollection = structureSet.ROIContourCollection;
      var workingCollection = [];

      for (var i = 0; i < ROIContourCollection.length; i++) {
        if (ROIContourCollection[i]) {
          workingCollection.push({
            index: i,
            metadata: ROIContourCollection[i]
          });
        }
      }

      return workingCollection;
    }
    /**
     * _lockedCollections - Returns a list of locked ROI Contour Collections.
     *
     * @returns {object} An array of locked ROI Contour Collections.
     */

  }, {
    key: "_lockedCollections",
    value: function _lockedCollections(seriesInstanceUid) {
      var freehand3DStore = modules.freehand3D;
      var series = freehand3DStore.getters.series(seriesInstanceUid);

      if (!series) {
        freehand3DStore.setters.series(seriesInstanceUid);
        series = freehand3DStore.getters.series(seriesInstanceUid);
      }

      var structureSetCollection = series.structureSetCollection;
      var lockedCollections = [];

      for (var i = 0; i < structureSetCollection.length; i++) {
        var structureSet = structureSetCollection[i];

        if (structureSet.uid === 'DEFAULT') {
          continue;
        }

        var ROIContourCollection = structureSet.ROIContourCollection;
        var ROIContourArray = [];

        for (var j = 0; j < ROIContourCollection.length; j++) {
          if (ROIContourCollection[j]) {
            ROIContourArray.push({
              index: j,
              metadata: ROIContourCollection[j]
            });
          }
        }

        lockedCollections.push({
          metadata: structureSet,
          ROIContourArray: ROIContourArray
        });
      }

      return lockedCollections;
    }
  }]);

  return RoiContourMenu;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/RoiContourSettings.js":
/*!*************************************************************!*\
  !*** ./src/components/roiContourMenu/RoiContourSettings.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RoiContourSettings; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }



var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default.a.store.modules; // import './roiContourMenu.styl';

/**
 * @class RoiContourSettings - A component that allows the user to change
 * configuration of the freehand3D tools.
 */

var RoiContourSettings =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RoiContourSettings, _React$Component);

  function RoiContourSettings() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RoiContourSettings);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoiContourSettings).call(this, props));
    var _modules$freehand3D$s = modules.freehand3D.state,
        interpolate = _modules$freehand3D$s.interpolate,
        displayStats = _modules$freehand3D$s.displayStats;
    _this.state = {
      interpolate: interpolate,
      displayStats: displayStats
    };
    _this.onDisplayStatsToggleClick = _this.onDisplayStatsToggleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onInterpolateToggleClick = _this.onInterpolateToggleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * onDisplayStatsToggleClick - A Callback that toggles the display of stats
   * window on the Freehand3DTool.
   *
   * @returns {null}
   */


  _createClass(RoiContourSettings, [{
    key: "onDisplayStatsToggleClick",
    value: function onDisplayStatsToggleClick() {
      modules.freehand3D.setters.toggleDisplayStats();
      this.setState({
        displayStats: modules.freehand3D.state.displayStats
      });
    }
    /**
     * onInterpolateToggleClick - A callback that toggles interpolation mode for
     * the Freehand3DTool.
     *
     * @returns {null}
     */

  }, {
    key: "onInterpolateToggleClick",
    value: function onInterpolateToggleClick() {
      modules.freehand3D.setters.toggleInterpolate();
      this.setState({
        interpolate: modules.freehand3D.state.interpolate
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$state = this.state,
          interpolate = _this$state.interpolate,
          displayStats = _this$state.displayStats;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "roi-contour-menu-footer"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, "Settings"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: this.onInterpolateToggleClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "roi-contour-menu-option"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use", {
        xlinkHref: interpolate ? 'packages/icr_peppermint-tools/assets/icons.svg#icon-freehand-interpolate-on' : 'packages/icr_peppermint-tools/assets/icons.svg#icon-freehand-interpolate-off'
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", null, "Interpolation"))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: this.onDisplayStatsToggleClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "roi-contour-menu-option"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("svg", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("use", {
        xlinkHref: displayStats ? 'packages/icr_peppermint-tools/assets/icons.svg#icon-freehand-stats-on' : 'packages/icr_peppermint-tools/assets/icons.svg#icon-freehand-stats-off'
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", null, "Stats"))));
    }
  }]);

  return RoiContourSettings;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/WorkingCollectionList.js":
/*!****************************************************************!*\
  !*** ./src/components/roiContourMenu/WorkingCollectionList.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return WorkingRoiCollectionList; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _WorkingCollectionListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WorkingCollectionListItem.js */ "./src/components/roiContourMenu/WorkingCollectionListItem.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }


 // import './roiContourMenu.styl';

/**
 * @class WorkingRoiCollectionList - Renders a list of
 * WorkingCollectionListItem, displaying metadata of the working ROIContour
 * Collection.
 */

var WorkingRoiCollectionList =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WorkingRoiCollectionList, _React$Component);

  function WorkingRoiCollectionList() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WorkingRoiCollectionList);

    return _possibleConstructorReturn(this, _getPrototypeOf(WorkingRoiCollectionList).call(this, props));
  }

  _createClass(WorkingRoiCollectionList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          workingCollection = _this$props.workingCollection,
          activeROIContourIndex = _this$props.activeROIContourIndex,
          onRoiChange = _this$props.onRoiChange,
          onRenameButtonClick = _this$props.onRenameButtonClick,
          onNewRoiButtonClick = _this$props.onNewRoiButtonClick;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
        className: "roi-list-header"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "4"
      }, " New ROI Contour Collection")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Draw"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Name"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Contours")), workingCollection.map(function (roiContour) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_WorkingCollectionListItem_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          key: roiContour.metadata.uid,
          roiContourIndex: roiContour.index,
          metadata: roiContour.metadata,
          activeROIContourIndex: activeROIContourIndex,
          onRoiChange: onRoiChange,
          onRenameButtonClick: onRenameButtonClick
        });
      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "roi-contour-menu-new-button btn btn-sm btn-primary",
        onClick: onNewRoiButtonClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-plus-circle"
      }), " ROI"))));
    }
  }]);

  return WorkingRoiCollectionList;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/WorkingCollectionListItem.js":
/*!********************************************************************!*\
  !*** ./src/components/roiContourMenu/WorkingCollectionListItem.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return WorkingCollectionListItem; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

 // import './roiContourMenu.styl';

/**
 * @class WorkingCollectionListItem - Renders metadata for the working
 * ROIContour Collection.
 */

var WorkingCollectionListItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WorkingCollectionListItem, _React$Component);

  function WorkingCollectionListItem() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WorkingCollectionListItem);

    return _possibleConstructorReturn(this, _getPrototypeOf(WorkingCollectionListItem).call(this, props));
  }

  _createClass(WorkingCollectionListItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          roiContourIndex = _this$props.roiContourIndex,
          metadata = _this$props.metadata,
          onRoiChange = _this$props.onRoiChange,
          onRenameButtonClick = _this$props.onRenameButtonClick,
          activeROIContourIndex = _this$props.activeROIContourIndex;
      var checked = activeROIContourIndex === roiContourIndex;
      var name = metadata.name;
      var polygonCount = metadata.polygonCount;
      var roiContourColor = metadata.color;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "left-aligned-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-square",
        style: {
          color: roiContourColor
        }
      }), ' ', react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        type: "radio",
        checked: checked,
        onChange: function onChange() {
          return onRoiChange(roiContourIndex);
        }
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "left-aligned-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "roi-contour-menu-name-link",
        onClick: function onClick() {
          onRenameButtonClick(metadata);
        }
      }, name)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", null, polygonCount));
    }
  }]);

  return WorkingCollectionListItem;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/BrushSettings.js":
/*!**********************************************************!*\
  !*** ./src/components/segmentationMenu/BrushSettings.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BrushSettings; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }



var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__["cornerstoneTools"].store.modules.brush;
var brushState = brushModule.state; // import './segmentationMenu.styl';

var minGateSeperation = 10;
/**
 * @class BrushSettings - A component that allows the user to change
 * configuration of the Brush tools.
 */

var BrushSettings =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BrushSettings, _React$Component);

  function BrushSettings() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BrushSettings);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BrushSettings).call(this, props));
    var customGateRange = brushModule.getters.customGateRange();
    _this.state = {
      holeFill: brushState.holeFill,
      strayRemove: brushState.strayRemove,
      activeGate: brushState.activeGate,
      customGateRangeMin: customGateRange[0],
      customGateRangeMax: customGateRange[1]
    };
    _this.onGateChange = _this.onGateChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onCustomGateMinChange = _this.onCustomGateMinChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onCustomGateMaxChange = _this.onCustomGateMaxChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onHoleFillChange = _this.onHoleFillChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onStrayRemoveChange = _this.onStrayRemoveChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * onGateChange - Callback that changes the active gate of the Smart CT Brush.
   *
   * @param  {type} evt description
   * @returns {type}     description
   */


  _createClass(BrushSettings, [{
    key: "onGateChange",
    value: function onGateChange(evt) {
      var val = evt.target.value;
      this.setState({
        activeGate: val
      });
      brushState.activeGate = val;
    }
    /**
     * onCustomGateMinChange - Changes the minimum value of a
     * custom Smart CT Gate.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onCustomGateMinChange",
    value: function onCustomGateMinChange(evt) {
      var val = Number(evt.target.value);
      var customRangeMax = this.state.customGateRangeMax;

      if (val > customRangeMax - minGateSeperation) {
        val = customRangeMax - minGateSeperation;
        evt.target.value = val;
      }

      this.setState({
        customGateRangeMin: val
      });
      brushModule.setters.customGateRange(val, null);
    }
    /**
     * onCustomGateMaxChange - Changes the maximum value of a
     * custom Smart CT Gate.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onCustomGateMaxChange",
    value: function onCustomGateMaxChange(evt) {
      var val = Number(evt.target.value);
      var customRangeMin = this.state.customGateRangeMin;

      if (val < customRangeMin + minGateSeperation) {
        val = customRangeMin + minGateSeperation;
        evt.target.value = val;
      }

      this.setState({
        customGateRangeMax: val
      });
      brushModule.setters.customGateRange(null, val);
    }
    /**
     * onHoleFillChange - Changes the value of the hole fill parameter for the
     * Smart CT and Auto brushes.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onHoleFillChange",
    value: function onHoleFillChange(evt) {
      var val = Number(evt.target.value);
      this.setState({
        holeFill: val
      });
      brushState.holeFill = val;
    }
    /**
     * onStrayRemoveChange - Changes the balue of the stray remove parameter for
     * the Smart CT and Auto brushes.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onStrayRemoveChange",
    value: function onStrayRemoveChange(evt) {
      var val = Number(evt.target.value);
      this.setState({
        strayRemove: val
      });
      brushState.strayRemove = val;
    }
  }, {
    key: "render",
    value: function render() {
      var holeFillRange = brushState.holeFillRange;
      var strayRemoveRange = brushState.strayRemoveRange;
      var _this$state = this.state,
          holeFill = _this$state.holeFill,
          strayRemove = _this$state.strayRemove,
          activeGate = _this$state.activeGate;
      var gates = brushState.gates;
      var holeFillLabel = holeFill === 0 ? "Don't fill holes." : "Fill holes <".concat(holeFill, "% area of primary region.");
      var strayRemoveLabel = strayRemove === 0 ? 'Paint all non-primary regions.' : "Don't paint regions <".concat(strayRemove, "% area of primary region.");
      var customGates = null;

      if (activeGate === 'custom') {
        var customRange = brushModule.getters.customGateRange();
        customGates = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "brush-settings-horizontal-box"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
          htmlFor: "customGateMin"
        }, "Min:"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
          className: "form-themed form-control",
          type: "range",
          id: "start",
          name: "customGateMin",
          min: -1024,
          max: 3072,
          defaultValue: customRange[0],
          onChange: this.onCustomGateMinChange
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "brush-settings-horizontal-box"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
          htmlFor: "customGateMax"
        }, "Max:"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
          className: "form-themed form-control",
          type: "range",
          id: "start",
          name: "customGateMax",
          min: -1024,
          max: 3072,
          defaultValue: customRange[1],
          onChange: this.onCustomGateMaxChange
        })));
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "segmentation-menu-footer"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, " Smart CT Gate Selection"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("select", {
        className: "form-themed form-control",
        onChange: this.onGateChange,
        value: activeGate
      }, gates.map(function (gate) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
          key: gate.name,
          value: gate.name
        }, "".concat(gate.name, " [").concat(gate.range[0], ", ").concat(gate.range[1], "]"));
      })), customGates, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, " Smart/Auto Gate Settings "), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
        htmlFor: "holeFill"
      }, holeFillLabel), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        className: "form-themed form-control",
        type: "range",
        id: "start",
        name: "holeFill",
        min: holeFillRange[0],
        defaultValue: holeFill,
        max: holeFillRange[1],
        onChange: this.onHoleFillChange
      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
        htmlFor: "strayRemove"
      }, strayRemoveLabel), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        className: "form-themed form-control",
        type: "range",
        id: "start",
        name: "strayRemove",
        min: strayRemoveRange[0],
        defaultValue: strayRemove,
        max: strayRemoveRange[1],
        onChange: this.onStrayRemoveChange
      }));
    }
  }]);

  return BrushSettings;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenu.js":
/*!*************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenu.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenu; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/MenuIOButtons.js */ "./src/components/common/MenuIOButtons.js");
/* harmony import */ var _SegmentationMenuDeleteConfirmation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SegmentationMenuDeleteConfirmation.js */ "./src/components/segmentationMenu/SegmentationMenuDeleteConfirmation.js");
/* harmony import */ var _SegmentationMenuListBody_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SegmentationMenuListBody.js */ "./src/components/segmentationMenu/SegmentationMenuListBody.js");
/* harmony import */ var _SegmentationMenuListHeader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SegmentationMenuListHeader.js */ "./src/components/segmentationMenu/SegmentationMenuListHeader.js");
/* harmony import */ var _BrushSettings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BrushSettings.js */ "./src/components/segmentationMenu/BrushSettings.js");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/brushMetadataIO.js */ "./src/util/brushMetadataIO.js");
/* harmony import */ var _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/helpers/onIOCancel.js */ "./src/components/common/helpers/onIOCancel.js");
/* harmony import */ var _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/helpers/onImportButtonClick.js */ "./src/components/common/helpers/onImportButtonClick.js");
/* harmony import */ var _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/helpers/onExportButtonClick.js */ "./src/components/common/helpers/onExportButtonClick.js");
/* harmony import */ var _util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/getActiveViewportEnabledElement.js */ "./src/util/getActiveViewportEnabledElement.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }











 // import './segmentationMenu.styl';



var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_6___default.a.store.modules.brush;
/**
 * @class SegmentationMenu - Renders a menu for importing, exporting, creating
 * and renaming Segments. As well as setting configuration settings for
 * the Brush tools.
 */

var SegmentationMenu =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenu, _React$Component);

  function SegmentationMenu() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenu);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenu).call(this, props));
    var enabledElement = Object(_util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__["default"])(props.viewports, props.activeIndex);
    var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_12__["default"])(enabledElement);
    _this.getSegmentList = _this.getSegmentList.bind(_assertThisInitialized(_assertThisInitialized(_this)));

    var _this$getSegmentList = _this.getSegmentList(enabledElement, seriesInstanceUid),
        segments = _this$getSegmentList.segments,
        importMetadata = _this$getSegmentList.importMetadata,
        activeSegmentIndex = _this$getSegmentList.activeSegmentIndex;

    _this.state = {
      importMetadata: importMetadata,
      segments: segments,
      seriesInstanceUid: seriesInstanceUid,
      enabledElement: enabledElement,
      deleteConfirmationOpen: false,
      segmentToDelete: 1,
      activeSegmentIndex: activeSegmentIndex,
      importing: false,
      exporting: false
    };
    _this.onSegmentChange = _this.onSegmentChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onEditClick = _this.onEditClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.confirmDeleteOnDeleteClick = _this.confirmDeleteOnDeleteClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDeleteCancelClick = _this.onDeleteCancelClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDeleteConfirmClick = _this.onDeleteConfirmClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onImportButtonClick = _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onExportButtonClick = _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_10__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOComplete = _this.onIOComplete.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOCancel = _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_8__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * getSegmentList - Grabs the segments from the brushStore and
   * populates state.
   *
   * @returns {null}
   */


  _createClass(SegmentationMenu, [{
    key: "getSegmentList",
    value: function getSegmentList(enabledElement, seriesInstanceUid) {
      enabledElement = enabledElement || this.state.enabledElement;
      seriesInstanceUid = seriesInstanceUid || this.state.seriesInstanceUid;

      if (!enabledElement || !seriesInstanceUid) {
        return [];
      }

      var importMetadata = this.constructor._importMetadata(seriesInstanceUid);

      var segments = this.constructor._segments(enabledElement);

      var activeSegmentIndex = brushModule.getters.activeSegmentIndex(enabledElement);
      this.setState({
        importMetadata: importMetadata,
        segments: segments,
        activeSegmentIndex: activeSegmentIndex
      });
    }
    /**
     * onIOComplete - A callback executed on succesful completion of an
     * IO opperation. Recalculates the Segmentation state.
     *
     * @returns {type}  description
     */

  }, {
    key: "onIOComplete",
    value: function onIOComplete() {
      var _this$state$seriesIns = this.state.seriesInstanceUid,
          seriesInstanceUid = _this$state$seriesIns.seriesInstanceUid,
          enabledElement = _this$state$seriesIns.enabledElement;

      var importMetadata = this.constructor._importMetadata(seriesInstanceUid);

      var segments = this.constructor._segments(enabledElement);

      var activeSegmentIndex = brushModule.getters.activeSegmentIndex(enabledElement);
      this.setState({
        importMetadata: importMetadata,
        segments: segments,
        activeSegmentIndex: activeSegmentIndex,
        importing: false,
        exporting: false
      });
    }
    /**
     * onSegmentChange - Callback that changes the active segment being drawn.
     *
     * @param  {Number} segmentIndex The index of the segment to set active.
     * @returns {null}
     */

  }, {
    key: "onSegmentChange",
    value: function onSegmentChange(segmentIndex) {
      var enabledElement = this.state.element;
      brushModule.setters.activeSegmentIndex(enabledElement, segmentIndex);
      this.setState({
        activeSegmentIndex: segmentIndex
      });
    }
    /**
     * onEditClick - A callback that triggers metadata input for a segment.
     *
     * @param  {Number} segmentIndex The index of the segment metadata to edit.
     * @param  {object}   metadata     The current metadata of the segment.
     * @returns {null}
     */

  }, {
    key: "onEditClick",
    value: function onEditClick(segmentIndex, metadata) {
      Object(_util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_7__["editSegmentInput"])(segmentIndex, metadata);
    }
    /**
     * confirmDeleteOnDeleteClick - A callback that triggers confirmation of segment deletion.
     *
     * @param  {Number} segmentIndex The index of the segment being deleted.
     * @returns {null}
     */

  }, {
    key: "confirmDeleteOnDeleteClick",
    value: function confirmDeleteOnDeleteClick(segmentIndex) {
      this.setState({
        deleteConfirmationOpen: true,
        segmentToDelete: segmentIndex
      });
    }
    /**
     * onDeleteConfirmClick - A callback that deletes a segment form the series.
     *
     * @returns {null}
     */

  }, {
    key: "onDeleteConfirmClick",
    value: function onDeleteConfirmClick() {
      var _this$state = this.state,
          segmentToDelete = _this$state.segmentToDelete,
          enabledElement = _this$state.enabledElement;
      brushModule.setters.deleteSegment(enabledElement, segmentToDelete);

      var segments = this.constructor._segments(enabledElement);

      this.setState({
        deleteConfirmationOpen: false,
        segments: segments
      });
    }
    /**
     * onDeleteCancelClick - A callback that closes the delete confirmation window
     * and aborts deletion.
     *
     * @returns {null}
     */

  }, {
    key: "onDeleteCancelClick",
    value: function onDeleteCancelClick() {
      this.setState({
        deleteConfirmationOpen: false
      });
    }
    /**
     * _importMetadata - Returns the import metadata for the active series.
     *
     * @returns {object} The importMetadata.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          importMetadata = _this$state2.importMetadata,
          segments = _this$state2.segments,
          deleteConfirmationOpen = _this$state2.deleteConfirmationOpen,
          segmentToDelete = _this$state2.segmentToDelete,
          activeSegmentIndex = _this$state2.activeSegmentIndex,
          enabledElement = _this$state2.enabledElement,
          importing = _this$state2.importing,
          exporting = _this$state2.exporting;
      var _this$props = this.props,
          ImportCallbackOrComponent = _this$props.ImportCallbackOrComponent,
          ExportCallbackOrComponent = _this$props.ExportCallbackOrComponent;
      var component;

      if (importing) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ImportCallbackOrComponent, {
          onImportComplete: this.onIOComplete,
          onImportCancel: this.onIOCancel
        });
      } else if (exporting) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ExportCallbackOrComponent, {
          onExportComplete: this.onIOComplete,
          onExportCancel: this.onIOCancel
        });
      } else if (deleteConfirmationOpen) {
        var segmentLabel = segments.find(function (segment) {
          return segment.index === segmentToDelete;
        }).metadata.SegmentLabel;
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuDeleteConfirmation_js__WEBPACK_IMPORTED_MODULE_2__["default"], {
          segmentLabel: segmentLabel,
          onDeleteConfirmClick: this.onDeleteConfirmClick,
          onDeleteCancelClick: this.onDeleteCancelClick
        });
      } else {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "segmentation-menu-component"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "segmentation-menu-list"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "segmentation-menu-header"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, "Segments"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          ImportCallbackOrComponent: ImportCallbackOrComponent,
          ExportCallbackOrComponent: ExportCallbackOrComponent,
          onImportButtonClick: this.onImportButtonClick,
          onExportButtonClick: this.onExportButtonClick
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("table", {
          className: "peppermint-table"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuListHeader_js__WEBPACK_IMPORTED_MODULE_4__["default"], {
          importMetadata: importMetadata
        }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuListBody_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
          segments: segments,
          activeSegmentIndex: activeSegmentIndex,
          onSegmentChange: this.onSegmentChange,
          onEditClick: this.onEditClick,
          onDeleteClick: this.confirmDeleteOnDeleteClick,
          enabledElement: enabledElement
        })))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_BrushSettings_js__WEBPACK_IMPORTED_MODULE_5__["default"], null));
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, component);
    }
  }], [{
    key: "_importMetadata",
    value: function _importMetadata(seriesInstanceUid) {
      var importMetadata = brushModule.getters.importMetadata(seriesInstanceUid);

      if (importMetadata) {
        return {
          label: importMetadata.label,
          type: importMetadata.type,
          name: importMetadata.name,
          modified: importMetadata.modified ? 'true' : ' false'
        };
      }

      return {
        name: 'New Segmentation Collection',
        label: ''
      };
    }
    /**
     * _segments - Returns an array of segment metadata for the active series.
     *
     * @returns {object[]} An array of segment metadata.
     */

  }, {
    key: "_segments",
    value: function _segments(element) {
      // TODO -> support for multiple labelmaps.
      var segmentMetadata = brushModule.getters.metadata(element);

      if (!segmentMetadata) {
        return [];
      }

      var segments = [];

      for (var i = 0; i < segmentMetadata.length; i++) {
        if (segmentMetadata[i]) {
          segments.push({
            index: i,
            metadata: segmentMetadata[i]
          });
        }
      }

      return segments;
    }
  }]);

  return SegmentationMenu;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuDeleteConfirmation.js":
/*!*******************************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuDeleteConfirmation.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuDeleteConfirmation; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

 // import './segmentationMenu.styl';

/**
 * @class SegmentationMenuDeleteConfirmation - Renders a confirmation dialog for
 * confirmation of segment deletion.
 */

var SegmentationMenuDeleteConfirmation =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuDeleteConfirmation, _React$Component);

  function SegmentationMenuDeleteConfirmation() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuDeleteConfirmation);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuDeleteConfirmation).call(this, props));
  }

  _createClass(SegmentationMenuDeleteConfirmation, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          segmentLabel = _this$props.segmentLabel,
          onDeleteConfirmClick = _this$props.onDeleteConfirmClick,
          onDeleteCancelClick = _this$props.onDeleteCancelClick;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", null, "Warning!"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, "Are you sure you want to delete ", segmentLabel, "? This cannot be undone.")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "seg-delete-horizontal-box"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onDeleteConfirmClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa fa-check-circle fa-2x"
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onDeleteCancelClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa fa-times-circle fa-2x"
      }))));
    }
  }]);

  return SegmentationMenuDeleteConfirmation;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuListBody.js":
/*!*********************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuListBody.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuListBody; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _SegmentationMenuListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SegmentationMenuListItem.js */ "./src/components/segmentationMenu/SegmentationMenuListItem.js");
/* harmony import */ var _util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/brushMetadataIO.js */ "./src/util/brushMetadataIO.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



 // import './segmentationMenu.styl';

/**
 * @class SegmentationMenuListBody - Renders a list of SegmentationMenuListItems,
 * displaying the metadata of segments.
 */

var SegmentationMenuListBody =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuListBody, _React$Component);

  function SegmentationMenuListBody() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuListBody);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuListBody).call(this, props));
  }

  _createClass(SegmentationMenuListBody, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          segments = _this$props.segments,
          activeSegmentIndex = _this$props.activeSegmentIndex,
          onSegmentChange = _this$props.onSegmentChange,
          onEditClick = _this$props.onEditClick,
          onDeleteClick = _this$props.onDeleteClick,
          enabledElement = _this$props.enabledElement;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, segments.map(function (segment) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuListItem_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          key: "".concat(segment.metadata.SegmentLabel, "_").concat(segment.index),
          segmentIndex: segment.index,
          metadata: segment.metadata,
          onSegmentChange: onSegmentChange,
          onEditClick: onEditClick,
          onDeleteClick: onDeleteClick,
          checked: segment.index === activeSegmentIndex,
          enabledElement: enabledElement
        });
      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "segmentation-menu-new-button btn btn-sm btn-primary",
        onClick: _util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_2__["newSegment"]
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-plus-circle"
      }), " Segment"))));
    }
  }]);

  return SegmentationMenuListBody;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuListHeader.js":
/*!***********************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuListHeader.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuListHeader; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

 // import './segmentationMenu.styl';

/**
 * @class SegmentationMenuListHeader - Renders the header for the
 * SegmentationMenuList table.
 */

var SegmentationMenuListHeader =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuListHeader, _React$Component);

  function SegmentationMenuListHeader() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuListHeader);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuListHeader).call(this, props));
  }

  _createClass(SegmentationMenuListHeader, [{
    key: "render",
    value: function render() {
      var importMetadata = this.props.importMetadata;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "left-aligned-cell segmentation-menu-list-bordered"
      }, importMetadata.name), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "right-aligned-cell segmentation-menu-list-bordered"
      }, importMetadata.label)), importMetadata.type && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "left-aligned-cell segmentation-menu-list-bordered"
      }, "Type: ", importMetadata.type), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "right-aligned-cell segmentation-menu-list-bordered"
      }, "Modified: ", importMetadata.modified)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
        className: "segmentation-menu-list-bordered"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Paint"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Label"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Type"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Delete")));
    }
  }]);

  return SegmentationMenuListHeader;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuListItem.js":
/*!*********************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuListItem.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuListItem; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }


 // import './segmentationMenu.styl';

var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default.a.store.modules.brush;
/**
 * @class SegmentationMenuListItem - Renders metadata for a single segment.
 */

var SegmentationMenuListItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuListItem, _React$Component);

  function SegmentationMenuListItem() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuListItem);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuListItem).call(this, props));
  }
  /**
   * _getTypeWithModifier - Returns the segment type with its modifier as a string.
   *
   * @returns {string}
   */


  _createClass(SegmentationMenuListItem, [{
    key: "_getTypeWithModifier",
    value: function _getTypeWithModifier() {
      var metadata = this.props.metadata;
      var typeWithModifier = metadata.SegmentedPropertyTypeCodeSequence.CodeMeaning;
      var modifier = metadata.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence;

      if (modifier) {
        typeWithModifier += " (".concat(modifier.CodeMeaning, ")");
      }

      return typeWithModifier;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          metadata = _this$props.metadata,
          segmentIndex = _this$props.segmentIndex,
          onSegmentChange = _this$props.onSegmentChange,
          onEditClick = _this$props.onEditClick,
          onDeleteClick = _this$props.onDeleteClick,
          checked = _this$props.checked,
          enabledElement = _this$props.enabledElement;
      var segmentLabel = metadata.SegmentLabel;
      var colormap = brushModule.getters.activeCornerstoneColorMap(enabledElement);
      var color = colormap.getColor(segmentIndex);
      var segmentColor = "rgba(".concat(color[0], ", ").concat(color[1], ", ").concat(color[2], ", 1.0 )");
      var segmentCategory = metadata.SegmentedPropertyCategoryCodeSequence.CodeMeaning;

      var typeWithModifier = this._getTypeWithModifier();

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-square",
        style: {
          color: segmentColor
        }
      }), ' ', react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        type: "radio",
        checked: checked,
        onChange: function onChange() {
          onSegmentChange(segmentIndex);
        }
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "left-aligned-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "segmentation-menu-name-link",
        onClick: function onClick() {
          onEditClick(segmentIndex, metadata);
        }
      }, segmentLabel)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "segmentation-menu-name-link",
        onClick: function onClick() {
          onEditClick(segmentIndex, metadata);
        }
      }, typeWithModifier, ' - ', segmentCategory)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: function onClick() {
          onDeleteClick(segmentIndex);
        }
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-times"
      }))));
    }
  }]);

  return SegmentationMenuListItem;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./init.js */ "./src/init.js");
/* harmony import */ var _components_segmentationMenu_SegmentationMenu_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./components/segmentationMenu/SegmentationMenu.js */ "./src/components/segmentationMenu/SegmentationMenu.js");
/* harmony import */ var _components_roiContourMenu_RoiContourMenu_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/roiContourMenu/RoiContourMenu.js */ "./src/components/roiContourMenu/RoiContourMenu.js");



var TOOLBAR_BUTTON_TYPES = {
  COMMAND: 'command',
  SET_TOOL_ACTIVE: 'setToolActive'
};
/* harmony default export */ __webpack_exports__["default"] = ({
  /**
   * Only required property. Should be a unique value across all extensions.
   */
  id: 'ohif-segmentation-extension',
  preRegistration: function preRegistration() {
    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Object(_init_js__WEBPACK_IMPORTED_MODULE_0__["default"])(configuration);
  },

  /**
   * Registers one or more named commands scoped to a context. Commands are
   * the primary means for...
   */
  getCommandsModule: function getCommandsModule() {
    return {
      defaultContext: 'VIEWER',
      actions: [],
      definitions: []
    };
  },

  /**
   * Allows you to provide toolbar definitions that will be merged with any
   * existing application toolbar configuration. Used to determine which
   * buttons should be visible when, their order, what happens when they're
   * clicked, etc.
   */
  getToolbarModule: function getToolbarModule() {
    return {
      definitions: [{
        id: 'freehandRoiTools',
        label: 'ROI',
        icon: 'level',
        buttons: [{
          id: 'FreehandRoi',
          label: 'Draw',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].FREEHAND_ROI_3D_TOOL
          }
        }, {
          id: 'FreehandRoiSculptor',
          label: 'Sculpt',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].FREEHAND_ROI_3D_SCULPTOR_TOOL
          }
        }]
      }, {
        id: 'brushTools',
        label: 'Segment',
        icon: 'level',
        buttons: [{
          id: 'Brush',
          label: 'Manual',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].BRUSH_3D_TOOL
          }
        }, {
          id: 'Brush3DHUGatedTool',
          label: 'Smart CT',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].BRUSH_3D_HU_GATED_TOOL
          }
        }, {
          id: 'Brush3DAutoGatedTool',
          label: 'Auto',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].BRUSH_3D_AUTO_GATED_TOOL
          }
        }]
      }],
      defaultContext: 'ACTIVE_VIEWPORT::CORNERSTONE'
    };
  },

  /**
   * Totally implemented, for real now.
   */
  getPanelModule: function getPanelModule() {
    return {
      menuOptions: [{
        icon: 'th-list',
        label: 'Segments',
        target: 'segment-panel'
      }, {
        icon: 'th',
        label: 'Contours',
        target: 'contour-panel'
      }],
      components: [{
        id: 'segment-panel',
        component: _components_segmentationMenu_SegmentationMenu_js__WEBPACK_IMPORTED_MODULE_1__["default"]
      }, {
        id: 'contour-panel',
        component: _components_roiContourMenu_RoiContourMenu_js__WEBPACK_IMPORTED_MODULE_2__["default"]
      }],
      defaultContext: ['VIEWER']
    };
  }
});

/***/ }),

/***/ "./src/init.js":
/*!*********************!*\
  !*** ./src/init.js ***!
  \*********************/
/*! exports provided: TOOL_NAMES, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOOL_NAMES", function() { return TOOL_NAMES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return init; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_freehand3DModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/freehand3DModule.js */ "./src/modules/freehand3DModule.js");
/* harmony import */ var _modules_extendBrushModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/extendBrushModule.js */ "./src/modules/extendBrushModule.js");
/* harmony import */ var _tools_Brush3DTool_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tools/Brush3DTool.js */ "./src/tools/Brush3DTool.js");
/* harmony import */ var _tools_Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tools/Brush3DHUGatedTool.js */ "./src/tools/Brush3DHUGatedTool.js");
/* harmony import */ var _tools_Brush3DAutoGatedTool_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tools/Brush3DAutoGatedTool.js */ "./src/tools/Brush3DAutoGatedTool.js");
/* harmony import */ var _tools_FreehandRoi3DTool_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tools/FreehandRoi3DTool.js */ "./src/tools/FreehandRoi3DTool.js");
/* harmony import */ var _tools_FreehandRoi3DSculptorTool_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools/FreehandRoi3DSculptorTool.js */ "./src/tools/FreehandRoi3DSculptorTool.js");








var TOOL_NAMES = {};

var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
var defaultConfig = {
  maxRadius: 64,
  holeFill: 2,
  holeFillRange: [0, 20],
  strayRemove: 5,
  strayRemoveRange: [0, 99],
  interpolate: false,
  showFreehandStats: false,
  brush3dToolName: 'Brush3DTool',
  brush3DHUGatedToolName: 'Brush3DHUGatedTool',
  brush3DAutoGatedTool: 'Brush3DAutoGatedTool',
  freehandRoi3DTool: 'FreehandRoi3DTool',
  freehandRoi3DSculptorTool: 'FreehandRoi3DSculptorTool',
  gates: [{
    // https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4309522/
    name: 'adipose',
    range: [-190, -30]
  }, {
    // https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4309522/
    name: 'muscle',
    range: [-29, 150]
  }, {
    name: 'custom',
    range: [0, 100]
  }]
};
function init() {
  var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var brushModule = modules.brush;
  var config = Object.assign({}, defaultConfig, configuration);
  Object(_modules_extendBrushModule_js__WEBPACK_IMPORTED_MODULE_2__["default"])(brushModule, config);
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["register"])('module', 'freehand3D', _modules_freehand3DModule_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
  var freehand3DStore = modules.freehand3D;
  freehand3DStore.state.interpolate = config.interpolate;
  freehand3DStore.state.displayStats = config.showFreehandStats;
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_Brush3DTool_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
    name: config.brush3dToolName
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_4__["default"], {
    name: config.brush3DHUGatedToolName
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_Brush3DAutoGatedTool_js__WEBPACK_IMPORTED_MODULE_5__["default"], {
    name: config.brush3DAutoGatedTool
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_FreehandRoi3DTool_js__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: config.freehandRoi3DTool
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_FreehandRoi3DSculptorTool_js__WEBPACK_IMPORTED_MODULE_7__["default"], {
    name: config.freehandRoi3DSculptorTool,
    referencedToolName: config.freehandRoi3DTool
  }); // TODO -> Clean this up a bit after PW.

  TOOL_NAMES.FREEHAND_ROI_3D_TOOL = config.freehandRoi3DTool;
  TOOL_NAMES.FREEHAND_ROI_3D_SCULPTOR_TOOL = config.freehandRoi3DSculptorTool;
  TOOL_NAMES.BRUSH_3D_TOOL = config.brush3dToolName;
  TOOL_NAMES.BRUSH_3D_AUTO_GATED_TOOL = config.brush3DAutoGatedTool;
  TOOL_NAMES.BRUSH_3D_HU_GATED_TOOL = config.brush3DHUGatedToolName;
  console.log(config);
  console.log(TOOL_NAMES);
}

/***/ }),

/***/ "./src/modules/extendBrushModule.js":
/*!******************************************!*\
  !*** ./src/modules/extendBrushModule.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extendBrushModule; });
function extendBrushModule(brushModule, config) {
  var brushState = brushModule.state;
  var getters = brushModule.getters;
  var setters = brushModule.setters;
  brushState.holeFill = config.holeFill;
  brushState.holeFillRange = config.holeFillRange;
  brushState.strayRemove = config.strayRemove;
  brushState.strayRemoveRange = config.strayRemoveRange;
  brushState.gates = config.gates;
  brushState.activeGate = brushState.gates[0].name;
  brushState.maxRadius = config.maxRadius;

  getters.activeGateRange = function () {
    var activeGate = brushState.activeGate;
    var gates = brushState.gates;
    var gateIndex = gates.findIndex(function (element) {
      return element.name === activeGate;
    });
    return brushState.gates[gateIndex].range;
  };

  getters.customGateRange = function () {
    var gates = brushState.gates;
    var gateIndex = gates.findIndex(function (element) {
      return element.name === 'custom';
    });
    return brushState.gates[gateIndex].range;
  };

  setters.customGateRange = function (min, max) {
    var gates = brushState.gates;
    var gateIndex = gates.findIndex(function (element) {
      return element.name === 'custom';
    });
    var customGateRange = brushState.gates[gateIndex].range;

    if (min !== null) {
      customGateRange[0] = min;
    }

    if (max !== null) {
      customGateRange[1] = max;
    }
  };

  getters.importMetadata = function (seriesInstanceUid) {
    if (brushModule.state.import && brushModule.state.import[seriesInstanceUid]) {
      return brushModule.state.import[seriesInstanceUid];
    }

    return;
  };

  setters.importMetadata = function (seriesInstanceUid, metadata) {
    // Store that we've imported a collection for this series.
    if (!brushModule.state.import) {
      brushModule.state.import = {};
    }

    brushModule.state.import[seriesInstanceUid] = metadata;
  };

  setters.importModified = function (seriesInstanceUid) {
    var importMetadata = brushModule.state.import[seriesInstanceUid];

    if (importMetadata.modified) {
      return;
    }

    importMetadata.modified = true; // JamesAPetts
    // TODO: Force update of component.
  };
}

/***/ }),

/***/ "./src/modules/freehand3DModule.js":
/*!*****************************************!*\
  !*** ./src/modules/freehand3DModule.js ***!
  \*****************************************/
/*! exports provided: default, getNextColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNextColor", function() { return getNextColor; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_generateUID_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/generateUID.js */ "./src/util/generateUID.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");



/**
 * @typedef {series[]} seriesCollection
 *
 * @example
 * [
 *   series1,
 *   series2
 * ];
 */

/**
 * @typedef {object} series
 * @property {string} uid The seriesInstanceUid
 * @property {number} activeStructureSetIndex The activeStructureSet within the series.
 * @property {structureSet[]} structureSetCollection An array of structureSets.
 *
 * @example
 * {
 *  uid: 'mySeriesInstanceUid',
 *  activeStructureSetIndex: 0,
 *  structureSetCollection,
 * };
 */

/**
 * @typedef {object} structureSet
 * @property {string} uid The structureSetUid
 * @property {string} name A human readable descriptor of the structureSet.
 * @property {boolean} isLocked Whether the structureSet is immutable.
 * @property {boolean} visible Whether the structureSet should be rendered.
 * @property {number} activeROIContourIndex The index of the active ROIContour.
 * @property {ROIContour[]} ROIContourCollection An array of ROIContours.
 *
 * @example
 * {
 *   uid: 'myStructureSetUid',
 *   name: `myLovelyStructureSet`,
 *   isLocked: false,
 *   visible: true,
 *   activeROIContourIndex: 7,
 *   ROIContourCollection
 * };
 */

/**
 * @typedef {object} ROIContour
 * @property {string} uid The ROIContourUid.
 * @property {string} name A human readable descriptor of the biological object the contour encloses.
 * @property {string} color A css color to render the volume with.
 * @property {number} polygonCount The number of polygons that comprise the ROIContour.
 *
 * @example
 * {
 *  uid: 'myROIContourUid',
 *  name: 'myLovelyROIContour',
 *  color: 'cornflowerblue',
 *  polygonCount: '34'
 * };
 */
// Each contour references a seriesInstanceUid, structureSetUid, ROIContourUid.

var state = {
  seriesCollection: [],
  interpolate: false,
  displayStats: false
};

function check(object, name) {
  if (!object) {
    throw new Error("Insufficient information provided, must provide ".concat(name, "."));
  }
}

function getSeries(seriesInstanceUid) {
  check(seriesInstanceUid, 'seriesInstanceUid');
  return state.seriesCollection.find(function (series) {
    return series.uid === seriesInstanceUid;
  });
}

function getStructureSet(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  check(structureSetUid, 'structureSetUid');
  var series = getSeries(seriesInstanceUid);

  if (!series) {
    return;
  }

  return series.structureSetCollection.find(function (structureSet) {
    return structureSet.uid === structureSetUid;
  });
}

function getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid) {
  check(ROIContourUid, 'ROIContourUid');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);

  if (!structureSet) {
    return;
  }

  return structureSet.ROIContourCollection.find(function (ROIContour) {
    return ROIContour && ROIContour.uid === ROIContourUid;
  });
}

function getROIContourIndex(seriesInstanceUid, structureSetUid, ROIContourUid) {
  check(ROIContourUid, 'ROIContourUid');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);

  if (!structureSet) {
    return;
  }

  return structureSet.ROIContourCollection.findIndex(function (ROIContour) {
    return ROIContour.uid === ROIContourUid;
  });
}

function getActiveStructureSetIndex(seriesInstanceUid) {
  var series = getSeries(seriesInstanceUid);
  return series.activeStructureSetIndex;
}

function getActiveROIContourIndex(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  return structureSet.activeROIContourIndex;
}

function getActiveROIContour(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var activeROIContourIndex = structureSet.activeROIContourIndex;

  if (activeROIContourIndex === null || activeROIContourIndex === undefined) {
    return;
  }

  return structureSet.ROIContourCollection[activeROIContourIndex];
}

function setSeries(seriesInstanceUid) {
  check(seriesInstanceUid);
  var series = {
    uid: seriesInstanceUid,
    activeStructureSetIndex: null,
    structureSetCollection: []
  };
  state.seriesCollection.push(series); // Add a default structureSet for the series.

  setStructureSet(seriesInstanceUid, 'default', {
    uid: 'DEFAULT'
  });
}

function setStructureSet(seriesInstanceUid, name) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  check(name, 'name');
  var series = getSeries(seriesInstanceUid);

  if (!series) {
    // Generate the series.
    setSeries(seriesInstanceUid);
    series = getSeries(seriesInstanceUid);
  }

  var structureSet = {
    uid: options.uid ? options.uid : Object(_util_generateUID_js__WEBPACK_IMPORTED_MODULE_1__["default"])(),
    name: name,
    isLocked: options.isLocked ? options.isLocked : false,
    visible: options.visible ? options.visible : true,
    activeROIContourIndex: options.activeROIContourIndex !== undefined ? options.activeROIContourIndex : null,
    ROIContourCollection: []
  };
  series.structureSetCollection.push(structureSet);
}

function setROIContour(seriesInstanceUid, structureSetUid, name) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  check(name, 'name');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);

  if (!structureSet) {
    // Can't generate the structureSet as not enough info (no name).
    throw new Error("Cannot generate ROIContour, as the structureSet with ".concat(structureSetUid, " does not exist."));
  }

  var ROIContour = {
    uid: options.uid ? options.uid : Object(_util_generateUID_js__WEBPACK_IMPORTED_MODULE_1__["default"])(),
    name: name,
    color: options.color ? options.color : getNextColor(),
    polygonCount: options.polygonCount ? options.polygonCount : 0
  };
  structureSet.ROIContourCollection.push(ROIContour);
  return ROIContour.uid;
}

function setROIContourAndSetIndexActive(seriesInstanceUid, structureSetUid, name) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  setROIContour(seriesInstanceUid, structureSetUid, name, options);
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var index = structureSet.ROIContourCollection.length - 1;
  structureSet.activeROIContourIndex = index;
  return index;
}

function setDeleteROIFromStructureSet(seriesInstanceUid, structureSetUid, ROIContourUid) {
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var ROIContourCollection = structureSet.ROIContourCollection;
  var ROIContourIndex = ROIContourCollection.findIndex(function (ROIContour) {
    return ROIContour.uid === ROIContourUid;
  });
  ROIContourCollection.splice(ROIContourIndex, 1);
}

function setStructureSetName(name, seriesInstanceUid, structureSetUid) {
  check(name, 'name');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  structureSet.name = name;
}

function setDeleteStructureSet(seriesInstanceUid, structureSetUid) {
  var series = getSeries(seriesInstanceUid);
  var structureSetCollection = series.structureSetCollection;
  var structureSetIndex = structureSetCollection.findIndex(function (structureSet) {
    return structureSet.uid === structureSetUid;
  });
  structureSetCollection.splice(structureSetIndex, 1);
}

function setROIContourName(name, seriesInstanceUid, structureSetUid, ROIContourUid) {
  check(name, 'name');
  var ROIContour = getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
  ROIContour.name = name;
}

function setActiveStructureSetIndex(index, seriesInstanceUid) {
  check(index, 'index');
  var series = getSeries(seriesInstanceUid);
  series.activeStructureSetIndex = index;
}

function setActiveStructureSet(seriesInstanceUid, structureSetUid) {
  check(structureSetUid, 'structureSetUid');
  var series = getSeries(seriesInstanceUid);
  var structureSetCollection = series.structureSetCollection;
  var structureSetIndex = structureSetCollection.findIndex(function (structureSet) {
    return structureSet.uid === structureSetUid;
  });
  series.activeStructureSetIndex = structureSetIndex;
}

function setActiveROIContourIndex(index, seriesInstanceUid) {
  var structureSetUid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'DEFAULT';
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  structureSet.activeROIContourIndex = index;
}

function setActiveROIContour(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  var ROIContourUid = arguments.length > 2 ? arguments[2] : undefined;
  check(ROIContourUid, 'ROIContourUid');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var ROIContourCollection = structureSet.ROIContourCollection;
  var ROIContourIndex = ROIContourCollection.findIndex(function (ROIContour) {
    return ROIContour.uid === ROIContourUid;
  });
  structureSet.activeROIContourIndex = ROIContourIndex;
}

function incrementPolygonCount(seriesInstanceUid, structureSetUid, ROIContourUid) {
  var ROIContour = getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
  ROIContour.polygonCount++;
}

function decrementPolygonCount(seriesInstanceUid, structureSetUid, ROIContourUid) {
  var ROIContour = getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
  ROIContour.polygonCount--;
}

var getters = {
  series: getSeries,
  structureSet: getStructureSet,
  ROIContour: getROIContour,
  ROIContourIndex: getROIContourIndex,
  activeStructureSetIndex: getActiveStructureSetIndex,
  activeROIContourIndex: getActiveROIContourIndex,
  activeROIContour: getActiveROIContour
};
var setters = {
  series: setSeries,
  structureSet: setStructureSet,
  ROIContour: setROIContour,
  ROIContourAndSetIndexActive: setROIContourAndSetIndexActive,
  deleteROIFromStructureSet: setDeleteROIFromStructureSet,
  deleteStructureSet: setDeleteStructureSet,
  structureSetName: setStructureSetName,
  ROIContourName: setROIContourName,
  activeStructureSetIndex: setActiveStructureSetIndex,
  activeStructureSet: setActiveStructureSet,
  activeROIContourIndex: setActiveROIContourIndex,
  activeROIContour: setActiveROIContour,
  incrementPolygonCount: incrementPolygonCount,
  decrementPolygonCount: decrementPolygonCount,
  toggleInterpolate: function toggleInterpolate() {
    state.interpolate = !state.interpolate;
  },
  toggleDisplayStats: function toggleDisplayStats() {
    state.displayStats = !state.displayStats;
  }
};
/**
 * enabledElementCallback - Element specific initilisation.
 * @public
 * @param  {Object} enabledElement  The element on which the module is
 *                                  being initialised.
 */

function enabledElementCallback(element) {
  var enabledElement = cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default.a.getEnabledElement(element);

  if (!enabledElement.image) {
    return;
  }

  var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(enabledElement);

  if (!getSeries(seriesInstanceUid)) {
    // Generate series store.
    setSeries(seriesInstanceUid);
  }
}

/* harmony default export */ __webpack_exports__["default"] = ({
  state: state,
  enabledElementCallback: enabledElementCallback,
  getters: getters,
  setters: setters
});
var importColors = ['cornflowerblue', 'firebrick', 'goldenrod', 'blueviolet', 'indianred', 'orange', 'mediumturquoise', 'lightcoral', 'khaki', 'darkmagenta', 'lightseagreen', 'tomato', 'aquamarine', 'darksalmon', 'moccasin', 'orchid', 'skyblue', 'peru']; // Such that first color will be the first in roiColors

var currentColorIndex = importColors.length;
/**
 * getNextColor
 *
 * @return {string} A CSS recognised color with which to render the ROI contour.
 */

function getNextColor() {
  currentColorIndex++;

  if (currentColorIndex >= importColors.length) {
    currentColorIndex = 0;
  }

  return importColors[currentColorIndex];
}

/***/ }),

/***/ "./src/tools/Brush3DAutoGatedTool.js":
/*!*******************************************!*\
  !*** ./src/tools/Brush3DAutoGatedTool.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Brush3DAutoGatedTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Brush3DHUGatedTool.js */ "./src/tools/Brush3DHUGatedTool.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




var _cornerstoneTools$imp = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default.a.importInternalModule('util/brushUtils'),
    getCircle = _cornerstoneTools$imp.getCircle;

var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default.a.store.modules.brush;

var Brush3DAutoGatedTool =
/*#__PURE__*/
function (_Brush3DHUGatedTool) {
  _inherits(Brush3DAutoGatedTool, _Brush3DHUGatedTool);

  function Brush3DAutoGatedTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Brush3DAutoGatedTool);

    var defaultConfig = {};
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Brush3DAutoGatedTool).call(this, initialConfiguration));
    _this.initialConfiguration = initialConfiguration;
    return _this;
  }
  /**
   * Event handler for MOUSE_DOWN event.
   *
   * @override
   * @event
   * @param {Object} evt - The event.
   */


  _createClass(Brush3DAutoGatedTool, [{
    key: "preMouseDownCallback",
    value: function preMouseDownCallback(evt) {
      this._setCustomGate(evt);

      this._startPainting(evt);

      return true;
    }
    /**
     * _setCustomGate - Gets the minimum and maximum brush values within the image
     * and sets the gate mode to "custom" with these values.
     *
     * @param  {object} evt The cornerstone event.
     * @returns {null}
     */

  }, {
    key: "_setCustomGate",
    value: function _setCustomGate(evt) {
      var eventData = evt.detail;
      var image = eventData.image;
      var rows = image.rows,
          columns = image.columns;
      var _eventData$currentPoi = eventData.currentPoints.image,
          x = _eventData$currentPoi.x,
          y = _eventData$currentPoi.y;
      var radius = brushModule.state.radius;
      var imagePixelData = image.getPixelData();
      var rescaleSlope = image.slope || 1;
      var rescaleIntercept = image.intercept || 0;
      var circle = getCircle(radius, rows, columns, x, y); // Initialise hi and lo as the first pixelValue in the circle.

      var lo = imagePixelData[circle[0][0] + circle[0][1] * rows];
      var hi = lo; // Find the highest and lowest value.

      for (var i = 0; i < circle.length; i++) {
        var pixelValue = imagePixelData[circle[i][0] + circle[i][1] * rows];

        if (pixelValue < lo) {
          lo = pixelValue;
        }

        if (pixelValue > hi) {
          hi = pixelValue;
        }
      }

      lo = lo * rescaleSlope + rescaleIntercept;
      hi = hi * rescaleSlope + rescaleIntercept;
      this.gate = [lo, hi];
    }
    /**
     * _gateCircle - Given an image and a brush circle, gate the circle between
     * the set gate values, and then cleanup the resulting mask using the
     * holeFill and strayRemove properties of the brush module.
     *
     * @param  {object} image   The cornerstone image.
     * @param  {Number[][]} circle  An array of image pixels contained within the brush
     *                        circle.
     * @returns {Number[][]}  An array containing the gated/cleaned pixels to fill.
     */

  }, {
    key: "_gateCircle",
    value: function _gateCircle(image, circle) {
      var rows = image.image;
      var imagePixelData = image.getPixelData();
      var gateValues = this.gate;
      var rescaleSlope = image.slope || 1;
      var rescaleIntercept = image.intercept || 0;
      var gatedCircleArray = [];

      for (var i = 0; i < circle.length; i++) {
        var pixelValue = imagePixelData[circle[i][0] + circle[i][1] * rows];
        pixelValue = pixelValue * rescaleSlope + rescaleIntercept;

        if (pixelValue >= gateValues[0] && pixelValue <= gateValues[1]) {
          gatedCircleArray.push(circle[i]);
        }
      }

      return this._cleanGatedCircle(circle, gatedCircleArray);
    }
  }]);

  return Brush3DAutoGatedTool;
}(_Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_1__["default"]);



/***/ }),

/***/ "./src/tools/Brush3DHUGatedTool.js":
/*!*****************************************!*\
  !*** ./src/tools/Brush3DHUGatedTool.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Brush3DHUGatedTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Brush3DTool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Brush3DTool.js */ "./src/tools/Brush3DTool.js");
/* harmony import */ var _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./n-dimensional-flood-fill.js */ "./src/tools/n-dimensional-flood-fill.js");
/* harmony import */ var _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules.brush;

var _importInternalModule = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["importInternalModule"])('util/brushUtils'),
    getCircle = _importInternalModule.getCircle,
    drawBrushPixels = _importInternalModule.drawBrushPixels;



var Brush3DHUGatedTool =
/*#__PURE__*/
function (_Brush3DTool) {
  _inherits(Brush3DHUGatedTool, _Brush3DTool);

  function Brush3DHUGatedTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Brush3DHUGatedTool);

    var defaultConfig = {};
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Brush3DHUGatedTool).call(this, initialConfiguration));
    _this.initialConfiguration = initialConfiguration;
    return _this;
  }
  /**
   * Event handler for MOUSE_DOWN event.
   *
   * @override
   * @event
   * @param {Object} evt - The event.
   */


  _createClass(Brush3DHUGatedTool, [{
    key: "preMouseDownCallback",
    value: function preMouseDownCallback(evt) {
      this.activeGateRange = brushModule.getters.activeGateRange();

      this._startPainting(evt);

      return true;
    }
    /**
     * Paints the data to the canvas.
     *
     * @protected
     * @param  {Object} evt The data object associated with the event.
     * @returns {void}
     */

  }, {
    key: "_paint",
    value: function _paint(evt) {
      var eventData = evt.detail;
      var element = eventData.element,
          image = eventData.image;
      var rows = image.rows,
          columns = image.columns;
      var _eventData$currentPoi = eventData.currentPoints.image,
          x = _eventData$currentPoi.x,
          y = _eventData$currentPoi.y;

      if (x < 0 || x > columns || y < 0 || y > rows) {
        return;
      }

      var radius = brushModule.state.radius;

      var pointerArray = this._gateCircle(image, getCircle(radius, rows, columns, x, y));

      var _this$paintEventData = this.paintEventData,
          labelmap3D = _this$paintEventData.labelmap3D,
          currentImageIdIndex = _this$paintEventData.currentImageIdIndex,
          activeLabelmapIndex = _this$paintEventData.activeLabelmapIndex,
          shouldErase = _this$paintEventData.shouldErase; // Draw / Erase the active color.

      drawBrushPixels(pointerArray, labelmap3D, currentImageIdIndex, columns, shouldErase);
      cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default.a.triggerEvent(element, cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].LABELMAP_MODIFIED, {
        activeLabelmapIndex: activeLabelmapIndex
      });
      cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default.a.updateImage(evt.detail.element);
    }
    /**
     * _gateCircle - Given an image and a brush circle, gate the circle between
     * the set gate values, and then cleanup the resulting mask using the
     * holeFill and strayRemove properties of the brush module.
     *
     * @param  {object} image   The cornerstone image.
     * @param  {Number[][]} circle  An array of image pixels contained within the brush
     *                        circle.
     * @returns {Number[][]}  An array containing the gated/cleaned pixels to fill.
     */

  }, {
    key: "_gateCircle",
    value: function _gateCircle(image, circle) {
      var rows = image.rows;
      var imagePixelData = image.getPixelData();
      var gateRange = this.activeGateRange;
      var rescaleSlope = image.slope || 1;
      var rescaleIntercept = image.intercept || 0;
      var gatedCircleArray = [];

      for (var i = 0; i < circle.length; i++) {
        var pixelValue = imagePixelData[circle[i][0] + circle[i][1] * rows];
        pixelValue = pixelValue * rescaleSlope + rescaleIntercept;

        if (pixelValue >= gateRange[0] && pixelValue <= gateRange[1]) {
          gatedCircleArray.push(circle[i]);
        }
      }

      return this._cleanGatedCircle(circle, gatedCircleArray);
    }
    /**
     * _getEdgePixels - Returns the indicies of the edge pixels for the circular
     * brush data.
     *
     * @param  {Number[][]} data The squared-circle data where all circle members are
     *                     0, and values outside the circle are -1
     * @returns {Number[][]} An array of positions of the circle edge pixels.
     */

  }, {
    key: "_getEdgePixels",
    value: function _getEdgePixels(data) {
      var edgePixels = [];
      var xSize = data.length;
      var ySize = data[0].length; // first and last row add all of top and bottom which are circle members.

      for (var i = 0; i < data.length; i++) {
        if (data[i][0]) {
          edgePixels.push([i, 0]);
          edgePixels.push([i, ySize - 1]);
        }
      } // all other rows - Find first circle member, and use its position to add
      // The first and last circle member of that row.


      for (var j = 1; j < ySize - 1; j++) {
        for (var _i = 0; _i < data.length; _i++) {
          if (data[_i][j]) {
            edgePixels.push([_i, j]);
            edgePixels.push([xSize - 1 - _i, j]);
            break;
          }
        }
      }

      return edgePixels;
    }
    /**
     * _cleanGatedCircle - Clean the HU gated circle using the holeFill and
     * strayRemove properties of the brush module.
     *
     * @param  {Number[][]} circle     An array of the pixel indicies within the
     *                                 brush circle.
     * @param  {Number[][]} gatedCircleArray An array of the pixel indicies within
     *                                       the gate range.
     * @returns {Number[][]}                  The cleaned array of pixel indicies.
     */

  }, {
    key: "_cleanGatedCircle",
    value: function _cleanGatedCircle(circle, gatedCircleArray) {
      var _this$_getBoundingBox = this._getBoundingBoxOfCircle(circle),
          max = _this$_getBoundingBox.max,
          min = _this$_getBoundingBox.min;

      var xSize = max[0] - min[0] + 1;
      var ySize = max[1] - min[1] + 1;

      var data = this._boxGatedCircle(circle, gatedCircleArray, min, xSize, ySize); // Define our getter for accessing the data structure.


      function getter(x, y) {
        return data[x][y];
      }

      this._floodFillEmptyRegionsFromEdges(data, getter);

      var _this$_findHolesAndRe = this._findHolesAndRegions(circle, data, getter, min),
          holes = _this$_findHolesAndRe.holes,
          regions = _this$_findHolesAndRe.regions;

      var largestRegionArea = this._getAreaOfLargestRegion(regions); // Delete any region outside the `strayRemove` threshold.


      for (var r = 0; r < regions.length; r++) {
        var region = regions[r];

        if (region.length <= brushModule.state.strayRemove / 100.0 * largestRegionArea) {
          for (var p = 0; p < region.length; p++) {
            data[region[p][0]][region[p][1]] = 3;
          }
        }
      } // Fill in any holes smaller than the `holeFill` threshold.


      for (var _r = 0; _r < holes.length; _r++) {
        var hole = holes[_r];

        if (hole.length <= brushModule.state.holeFill / 100.0 * largestRegionArea) {
          for (var _p = 0; _p < hole.length; _p++) {
            data[hole[_p][0]][hole[_p][1]] = 5;
          }
        }
      }

      var filledGatedCircleArray = [];

      for (var i = 0; i < xSize; i++) {
        for (var j = 0; j < ySize; j++) {
          if (data[i][j] === 5) {
            filledGatedCircleArray.push([i + min[0], j + min[1]]);
          }
        }
      }

      return filledGatedCircleArray;
    }
    /**
     * _getBoundingBoxOfCircle - Returns two points defining the extent of the circle.
     *
     * @param  {number[][]} circle  An array of the pixel indicies within the brush circle.
     * @returns {object}        The minimum and maximum of the extent.
     */

  }, {
    key: "_getBoundingBoxOfCircle",
    value: function _getBoundingBoxOfCircle(circle) {
      var max = [circle[0][0], circle[0][1]];
      var min = [circle[0][0], circle[0][1]];

      for (var p = 0; p < circle.length; p++) {
        var _circle$p = _slicedToArray(circle[p], 2),
            i = _circle$p[0],
            j = _circle$p[1];

        if (i > max[0]) {
          max[0] = i;
        } else if (i < min[0]) {
          min[0] = i;
        }

        if (j > max[1]) {
          max[1] = j;
        } else if (j < min[1]) {
          min[1] = j;
        }
      }

      return {
        max: max,
        min: min
      };
    }
    /**
     * _boxGatedCircle - Generates a rectangular dataset from the brush circle
     *                   for efficient flood fill/cleaning.
     *
     * @param  {type} circle           An array of the pixel indicies within the brush circle.
     * @param  {type} gatedCircleArray The circle array with the gate applied.
     * @param  {type} min              The location of the top left pixel of the
     *                                 generated dataset with respect to the
     *                                 underlying image data.
     * @param  {type} xSize            The x size of the generated box.
     * @param  {type} ySize            The y size of the generated box.
     * @returns {number[][]}           The data with pixel [0,0] centered on min,
     *                                 the circle marked with 1 for unoccupied, 2
     *                                 for occupied and 0 for outside of the circle bounds.
     */

  }, {
    key: "_boxGatedCircle",
    value: function _boxGatedCircle(circle, gatedCircleArray, min, xSize, ySize) {
      var data = []; // Fill in square as 0 (out of bounds/ignore).

      for (var i = 0; i < xSize; i++) {
        data[i] = new Uint8ClampedArray(ySize);
      } // fill circle in as 1.


      for (var p = 0; p < circle.length; p++) {
        var _i2 = circle[p][0] - min[0];

        var j = circle[p][1] - min[1];
        data[_i2][j] = 1;
      } // fill gated region as 2.


      for (var _p2 = 0; _p2 < gatedCircleArray.length; _p2++) {
        var _i3 = gatedCircleArray[_p2][0] - min[0];

        var _j = gatedCircleArray[_p2][1] - min[1];

        data[_i3][_j] = 2;
      }

      return data;
    }
    /**
     * _floodFillEmptyRegionsFromEdges - Flood fills empty regions which touch the
     *                                   edge of the circle with the value 3.
     *
     * @param  {number[][]} data The data to flood fill.
     * @param {function} getter The getter function floodFill uses to access array
     *                          elements.
     * @modifies data
     * @returns {null}
     */

  }, {
    key: "_floodFillEmptyRegionsFromEdges",
    value: function _floodFillEmptyRegionsFromEdges(data, getter) {
      var edgePixels = this._getEdgePixels(data);

      for (var p = 0; p < edgePixels.length; p++) {
        var i = edgePixels[p][0];
        var j = edgePixels[p][1];

        if (data[i][j] === 1) {
          var result = _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default()({
            getter: getter,
            seed: [i, j]
          });
          var flooded = result.flooded;

          for (var k = 0; k < flooded.length; k++) {
            data[flooded[k][0]][flooded[k][1]] = 3;
          }
        }
      }
    }
    /**
     * _findHolesAndRegions - Finds all the holes and regions and returns their
     *                        positions within the 2D data set. Sets the value of
     *                        holes and regions to 4 and 5, respectively.
     *
     * @param  {number[][]} circle An array of the pixel indicies within the brush circle.
     * @param  {number[][]} data   The data set.
     * @param  {function}   getter The getter function floodFill uses to access array
     *                       elements.
     * @param  {number[]}   min    The location of the top left pixel of the dataset
     *                       with respect to the underlying image data.
     * @returns {object}    An object containing arrays of the occupation of all
     *                      regions and holes in the dataset.
     */

  }, {
    key: "_findHolesAndRegions",
    value: function _findHolesAndRegions(circle, data, getter, min) {
      var holes = [];
      var regions = []; // Find each hole and paint them 3.
      // Find contiguous regions and paint them 4.

      for (var p = 0; p < circle.length; p++) {
        var i = circle[p][0] - min[0];
        var j = circle[p][1] - min[1];

        if (data[i][j] === 1) {
          var result = _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default()({
            getter: getter,
            seed: [i, j]
          });
          var flooded = result.flooded;

          for (var k = 0; k < flooded.length; k++) {
            data[flooded[k][0]][flooded[k][1]] = 4;
          }

          holes.push(flooded);
        } else if (data[i][j] === 2) {
          var _result = _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default()({
            getter: getter,
            seed: [i, j]
          });

          var _flooded = _result.flooded;

          for (var _k = 0; _k < _flooded.length; _k++) {
            data[_flooded[_k][0]][_flooded[_k][1]] = 5;
          }

          regions.push(_flooded);
        }
      }

      return {
        holes: holes,
        regions: regions
      };
    }
    /**
     * _getAreaOfLargestRegion - Returns the number of pixels in the largest
     *                           region of a list of regions.
     *
     * @param  {number[][][]} regions An array of regions of 2D points.
     * @returns {number}        The area of the largest region in pixels.
     */

  }, {
    key: "_getAreaOfLargestRegion",
    value: function _getAreaOfLargestRegion(regions) {
      var largestRegionArea = 0;

      for (var i = 0; i < regions.length; i++) {
        if (regions[i].length > largestRegionArea) {
          largestRegionArea = regions[i].length;
        }
      }

      return largestRegionArea;
    }
  }]);

  return Brush3DHUGatedTool;
}(_Brush3DTool_js__WEBPACK_IMPORTED_MODULE_2__["default"]);



/***/ }),

/***/ "./src/tools/Brush3DTool.js":
/*!**********************************!*\
  !*** ./src/tools/Brush3DTool.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Brush3DTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/generateBrushMetadata.js */ "./src/util/generateBrushMetadata.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules.brush;

var Brush3DTool =
/*#__PURE__*/
function (_BrushTool) {
  _inherits(Brush3DTool, _BrushTool);

  function Brush3DTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Brush3DTool);

    var defaultConfig = {};
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Brush3DTool).call(this, initialConfiguration));
    _this.initialConfiguration = initialConfiguration;
    return _this;
  }
  /**
   * Initialise painting with baseBrushTool
   *
   * @override @protected
   * @event
   * @param {Object} evt - The event.
   */


  _createClass(Brush3DTool, [{
    key: "_startPainting",
    value: function _startPainting(evt) {
      var eventData = evt.detail;
      var element = eventData.element;

      var _brushModule$getters$ = brushModule.getters.getAndCacheLabelmap2D(element),
          labelmap3D = _brushModule$getters$.labelmap3D,
          currentImageIdIndex = _brushModule$getters$.currentImageIdIndex,
          activeLabelmapIndex = _brushModule$getters$.activeLabelmapIndex;

      var shouldErase = this._isCtrlDown(eventData) || this.configuration.alwaysEraseOnClick;
      this.paintEventData = {
        labelmap3D: labelmap3D,
        currentImageIdIndex: currentImageIdIndex,
        activeLabelmapIndex: activeLabelmapIndex,
        shouldErase: shouldErase
      };
      var segmentIndex = labelmap3D.activeSegmentIndex;
      var metadata = labelmap3D.metadata[segmentIndex];

      if (!metadata) {
        metadata = Object(_util_generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__["default"])('Unnamed Segment');
        brushModule.setters.metadata(element, activeLabelmapIndex, segmentIndex, metadata);
      } // Metadata assigned, start drawing.


      if (eventData.currentPoints) {
        this._paint(evt);
      }

      this._drawing = true;

      this._startListeningForMouseUp(element);
    }
  }]);

  return Brush3DTool;
}(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["BrushTool"]);



/***/ }),

/***/ "./src/tools/FreehandRoi3DSculptorTool.js":
/*!************************************************!*\
  !*** ./src/tools/FreehandRoi3DSculptorTool.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FreehandRoi3DSculptorTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/freehandInterpolate/interpolate.js */ "./src/util/freehandInterpolate/interpolate.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }




var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules,
    state = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].state;

var FreehandRoi3DSculptorTool =
/*#__PURE__*/
function (_FreehandRoiSculptorT) {
  _inherits(FreehandRoi3DSculptorTool, _FreehandRoiSculptorT);

  function FreehandRoi3DSculptorTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FreehandRoi3DSculptorTool);

    var defaultConfig = {
      configuration: getDefaultFreehandSculpterMouseToolConfiguration()
    };
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(FreehandRoi3DSculptorTool).call(this, initialConfiguration)); // Create bound functions for private event loop.

    _this.activeMouseUpCallback = _this.activeMouseUpCallback.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Select the freehand tool to be edited. Don't allow selecting of locked
   * ROIContours.
   *
   * @private
   * @param {Object} eventData - Data object associated with the event.
   */


  _createClass(FreehandRoi3DSculptorTool, [{
    key: "_selectFreehandTool",
    value: function _selectFreehandTool(eventData) {
      var config = this.configuration;
      var element = eventData.element;

      var closestToolIndex = this._getClosestFreehandToolOnElement(element, eventData);

      if (closestToolIndex === undefined) {
        return;
      }

      var toolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, this.referencedToolName);
      var toolData = toolState.data[closestToolIndex];
      var isLocked = toolData.referencedStructureSet.isLocked;

      if (isLocked) {
        return;
      }

      config.hoverColor = toolData.referencedROIContour.color;
      config.currentTool = closestToolIndex;
    }
    /**
     * Event handler for MOUSE_UP during the active loop.
     *
     * @param {Object} evt - The event.
     */

  }, {
    key: "_activeEnd",
    value: function _activeEnd(evt) {
      var eventData = evt.detail;
      var element = eventData.element;
      var config = this.configuration;
      this._active = false;
      state.isMultiPartToolActive = false;

      this._getMouseLocation(eventData);

      this._invalidateToolData(eventData);

      config.mouseUpRender = true;

      this._deactivateSculpt(element);

      var toolData = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, this.referencedToolName);
      var data = toolData.data[config.currentTool];

      if (modules.freehand3D.getters.interpolate()) {
        Object(_util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_2__["default"])(data);
      } // Update the image


      Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_1__["updateImage"])(eventData.element);
      preventPropagation(evt);
    }
    /**
     * Invalidate the freehand tool data, tirggering re-calculation of statistics.
     *
     * @private @override
     * @param {Object} eventData - Data object associated with the event.
     */

  }, {
    key: "_invalidateToolData",
    value: function _invalidateToolData(eventData) {
      var config = this.configuration;
      var element = eventData.element;
      var toolData = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, this.referencedToolName);
      var data = toolData.data[config.currentTool];
      data.invalidated = true;
      data.interpolated = false;
    }
  }]);

  return FreehandRoi3DSculptorTool;
}(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["FreehandRoiSculptorTool"]);
/**
 * Returns the default freehandSculpterMouseTool configuration.
 *
 * @return {Object} The default configuration object.
 */




function getDefaultFreehandSculpterMouseToolConfiguration() {
  return {
    mouseLocation: {
      handles: {
        start: {
          highlight: true,
          active: true
        }
      }
    },
    minSpacing: 1,
    currentTool: null,
    dragColor: cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["toolColors"].getActiveColor(),
    hoverColor: cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["toolColors"].getToolColor(),

    /* --- Hover options ---
    showCursorOnHover:        Shows a preview of the sculpting radius on hover.
    limitRadiusOutsideRegion: Limit max toolsize outside the subject ROI based
                              on subject ROI area.
    hoverCursorFadeAlpha:     Alpha to fade to when tool very distant from
                              subject ROI.
    hoverCursorFadeDistance:  Distance from ROI in which to fade the hoverCursor
                              (in units of radii).
    */
    showCursorOnHover: true,
    limitRadiusOutsideRegion: true,
    hoverCursorFadeAlpha: 0.5,
    hoverCursorFadeDistance: 1.2
  };
}

function preventPropagation(evt) {
  evt.stopImmediatePropagation();
  evt.stopPropagation();
  evt.preventDefault();
}

/***/ }),

/***/ "./src/tools/FreehandRoi3DTool.js":
/*!****************************************!*\
  !*** ./src/tools/FreehandRoi3DTool.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FreehandRoi3DTool; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-math */ "cornerstone-math");
/* harmony import */ var cornerstone_math__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_math__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _util_generateUID_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/generateUID.js */ "./src/util/generateUID.js");
/* harmony import */ var _util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/freehandInterpolate/interpolate.js */ "./src/util/freehandInterpolate/interpolate.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }






 // Cornerstone 3rd party dev kit imports

var _importInternalModule = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/freehandUtils'),
    insertOrDelete = _importInternalModule.insertOrDelete,
    freehandArea = _importInternalModule.freehandArea,
    calculateFreehandStatistics = _importInternalModule.calculateFreehandStatistics;

var draw = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/draw');
var drawJoinedLines = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/drawJoinedLines');
var drawHandles = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/drawHandles');
var drawLinkedTextBox = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/drawLinkedTextBox');
var moveHandleNearImagePoint = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('manipulators/moveHandleNearImagePoint');
var getNewContext = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/getNewContext');
var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["store"].modules;
var numbersWithCommas = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/numbersWithCommas');
var pointInsideBoundingBox = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/pointInsideBoundingBox');
var calculateSUV = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/calculateSUV');

var FreehandRoi3DTool =
/*#__PURE__*/
function (_FreehandRoiTool) {
  _inherits(FreehandRoi3DTool, _FreehandRoiTool);

  function FreehandRoi3DTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FreehandRoi3DTool);

    var defaultConfig = {
      configuration: defaultFreehandConfiguration()
    };
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(FreehandRoi3DTool).call(this, initialConfiguration));
    _this.configuration.alwaysShowHandles = false;
    _this._freehand3DStore = modules.freehand3D;
    _this._onMeasurementRemoved = _this._onMeasurementRemoved.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._drawingMouseUpCallback = _this._drawingMouseUpCallback.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Create the measurement data for this tool.
   * @override @public @method
   *
   * @param {object} eventData
   * @returns {object} measurementData
   */


  _createClass(FreehandRoi3DTool, [{
    key: "createNewMeasurement",
    value: function createNewMeasurement(eventData) {
      var freehand3DStore = this._freehand3DStore;
      var goodEventData = eventData && eventData.currentPoints && eventData.currentPoints.image;

      if (!goodEventData) {
        console.error("required eventData not supplied to tool ".concat(this.name, "'s createNewMeasurement"));
        return;
      }

      var enabledElement = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["getEnabledElement"])(this.element);
      var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enabledElement);
      var referencedStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, 'DEFAULT');
      var referencedROIContour = freehand3DStore.getters.activeROIContour(seriesInstanceUid);
      var measurementData = {
        uid: Object(_util_generateUID_js__WEBPACK_IMPORTED_MODULE_3__["default"])(),
        seriesInstanceUid: seriesInstanceUid,
        structureSetUid: 'DEFAULT',
        ROIContourUid: referencedROIContour.uid,
        referencedROIContour: referencedROIContour,
        referencedStructureSet: referencedStructureSet,
        visible: true,
        active: true,
        invalidated: true,
        handles: {
          points: []
        }
      };
      measurementData.handles.textBox = {
        active: false,
        hasMoved: false,
        movesIndependently: false,
        drawnIndependently: true,
        allowedOutsideImage: true,
        hasBoundingBox: true
      };
      freehand3DStore.setters.incrementPolygonCount(seriesInstanceUid, 'DEFAULT', referencedROIContour.uid);
      return measurementData;
    }
    /**
     * Event handler for called by the mouseDownActivate event, if tool is active and
     * the event is not caught by mouseDownCallback.
     * @override
     *
     * @event
     * @param {Object} evt - The event.
     */

  }, {
    key: "addNewMeasurement",
    value: function addNewMeasurement(evt, interactionType) {
      var eventData = evt.detail; // Create metadata if it doesn't exist.

      this._addAndSetVolumeIfNoVolumes();

      this._drawing = true;

      this._startDrawing(evt);

      this._addPoint(eventData);

      preventPropagation(evt);
    }
  }, {
    key: "_addAndSetVolumeIfNoVolumes",
    value: function _addAndSetVolumeIfNoVolumes() {
      var enabledElement = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["getEnabledElement"])(this.element);
      var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enabledElement);
      var freehand3DStore = modules.freehand3D;
      var series = freehand3DStore.getters.series(seriesInstanceUid);

      if (!series) {
        freehand3DStore.setters.series(seriesInstanceUid);
        series = freehand3DStore.getters.series(seriesInstanceUid);
      }

      var activeROIContour = freehand3DStore.getters.activeROIContour(seriesInstanceUid);

      if (!activeROIContour) {
        freehand3DStore.setters.ROIContourAndSetIndexActive(seriesInstanceUid, 'DEFAULT', 'Unnamed Lesion');
      }
    }
    /**
     * Returns a handle of a particular tool if it is close to the mouse cursor
     *
     * @private
     * @param {Object} element - The element on which the roi is being drawn.
     * @param {Object} data      Data object associated with the tool.
     * @param {*} coords
     * @returns {Number|Object|Boolean}
     */

  }, {
    key: "_pointNearHandle",
    value: function _pointNearHandle(element, data, coords) {
      var freehand3DStore = this._freehand3DStore;

      if (!data.handles || data.handles.points === undefined) {
        return;
      }

      if (data.visible === false) {
        return;
      }

      var points = data.handles.points;

      for (var i = 0; i < points.length; i++) {
        var handleCanvas = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["pixelToCanvas"])(element, points[i]);

        if (cornerstone_math__WEBPACK_IMPORTED_MODULE_1__["point"].distance(handleCanvas, coords) < 6) {
          return i;
        }
      } // Check to see if mouse in bounding box of textbox


      if (freehand3DStore.state.displayStats && data.handles.textBox) {
        if (pointInsideBoundingBox(data.handles.textBox, coords)) {
          return data.handles.textBox;
        }
      }
    }
    /**
     * Active mouse down callback that takes priority if the user is attempting
     * to insert or delete a handle with ctrl + click.
     *
     * @param {Object} evt - The event.
     */

  }, {
    key: "preMouseDownCallback",
    value: function preMouseDownCallback(evt) {
      var eventData = evt.detail;
      var toolData = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["getToolState"])(evt.currentTarget, this.name);

      if (!toolData) {
        return false;
      }

      var nearby = this._pointNearHandleAllTools(eventData);

      var freehand3DStore = this._freehand3DStore;

      if (eventData.event.ctrlKey) {
        if (nearby !== undefined && nearby.handleNearby.hasBoundingBox) {// Ctrl + clicked textBox, do nothing but still consume event.
        } else {
          insertOrDelete.call(this, evt, nearby);
        }

        preventPropagation(evt);
        return true;
      }

      if (!nearby) {
        return;
      }

      var data = toolData.data[nearby.toolIndex]; // Check if locked and return

      var structureSet = freehand3DStore.getters.structureSet(data.seriesInstanceUid, data.structureSetUid);

      if (structureSet.isLocked) {
        return false;
      }

      return false;
    }
    /**
     * Custom callback for when a handle is selected.
     *
     * @param  {Object} evt
     * @param  {Object} handle The selected handle.
     */

  }, {
    key: "handleSelectedCallback",
    value: function handleSelectedCallback(evt, data, handle) {
      var interactionType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'mouse';
      var freehand3DStore = this._freehand3DStore;
      var eventData = evt.detail;
      var element = eventData.element;

      if (eventData.event.metaKey) {
        this._switchROIContour(evt, data);

        preventPropagation(evt);
        return;
      }

      if (handle.hasBoundingBox && freehand3DStore.state.displayStats) {
        // Use default move handler - Can move textbox of locked ROIContours.
        moveHandleNearImagePoint(evt, this, data, handle, interactionType);
        return;
      } // Check if locked and return


      var structureSet = freehand3DStore.getters.structureSet(data.seriesInstanceUid, data.structureSetUid);

      if (structureSet.isLocked) {
        return false;
      }

      var config = this.configuration;
      config.dragOrigin = {
        x: handle.x,
        y: handle.y
      }; // Have to do this to get tool index.

      var nearby = this._pointNearHandleAllTools(eventData);

      if (!nearby) {
        return;
      }

      var handleNearby = nearby.handleNearby;
      var toolIndex = nearby.toolIndex;
      this._modifying = true;
      config.currentHandle = handleNearby;
      config.currentTool = toolIndex;

      this._activateModify(element);

      preventPropagation(evt);
    }
  }, {
    key: "_switchROIContour",
    value: function _switchROIContour(evt, data) {
      var freehand3DStore = this._freehand3DStore;
      freehand3DStore.setters.activeROIContour(data.seriesInstanceUid, data.structureSetUid, data.ROIContourUid);
      Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["updateImage"])(evt.detail.element);
    }
    /**
     *
     *
     * @param {*} evt
     * @returns
     */

  }, {
    key: "renderToolData",
    value: function renderToolData(evt) {
      var _this2 = this;

      var eventData = evt.detail;
      var freehand3DStore = this._freehand3DStore; // If we have no toolState for this element, return immediately as there is nothing to do

      var toolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["getToolState"])(evt.currentTarget, this.name);

      if (!toolState) {
        return;
      }

      var image = eventData.image;
      var element = eventData.element;
      var config = this.configuration;
      var seriesModule = cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["metaData"].get('generalSeriesModule', image.imageId);
      var modality;

      if (seriesModule) {
        modality = seriesModule.modality;
      } // We have tool data for this element - iterate over each one and draw it


      var context = getNewContext(eventData.canvasContext.canvas);
      var lineWidth = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolStyle"].getToolWidth();

      var _loop = function _loop(i) {
        var data = toolState.data[i];
        var structureSet = data.referencedStructureSet;
        var ROIContour = data.referencedROIContour;

        if (data.visible === false || !structureSet.visible) {
          return "continue";
        }

        var isROIActive = freehand3DStore.getters.ROIContourIndex(data.seriesInstanceUid, data.structureSetUid, data.ROIContourUid) === freehand3DStore.getters.activeROIContourIndex(data.seriesInstanceUid);
        draw(context, function (context) {
          var color = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolColors"].getColorIfActive(data);
          var fillColor;
          var points = data.handles.points;

          if (data.active && !structureSet.isLocked) {
            if (data.handles.invalidHandlePlacement) {
              color = config.invalidColor;
              fillColor = config.invalidColor;
            } else {
              color = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolColors"].getColorIfActive(data);
              fillColor = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolColors"].getFillColor();
            }
          } else {
            color = ROIContour.color;
            fillColor = ROIContour.color;
          }

          if (isROIActive && data.interpolated) {
            context.globalAlpha = config.interpolatedAlpha;
          }

          if (data.handles.points.length) {
            for (var j = 0; j < points.length; j++) {
              var lines = _toConsumableArray(points[j].lines);

              if (j === points.length - 1 && !data.polyBoundingBox) {
                // If it's still being actively drawn, keep the last line to
                // The mouse location
                lines.push(config.mouseLocation.handles.start);
              }

              drawJoinedLines(context, eventData.element, data.handles.points[j], lines, {
                color: color
              });
            }
          }

          context.globalAlpha = 1.0; // Draw handles

          var options = {
            color: color,
            fill: fillColor
          };

          if (isROIActive && data.interpolated) {
            // Render dotted line
            options.handleRadius = config.interpolatedHandleRadius;
            drawHandles(context, eventData, points, options);
          } else if (config.alwaysShowHandles || data.active && data.polyBoundingBox) {
            // Render all handles
            options.handleRadius = config.activeHandleRadius;
            drawHandles(context, eventData, points, options);
          }

          if (data.canComplete) {
            // Draw large handle at the origin if can complete drawing
            options.handleRadius = config.completeHandleRadius;
            drawHandles(context, eventData, [points[0]], options);
          }

          if (data.active && !data.polyBoundingBox) {
            // Draw handle at origin and at mouse if actively drawing
            options.handleRadius = config.activeHandleRadius;
            drawHandles(context, eventData, config.mouseLocation.handles, options);
            drawHandles(context, eventData, [points[0]], options);
          } // Define variables for the area and mean/standard deviation


          var area, meanStdDev, meanStdDevSUV; // Perform a check to see if the tool has been invalidated. This is to prevent
          // Unnecessary re-calculation of the area, mean, and standard deviation if the
          // Image is re-rendered but the tool has not moved (e.g. during a zoom)

          if (data.invalidated === false) {
            // If the data is not invalidated, retrieve it from the toolState
            meanStdDev = data.meanStdDev;
            meanStdDevSUV = data.meanStdDevSUV;
            area = data.area;
          } else if (!data.active) {
            // If the data has been invalidated, and the tool is not currently active,
            // We need to calculate it again.
            // Retrieve the bounds of the ROI in image coordinates
            var bounds = {
              left: points[0].x,
              right: points[0].x,
              bottom: points[0].y,
              top: points[0].x
            };

            for (var _i = 0; _i < points.length; _i++) {
              bounds.left = Math.min(bounds.left, points[_i].x);
              bounds.right = Math.max(bounds.right, points[_i].x);
              bounds.bottom = Math.min(bounds.bottom, points[_i].y);
              bounds.top = Math.max(bounds.top, points[_i].y);
            }

            var polyBoundingBox = {
              left: bounds.left,
              top: bounds.bottom,
              width: Math.abs(bounds.right - bounds.left),
              height: Math.abs(bounds.top - bounds.bottom)
            }; // Store the bounding box information for the text box

            data.polyBoundingBox = polyBoundingBox; // First, make sure this is not a color image, since no mean / standard
            // Deviation will be calculated for color images.

            if (!image.color) {
              // Retrieve the array of pixels that the ROI bounds cover
              var pixels = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["getPixels"])(element, polyBoundingBox.left, polyBoundingBox.top, polyBoundingBox.width, polyBoundingBox.height); // Calculate the mean & standard deviation from the pixels and the object shape

              meanStdDev = calculateFreehandStatistics.call(_this2, pixels, polyBoundingBox, points);

              if (modality === 'PT') {
                // If the image is from a PET scan, use the DICOM tags to
                // Calculate the SUV from the mean and standard deviation.
                // Note that because we are using modality pixel values from getPixels, and
                // The calculateSUV routine also rescales to modality pixel values, we are first
                // Returning the values to storedPixel values before calcuating SUV with them.
                // TODO: Clean this up? Should we add an option to not scale in calculateSUV?
                meanStdDevSUV = {
                  mean: calculateSUV(image, (meanStdDev.mean - image.intercept) / image.slope),
                  stdDev: calculateSUV(image, (meanStdDev.stdDev - image.intercept) / image.slope)
                };
              } // If the mean and standard deviation values are sane, store them for later retrieval


              if (meanStdDev && !isNaN(meanStdDev.mean)) {
                data.meanStdDev = meanStdDev;
                data.meanStdDevSUV = meanStdDevSUV;
              }
            } // Retrieve the pixel spacing values, and if they are not
            // Real non-zero values, set them to 1


            var columnPixelSpacing = image.columnPixelSpacing || 1;
            var rowPixelSpacing = image.rowPixelSpacing || 1;
            var scaling = columnPixelSpacing * rowPixelSpacing;
            area = freehandArea(points, scaling); // If the area value is sane, store it for later retrieval

            if (!isNaN(area)) {
              data.area = area;
            } // Set the invalidated flag to false so that this data won't automatically be recalculated


            data.invalidated = false;
          } // Only render text if polygon ROI has been completed, and is active,
          // Or config is set to show the textBox all the time


          if (data.polyBoundingBox && (freehand3DStore.state.displayStats || data.active)) {
            // If the textbox has not been moved by the user, it should be displayed on the right-most
            // Side of the tool.
            if (!data.handles.textBox.hasMoved) {
              // Find the rightmost side of the polyBoundingBox at its vertical center, and place the textbox here
              // Note that this calculates it in image coordinates
              data.handles.textBox.x = data.polyBoundingBox.left + data.polyBoundingBox.width;
              data.handles.textBox.y = data.polyBoundingBox.top + data.polyBoundingBox.height / 2;
            }

            var text = textBoxText.call(_this2, data);
            drawLinkedTextBox(context, element, data.handles.textBox, text, points, textBoxAnchorPoints, color, lineWidth, 0, true);
          }
        });
      };

      for (var i = 0; i < toolState.data.length; i++) {
        var _ret = _loop(i);

        if (_ret === "continue") continue;
      }

      function textBoxText(data) {
        var ROIContour = data.referencedROIContour;
        var structureSet = data.referencedStructureSet;
        var meanStdDev = data.meanStdDev,
            meanStdDevSUV = data.meanStdDevSUV,
            area = data.area; // Define an array to store the rows of text for the textbox

        var textLines = [];
        textLines.push(ROIContour.name);

        if (structureSet.name === 'DEFAULT') {
          textLines.push('Working ROI Collection');
        } else {
          textLines.push(structureSet.name);
        } // If the mean and standard deviation values are present, display them


        if (meanStdDev && meanStdDev.mean !== undefined) {
          // If the modality is CT, add HU to denote Hounsfield Units
          var moSuffix = '';

          if (modality === 'CT') {
            moSuffix = ' HU';
          } // Create a line of text to display the mean and any units that were specified (i.e. HU)


          var meanText = "Mean: ".concat(numbersWithCommas(meanStdDev.mean.toFixed(2))).concat(moSuffix); // Create a line of text to display the standard deviation and any units that were specified (i.e. HU)

          var stdDevText = "StdDev: ".concat(numbersWithCommas(meanStdDev.stdDev.toFixed(2))).concat(moSuffix); // If this image has SUV values to display, concatenate them to the text line

          if (meanStdDevSUV && meanStdDevSUV.mean !== undefined) {
            var SUVtext = ' SUV: ';
            meanText += SUVtext + numbersWithCommas(meanStdDevSUV.mean.toFixed(2));
            stdDevText += SUVtext + numbersWithCommas(meanStdDevSUV.stdDev.toFixed(2));
          } // Add these text lines to the array to be displayed in the textbox


          textLines.push(meanText);
          textLines.push(stdDevText);
        } // If the area is a sane value, display it


        if (area) {
          // Determine the area suffix based on the pixel spacing in the image.
          // If pixel spacing is present, use millimeters. Otherwise, use pixels.
          // This uses Char code 178 for a superscript 2
          var suffix = " mm".concat(String.fromCharCode(178));

          if (!image.rowPixelSpacing || !image.columnPixelSpacing) {
            suffix = " pixels".concat(String.fromCharCode(178));
          } // Create a line of text to display the area and its units


          var areaText = "Area: ".concat(numbersWithCommas(area.toFixed(2))).concat(suffix); // Add this text line to the array to be displayed in the textbox

          textLines.push(areaText);
        }

        textLines.push("".concat(ROIContour.polygonCount, " contours"));
        return textLines;
      }

      function textBoxAnchorPoints(points) {
        return points;
      }
    }
    /**
     * Ends the active drawing loop and completes the polygon.
     *
     * @private
     * @param {Object} element - The element on which the roi is being drawn.
     * @param {Object} handleNearby - the handle nearest to the mouse cursor.
     */

  }, {
    key: "_endDrawing",
    value: function _endDrawing(element, handleNearby) {
      var toolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["getToolState"])(element, this.name);
      var config = this.configuration;
      var data = toolState.data[config.currentTool];
      var points = data.handles.points;
      data.active = false;
      data.highlight = false;
      data.handles.invalidHandlePlacement = false; // Connect the end handle to the origin handle

      if (handleNearby !== undefined) {
        points[config.currentHandle - 1].lines.push(points[0]);
      }

      if (this._modifying) {
        this._modifying = false;
        data.invalidated = true;
        data.interpolated = false;
      } // Reset the current handle


      config.currentHandle = 0;
      config.currentTool = -1;
      data.canComplete = false;

      if (this._drawing) {
        this._drawing = false;

        this._deactivateDraw(element);
      }

      if (modules.freehand3D.state.interpolate) {
        Object(_util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_4__["default"])(data, element);
      }

      Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["updateImage"])(element);
    }
    /**
     * Custom callback for when toolData is deleted.
     *
     * @param  {Object} evt
     */

  }, {
    key: "_onMeasurementRemoved",
    value: function _onMeasurementRemoved(evt) {
      var eventData = evt.detail;

      if (eventData.toolType !== this.name) {
        return;
      }

      var measurementData = eventData.measurementData;

      this._freehand3DStore.setters.decrementPolygonCount(measurementData.seriesInstanceUid, measurementData.structureSetUid, measurementData.ROIContourUid);
    }
  }, {
    key: "passiveCallback",
    value: function passiveCallback(element) {
      this._closeToolIfDrawing(element);

      this._addMeasurementRemovedListener(element);
    }
  }, {
    key: "enabledCallback",
    value: function enabledCallback(element) {
      this._closeToolIfDrawing(element);

      this._addMeasurementRemovedListener(element);
    }
  }, {
    key: "activeCallback",
    value: function activeCallback(element) {
      this._addMeasurementRemovedListener(element);
    }
  }, {
    key: "disabledCallback",
    value: function disabledCallback(element) {
      this._closeToolIfDrawing(element);

      element.removeEventListener(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].MEASUREMENT_REMOVED, this._onMeasurementRemoved);
    }
  }, {
    key: "_addMeasurementRemovedListener",
    value: function _addMeasurementRemovedListener(element) {
      element.removeEventListener(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].MEASUREMENT_REMOVED, this._onMeasurementRemoved);
      element.addEventListener(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].MEASUREMENT_REMOVED, this._onMeasurementRemoved);
    }
  }]);

  return FreehandRoi3DTool;
}(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["FreehandRoiTool"]);



function defaultFreehandConfiguration() {
  return {
    mouseLocation: {
      handles: {
        start: {
          highlight: true,
          active: true
        }
      }
    },
    spacing: 1,
    interpolatedHandleRadius: 0.5,
    interpolatedAlpha: 0.5,
    activeHandleRadius: 3,
    completeHandleRadius: 6,
    completeHandleRadiusTouch: 28,
    alwaysShowHandles: false,
    invalidColor: 'crimson',
    currentHandle: 0,
    currentTool: -1
  };
}

function preventPropagation(evt) {
  evt.stopImmediatePropagation();
  evt.stopPropagation();
  evt.preventDefault();
}

/***/ }),

/***/ "./src/tools/n-dimensional-flood-fill.js":
/*!***********************************************!*\
  !*** ./src/tools/n-dimensional-flood-fill.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tuzz/n-dimensional-flood-fill

module.exports = function (options) {
  var getter, seed, onFlood, onBoundary, equals, diagonals, startNode, permutations, stack, flooded, visits, bounds;

  var initialize = function initialize() {
    getter = options.getter;
    seed = options.seed;
    onFlood = options.onFlood || noop;
    onBoundary = options.onBoundary || noop;
    equals = options.equals || defaultEquals;
    diagonals = options.diagonals || false;
    startNode = get(seed);
    permutations = prunedPermutations();
    stack = [];
    flooded = [];
    visits = {};
    bounds = {};
  };

  var main = function main() {
    stack.push({
      currentArgs: seed
    });

    while (stack.length > 0) {
      flood(stack.pop());
    }

    return {
      flooded: flooded,
      boundaries: boundaries()
    };
  };

  var flood = function flood(job) {
    var getArgs = job.currentArgs;
    var preletgs = job.previousArgs;

    if (visited(getArgs)) {
      return;
    }

    markAsVisited(getArgs);

    if (member(getArgs)) {
      markAsFlooded(getArgs);
      pushAdjacent(getArgs);
    } else {
      markAsBoundary(preletgs);
    }
  };

  var visited = function visited(key) {
    return visits[key] === true;
  };

  var markAsVisited = function markAsVisited(key) {
    visits[key] = true;
  };

  var member = function member(getArgs) {
    var node = safely(get, [getArgs]);
    return safely(equals, [node, startNode]);
  };

  var markAsFlooded = function markAsFlooded(getArgs) {
    flooded.push(getArgs);
    onFlood.apply(undefined, getArgs);
  };

  var markAsBoundary = function markAsBoundary(preletgs) {
    bounds[preletgs] = preletgs;
    onBoundary.apply(undefined, preletgs);
  };

  var pushAdjacent = function pushAdjacent(getArgs) {
    for (var i = 0; i < permutations.length; i += 1) {
      var perm = permutations[i];
      var nextArgs = getArgs.slice(0);

      for (var j = 0; j < getArgs.length; j += 1) {
        nextArgs[j] += perm[j];
      }

      stack.push({
        currentArgs: nextArgs,
        previousArgs: getArgs
      });
    }
  };

  var get = function get(getArgs) {
    return getter.apply(undefined, getArgs);
  };

  var safely = function safely(f, args) {
    try {
      return f.apply(undefined, args);
    } catch (error) {}
  };

  var noop = function noop() {};

  var defaultEquals = function defaultEquals(a, b) {
    return a === b;
  };

  var prunedPermutations = function prunedPermutations() {
    var permutations = permute(seed.length);
    return permutations.filter(function (perm) {
      var count = countNonZeroes(perm);
      return count !== 0 && (count === 1 || diagonals);
    });
  };

  var permute = function permute(length) {
    var perms = [];

    var permutation = function permutation(string) {
      return string.split('').map(function (c) {
        return parseInt(c, 10) - 1;
      });
    };

    for (var i = 0; i < Math.pow(3, length); i += 1) {
      var string = lpad(i.toString(3), '0', length);
      perms.push(permutation(string));
    }

    return perms;
  };

  var lpad = function lpad(string, character, length) {
    var array = new Array(length + 1);
    var pad = array.join(character);
    return (pad + string).slice(-length);
  };

  var countNonZeroes = function countNonZeroes(array) {
    var count = 0;

    for (var i = 0; i < array.length; i += 1) {
      if (array[i] !== 0) {
        count += 1;
      }
    }

    return count;
  };

  var boundaries = function boundaries() {
    var array = [];

    for (var key in bounds) {
      if (bounds.hasOwnProperty(key)) {
        array.unshift(bounds[key]);
      }
    }

    return array;
  };

  initialize();
  return main();
};

/***/ }),

/***/ "./src/util/brushMetadataIO.js":
/*!*************************************!*\
  !*** ./src/util/brushMetadataIO.js ***!
  \*************************************/
/*! exports provided: newSegmentInput, editSegmentInput, newSegment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newSegmentInput", function() { return newSegmentInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editSegmentInput", function() { return editSegmentInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newSegment", function() { return newSegment; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateBrushMetadata.js */ "./src/util/generateBrushMetadata.js");


var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules.brush;
function newSegmentInput(segIndex, metadata) {
  brushMetdataInput(segIndex, metadata, segmentInputCallback);
}
function editSegmentInput(segIndex, metadata) {
  brushMetdataInput(segIndex, metadata, segmentInputCallback);
}
function newSegment(enabledElement) {
  if (!enabledElement) {
    return [];
  }

  var activeElement = enabledElement.element;
  var segmentMetadata = brushModule.getters.metadata(activeElement);

  if (!Array.isArray(segmentMetadata)) {
    var _brushModule$getters$ = brushModule.getters.getAndCacheLabelmap2D(activeElement),
        labelmap3D = _brushModule$getters$.labelmap3D;

    segmentMetadata = labelmap3D.metadata;
  }

  var colormap = brushModule.getters.activeCornerstoneColorMap(activeElement);
  var numberOfColors = colormap.getNumberOfColors();

  for (var i = 1; i < numberOfColors; i++) {
    if (!segmentMetadata[i]) {
      newSegmentInput(i);
      break;
    }
  }
}

function segmentInputCallback(data) {
  if (!data) {
    return;
  }

  var label = data.label,
      categoryUID = data.categoryUID,
      typeUID = data.typeUID,
      modifierUID = data.modifierUID,
      segIndex = data.segIndex,
      element = data.element;
  var metadata = Object(_generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__["default"])(label, categoryUID, typeUID, modifierUID); // TODO -> support for multiple labelmaps.

  brushModule.setters.metadata(element, 0, segIndex, metadata);
  brushModule.setters.activeSegmentIndex(element, segIndex);
}
/**
 * Opens the brushMetadata dialog.
 *
 */
// TODO -> Need to make this into a react-modal?


function brushMetdataInput(segIndex, metadata, callback) {
  console.log('TODO: Remake brushMetadata input menu!');
  /*
  const brushMetadataDialog = document.getElementById('brushMetadataDialog');
  const dialogData = Blaze.getData(brushMetadataDialog);
   dialogData.brushMetadataDialogSegIndex.set(segIndex);
  dialogData.brushMetadataDialogMetadata.set(metadata);
  dialogData.brushMetadataDialogCallback.set(callback);
   brushMetadataDialog.showModal();
  */
}

/***/ }),

/***/ "./src/util/classes/Polygon.js":
/*!*************************************!*\
  !*** ./src/util/classes/Polygon.js ***!
  \*************************************/
/*! exports provided: Polygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Polygon", function() { return Polygon; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
var Polygon =
/*#__PURE__*/
function () {
  function Polygon(points, sopInstanceUid, seriesInstanceUid, structureSetUid, ROIContourUid, polygonUid, frameNumber, interpolated) {
    _classCallCheck(this, Polygon);

    this._polyPoints = this._deepCopyPoints(points);
    this._sopInstanceUid = sopInstanceUid;
    this._seriesInstanceUid = seriesInstanceUid;
    this._structureSetUid = structureSetUid;
    this._ROIContourUid = ROIContourUid;
    this._polygonUid = polygonUid;
    this._frameNumber = frameNumber;
    this._interpolated = interpolated;
  }

  _createClass(Polygon, [{
    key: "_deepCopyPoints",
    value: function _deepCopyPoints(points) {
      // Creates a deep copy of the points array
      var polyPoints = [];
      var isZ = points[0].z !== undefined;

      for (var i = 0; i < points.length; i++) {
        polyPoints.push({
          x: points[i].x,
          y: points[i].y
        });

        if (isZ) {
          polyPoints[i].z = points[i].z;
        }
      }

      return polyPoints;
    }
  }, {
    key: "getFreehandToolData",
    value: function getFreehandToolData(importType) {
      var seriesInstanceUid = this._seriesInstanceUid;
      var structureSetUid = this._structureSetUid;
      var ROIContourUid = this._ROIContourUid;
      var freehand3DStore = modules.freehand3D;
      var referencedROIContour = freehand3DStore.getters.ROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
      var referencedStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, structureSetUid);
      var data = {
        uid: this._polygonUid,
        seriesInstanceUid: seriesInstanceUid,
        structureSetUid: structureSetUid,
        ROIContourUid: ROIContourUid,
        referencedROIContour: referencedROIContour,
        referencedStructureSet: referencedStructureSet,
        visible: true,
        active: false,
        invalidated: true,
        handles: {
          points: []
        }
      };

      if (this._sopInstanceUid) {
        data.sopInstanceUID = this._sopInstanceUid;
      }

      if (this._interpolated) {
        data.interpolated = true;
      }

      this._generatePoints(data.handles.points);

      data.handles.textBox = {
        active: false,
        hasMoved: false,
        movesIndependently: false,
        drawnIndependently: true,
        allowedOutsideImage: true,
        hasBoundingBox: true
      };
      data.polyBoundingBox = {};
      data.toBeScaled = importType;
      return data;
    }
  }, {
    key: "_generatePoints",
    value: function _generatePoints(points) {
      // Construct data.handles.points array
      for (var i = 0; i < this._polyPoints.length; i++) {
        points.push(this._deepCopyOnePoint(i));
      } // Generate lines to be drawn


      for (var _i = 0; _i < points.length; _i++) {
        if (_i === points.length - 1) {
          points[_i].lines.push(points[0]);
        } else {
          points[_i].lines.push(points[_i + 1]);
        }
      }
    }
  }, {
    key: "_deepCopyOnePoint",
    value: function _deepCopyOnePoint(i) {
      var point = {
        x: this._polyPoints[i].x,
        y: this._polyPoints[i].y,
        lines: []
      };

      if (this._polyPoints[i].z !== undefined) {
        point.z = this._polyPoints[i].z;
      }

      return point;
    }
  }, {
    key: "polyPoints",
    get: function get() {
      return this._polyPoints;
    }
  }, {
    key: "sopInstanceUid",
    get: function get() {
      return this._sopInstanceUid;
    }
  }, {
    key: "uid",
    get: function get() {
      return this._polygonUid;
    }
  }, {
    key: "frameNumber",
    get: function get() {
      return this._frameNumber;
    }
  }]);

  return Polygon;
}();

/***/ }),

/***/ "./src/util/freehandInterpolate/generateInterpolationData.js":
/*!*******************************************************************!*\
  !*** ./src/util/freehandInterpolate/generateInterpolationData.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);

var globalToolStateManager = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["globalImageIdSpecificToolStateManager"];
/**
 * generateInterpolationList - Generate the list of contours to interpolate,
 * including whether they are new contours, or interpolated contours that need
 * to be updated.
 *
 * @param  {object} toolData The tool data of the freehand3D contour.
 * @return {object} An object containing the ROIContourData and the
 * interpolationList.
 */

/* harmony default export */ __webpack_exports__["default"] = (function (toolData, element) {
  var ROIContourUid = toolData.ROIContourUid;

  var imageIds = _getImageIdsOfActiveSeries(element);

  var ROIContourData = _getROIContourData(imageIds, ROIContourUid);

  var extent = _getExtentOfRegion(ROIContourData);

  var sliceEdited = _getSlicePositionOfToolData(ROIContourData, toolData.uid);

  var interpolationList = []; // Check if contours between the extent can be interpolated.

  for (var i = extent[0] + 1; i <= extent[1] - 1; i++) {
    if (_sliceNeedsInterpolating(ROIContourData, i)) {
      var contourPair = _getBoundingPair(i, extent, ROIContourData);

      if (contourPair && (contourPair[0] === sliceEdited || contourPair[1] === sliceEdited)) {
        _appendinterpolationList(contourPair, interpolationList);
      }
    }
  }

  return {
    ROIContourData: ROIContourData,
    interpolationList: interpolationList
  };
});
/**
 * _getSlicePositionOfToolData - Finds the slice that was edited.
 *
 * @param  {type} ROIContourData description
 * @param  {type} polygonUid     description
 * @return {type}                description
 */

function _getSlicePositionOfToolData(ROIContourData, polygonUid) {
  for (var i = 0; i < ROIContourData.length; i++) {
    if (ROIContourData[i].contours) {
      var contours = ROIContourData[i].contours;

      for (var j = 0; j < contours.length; j++) {
        if (contours[j].uid === polygonUid) {
          return i;
        }
      }
    }
  }

  return;
}
/**
 * _getImageIdsOfActiveSeries - returns an array of the imageIds for the current
 * active series.
 *
 * @return {String[]} An array of imageIds.
 */


function _getImageIdsOfActiveSeries(element) {
  var stackToolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, 'stack');
  return stackToolState.data[0].imageIds;
}
/**
 * _getROIContourData - Generates a list of the slice locations of the 2D
 * polygons that make up the ROIContour.
 *
 * @param  {String[]} imageIds  An array of Image Ids.
 * @param  {type} ROIContourUid The UID of the ROIContour.
 * @return {object[]}           The list of contour locations in the stack.
 */


function _getROIContourData(imageIds, ROIContourUid) {
  var ROIContourData = [];
  var toolStateManager = globalToolStateManager.saveToolState();

  for (var i = 0; i < imageIds.length; i++) {
    var imageId = imageIds[i];
    var imageToolState = toolStateManager[imageId];

    if (!imageToolState || !imageToolState.freehandRoi) {
      ROIContourData.push({
        imageId: imageId
      });
    } else {
      var contours = imageToolState.freehandRoi.data.filter(function (contour) {
        return contour.ROIContourUid === ROIContourUid;
      });
      var contoursOnSlice = {
        imageId: imageId
      };

      if (contours.length) {
        contoursOnSlice.contours = contours;
      }

      ROIContourData.push(contoursOnSlice);
    }
  }

  return ROIContourData;
}
/**
 * _getExtentOfRegion - Returns a 2 element array with the slice locations of
 * top and bottom polygon of the ROIContour.
 *
 * @param  {object} ROIContourData  Data on the slice location of contours
 *                                  for the ROIContour.
 * @return {Number[]}               The slice locations of the top and bottom
 *                                  polygon of the ROIContour.
 */


function _getExtentOfRegion(ROIContourData) {
  var extent = [];

  for (var i = 0; i < ROIContourData.length; i++) {
    if (ROIContourData[i].contours) {
      extent.push(i);
      break;
    }
  }

  for (var _i = ROIContourData.length - 1; _i >= 0; _i--) {
    if (ROIContourData[_i].contours) {
      extent.push(_i);
      break;
    }
  }

  return extent;
}
/**
 * _sliceNeedsInterpolating - Check whether there are no contours on this
 * slice, or one which is an interpolated contour.
 *
 * @param  {object} ROIContourData  Data on the slice location of contours
 *                                  for the ROIContour.
 * @param  {Number} sliceIndex      The slice index.
 * @return {boolean}                Whether or not the slice needs interpolating.
 */


function _sliceNeedsInterpolating(ROIContourData, sliceIndex) {
  return !ROIContourData[sliceIndex].contours || ROIContourData[sliceIndex].contours.length === 1 && ROIContourData[sliceIndex].contours[0].interpolated;
}
/**
 * _appendinterpolationList - If the contour on slice i can be updated, add it to the
 * interpolationList.
 *
 * @param  {Number} sliceIndex      The slice index.
 * @param  {Number[]} extent        The extent of slice occupancy of the
 *                                  ROIContour.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                  for the ROIContour.
 * @param  {object[]} interpolationList The list of contours to be interpolated.
 * @return {null}
 */


function _appendinterpolationList(contourPair, interpolationList) {
  if (!interpolationList[contourPair[0]]) {
    interpolationList[contourPair[0]] = {
      pair: contourPair,
      list: []
    };
  }
}
/**
 * _getBoundingPair - Given the slice index and extent of the ROIContour,
 * get the pair of polygons to use for interpolation of the slice. Returns
 * undefined if there is an ambiguity and interpolation can't take place.
 *
 * @param  {Number} sliceIndex   The slice index.
 * @param  {Number[]} extent        The extent of slice occupancy of the
 *                                  ROIContour.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                  for the ROIContour.
 * @return {Number[] || undefined}  The pair of slice indicies, or undefined if
 * the contours to use for interpolation is ambiguous.
 */


function _getBoundingPair(sliceIndex, extent, ROIContourData) {
  var contourPair = [];
  var canInterpolate = true; // Check for nearest lowest sliceIndex containing contours.

  for (var i = sliceIndex - 1; i >= extent[0]; i--) {
    if (ROIContourData[i].contours) {
      var contours = ROIContourData[i].contours;

      if (contours[0].interpolated) {
        // This contour is interpolated. We need to
        // Find a solid contour to interpolate from.
        continue;
      }

      if (contours.length > 1) {
        canInterpolate = false;
      } // Found single, non interpolated contour to interpolate from.


      contourPair.push(i);
      break;
    }
  }

  if (!canInterpolate) {
    return;
  } // Check for nearest upper sliceIndex containing contours.


  for (var _i2 = sliceIndex + 1; _i2 <= extent[1]; _i2++) {
    if (ROIContourData[_i2].contours) {
      var _contours = ROIContourData[_i2].contours;

      if (_contours[0].interpolated) {
        // This contour is interpolated. We need to
        // Find a solid contour to interpolate from.
        continue;
      }

      if (_contours.length > 1) {
        canInterpolate = false;
      }

      contourPair.push(_i2);
      break;
    }
  }

  if (!canInterpolate) {
    return;
  }

  return contourPair;
}

/***/ }),

/***/ "./src/util/freehandInterpolate/interpolate.js":
/*!*****************************************************!*\
  !*** ./src/util/freehandInterpolate/interpolate.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _classes_Polygon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/Polygon.js */ "./src/util/classes/Polygon.js");
/* harmony import */ var _generateUID_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../generateUID.js */ "./src/util/generateUID.js");
/* harmony import */ var _generateInterpolationData_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./generateInterpolationData.js */ "./src/util/freehandInterpolate/generateInterpolationData.js");




var globalToolStateManager = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["globalImageIdSpecificToolStateManager"];
var dP = 0.2; // Aim for < 0.2mm between interpolated nodes when super-sampling.

var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
/**
 * interpolate - Interpolate missing contours in the ROIContour.
 *
 * @param  {object} toolData The tool data of the freehand3D contour.
 * @return {null}
 */

/* harmony default export */ __webpack_exports__["default"] = (function (toolData, element) {
  var _generateInterpolatio = Object(_generateInterpolationData_js__WEBPACK_IMPORTED_MODULE_3__["default"])(toolData, element),
      ROIContourData = _generateInterpolatio.ROIContourData,
      interpolationList = _generateInterpolatio.interpolationList;

  for (var i = 0; i < interpolationList.length; i++) {
    if (interpolationList[i]) {
      _linearlyInterpolateBetween(interpolationList[i].list, interpolationList[i].pair, ROIContourData);
    }
  }
});
/**
 * _linearlyInterpolateBetween - Linearly interpolate all the slices in the
 * indicies array between the contourPair.
 *
 * @param  {Number[]} indicies     An array of slice indicies to interpolate.
 * @param  {Number[]} contourPair  The pair of contours to interpolate between.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                    for the ROIContour.
 * @return {null}
 */

function _linearlyInterpolateBetween(indicies, contourPair, ROIContourData) {
  var c1 = _generateClosedContour(ROIContourData[contourPair[0]].contours[0].handles.points);

  var c2 = _generateClosedContour(ROIContourData[contourPair[1]].contours[0].handles.points);

  var _generateInterpolatio2 = _generateInterpolationContourPair(c1, c2),
      c1Interp = _generateInterpolatio2.c1Interp,
      c2Interp = _generateInterpolatio2.c2Interp; // Using the newly constructed contours, interpolate each ROI.


  indicies.forEach(function (index) {
    _linearlyInterpolateContour(c1Interp, c2Interp, index, contourPair, ROIContourData, c1.x.length > c2.x.length);
  });
}
/**
 * _linearlyInterpolateContour - Inserts a linearly interpolated contour at
 * specified slice index.
 *
 * @param  {object} c1Interp       The first reference contour.
 * @param  {object} c2Interp       The second reference contour.
 * @param  {Number} sliceIndex       The slice index to interpolate.
 * @param  {Number{}} contourPair    The slice indicies of the reference contours.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                  for the ROIContour.
 * @param  {boolean} c1HasMoreNodes True if c1 has more nodes than c2.
 * @return {null}
 */


function _linearlyInterpolateContour(c1Interp, c2Interp, sliceIndex, contourPair, ROIContourData, c1HasMoreNodes) {
  var zInterp = (sliceIndex - contourPair[0]) / (contourPair[1] - contourPair[0]);

  var interpolated2DContour = _generateInterpolatedOpenContour(c1Interp, c2Interp, zInterp, c1HasMoreNodes);

  var c1Metadata = ROIContourData[contourPair[0]].contours[0];

  if (ROIContourData[sliceIndex].contours) {
    _editInterpolatedContour(interpolated2DContour, ROIContourData[sliceIndex].imageId, c1Metadata);
  } else {
    _addInterpolatedContour(interpolated2DContour, ROIContourData[sliceIndex].imageId, c1Metadata);
  }
}
/**
 * _generateInterpolationContourPair - generates two aligned contours with an
 * equal number of nodes from which an intermediate contour may be interpolated.
 *
 * @param  {object} c1 The first contour.
 * @param  {object} c2 The second contour.
 * @return {object}  An object containing the two contours.
 */


function _generateInterpolationContourPair(c1, c2) {
  var cumPerim1 = _getCumulativePerimeter(c1);

  var cumPerim2 = _getCumulativePerimeter(c2);

  var interpNodes = Math.max(Math.ceil(cumPerim1[cumPerim1.length - 1] / dP), Math.ceil(cumPerim2[cumPerim2.length - 1] / dP));

  var cumPerim1Norm = _normalisedCumulativePerimeter(cumPerim1);

  var cumPerim2Norm = _normalisedCumulativePerimeter(cumPerim2);

  var numNodes1 = interpNodes + c2.x.length;
  var numNodes2 = interpNodes + c1.x.length; // concatinate p && cumPerimNorm

  var perim1Interp = _getInterpolatedPerim(numNodes1, cumPerim1Norm);

  var perim2Interp = _getInterpolatedPerim(numNodes2, cumPerim2Norm);

  var perim1Ind = _getIndicatorArray(c1, numNodes1);

  var perim2Ind = _getIndicatorArray(c2, numNodes2);

  var nodesPerSegment1 = _getNodesPerSegment(perim1Interp, perim1Ind);

  var nodesPerSegment2 = _getNodesPerSegment(perim2Interp, perim2Ind);

  var c1i = _getSuperSampledContour(c1, nodesPerSegment1);

  var c2i = _getSuperSampledContour(c2, nodesPerSegment2); // Keep c2i fixed and shift the starting node of c1i to minimise the total length of segments.


  _shiftSuperSampledContourInPlace(c1i, c2i);

  return _reduceContoursToOriginNodes(c1i, c2i);
}
/**
 * _addInterpolatedContour - Adds a new contour to the imageId.
 *
 * @param  {object} interpolated2DContour The polygon to add to the ROIContour.
 * @param  {String} imageId               The imageId to add the polygon to.
 * @param  {type} referencedToolData    The toolData of another polygon in the
 * ROIContour, to assign appropriate metadata to the new polygon.
 * @return {null}
 */


function _addInterpolatedContour(interpolated2DContour, imageId, referencedToolData) {
  var points = [];

  for (var i = 0; i < interpolated2DContour.x.length; i++) {
    points.push({
      x: interpolated2DContour.x[i],
      y: interpolated2DContour.y[i]
    });
  }

  var polygon = new _classes_Polygon_js__WEBPACK_IMPORTED_MODULE_1__["Polygon"](points, null, referencedToolData.seriesInstanceUid, referencedToolData.structureSetUid, referencedToolData.ROIContourUid, Object(_generateUID_js__WEBPACK_IMPORTED_MODULE_2__["default"])(), null, true);
  var toolStateManager = globalToolStateManager.saveToolState();

  if (!toolStateManager[imageId]) {
    toolStateManager[imageId] = {};
  }

  var imageToolState = toolStateManager[imageId];

  if (!imageToolState.freehandRoi) {
    imageToolState.freehandRoi = {};
    imageToolState.freehandRoi.data = [];
  } else if (!imageToolState.freehandRoi.data) {
    imageToolState.freehandRoi.data = [];
  }

  imageToolState.freehandRoi.data.push(polygon.getFreehandToolData(false));
  modules.freehand3D.setters.incrementPolygonCount(referencedToolData.seriesInstanceUid, referencedToolData.structureSetUid, referencedToolData.ROIContourUid);
}
/**
 * _editInterpolatedContour - Edits an interpolated polygon on the imageId
 * that corresponds to the specified ROIContour.
 *
 * @param  {object} interpolated2DContour The polygon to add to the ROIContour.
 * @param  {String} imageId               The imageId to add the polygon to.
 * @param  {type} referencedToolData    The toolData of another polygon in the
 * ROIContour, to assign appropriate metadata to the new polygon.
 * @return {null}
 */


function _editInterpolatedContour(interpolated2DContour, imageId, referencedToolData) {
  var toolStateManager = globalToolStateManager.saveToolState();
  var imageToolState = toolStateManager[imageId];

  if (!imageToolState) {
    throw new Error('Image toolstate does not exist. This should not be reached in this case!');
  } // Find the index of the polygon on this slice corresponding to
  // The ROIContour.


  var toolDataIndex;

  for (var i = 0; i < imageToolState.freehandRoi.data.length; i++) {
    if (imageToolState.freehandRoi.data[i].ROIContourUid === referencedToolData.ROIContourUid) {
      toolDataIndex = i;
      break;
    }
  }

  var oldPolygon = imageToolState.freehandRoi.data[toolDataIndex];
  var points = [];

  for (var _i = 0; _i < interpolated2DContour.x.length; _i++) {
    points.push({
      x: interpolated2DContour.x[_i],
      y: interpolated2DContour.y[_i]
    });
  }

  var updatedPolygon = new _classes_Polygon_js__WEBPACK_IMPORTED_MODULE_1__["Polygon"](points, null, oldPolygon.seriesInstanceUid, oldPolygon.structureSetUid, oldPolygon.ROIContourUid, oldPolygon.uid, null, true);
  imageToolState.freehandRoi.data[toolDataIndex] = updatedPolygon.getFreehandToolData(false);
}
/**
 * _generateInterpolatedOpenContour - Interpolate an open contour between c1ir
 * and c2ir at the zInterp position.
 *
 * @param  {object} c1ir            The interpolated c1 contour with
 *                                  superfluous nodes removed.
 * @param  {object} c2ir            The interpolated c2 contour with
 *                                  superfluous nodes removed.
 * @param  {Number} zInterp         The z- coordinate of the desired
 *                                  interpolation.
 * @param  {boolean} c1HasMoreNodes True if c1 has more original nodes
 *                                  than c2.
 * @return {object}                 The interpolated contour at z=zInterp.
 */


function _generateInterpolatedOpenContour(c1ir, c2ir, zInterp, c1HasMoreNodes) {
  var cInterp = {
    x: [],
    y: []
  };
  var indicies = c1HasMoreNodes ? c1ir.I : c2ir.I;

  for (var i = 0; i < c1ir.x.length; i++) {
    if (indicies[i]) {
      cInterp.x.push((1 - zInterp) * c1ir.x[i] + zInterp * c2ir.x[i]);
      cInterp.y.push((1 - zInterp) * c1ir.y[i] + zInterp * c2ir.y[i]);
    }
  }

  return cInterp;
}
/**
 * _reduceContoursToOriginNodes - Removes any nodes from the contours that don't
 * correspond to an original contour node.
 *
 * @param  {object} c1i The first super-sampled contour.
 * @param  {object} c2i The second super-sampled contour.
 * @return {object}     An object containing the two reduced contours.
 */


function _reduceContoursToOriginNodes(c1i, c2i) {
  var c1Interp = {
    x: [],
    y: [],
    I: []
  };
  var c2Interp = {
    x: [],
    y: [],
    I: []
  };

  for (var i = 0; i < c1i.x.length; i++) {
    if (c1i.I[i] || c2i.I[i]) {
      c1Interp.x.push(c1i.x[i]);
      c1Interp.y.push(c1i.y[i]);
      c1Interp.I.push(c1i.I[i]);
      c2Interp.x.push(c2i.x[i]);
      c2Interp.y.push(c2i.y[i]);
      c2Interp.I.push(c2i.I[i]);
    }
  }

  return {
    c1Interp: c1Interp,
    c2Interp: c2Interp
  };
}
/**
 * _shiftSuperSampledContourInPlace - Shifts the indicies of c1i around to
 * minimise: SUM (|c1i[i]-c2i[i]|) from 0 to N.
 *
 * @param  {object} c1i The contour to shift.
 * @param  {object} c2i The reference contour.
 * @modifies c1i
 */


function _shiftSuperSampledContourInPlace(c1i, c2i) {
  var c1iLength = c1i.x.length;
  var optimal = {
    startingNode: 0,
    totalSquaredXYLengths: Infinity
  };

  for (var startingNode = 0; startingNode < c1iLength; startingNode++) {
    var _node = startingNode; // NOTE: 1) Ignore calculating Z, as the sum of all squared Z distances will always be a constant.
    // NOTE: 2) Don't need actual length, so don't worry about square rooting.

    var totalSquaredXYLengths = 0;

    for (var itteration = 0; itteration < c1iLength; itteration++) {
      totalSquaredXYLengths += Math.pow(c1i.x[_node] - c2i.x[itteration], 2) + Math.pow(c1i.y[_node] - c2i.y[itteration], 2);
      _node++;
      if (_node === c1iLength) _node = 0;
    }

    if (totalSquaredXYLengths < optimal.totalSquaredXYLengths) {
      optimal.totalSquaredXYLengths = totalSquaredXYLengths;
      optimal.startingNode = startingNode;
    }
  }

  var node = optimal.startingNode;

  _shiftCircularArray(c1i.x, node);

  _shiftCircularArray(c1i.y, node);

  _shiftCircularArray(c1i.I, node);
}
/**
 * _shiftCircularArray - Shift the circular array by the count.
 *
 * @param  {*[]} arr   The array.
 * @param  {Number} count The shift.
 * @return {*[]}       The shifted array.
 */


function _shiftCircularArray(arr, count) {
  count -= arr.length * Math.floor(count / arr.length);
  arr.push.apply(arr, arr.splice(0, count));
  return arr;
}
/**
 * _getSuperSampledContour - Generates a super sampled contour with additional
 * nodes added per segment.
 *
 * @param  {object} c                 The original contour.
 * @param  {Number[]} nodesPerSegment An array of the number of nodes to add
 *                                    per line segment.
 * @return {object}                   The super sampled contour.
 */


function _getSuperSampledContour(c, nodesPerSegment) {
  var ci = {
    x: [],
    y: [],
    I: []
  }; // Length - 1, produces 'open' polygon.

  for (var n = 0; n < c.x.length - 1; n++) {
    // Add original node.
    ci.x.push(c.x[n]);
    ci.y.push(c.y[n]);
    ci.I.push(true); // Add linerally interpolated nodes.

    var xSpacing = (c.x[n + 1] - c.x[n]) / (nodesPerSegment[n] + 1);
    var ySpacing = (c.y[n + 1] - c.y[n]) / (nodesPerSegment[n] + 1); // Add other nodesPerSegment - 1 other nodes (as already put in original node).

    for (var i = 0; i < nodesPerSegment[n] - 1; i++) {
      ci.x.push(ci.x[ci.x.length - 1] + xSpacing);
      ci.y.push(ci.y[ci.y.length - 1] + ySpacing);
      ci.I.push(false);
    }
  }

  return ci;
}
/**
 * _getNodesPerSegment - Returns an array of the number of interpolated nodes
 * to be added along each line segment of a polygon.
 *
 * @param  {Number[]} perimInterp Normalised array of original and added nodes.
 * @param  {boolean[]} perimInd    The indicator array describing the location of
 *                            the original contour's nodes.
 * @return {Number[]}         An array containging the number of nodes to be
 *                            added per original line segment.
 */


function _getNodesPerSegment(perimInterp, perimInd) {
  var idx = [];

  for (var i = 0; i < perimInterp.length; ++i) {
    idx[i] = i;
  }

  idx.sort(function (a, b) {
    return perimInterp[a] < perimInterp[b] ? -1 : perimInterp[a] > perimInterp[b];
  });
  var perimIndSorted = [];

  for (var _i2 = 0; _i2 < perimInd.length; _i2++) {
    perimIndSorted.push(perimInd[idx[_i2]]);
  }

  var indiciesOfOriginNodes = perimIndSorted.reduce(function (arr, elementValue, i) {
    if (elementValue) arr.push(i);
    return arr;
  }, []);
  var nodesPerSegment = [];

  for (var _i3 = 0; _i3 < indiciesOfOriginNodes.length - 1; _i3++) {
    nodesPerSegment.push(indiciesOfOriginNodes[_i3 + 1] - indiciesOfOriginNodes[_i3]);
  }

  return nodesPerSegment;
}
/**
 * _getIndicatorArray - Produces an array of the location of the original nodes
 * in a super sampled contour.
 *
 * @param  {object} contour   The original contour.
 * @param  {Number} numNodes The number of nodes added.
 * @return {boolean[]}           The indicator array of original node locations.
 */


function _getIndicatorArray(contour, numNodes) {
  var perimInd = [];

  for (var i = 0; i < numNodes - 2; i++) {
    perimInd.push(false);
  }

  for (var _i4 = 0; _i4 < contour.x.length; _i4++) {
    perimInd.push(true);
  }

  return perimInd;
}
/**
 * _getInterpolatedPerim - Adds additional interpolated nodes to the
 * normalised perimeter array.
 *
 * @param  {Number} numNodes    The number of nodes to add.
 * @param  {Number[]} cumPerimNorm The cumulative perimeter array.
 * @return {Number[]}              The array of nodes.
 */


function _getInterpolatedPerim(numNodes, cumPerimNorm) {
  var diff = 1 / (numNodes - 1);
  var linspace = [diff]; // Length - 2 as we are discarding 0 an 1 for efficiency (no need to calculate them).

  for (var i = 1; i < numNodes - 2; i++) {
    linspace.push(linspace[linspace.length - 1] + diff);
  }

  return linspace.concat(cumPerimNorm);
}
/**
 * _getCumulativePerimeter - Returns an array of the the cumulative perimeter at
 * each node of the contour.
 *
 * @param  {object} contour The contour.
 * @return {Number[]}         An array of the cumulative perimeter at each node.
 */


function _getCumulativePerimeter(contour) {
  var cumulativePerimeter = [0];

  for (var i = 1; i < contour.x.length; i++) {
    var lengthOfSegment = Math.sqrt(Math.pow(contour.x[i] - contour.x[i - 1], 2) + Math.pow(contour.y[i] - contour.y[i - 1], 2));
    cumulativePerimeter.push(cumulativePerimeter[i - 1] + lengthOfSegment);
  }

  return cumulativePerimeter;
}
/**
 * _normalisedCumulativePerimeter - Normalises the cumulative perimeter array.
 *
 * @param  {type} cumPerim An array of the cumulative perimeter at each of a
 * contour.
 * @return {type}          The normalised array.
 */


function _normalisedCumulativePerimeter(cumPerim) {
  var cumPerimNorm = [];

  for (var i = 0; i < cumPerim.length; i++) {
    cumPerimNorm.push(cumPerim[i] / cumPerim[cumPerim.length - 1]);
  }

  return cumPerimNorm;
}
/**
 * _generateClosedContour - Generate a clockwise contour object from the points
 * of a clockwise or anti-clockwise polygon.
 *
 * @param  {object[]} points The points to generate the contour from.
 * @return {object}           The generated contour object.
 */


function _generateClosedContour(points) {
  var c = {
    x: [],
    y: []
  }; // NOTE: For z positions we only need the relative difference for interpolation, thus use frame index as Z.

  for (var i = 0; i < points.length; i++) {
    c.x[i] = points[i].x;
    c.y[i] = points[i].y;
  } // Push last node to create closed contour.


  c.x.push(c.x[0]);
  c.y.push(c.y[0]);

  _reverseIfAntiClockwise(c);

  return c;
}
/**
 * _reverseIfAntiClockwise - If the contour's nodes run anti-clockwise,
 * reverse them.
 *
 * @param  {object} contour The contour.
 * @return {object}         The contour, corrected to be clockwise if appropriate.
 */


function _reverseIfAntiClockwise(contour) {
  var length = contour.x.length;
  var contourXMean = contour.x.reduce(getSumReducer) / length;
  var checkSum = 0;

  for (var k = 0, i = 1, j = 2; k < length; k++) {
    checkSum += (contour.x[i] - contourXMean) * (contour.y[j] - contour.y[k]);
    i++;
    j++;
    if (i >= length) i = 0;
    if (j >= length) j = 0;
  }

  if (checkSum > 0) {
    contour.x.reverse();
    contour.y.reverse();
  }
}
/**
 * getSumReducer - A reducer function that calculates the sum of an array.
 *
 * @param  {Number} total The running total.
 * @param  {Number} num   The numerical value of the array element.
 * @return {Number}       The updated running total.
 */


function getSumReducer(total, num) {
  return total + num;
}

/***/ }),

/***/ "./src/util/freehandNameIO.js":
/*!************************************!*\
  !*** ./src/util/freehandNameIO.js ***!
  \************************************/
/*! exports provided: createNewVolume, setVolumeName */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createNewVolume", function() { return createNewVolume; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setVolumeName", function() { return setVolumeName; });
// import { store } from 'cornerstone-tools';
// import getSeriesInstanceUidFromEnabledElement from './getSeriesInstanceUidFromEnabledElement.js';
// const modules = store.modules;
// TODO -> Redefine this when we rebuild input.

/*
function createNewVolumeCallback(name, element) {
  // Create and activate new ROIContour
  const activeSeriesInstanceUid = getSeriesInstanceUidFromEnabledElement(element);

  // Check if default structureSet exists for this series.
  if (!modules.freehand3D.getters.series(activeSeriesInstanceUid)) {
    modules.freehand3D.setters.series(activeSeriesInstanceUid);
  }

  modules.freehand3D.setters.ROIContourAndSetIndexActive(activeSeriesInstanceUid, 'DEFAULT', name);
}
*/

/**
 * Opens UI that allows user to chose a name for a new volume, and processes
 * the response.
 *
 */
// TODO -> Implement dialogs or smth.
function createNewVolume(callback) {} // const freehandSetNameDialog = document.getElementById('freehandSetNameDialog');
// JamesAPetts
// const dialogData = Blaze.getData(freehandSetNameDialog);
// dialogData.freehandSetNameDialogDefaultName.set('');
// dialogData.freehandSetNameDialogId.set(Math.random().toString());
// dialogData.freehandSetNameDialogCallback.set(callback || createNewVolumeCallback);
// freehandSetNameDialog.showModal();

/**
 * Opens UI that allows user to change a volume's name,
 * and processes the response.
 *
 * @param {String} seriesInstanceUid  The UID of the series the ROIContour is associated with.
 * @param {String} structureSetUid    The UID of the structureSet the ROIContour belongs to.
 * @param {String} ROIContourUid      The UID of the ROIContourUid.
 *
 */

function setVolumeName(seriesInstanceUid, structureSetUid, ROIContourUid, callback) {// TODO -> setVolumeName

  /*
  const ROIContour = modules.freehand3D.getters.ROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
   // Current name:
  let oldName;
   if (ROIContour.name) {
    oldName = ROIContour.name;
  } else {
    oldName = '';
  }
   function setVolumeNameCallback(name) {
    ROIContour.name = name;
     if (typeof callback === 'function') {
      callback(name);
    }
  }
   const freehandSetNameDialog = document.getElementById('freehandSetNameDialog');
   // JamesAPetts
  const dialogData = Blaze.getData(freehandSetNameDialog);
   dialogData.freehandSetNameDialogDefaultName.set(oldName);
  dialogData.freehandSetNameDialogId.set(Math.random().toString());
  dialogData.freehandSetNameDialogCallback.set(setVolumeNameCallback);
  freehandSetNameDialog.showModal();
  */
}

/***/ }),

/***/ "./src/util/generateBrushMetadata.js":
/*!*******************************************!*\
  !*** ./src/util/generateBrushMetadata.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return generateMetadata; });
/* harmony import */ var _GeneralAnatomylist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GeneralAnatomylist.js */ "./src/GeneralAnatomylist.js");

var categories = _GeneralAnatomylist_js__WEBPACK_IMPORTED_MODULE_0__["default"].SegmentationCodes.Category;
function generateMetadata(label) {
  var categoryUID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'T-D0050';
  var typeUID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'T-D0050';
  var modifierUID = arguments.length > 3 ? arguments[3] : undefined;
  var category = categories.find(function (categoriesI) {
    return categoriesI.CodeValue === categoryUID;
  });
  var type = category.Type.find(function (typesI) {
    return typesI.CodeValue === typeUID;
  });
  var metadata = {
    SegmentedPropertyCategoryCodeSequence: {
      CodeValue: category.CodeValue,
      CodingSchemeDesignator: category.CodingSchemeDesignator,
      CodeMeaning: category.CodeMeaning
    },
    SegmentLabel: label,
    SegmentAlgorithmType: 'MANUAL',
    SegmentedPropertyTypeCodeSequence: {
      CodeValue: type.CodeValue,
      CodingSchemeDesignator: type.CodingSchemeDesignator,
      CodeMeaning: type.CodeMeaning
    }
  };

  if (modifierUID) {
    var modfier = type.Modifier.find(function (modifierI) {
      return modifierI.CodeValue === modifierUID;
    });
    metadata.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence = {
      CodeValue: modfier.CodeValue,
      CodingSchemeDesignator: modfier.CodingSchemeDesignator,
      CodeMeaning: modfier.CodeMeaning
    };
    metadata.RecommendedDisplayCIELabValue = modfier.recommendedDisplayRGBValue;
  } else {
    metadata.RecommendedDisplayCIELabValue = type.recommendedDisplayRGBValue;
  }

  return metadata;
}

/***/ }),

/***/ "./src/util/generateUID.js":
/*!*********************************!*\
  !*** ./src/util/generateUID.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Generates a UUID for the enabledElement.
 * @export @public @method
 * @name generateUID
 *
 * @return {String} the UUID.
 */
/* harmony default export */ __webpack_exports__["default"] = (function () {
  // https://stackoverflow.com/a/8809472/9208320 Public Domain/MIT

  /* eslint no-bitwise: ["error", { "allow": ["&","|"] }] */
  var d = new Date().getTime();

  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
    d += performance.now(); // Use high-precision timer if available
  }

  return 'x.x.x.x.x.x.xxxx.xxx.x.x.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
});

/***/ }),

/***/ "./src/util/getActiveViewportEnabledElement.js":
/*!*****************************************************!*\
  !*** ./src/util/getActiveViewportEnabledElement.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getActiveViewportEnabledElement; });
/**
 * Grabs `dom` reference for the enabledElement of
 * the active viewport
 */
function getActiveViewportEnabledElement(viewports, activeIndex) {
  var activeViewport = viewports[activeIndex] || {};
  return activeViewport.dom;
}

/***/ }),

/***/ "./src/util/getSeriesInstanceUidFromEnabledElement.js":
/*!************************************************************!*\
  !*** ./src/util/getSeriesInstanceUidFromEnabledElement.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getSeriesInstanceUidFromEnabledElement; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);

function getSeriesInstanceUidFromEnabledElement(enabledElement) {
  if (!enabledElement) {
    return;
  }

  var imageId = enabledElement.image.imageId;
  var generalSeriesModule = cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default.a.metaData.get('generalSeriesModule', imageId);
  return generalSeriesModule.seriesInstanceUID;
}

/***/ }),

/***/ "./src/util/getSeriesInstanceUidFromImageId.js":
/*!*****************************************************!*\
  !*** ./src/util/getSeriesInstanceUidFromImageId.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getSeriesInstanceUidFromImageId; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Extracts the seriesInstanceUid from an image, given the imageId.
 *
 * @param {String} imageId The ID of the image being queried.
 */

function getSeriesInstanceUidFromImageId(imageId) {
  var generalSeriesModule = cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default.a.metaData.get('generalSeriesModule', imageId);
  return generalSeriesModule.seriesInstanceUID;
}

/***/ }),

/***/ "./src/util/unlockStructureSet.js":
/*!****************************************!*\
  !*** ./src/util/unlockStructureSet.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _getSeriesInstanceUidFromImageId_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getSeriesInstanceUidFromImageId.js */ "./src/util/getSeriesInstanceUidFromImageId.js");


var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
var globalToolStateManager = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["globalImageIdSpecificToolStateManager"];
/**
 * Unlock a structureSet, moving them to the working directory
 * so that they may be edited
 *
 * @param {string} seriesInstanceUid  The UID of the series on which the ROIs
 *                                    reside.
 * @param {string} structureSetUid    The uid of the newly created structureSet.
 */

/* harmony default export */ __webpack_exports__["default"] = (function (seriesInstanceUid, structureSetUid) {
  var freehand3DStore = modules.freehand3D;
  var structureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, structureSetUid);
  var ROIContourCollection = structureSet.ROIContourCollection;
  var workingStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid); // Create new ROIContours in the working directory.

  for (var i = 0; i < ROIContourCollection.length; i++) {
    var ROIContour = ROIContourCollection[i];
    freehand3DStore.setters.ROIContour(seriesInstanceUid, 'DEFAULT', ROIContour.name, {
      uid: ROIContour.uid,
      polygonCount: ROIContour.polygonCount,
      color: ROIContour.color
    });
  }

  var toolStateManager = globalToolStateManager.saveToolState();
  Object.keys(toolStateManager).forEach(function (elementId) {
    // Only get polygons from this series
    if (Object(_getSeriesInstanceUidFromImageId_js__WEBPACK_IMPORTED_MODULE_1__["default"])(elementId) === seriesInstanceUid) {
      // grab the freehand tool for this DICOM instance
      if (toolStateManager && toolStateManager[elementId] && toolStateManager[elementId].freehandRoi) {
        var toolState = toolStateManager[elementId].freehandRoi;
        var toolData = toolState.data;
        movePolygonsInInstance(workingStructureSet, toolData, seriesInstanceUid);
      }
    }
  }); // Remove named structureSet.

  freehand3DStore.setters.deleteStructureSet(seriesInstanceUid, structureSetUid);

  if (workingStructureSet.activeROIContourIndex === null) {
    workingStructureSet.activeROIContourIndex = 0;
  }
});
/**
 * Moves the ROIs defined by the seriesInstanceUid, roiCollectionName
 * and exportMask from the working directory to a new named roiCollection.
 *
 * @param  {Object} exportData  An object containing the required information
 *                              to execute the move opperation.
 */

function movePolygonsInInstance(workingStructureSet, toolData, seriesInstanceUid) {
  var freehand3DStore = modules.freehand3D;

  for (var i = 0; i < toolData.length; i++) {
    var data = toolData[i];
    var referencedROIContour = freehand3DStore.getters.ROIContour(seriesInstanceUid, 'DEFAULT', data.ROIContourUid);
    var referencedStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, 'DEFAULT');
    data.structureSetUid = 'DEFAULT';
    data.referencedROIContour = referencedROIContour;
    data.referencedStructureSet = referencedStructureSet;
  }
}

/***/ }),

/***/ "cornerstone-core":
/*!***********************************!*\
  !*** external "cornerstone-core" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cornerstone_core__;

/***/ }),

/***/ "cornerstone-math":
/*!***********************************!*\
  !*** external "cornerstone-math" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cornerstone_math__;

/***/ }),

/***/ "cornerstone-tools":
/*!************************************!*\
  !*** external "cornerstone-tools" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cornerstone_tools__;

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvR2VuZXJhbEFuYXRvbXlsaXN0LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9NZW51SU9CdXR0b25zLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9oZWxwZXJzL29uRXhwb3J0QnV0dG9uQ2xpY2suanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL2hlbHBlcnMvb25JT0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9jb21tb24vaGVscGVycy9vbkltcG9ydEJ1dHRvbkNsaWNrLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL3JvaUNvbnRvdXJNZW51L0xvY2tlZENvbGxlY3Rpb25zTGlzdC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9yb2lDb250b3VyTWVudS9Mb2NrZWRDb2xsZWN0aW9uc0xpc3RJdGVtLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL3JvaUNvbnRvdXJNZW51L1JvaUNvbnRvdXJNZW51LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL3JvaUNvbnRvdXJNZW51L1JvaUNvbnRvdXJTZXR0aW5ncy5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9yb2lDb250b3VyTWVudS9Xb3JraW5nQ29sbGVjdGlvbkxpc3QuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvcm9pQ29udG91ck1lbnUvV29ya2luZ0NvbGxlY3Rpb25MaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9zZWdtZW50YXRpb25NZW51L0JydXNoU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvc2VnbWVudGF0aW9uTWVudS9TZWdtZW50YXRpb25NZW51LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL3NlZ21lbnRhdGlvbk1lbnUvU2VnbWVudGF0aW9uTWVudURlbGV0ZUNvbmZpcm1hdGlvbi5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9zZWdtZW50YXRpb25NZW51L1NlZ21lbnRhdGlvbk1lbnVMaXN0Qm9keS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9zZWdtZW50YXRpb25NZW51L1NlZ21lbnRhdGlvbk1lbnVMaXN0SGVhZGVyLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL3NlZ21lbnRhdGlvbk1lbnUvU2VnbWVudGF0aW9uTWVudUxpc3RJdGVtLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvaW5pdC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvbW9kdWxlcy9leHRlbmRCcnVzaE1vZHVsZS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvbW9kdWxlcy9mcmVlaGFuZDNETW9kdWxlLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy90b29scy9CcnVzaDNEQXV0b0dhdGVkVG9vbC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdG9vbHMvQnJ1c2gzREhVR2F0ZWRUb29sLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy90b29scy9CcnVzaDNEVG9vbC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdG9vbHMvRnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdG9vbHMvRnJlZWhhbmRSb2kzRFRvb2wuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3Rvb2xzL24tZGltZW5zaW9uYWwtZmxvb2QtZmlsbC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9icnVzaE1ldGFkYXRhSU8uanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvY2xhc3Nlcy9Qb2x5Z29uLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy91dGlsL2ZyZWVoYW5kSW50ZXJwb2xhdGUvZ2VuZXJhdGVJbnRlcnBvbGF0aW9uRGF0YS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9mcmVlaGFuZEludGVycG9sYXRlL2ludGVycG9sYXRlLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy91dGlsL2ZyZWVoYW5kTmFtZUlPLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy91dGlsL2dlbmVyYXRlQnJ1c2hNZXRhZGF0YS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9nZW5lcmF0ZVVJRC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9nZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy91dGlsL2dldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy91dGlsL2dldFNlcmllc0luc3RhbmNlVWlkRnJvbUltYWdlSWQuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvdW5sb2NrU3RydWN0dXJlU2V0LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi9leHRlcm5hbCBcImNvcm5lcnN0b25lLWNvcmVcIiIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vZXh0ZXJuYWwgXCJjb3JuZXJzdG9uZS1tYXRoXCIiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luL2V4dGVybmFsIFwiY29ybmVyc3RvbmUtdG9vbHNcIiIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vZXh0ZXJuYWwgXCJyZWFjdFwiIl0sIm5hbWVzIjpbImpzb24iLCJwYXJzZWRKc29uIiwiSlNPTiIsInBhcnNlIiwiTWVudUlPQnV0dG9ucyIsInByb3BzIiwiSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCIsIkV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQiLCJvbkltcG9ydEJ1dHRvbkNsaWNrIiwib25FeHBvcnRCdXR0b25DbGljayIsIlJlYWN0IiwiQ29tcG9uZW50IiwicHJvdG90eXBlIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZXhwb3J0aW5nIiwib25JT0NhbmNlbCIsImltcG9ydGluZyIsImNvbnNvbGUiLCJsb2ciLCJMb2NrZWRDb2xsZWN0aW9uc0xpc3QiLCJsb2NrZWRDb2xsZWN0aW9ucyIsIm9uVW5sb2NrQ2xpY2siLCJzZXJpZXNJbnN0YW5jZVVpZCIsIm1hcCIsImNvbGxlY3Rpb24iLCJtZXRhZGF0YSIsInVpZCIsIm1vZHVsZXMiLCJjb3JuZXJzdG9uZVRvb2xzIiwic3RvcmUiLCJMb2NrZWRDb2xsZWN0aW9uc0xpc3RJdGVtIiwidmlzaWJsZSIsInN0YXRlIiwiZXhwYW5kZWQiLCJvblRvZ2dsZVZpc2liaWxpdHlDbGljayIsImJpbmQiLCJvblNob3dIaWRlQ2xpY2siLCJzdHJ1Y3R1cmVTZXQiLCJmcmVlaGFuZDNEIiwiZ2V0dGVycyIsIlJPSUNvbnRvdXJBcnJheSIsInZpc2libGVCdXR0b24iLCJzaG93SGlkZUljb24iLCJuYW1lIiwicm9pQ29udG91ciIsImNvbG9yIiwicG9seWdvbkNvdW50IiwiUm9pQ29udG91ck1lbnUiLCJlbmFibGVkRWxlbWVudCIsImdldEFjdGl2ZVZpZXdwb3J0RW5hYmxlZEVsZW1lbnQiLCJ2aWV3cG9ydHMiLCJhY3RpdmVJbmRleCIsImdldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50IiwiZ2V0Um9pQ29udG91ckxpc3QiLCJ3b3JraW5nQ29sbGVjdGlvbiIsImFjdGl2ZVJPSUNvbnRvdXJJbmRleCIsInVubG9ja0NvbmZpcm1hdGlvbk9wZW4iLCJyb2lDb2xsZWN0aW9uVG9VbmxvY2siLCJvbk5ld1JvaUJ1dHRvbkNsaWNrIiwib25Sb2lDaGFuZ2UiLCJvblJlbmFtZUJ1dHRvbkNsaWNrIiwiY29uZmlybVVubG9ja09uVW5sb2NrQ2xpY2siLCJvblVubG9ja0NhbmNlbENsaWNrIiwib25VbmxvY2tDb25maXJtQ2xpY2siLCJvbklPQ29tcGxldGUiLCJmcmVlaGFuZDNEU3RvcmUiLCJzZXJpZXMiLCJjb25zdHJ1Y3RvciIsIl93b3JraW5nQ29sbGVjdGlvbiIsIl9sb2NrZWRDb2xsZWN0aW9ucyIsImNhbGxiYWNrIiwic2V0dGVycyIsIlJPSUNvbnRvdXJBbmRTZXRJbmRleEFjdGl2ZSIsImNyZWF0ZU5ld1ZvbHVtZSIsInJvaUNvbnRvdXJJbmRleCIsInNldFZvbHVtZU5hbWUiLCJzdHJ1Y3R1cmVTZXRVaWQiLCJ1bmxvY2tTdHJ1Y3R1cmVTZXQiLCJjb21wb25lbnQiLCJjb2xsZWN0aW9uTmFtZSIsImxlbmd0aCIsIlJPSUNvbnRvdXJDb2xsZWN0aW9uIiwiaSIsInB1c2giLCJpbmRleCIsInN0cnVjdHVyZVNldENvbGxlY3Rpb24iLCJqIiwiUm9pQ29udG91clNldHRpbmdzIiwiaW50ZXJwb2xhdGUiLCJkaXNwbGF5U3RhdHMiLCJvbkRpc3BsYXlTdGF0c1RvZ2dsZUNsaWNrIiwib25JbnRlcnBvbGF0ZVRvZ2dsZUNsaWNrIiwidG9nZ2xlRGlzcGxheVN0YXRzIiwidG9nZ2xlSW50ZXJwb2xhdGUiLCJXb3JraW5nUm9pQ29sbGVjdGlvbkxpc3QiLCJXb3JraW5nQ29sbGVjdGlvbkxpc3RJdGVtIiwiY2hlY2tlZCIsInJvaUNvbnRvdXJDb2xvciIsImJydXNoTW9kdWxlIiwiYnJ1c2giLCJicnVzaFN0YXRlIiwibWluR2F0ZVNlcGVyYXRpb24iLCJCcnVzaFNldHRpbmdzIiwiY3VzdG9tR2F0ZVJhbmdlIiwiaG9sZUZpbGwiLCJzdHJheVJlbW92ZSIsImFjdGl2ZUdhdGUiLCJjdXN0b21HYXRlUmFuZ2VNaW4iLCJjdXN0b21HYXRlUmFuZ2VNYXgiLCJvbkdhdGVDaGFuZ2UiLCJvbkN1c3RvbUdhdGVNaW5DaGFuZ2UiLCJvbkN1c3RvbUdhdGVNYXhDaGFuZ2UiLCJvbkhvbGVGaWxsQ2hhbmdlIiwib25TdHJheVJlbW92ZUNoYW5nZSIsImV2dCIsInZhbCIsInRhcmdldCIsInZhbHVlIiwiTnVtYmVyIiwiY3VzdG9tUmFuZ2VNYXgiLCJjdXN0b21SYW5nZU1pbiIsImhvbGVGaWxsUmFuZ2UiLCJzdHJheVJlbW92ZVJhbmdlIiwiZ2F0ZXMiLCJob2xlRmlsbExhYmVsIiwic3RyYXlSZW1vdmVMYWJlbCIsImN1c3RvbUdhdGVzIiwiY3VzdG9tUmFuZ2UiLCJnYXRlIiwicmFuZ2UiLCJTZWdtZW50YXRpb25NZW51IiwiZ2V0U2VnbWVudExpc3QiLCJzZWdtZW50cyIsImltcG9ydE1ldGFkYXRhIiwiYWN0aXZlU2VnbWVudEluZGV4IiwiZGVsZXRlQ29uZmlybWF0aW9uT3BlbiIsInNlZ21lbnRUb0RlbGV0ZSIsIm9uU2VnbWVudENoYW5nZSIsIm9uRWRpdENsaWNrIiwiY29uZmlybURlbGV0ZU9uRGVsZXRlQ2xpY2siLCJvbkRlbGV0ZUNhbmNlbENsaWNrIiwib25EZWxldGVDb25maXJtQ2xpY2siLCJfaW1wb3J0TWV0YWRhdGEiLCJfc2VnbWVudHMiLCJzZWdtZW50SW5kZXgiLCJlbGVtZW50IiwiZWRpdFNlZ21lbnRJbnB1dCIsImRlbGV0ZVNlZ21lbnQiLCJzZWdtZW50TGFiZWwiLCJmaW5kIiwic2VnbWVudCIsIlNlZ21lbnRMYWJlbCIsImxhYmVsIiwidHlwZSIsIm1vZGlmaWVkIiwic2VnbWVudE1ldGFkYXRhIiwiU2VnbWVudGF0aW9uTWVudURlbGV0ZUNvbmZpcm1hdGlvbiIsIlNlZ21lbnRhdGlvbk1lbnVMaXN0Qm9keSIsIm9uRGVsZXRlQ2xpY2siLCJuZXdTZWdtZW50IiwiU2VnbWVudGF0aW9uTWVudUxpc3RIZWFkZXIiLCJTZWdtZW50YXRpb25NZW51TGlzdEl0ZW0iLCJ0eXBlV2l0aE1vZGlmaWVyIiwiU2VnbWVudGVkUHJvcGVydHlUeXBlQ29kZVNlcXVlbmNlIiwiQ29kZU1lYW5pbmciLCJtb2RpZmllciIsIlNlZ21lbnRlZFByb3BlcnR5VHlwZU1vZGlmaWVyQ29kZVNlcXVlbmNlIiwiY29sb3JtYXAiLCJhY3RpdmVDb3JuZXJzdG9uZUNvbG9yTWFwIiwiZ2V0Q29sb3IiLCJzZWdtZW50Q29sb3IiLCJzZWdtZW50Q2F0ZWdvcnkiLCJTZWdtZW50ZWRQcm9wZXJ0eUNhdGVnb3J5Q29kZVNlcXVlbmNlIiwiX2dldFR5cGVXaXRoTW9kaWZpZXIiLCJUT09MQkFSX0JVVFRPTl9UWVBFUyIsIkNPTU1BTkQiLCJTRVRfVE9PTF9BQ1RJVkUiLCJpZCIsInByZVJlZ2lzdHJhdGlvbiIsImNvbmZpZ3VyYXRpb24iLCJpbml0IiwiZ2V0Q29tbWFuZHNNb2R1bGUiLCJkZWZhdWx0Q29udGV4dCIsImFjdGlvbnMiLCJkZWZpbml0aW9ucyIsImdldFRvb2xiYXJNb2R1bGUiLCJpY29uIiwiYnV0dG9ucyIsImNvbW1hbmROYW1lIiwiY29tbWFuZE9wdGlvbnMiLCJ0b29sTmFtZSIsIlRPT0xfTkFNRVMiLCJGUkVFSEFORF9ST0lfM0RfVE9PTCIsIkZSRUVIQU5EX1JPSV8zRF9TQ1VMUFRPUl9UT09MIiwiQlJVU0hfM0RfVE9PTCIsIkJSVVNIXzNEX0hVX0dBVEVEX1RPT0wiLCJCUlVTSF8zRF9BVVRPX0dBVEVEX1RPT0wiLCJnZXRQYW5lbE1vZHVsZSIsIm1lbnVPcHRpb25zIiwiY29tcG9uZW50cyIsImRlZmF1bHRDb25maWciLCJtYXhSYWRpdXMiLCJzaG93RnJlZWhhbmRTdGF0cyIsImJydXNoM2RUb29sTmFtZSIsImJydXNoM0RIVUdhdGVkVG9vbE5hbWUiLCJicnVzaDNEQXV0b0dhdGVkVG9vbCIsImZyZWVoYW5kUm9pM0RUb29sIiwiZnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbCIsImNvbmZpZyIsIk9iamVjdCIsImFzc2lnbiIsImV4dGVuZEJydXNoTW9kdWxlIiwicmVnaXN0ZXIiLCJmcmVlaGFuZDNETW9kdWxlIiwiYWRkVG9vbCIsIkJydXNoM0RUb29sIiwiQnJ1c2gzREhVR2F0ZWRUb29sIiwiQnJ1c2gzREF1dG9HYXRlZFRvb2wiLCJGcmVlaGFuZFJvaTNEVG9vbCIsIkZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wiLCJyZWZlcmVuY2VkVG9vbE5hbWUiLCJhY3RpdmVHYXRlUmFuZ2UiLCJnYXRlSW5kZXgiLCJmaW5kSW5kZXgiLCJtaW4iLCJtYXgiLCJpbXBvcnQiLCJpbXBvcnRNb2RpZmllZCIsInNlcmllc0NvbGxlY3Rpb24iLCJjaGVjayIsIm9iamVjdCIsIkVycm9yIiwiZ2V0U2VyaWVzIiwiZ2V0U3RydWN0dXJlU2V0IiwiZ2V0Uk9JQ29udG91ciIsIlJPSUNvbnRvdXJVaWQiLCJST0lDb250b3VyIiwiZ2V0Uk9JQ29udG91ckluZGV4IiwiZ2V0QWN0aXZlU3RydWN0dXJlU2V0SW5kZXgiLCJhY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleCIsImdldEFjdGl2ZVJPSUNvbnRvdXJJbmRleCIsImdldEFjdGl2ZVJPSUNvbnRvdXIiLCJ1bmRlZmluZWQiLCJzZXRTZXJpZXMiLCJzZXRTdHJ1Y3R1cmVTZXQiLCJvcHRpb25zIiwiZ2VuZXJhdGVVSUQiLCJpc0xvY2tlZCIsInNldFJPSUNvbnRvdXIiLCJnZXROZXh0Q29sb3IiLCJzZXRST0lDb250b3VyQW5kU2V0SW5kZXhBY3RpdmUiLCJzZXREZWxldGVST0lGcm9tU3RydWN0dXJlU2V0IiwiUk9JQ29udG91ckluZGV4Iiwic3BsaWNlIiwic2V0U3RydWN0dXJlU2V0TmFtZSIsInNldERlbGV0ZVN0cnVjdHVyZVNldCIsInN0cnVjdHVyZVNldEluZGV4Iiwic2V0Uk9JQ29udG91ck5hbWUiLCJzZXRBY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleCIsInNldEFjdGl2ZVN0cnVjdHVyZVNldCIsInNldEFjdGl2ZVJPSUNvbnRvdXJJbmRleCIsInNldEFjdGl2ZVJPSUNvbnRvdXIiLCJpbmNyZW1lbnRQb2x5Z29uQ291bnQiLCJkZWNyZW1lbnRQb2x5Z29uQ291bnQiLCJhY3RpdmVST0lDb250b3VyIiwiZGVsZXRlUk9JRnJvbVN0cnVjdHVyZVNldCIsImRlbGV0ZVN0cnVjdHVyZVNldCIsInN0cnVjdHVyZVNldE5hbWUiLCJST0lDb250b3VyTmFtZSIsImFjdGl2ZVN0cnVjdHVyZVNldCIsImVuYWJsZWRFbGVtZW50Q2FsbGJhY2siLCJjb3JuZXJzdG9uZSIsImdldEVuYWJsZWRFbGVtZW50IiwiaW1hZ2UiLCJpbXBvcnRDb2xvcnMiLCJjdXJyZW50Q29sb3JJbmRleCIsImltcG9ydEludGVybmFsTW9kdWxlIiwiZ2V0Q2lyY2xlIiwiaW5pdGlhbENvbmZpZ3VyYXRpb24iLCJfc2V0Q3VzdG9tR2F0ZSIsIl9zdGFydFBhaW50aW5nIiwiZXZlbnREYXRhIiwiZGV0YWlsIiwicm93cyIsImNvbHVtbnMiLCJjdXJyZW50UG9pbnRzIiwieCIsInkiLCJyYWRpdXMiLCJpbWFnZVBpeGVsRGF0YSIsImdldFBpeGVsRGF0YSIsInJlc2NhbGVTbG9wZSIsInNsb3BlIiwicmVzY2FsZUludGVyY2VwdCIsImludGVyY2VwdCIsImNpcmNsZSIsImxvIiwiaGkiLCJwaXhlbFZhbHVlIiwiZ2F0ZVZhbHVlcyIsImdhdGVkQ2lyY2xlQXJyYXkiLCJfY2xlYW5HYXRlZENpcmNsZSIsImRyYXdCcnVzaFBpeGVscyIsInBvaW50ZXJBcnJheSIsIl9nYXRlQ2lyY2xlIiwicGFpbnRFdmVudERhdGEiLCJsYWJlbG1hcDNEIiwiY3VycmVudEltYWdlSWRJbmRleCIsImFjdGl2ZUxhYmVsbWFwSW5kZXgiLCJzaG91bGRFcmFzZSIsInRyaWdnZXJFdmVudCIsIkVWRU5UUyIsIkxBQkVMTUFQX01PRElGSUVEIiwidXBkYXRlSW1hZ2UiLCJnYXRlUmFuZ2UiLCJkYXRhIiwiZWRnZVBpeGVscyIsInhTaXplIiwieVNpemUiLCJfZ2V0Qm91bmRpbmdCb3hPZkNpcmNsZSIsIl9ib3hHYXRlZENpcmNsZSIsImdldHRlciIsIl9mbG9vZEZpbGxFbXB0eVJlZ2lvbnNGcm9tRWRnZXMiLCJfZmluZEhvbGVzQW5kUmVnaW9ucyIsImhvbGVzIiwicmVnaW9ucyIsImxhcmdlc3RSZWdpb25BcmVhIiwiX2dldEFyZWFPZkxhcmdlc3RSZWdpb24iLCJyIiwicmVnaW9uIiwicCIsImhvbGUiLCJmaWxsZWRHYXRlZENpcmNsZUFycmF5IiwiVWludDhDbGFtcGVkQXJyYXkiLCJfZ2V0RWRnZVBpeGVscyIsInJlc3VsdCIsImZsb29kRmlsbCIsInNlZWQiLCJmbG9vZGVkIiwiayIsImdldEFuZENhY2hlTGFiZWxtYXAyRCIsIl9pc0N0cmxEb3duIiwiYWx3YXlzRXJhc2VPbkNsaWNrIiwiZ2VuZXJhdGVCcnVzaE1ldGFkYXRhIiwiX3BhaW50IiwiX2RyYXdpbmciLCJfc3RhcnRMaXN0ZW5pbmdGb3JNb3VzZVVwIiwiQnJ1c2hUb29sIiwiZ2V0RGVmYXVsdEZyZWVoYW5kU2N1bHB0ZXJNb3VzZVRvb2xDb25maWd1cmF0aW9uIiwiYWN0aXZlTW91c2VVcENhbGxiYWNrIiwiY2xvc2VzdFRvb2xJbmRleCIsIl9nZXRDbG9zZXN0RnJlZWhhbmRUb29sT25FbGVtZW50IiwidG9vbFN0YXRlIiwiZ2V0VG9vbFN0YXRlIiwidG9vbERhdGEiLCJyZWZlcmVuY2VkU3RydWN0dXJlU2V0IiwiaG92ZXJDb2xvciIsInJlZmVyZW5jZWRST0lDb250b3VyIiwiY3VycmVudFRvb2wiLCJfYWN0aXZlIiwiaXNNdWx0aVBhcnRUb29sQWN0aXZlIiwiX2dldE1vdXNlTG9jYXRpb24iLCJfaW52YWxpZGF0ZVRvb2xEYXRhIiwibW91c2VVcFJlbmRlciIsIl9kZWFjdGl2YXRlU2N1bHB0IiwicHJldmVudFByb3BhZ2F0aW9uIiwiaW52YWxpZGF0ZWQiLCJpbnRlcnBvbGF0ZWQiLCJGcmVlaGFuZFJvaVNjdWxwdG9yVG9vbCIsIm1vdXNlTG9jYXRpb24iLCJoYW5kbGVzIiwic3RhcnQiLCJoaWdobGlnaHQiLCJhY3RpdmUiLCJtaW5TcGFjaW5nIiwiZHJhZ0NvbG9yIiwidG9vbENvbG9ycyIsImdldEFjdGl2ZUNvbG9yIiwiZ2V0VG9vbENvbG9yIiwic2hvd0N1cnNvck9uSG92ZXIiLCJsaW1pdFJhZGl1c091dHNpZGVSZWdpb24iLCJob3ZlckN1cnNvckZhZGVBbHBoYSIsImhvdmVyQ3Vyc29yRmFkZURpc3RhbmNlIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwic3RvcFByb3BhZ2F0aW9uIiwicHJldmVudERlZmF1bHQiLCJpbnNlcnRPckRlbGV0ZSIsImZyZWVoYW5kQXJlYSIsImNhbGN1bGF0ZUZyZWVoYW5kU3RhdGlzdGljcyIsImRyYXciLCJkcmF3Sm9pbmVkTGluZXMiLCJkcmF3SGFuZGxlcyIsImRyYXdMaW5rZWRUZXh0Qm94IiwibW92ZUhhbmRsZU5lYXJJbWFnZVBvaW50IiwiZ2V0TmV3Q29udGV4dCIsIm51bWJlcnNXaXRoQ29tbWFzIiwicG9pbnRJbnNpZGVCb3VuZGluZ0JveCIsImNhbGN1bGF0ZVNVViIsImRlZmF1bHRGcmVlaGFuZENvbmZpZ3VyYXRpb24iLCJhbHdheXNTaG93SGFuZGxlcyIsIl9mcmVlaGFuZDNEU3RvcmUiLCJfb25NZWFzdXJlbWVudFJlbW92ZWQiLCJfZHJhd2luZ01vdXNlVXBDYWxsYmFjayIsImdvb2RFdmVudERhdGEiLCJlcnJvciIsIm1lYXN1cmVtZW50RGF0YSIsInBvaW50cyIsInRleHRCb3giLCJoYXNNb3ZlZCIsIm1vdmVzSW5kZXBlbmRlbnRseSIsImRyYXduSW5kZXBlbmRlbnRseSIsImFsbG93ZWRPdXRzaWRlSW1hZ2UiLCJoYXNCb3VuZGluZ0JveCIsImludGVyYWN0aW9uVHlwZSIsIl9hZGRBbmRTZXRWb2x1bWVJZk5vVm9sdW1lcyIsIl9zdGFydERyYXdpbmciLCJfYWRkUG9pbnQiLCJjb29yZHMiLCJoYW5kbGVDYW52YXMiLCJwaXhlbFRvQ2FudmFzIiwicG9pbnQiLCJkaXN0YW5jZSIsImN1cnJlbnRUYXJnZXQiLCJuZWFyYnkiLCJfcG9pbnROZWFySGFuZGxlQWxsVG9vbHMiLCJldmVudCIsImN0cmxLZXkiLCJoYW5kbGVOZWFyYnkiLCJjYWxsIiwidG9vbEluZGV4IiwiaGFuZGxlIiwibWV0YUtleSIsIl9zd2l0Y2hST0lDb250b3VyIiwiZHJhZ09yaWdpbiIsIl9tb2RpZnlpbmciLCJjdXJyZW50SGFuZGxlIiwiX2FjdGl2YXRlTW9kaWZ5Iiwic2VyaWVzTW9kdWxlIiwibWV0YURhdGEiLCJnZXQiLCJpbWFnZUlkIiwibW9kYWxpdHkiLCJjb250ZXh0IiwiY2FudmFzQ29udGV4dCIsImNhbnZhcyIsImxpbmVXaWR0aCIsInRvb2xTdHlsZSIsImdldFRvb2xXaWR0aCIsImlzUk9JQWN0aXZlIiwiZ2V0Q29sb3JJZkFjdGl2ZSIsImZpbGxDb2xvciIsImludmFsaWRIYW5kbGVQbGFjZW1lbnQiLCJpbnZhbGlkQ29sb3IiLCJnZXRGaWxsQ29sb3IiLCJnbG9iYWxBbHBoYSIsImludGVycG9sYXRlZEFscGhhIiwibGluZXMiLCJwb2x5Qm91bmRpbmdCb3giLCJmaWxsIiwiaGFuZGxlUmFkaXVzIiwiaW50ZXJwb2xhdGVkSGFuZGxlUmFkaXVzIiwiYWN0aXZlSGFuZGxlUmFkaXVzIiwiY2FuQ29tcGxldGUiLCJjb21wbGV0ZUhhbmRsZVJhZGl1cyIsImFyZWEiLCJtZWFuU3RkRGV2IiwibWVhblN0ZERldlNVViIsImJvdW5kcyIsImxlZnQiLCJyaWdodCIsImJvdHRvbSIsInRvcCIsIk1hdGgiLCJ3aWR0aCIsImFicyIsImhlaWdodCIsInBpeGVscyIsImdldFBpeGVscyIsIm1lYW4iLCJzdGREZXYiLCJpc05hTiIsImNvbHVtblBpeGVsU3BhY2luZyIsInJvd1BpeGVsU3BhY2luZyIsInNjYWxpbmciLCJ0ZXh0IiwidGV4dEJveFRleHQiLCJ0ZXh0Qm94QW5jaG9yUG9pbnRzIiwidGV4dExpbmVzIiwibW9TdWZmaXgiLCJtZWFuVGV4dCIsInRvRml4ZWQiLCJzdGREZXZUZXh0IiwiU1VWdGV4dCIsInN1ZmZpeCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFyZWFUZXh0IiwiX2RlYWN0aXZhdGVEcmF3IiwidG9vbFR5cGUiLCJfY2xvc2VUb29sSWZEcmF3aW5nIiwiX2FkZE1lYXN1cmVtZW50UmVtb3ZlZExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIk1FQVNVUkVNRU5UX1JFTU9WRUQiLCJhZGRFdmVudExpc3RlbmVyIiwiRnJlZWhhbmRSb2lUb29sIiwic3BhY2luZyIsImNvbXBsZXRlSGFuZGxlUmFkaXVzVG91Y2giLCJtb2R1bGUiLCJleHBvcnRzIiwib25GbG9vZCIsIm9uQm91bmRhcnkiLCJlcXVhbHMiLCJkaWFnb25hbHMiLCJzdGFydE5vZGUiLCJwZXJtdXRhdGlvbnMiLCJzdGFjayIsInZpc2l0cyIsImluaXRpYWxpemUiLCJub29wIiwiZGVmYXVsdEVxdWFscyIsInBydW5lZFBlcm11dGF0aW9ucyIsIm1haW4iLCJjdXJyZW50QXJncyIsImZsb29kIiwicG9wIiwiYm91bmRhcmllcyIsImpvYiIsImdldEFyZ3MiLCJwcmVsZXRncyIsInByZXZpb3VzQXJncyIsInZpc2l0ZWQiLCJtYXJrQXNWaXNpdGVkIiwibWVtYmVyIiwibWFya0FzRmxvb2RlZCIsInB1c2hBZGphY2VudCIsIm1hcmtBc0JvdW5kYXJ5Iiwia2V5Iiwibm9kZSIsInNhZmVseSIsImFwcGx5IiwicGVybSIsIm5leHRBcmdzIiwic2xpY2UiLCJmIiwiYXJncyIsImEiLCJiIiwicGVybXV0ZSIsImZpbHRlciIsImNvdW50IiwiY291bnROb25aZXJvZXMiLCJwZXJtcyIsInBlcm11dGF0aW9uIiwic3RyaW5nIiwic3BsaXQiLCJjIiwicGFyc2VJbnQiLCJwb3ciLCJscGFkIiwidG9TdHJpbmciLCJjaGFyYWN0ZXIiLCJhcnJheSIsIkFycmF5IiwicGFkIiwiam9pbiIsImhhc093blByb3BlcnR5IiwidW5zaGlmdCIsIm5ld1NlZ21lbnRJbnB1dCIsInNlZ0luZGV4IiwiYnJ1c2hNZXRkYXRhSW5wdXQiLCJzZWdtZW50SW5wdXRDYWxsYmFjayIsImFjdGl2ZUVsZW1lbnQiLCJpc0FycmF5IiwibnVtYmVyT2ZDb2xvcnMiLCJnZXROdW1iZXJPZkNvbG9ycyIsImNhdGVnb3J5VUlEIiwidHlwZVVJRCIsIm1vZGlmaWVyVUlEIiwiUG9seWdvbiIsInNvcEluc3RhbmNlVWlkIiwicG9seWdvblVpZCIsImZyYW1lTnVtYmVyIiwiX3BvbHlQb2ludHMiLCJfZGVlcENvcHlQb2ludHMiLCJfc29wSW5zdGFuY2VVaWQiLCJfc2VyaWVzSW5zdGFuY2VVaWQiLCJfc3RydWN0dXJlU2V0VWlkIiwiX1JPSUNvbnRvdXJVaWQiLCJfcG9seWdvblVpZCIsIl9mcmFtZU51bWJlciIsIl9pbnRlcnBvbGF0ZWQiLCJwb2x5UG9pbnRzIiwiaXNaIiwieiIsImltcG9ydFR5cGUiLCJzb3BJbnN0YW5jZVVJRCIsIl9nZW5lcmF0ZVBvaW50cyIsInRvQmVTY2FsZWQiLCJfZGVlcENvcHlPbmVQb2ludCIsImdsb2JhbFRvb2xTdGF0ZU1hbmFnZXIiLCJnbG9iYWxJbWFnZUlkU3BlY2lmaWNUb29sU3RhdGVNYW5hZ2VyIiwiaW1hZ2VJZHMiLCJfZ2V0SW1hZ2VJZHNPZkFjdGl2ZVNlcmllcyIsIlJPSUNvbnRvdXJEYXRhIiwiX2dldFJPSUNvbnRvdXJEYXRhIiwiZXh0ZW50IiwiX2dldEV4dGVudE9mUmVnaW9uIiwic2xpY2VFZGl0ZWQiLCJfZ2V0U2xpY2VQb3NpdGlvbk9mVG9vbERhdGEiLCJpbnRlcnBvbGF0aW9uTGlzdCIsIl9zbGljZU5lZWRzSW50ZXJwb2xhdGluZyIsImNvbnRvdXJQYWlyIiwiX2dldEJvdW5kaW5nUGFpciIsIl9hcHBlbmRpbnRlcnBvbGF0aW9uTGlzdCIsImNvbnRvdXJzIiwic3RhY2tUb29sU3RhdGUiLCJ0b29sU3RhdGVNYW5hZ2VyIiwic2F2ZVRvb2xTdGF0ZSIsImltYWdlVG9vbFN0YXRlIiwiZnJlZWhhbmRSb2kiLCJjb250b3VyIiwiY29udG91cnNPblNsaWNlIiwic2xpY2VJbmRleCIsInBhaXIiLCJsaXN0IiwiY2FuSW50ZXJwb2xhdGUiLCJkUCIsImdlbmVyYXRlSW50ZXJwb2xhdGlvbkRhdGEiLCJfbGluZWFybHlJbnRlcnBvbGF0ZUJldHdlZW4iLCJpbmRpY2llcyIsImMxIiwiX2dlbmVyYXRlQ2xvc2VkQ29udG91ciIsImMyIiwiX2dlbmVyYXRlSW50ZXJwb2xhdGlvbkNvbnRvdXJQYWlyIiwiYzFJbnRlcnAiLCJjMkludGVycCIsImZvckVhY2giLCJfbGluZWFybHlJbnRlcnBvbGF0ZUNvbnRvdXIiLCJjMUhhc01vcmVOb2RlcyIsInpJbnRlcnAiLCJpbnRlcnBvbGF0ZWQyRENvbnRvdXIiLCJfZ2VuZXJhdGVJbnRlcnBvbGF0ZWRPcGVuQ29udG91ciIsImMxTWV0YWRhdGEiLCJfZWRpdEludGVycG9sYXRlZENvbnRvdXIiLCJfYWRkSW50ZXJwb2xhdGVkQ29udG91ciIsImN1bVBlcmltMSIsIl9nZXRDdW11bGF0aXZlUGVyaW1ldGVyIiwiY3VtUGVyaW0yIiwiaW50ZXJwTm9kZXMiLCJjZWlsIiwiY3VtUGVyaW0xTm9ybSIsIl9ub3JtYWxpc2VkQ3VtdWxhdGl2ZVBlcmltZXRlciIsImN1bVBlcmltMk5vcm0iLCJudW1Ob2RlczEiLCJudW1Ob2RlczIiLCJwZXJpbTFJbnRlcnAiLCJfZ2V0SW50ZXJwb2xhdGVkUGVyaW0iLCJwZXJpbTJJbnRlcnAiLCJwZXJpbTFJbmQiLCJfZ2V0SW5kaWNhdG9yQXJyYXkiLCJwZXJpbTJJbmQiLCJub2Rlc1BlclNlZ21lbnQxIiwiX2dldE5vZGVzUGVyU2VnbWVudCIsIm5vZGVzUGVyU2VnbWVudDIiLCJjMWkiLCJfZ2V0U3VwZXJTYW1wbGVkQ29udG91ciIsImMyaSIsIl9zaGlmdFN1cGVyU2FtcGxlZENvbnRvdXJJblBsYWNlIiwiX3JlZHVjZUNvbnRvdXJzVG9PcmlnaW5Ob2RlcyIsInJlZmVyZW5jZWRUb29sRGF0YSIsInBvbHlnb24iLCJnZXRGcmVlaGFuZFRvb2xEYXRhIiwidG9vbERhdGFJbmRleCIsIm9sZFBvbHlnb24iLCJ1cGRhdGVkUG9seWdvbiIsImMxaXIiLCJjMmlyIiwiY0ludGVycCIsIkkiLCJjMWlMZW5ndGgiLCJvcHRpbWFsIiwic3RhcnRpbmdOb2RlIiwidG90YWxTcXVhcmVkWFlMZW5ndGhzIiwiSW5maW5pdHkiLCJpdHRlcmF0aW9uIiwiX3NoaWZ0Q2lyY3VsYXJBcnJheSIsImFyciIsImZsb29yIiwibm9kZXNQZXJTZWdtZW50IiwiY2kiLCJuIiwieFNwYWNpbmciLCJ5U3BhY2luZyIsInBlcmltSW50ZXJwIiwicGVyaW1JbmQiLCJpZHgiLCJzb3J0IiwicGVyaW1JbmRTb3J0ZWQiLCJpbmRpY2llc09mT3JpZ2luTm9kZXMiLCJyZWR1Y2UiLCJlbGVtZW50VmFsdWUiLCJudW1Ob2RlcyIsImN1bVBlcmltTm9ybSIsImRpZmYiLCJsaW5zcGFjZSIsImNvbmNhdCIsImN1bXVsYXRpdmVQZXJpbWV0ZXIiLCJsZW5ndGhPZlNlZ21lbnQiLCJzcXJ0IiwiY3VtUGVyaW0iLCJfcmV2ZXJzZUlmQW50aUNsb2Nrd2lzZSIsImNvbnRvdXJYTWVhbiIsImdldFN1bVJlZHVjZXIiLCJjaGVja1N1bSIsInJldmVyc2UiLCJ0b3RhbCIsIm51bSIsImNhdGVnb3JpZXMiLCJHZW5lcmFsQW5hdG9teUxpc3QiLCJTZWdtZW50YXRpb25Db2RlcyIsIkNhdGVnb3J5IiwiZ2VuZXJhdGVNZXRhZGF0YSIsImNhdGVnb3J5IiwiY2F0ZWdvcmllc0kiLCJDb2RlVmFsdWUiLCJUeXBlIiwidHlwZXNJIiwiQ29kaW5nU2NoZW1lRGVzaWduYXRvciIsIlNlZ21lbnRBbGdvcml0aG1UeXBlIiwibW9kZmllciIsIk1vZGlmaWVyIiwibW9kaWZpZXJJIiwiUmVjb21tZW5kZWREaXNwbGF5Q0lFTGFiVmFsdWUiLCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZSIsImQiLCJEYXRlIiwiZ2V0VGltZSIsInBlcmZvcm1hbmNlIiwibm93IiwicmVwbGFjZSIsInJhbmRvbSIsImFjdGl2ZVZpZXdwb3J0IiwiZG9tIiwiZ2VuZXJhbFNlcmllc01vZHVsZSIsInNlcmllc0luc3RhbmNlVUlEIiwiZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tSW1hZ2VJZCIsIndvcmtpbmdTdHJ1Y3R1cmVTZXQiLCJrZXlzIiwiZWxlbWVudElkIiwibW92ZVBvbHlnb25zSW5JbnN0YW5jZSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87QUNWQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFD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QkFBckMsRUFBd0QsU0FBeEQsQ0FBL0I7QUFFQXFTLFFBQUksQ0FBQy9PLGVBQUwsR0FBdUIsU0FBdkI7QUFDQStPLFFBQUksQ0FBQzBDLG9CQUFMLEdBQTRCQSxvQkFBNUI7QUFDQTFDLFFBQUksQ0FBQ3dDLHNCQUFMLEdBQThCQSxzQkFBOUI7QUFDRDtBQUNGLEM7Ozs7Ozs7Ozs7O0FDL0VELDhEOzs7Ozs7Ozs7OztBQ0FBLDhEOzs7Ozs7Ozs7OztBQ0FBLCtEOzs7Ozs7Ozs7OztBQ0FBLG1EIiwiZmlsZSI6Im9oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkocmVxdWlyZShcImNvcm5lcnN0b25lLWNvcmVcIiksIHJlcXVpcmUoXCJjb3JuZXJzdG9uZS1tYXRoXCIpLCByZXF1aXJlKFwiY29ybmVyc3RvbmUtdG9vbHNcIiksIHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIm9oaWYtc2VnbWVudGF0aW9uLXBsdWdpblwiLCBbXCJjb3JuZXJzdG9uZS1jb3JlXCIsIFwiY29ybmVyc3RvbmUtbWF0aFwiLCBcImNvcm5lcnN0b25lLXRvb2xzXCIsIFwicmVhY3RcIl0sIGZhY3RvcnkpO1xuXHRlbHNlIGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0Jylcblx0XHRleHBvcnRzW1wib2hpZi1zZWdtZW50YXRpb24tcGx1Z2luXCJdID0gZmFjdG9yeShyZXF1aXJlKFwiY29ybmVyc3RvbmUtY29yZVwiKSwgcmVxdWlyZShcImNvcm5lcnN0b25lLW1hdGhcIiksIHJlcXVpcmUoXCJjb3JuZXJzdG9uZS10b29sc1wiKSwgcmVxdWlyZShcInJlYWN0XCIpKTtcblx0ZWxzZVxuXHRcdHJvb3RbXCJvaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW5cIl0gPSBmYWN0b3J5KHJvb3RbXCJjb3JuZXJzdG9uZS1jb3JlXCJdLCByb290W1wiY29ybmVyc3RvbmUtbWF0aFwiXSwgcm9vdFtcImNvcm5lcnN0b25lLXRvb2xzXCJdLCByb290W1wicmVhY3RcIl0pO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfY29ybmVyc3RvbmVfY29yZV9fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Nvcm5lcnN0b25lX21hdGhfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9jb3JuZXJzdG9uZV90b29sc19fLCBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX3JlYWN0X18pIHtcbnJldHVybiAiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gXCIuL3NyYy9pbmRleC5qc1wiKTtcbiIsImNvbnN0IGpzb24gPSBge1xuICBcIlNlZ21lbnRhdGlvbkNhdGVnb3J5VHlwZUNvbnRleHROYW1lXCI6IFwiU2VnbWVudGF0aW9uIGNhdGVnb3J5IGFuZCB0eXBlIC0gM0QgU2xpY2VyIEdlbmVyYWwgQW5hdG9teSBsaXN0XCIsXG4gIFwiQHNjaGVtYVwiOiBcImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9xaWljci9kY21xaS9tYXN0ZXIvZG9jL3NjaGVtYXMvc2VnbWVudC1jb250ZXh0LXNjaGVtYS5qc29uI1wiLFxuICBcIlNlZ21lbnRhdGlvbkNvZGVzXCI6IHtcbiAgICBcIkNhdGVnb3J5XCI6IFtcbiAgICAgIHtcbiAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRpc3N1ZVwiLFxuICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjg1NzU2MDA3XCIsXG4gICAgICAgIFwiY2lkXCI6IFwiNzA1MVwiLFxuICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDAzMDBcIixcbiAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQwMDUwXCIsXG4gICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlNlZ21lbnRhdGlvbiBQcm9wZXJ0eSBDYXRlZ29yaWVzXCIsXG4gICAgICAgIFwiVHlwZVwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDEyOCxcbiAgICAgICAgICAgICAgMTc0LFxuICAgICAgICAgICAgICAxMjhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVGlzc3VlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInRpc3N1ZVwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDAzMDBcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDA1MFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4NTc1NjAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjE2LFxuICAgICAgICAgICAgICAxMDEsXG4gICAgICAgICAgICAgIDc5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFydGVyeVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJhcnRlcnlcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNTU1ODA2XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNDEwNjZcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjc1OTg5MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMzAsXG4gICAgICAgICAgICAgIDIyMCxcbiAgICAgICAgICAgICAgNzBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQm9keSBmYXRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZmF0XCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDM0NDMzNVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJGLTAzRDM4XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0ODMwMDAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQxLFxuICAgICAgICAgICAgICAyMTQsXG4gICAgICAgICAgICAgIDE0NVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCb25lXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImJvbmVcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjYyOTUwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDAxNkVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjcyNjczMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODMsXG4gICAgICAgICAgICAgIDE1NixcbiAgICAgICAgICAgICAgMjIwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNhcGlsbGFyeVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjYXBpbGxhcnlcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA2OTAxXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNDAwNTBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjA5ODIwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDExMSxcbiAgICAgICAgICAgICAgMTg0LFxuICAgICAgICAgICAgICAyMTBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2FydGlsYWdlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImNhcnRpbGFnZVwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDczMDFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDIxQlwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMDkzMTIwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDExMSxcbiAgICAgICAgICAgICAgMTg0LFxuICAgICAgICAgICAgICAyMTBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ29ubmVjdGl2ZSB0aXNzdWVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY29ubmVjdGl2ZSB0aXNzdWVcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA5NzgwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMUEyMDBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjE3OTMwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE4MyxcbiAgICAgICAgICAgICAgMjE0LFxuICAgICAgICAgICAgICAyMTFcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGlnYW1lbnRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGlnYW1lbnRcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDIzNjg1XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTgwMTBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTIwODIwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDY4LFxuICAgICAgICAgICAgICAxNzIsXG4gICAgICAgICAgICAgIDEwMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMeW1waCBub2RlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImx5bXBoIG5vZGVcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI0MjA0XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQzQwMDBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTk0NDEwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDExMSxcbiAgICAgICAgICAgICAgMTk3LFxuICAgICAgICAgICAgICAxMzFcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTHltcGhhdGljIHZlc3NlbFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJseW1waGF0aWMgdmVzc2VsXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyOTg4OVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUM2MDEwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjgzNTU1MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzgsXG4gICAgICAgICAgICAgIDIxMixcbiAgICAgICAgICAgICAgMjQyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1lbmlzY3VzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm1lbmlzY3VzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNDQ5OFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTE1MDA5XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc0MTM1MDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxOTIsXG4gICAgICAgICAgICAgIDEwNCxcbiAgICAgICAgICAgICAgODhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTXVzY2xlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm11c2NsZVwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjY4NDVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMzAwMVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3MTYxNjAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMTQsXG4gICAgICAgICAgICAgIDQ5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk5lcnZlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm5lcnZlXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMTI2ODE2OVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQwNTk4XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjExOTQxMDAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjIxLFxuICAgICAgICAgICAgICAxMzAsXG4gICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJPcmdhblwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJvcmdhblwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzEyODUwOTJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xQTMxMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyODYxMDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNraW5cIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwic2tpblwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzExMjMwMjNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0wMTAwMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzOTkzNzAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTUyLFxuICAgICAgICAgICAgICAxODksXG4gICAgICAgICAgICAgIDIwN1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUZW5kb25cIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidGVuZG9uXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzOTUwOFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTE3MDEwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjEzMDI0MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAxNTEsXG4gICAgICAgICAgICAgIDIwNlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJWZWluXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInZlaW5cIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNDQ3MTQ2XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNDgwNkVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTgxMzc4MDA5XCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwic2hvd0FuYXRvbXlcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFuYXRvbWljYWwgU3RydWN0dXJlXCIsXG4gICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTIzMDM3MDA0XCIsXG4gICAgICAgIFwiY2lkXCI6IFwiNzA1MVwiLFxuICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzEyNjgwODZcIixcbiAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQwMDBBXCIsXG4gICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlNlZ21lbnRhdGlvbiBQcm9wZXJ0eSBDYXRlZ29yaWVzXCIsXG4gICAgICAgIFwiVHlwZVwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYWJkb21lblwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ0MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDA3MjZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBYmRvbWVuXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTEzMzQ1MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODYsXG4gICAgICAgICAgICAgIDEyNCxcbiAgICAgICAgICAgICAgMTYxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImFiZG9taW5hbCBjYXZpdHlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1ENDAxMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjMwMTY4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQWJkb21pbmFsIGNhdml0eVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUyNzMxMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzEsXG4gICAgICAgICAgICAgIDg1LFxuICAgICAgICAgICAgICA2OFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtdXNjbGVzIG9mIGFiZG9taW5hbCB3YWxsXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTQwMDFcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMTI3OTM4NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFiZG9taW5hbCB3YWxsIG11c2NsZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE5NTg3OTAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgNjAsXG4gICAgICAgICAgICAgIDE0MyxcbiAgICAgICAgICAgICAgODNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYWRlbm9oeXBvcGh5c2lzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQjExMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMjAwOFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFkZW5vaHlwb3BoeXNpc1wiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2MjgxODAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTRcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBZHJlbmFsIGdsYW5kXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwMTYyNVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUIzMDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjQ5LFxuICAgICAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAgICAgMTUwXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGFkcmVuYWwgZ2xhbmRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyNDksXG4gICAgICAgICAgICAgICAgICAxODYsXG4gICAgICAgICAgICAgICAgICAxNTBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBhZHJlbmFsIGdsYW5kXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjM0NTEwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFteWdkYWxhXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwMjcwOFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEzMjMwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgOTgsXG4gICAgICAgICAgICAgICAgICAxNTMsXG4gICAgICAgICAgICAgICAgICAxMTJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgYW15Z2RhbG9pZCBjb21wbGV4XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgOTgsXG4gICAgICAgICAgICAgICAgICAxNTMsXG4gICAgICAgICAgICAgICAgICAxMTJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBhbXlnZGFsb2lkIGNvbXBsZXhcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0OTU4MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDIyNCxcbiAgICAgICAgICAgICAgMTk5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImFudXNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC01OTkwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDAzNDYxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQW51c1wiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MzUwNTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjI0LFxuICAgICAgICAgICAgICA5NyxcbiAgICAgICAgICAgICAgNzZcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYW9ydGFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC00MjAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDAzNDgzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQW9ydGFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNhcmRpYWMgU3RydWN0dXJlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE1ODI1MDAzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTgsXG4gICAgICAgICAgICAgIDEyMyxcbiAgICAgICAgICAgICAgOTdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjYxMTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYW9ydGljIHZhbHZlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMzU0MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwMzUwMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFvcnRpYyBWYWx2ZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTWVkaWFzdGludW0gQW5hdG9teSBGaW5kaW5nIG9yIEZlYXR1cmVcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzNDIwMjAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNDQsXG4gICAgICAgICAgICAgIDIwOVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJhcmFjaG5vaWRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMTIyMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDAzNzA3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQXJhY2hub2lkXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc1MDQyMDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBcmN1YXRlIEZhc2NpY3VsdXNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIkZNQVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMyMzI5NjMzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIjI3NjY1MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDEyNSxcbiAgICAgICAgICAgICAgICAgIDEwMixcbiAgICAgICAgICAgICAgICAgIDE1NFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBhcmN1YXRlIGZhc2NpY3VsdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxMjUsXG4gICAgICAgICAgICAgICAgICAxMDIsXG4gICAgICAgICAgICAgICAgICAxNTRcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBhcmN1YXRlIGZhc2NpY3VsdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjI2LFxuICAgICAgICAgICAgICA3N1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2N1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJhdXRvbm9taWMgbmVydmVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BOTYwNVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA2MjUwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQXV0b25vbWljIG5lcnZlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZXJpcGhlcmFsIE5lcnZvdXMgU3lzdGVtIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUzNTIwMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAxNDUsXG4gICAgICAgICAgICAgIDMwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImJpbGlhcnkgdHJlZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTYwNjEwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDU0MDBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCaWxlIER1Y3RcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyODI3MzAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjIyLFxuICAgICAgICAgICAgICAxNTQsXG4gICAgICAgICAgICAgIDEzMlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ1cmluYXJ5IGJsYWRkZXJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC03NDAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA1NjgyXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQmxhZGRlclwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVsdmljIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjg5ODM3MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDIzOSxcbiAgICAgICAgICAgICAgMTcyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNrZWxldG9uIG9mIHRob3JheFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQwMTcwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA0NDgxNTdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCb25lIG9mIHRob3JheFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3MjcxMDAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQyLFxuICAgICAgICAgICAgICAyMDYsXG4gICAgICAgICAgICAgIDE0MlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJza2VsZXRvbiBvZiBuZWNrXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDAwNkRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDczMDEzMFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJvbmUgc3RydWN0dXJlIG9mIGhlYWQgYW5kL29yIG5lY2tcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzEyNzc5MDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTAsXG4gICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgMjI1XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImJyYWluXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTAxMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwNjEwNFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJyYWluXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjEyNzM4MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA4NSxcbiAgICAgICAgICAgICAgMTg4LFxuICAgICAgICAgICAgICAyNTVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiQ1NGIHNwYWNlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTAxMDlcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDQ1OTM4N1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJyYWluIGNlcmVicm9zcGluYWwgZmx1aWQgcGF0aHdheVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyODAzNzEwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDg4LFxuICAgICAgICAgICAgICAxMDYsXG4gICAgICAgICAgICAgIDIxNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ2ZW50cmljbGVzIG9mIGJyYWluXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTE2MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwNzc5OVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJyYWluIHZlbnRyaWNsZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzNTc2NDAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2F1ZGF0ZSBudWNsZXVzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwNzQ2MVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEzMjAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAgICAgICAxMTEsXG4gICAgICAgICAgICAgICAgICA4NVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBjYXVkYXRlIG51Y2xldXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAzMCxcbiAgICAgICAgICAgICAgICAgIDExMSxcbiAgICAgICAgICAgICAgICAgIDg1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgY2F1ZGF0ZSBudWNsZXVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTEwMDAwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI0NCxcbiAgICAgICAgICAgICAgMjE0LFxuICAgICAgICAgICAgICA0OVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjZW50cmFsIG5lcnZvdXMgc3lzdGVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTAwOTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDkyNzIzMlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNlbnRyYWwgbmVydm91cyBzeXN0ZW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjE0ODMwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE5NCxcbiAgICAgICAgICAgICAgMTk1LFxuICAgICAgICAgICAgICAxNjRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2VyZWJlbGxhciB3aGl0ZSBtYXR0ZXJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BNjA4MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMTUyMzgxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2VyZWJlbGxhciB3aGl0ZSBtYXR0ZXJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzMwNjAwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDg4LFxuICAgICAgICAgICAgICAxMDYsXG4gICAgICAgICAgICAgIDIxNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjZXJlYnJhbCBhcXVlZHVjdFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUExODAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDc3NjlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDZXJlYnJhbCBhcXVlZHVjdFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4MDQ0NzAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2VyZWJyYWwgZm9ybml4XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjMzNFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyOTcwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgNjQsXG4gICAgICAgICAgICAgICAgICAxMjMsXG4gICAgICAgICAgICAgICAgICAxNDdcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgZm9ybml4XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgNjQsXG4gICAgICAgICAgICAgICAgICAxMjMsXG4gICAgICAgICAgICAgICAgICAxNDdcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBmb3JuaXhcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4NzQ2MzAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTI4LFxuICAgICAgICAgICAgICAxNzQsXG4gICAgICAgICAgICAgIDEyOFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjZXJlYnJhbCBjb3J0ZXhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjAyMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA3Nzc2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2VyZWJyYWwgR3JleSBNYXR0ZXJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNDAxNDYwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgMjUwLFxuICAgICAgICAgICAgICAyMjVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2VyZWJyYWwgd2hpdGUgbWF0dGVyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTIwMzBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjI5NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNlcmVicmFsIFdoaXRlIE1hdHRlclwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2ODUyMzAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDIwN1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjZXJ2aWNhbCB2ZXJ0ZWJyYWwgY29sdW1uXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTE1MDFcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDcyODk4NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNlcnZpY2FsIHNwaW5lXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjEyMjQ5NDAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTg4LFxuICAgICAgICAgICAgICA5NSxcbiAgICAgICAgICAgICAgNzZcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibXVzY2xlcyBvZiB0aG9yYWNpYyB3YWxsXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTQxMjJcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMTI2OTgyNVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNoZXN0IHdhbGwgbXVzY2xlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJUaG9yYWNpYyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzcyMDc0MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDaW5ndWx1bVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjgyNzJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjg0MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE1NCxcbiAgICAgICAgICAgICAgICAgIDE0NixcbiAgICAgICAgICAgICAgICAgIDgzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGNpbmd1bHVtIGJ1bmRsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE1NCxcbiAgICAgICAgICAgICAgICAgIDE0NixcbiAgICAgICAgICAgICAgICAgIDgzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgY2luZ3VsdW0gYnVuZGxlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzcwMzUwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2xhdmljbGVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA4OTEzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTIzMTBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMDUsXG4gICAgICAgICAgICAgICAgICAxNzksXG4gICAgICAgICAgICAgICAgICAxMDhcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgY2xhdmljbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMDUsXG4gICAgICAgICAgICAgICAgICAxNzksXG4gICAgICAgICAgICAgICAgICAxMDhcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBjbGF2aWNsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUxMjk5MDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMDQsXG4gICAgICAgICAgICAgIDE2OCxcbiAgICAgICAgICAgICAgMTQzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImNvbG9uXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTkzMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwOTM2OFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNvbG9uXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjcxODU0MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA5NyxcbiAgICAgICAgICAgICAgMTEzLFxuICAgICAgICAgICAgICAxNThcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY29ycHVzIGNhbGxvc3VtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTI3MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxMDA5MFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNvcnB1cyBjYWxsb3N1bVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4ODQ0MjAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ29ycHVzIHN0cmlhdHVtXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxMDA5N1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEzMTAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTQwLFxuICAgICAgICAgICAgICAgICAgMTkwXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHN0cmlhdHVtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTQwLFxuICAgICAgICAgICAgICAgICAgMTkwXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgc3RyaWF0dW1cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMTQyODAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyMzQsXG4gICAgICAgICAgICAgIDkyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY3XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImNyYW5pYWwgbmVydmVzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTgwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxMDI2OFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNyYW5pYWwgbmVydmVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlcmlwaGVyYWwgTmVydm91cyBTeXN0ZW0gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjUyMzgwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkRpZW5jZXBoYWxvblwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTIxNDRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMDEwMlwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDY5LFxuICAgICAgICAgICAgICAgICAgMTEwLFxuICAgICAgICAgICAgICAgICAgNTNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZGllbmNlcGhhbG9uXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4NzU2MzAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNTMsXG4gICAgICAgICAgICAgIDIyOVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJkdW9kZW51bVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTU4MjAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTMzMDNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJEdW9kZW51bVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzODg0ODAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNDQsXG4gICAgICAgICAgICAgIDIwOVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJkdXJhIG1hdGVyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTExMjBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxMzMxM1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkR1cmEgbWF0ZXJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTg1NDUwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIxMSxcbiAgICAgICAgICAgICAgMTcxLFxuICAgICAgICAgICAgICAxNDNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZXNvcGhhZ3VzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTYwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxNDg3NlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkVzb3BoYWd1c1wiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjMyODQ5MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJFeHRlcm5hbCBlYXJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDEzNDUzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQUIxMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzQsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICA5MFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBleHRlcm5hbCBlYXJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzQsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICA5MFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGV4dGVybmFsIGVhclwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI4MzQ3MDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJFeWViYWxsXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyOTI0MlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUFBNzcwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTk0LFxuICAgICAgICAgICAgICAgICAgMTQyLFxuICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBleWViYWxsXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTk0LFxuICAgICAgICAgICAgICAgICAgMTQyLFxuICAgICAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGV5ZWJhbGxcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3OTY1MjAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTg1LFxuICAgICAgICAgICAgICAxMzUsXG4gICAgICAgICAgICAgIDEzNFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJmZW1hbGUgZXh0ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtODAwMTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNzc0N1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkZlbWFsZSBleHRlcm5hbCBnZW5pdGFsaWFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4Njk2OTAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAxNzAsXG4gICAgICAgICAgICAgIDE0N1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJmZW1hbGUgaW50ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtODAwMjBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNzc0OFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkZlbWFsZSBpbnRlcm5hbCBnZW5pdGFsaWFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4Nzc1OTAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiRm9vdFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTY1MDRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EOTcwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBmb290XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgZm9vdFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjU2NDU5MDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJGb3JlYXJtXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxNjUzNlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ4NTAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGZvcmVhcm1cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBmb3JlYXJtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTQ5NzUwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDg4LFxuICAgICAgICAgICAgICAxMDYsXG4gICAgICAgICAgICAgIDIxNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJmb3VydGggdmVudHJpY2xlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTE4MjBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE0OTU1NlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkZvdXJ0aCB2ZW50cmljbGVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzU5MTgwMDJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkZyb250YWwgYm9uZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTY3MzJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTExMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIwMyxcbiAgICAgICAgICAgICAgICAgIDE3OSxcbiAgICAgICAgICAgICAgICAgIDc3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGZyb250YWwgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIwMyxcbiAgICAgICAgICAgICAgICAgIDE3OSxcbiAgICAgICAgICAgICAgICAgIDc3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgZnJvbnRhbCBib25lXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzQ4NzIwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkZyb250YWwgbG9iZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTY3MzNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjIwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDgzLFxuICAgICAgICAgICAgICAgICAgMTQ2LFxuICAgICAgICAgICAgICAgICAgMTY0XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGZyb250YWwgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDgzLFxuICAgICAgICAgICAgICAgICAgMTQ2LFxuICAgICAgICAgICAgICAgICAgMTY0XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgZnJvbnRhbCBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODMyNTEwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDEzOSxcbiAgICAgICAgICAgICAgMTUwLFxuICAgICAgICAgICAgICA5OFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDA0MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJnYWxsYmxhZGRlclwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTYzMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTY5NzZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJHYWxsYmxhZGRlclwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiRW5kb3Njb3B5IEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyODIzMTAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiR2xvYnVzIHBhbGxpZHVzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxNzY1MVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEzNTAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgNDgsXG4gICAgICAgICAgICAgICAgICAxMjksXG4gICAgICAgICAgICAgICAgICAxMjZcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgcGFsbGlkdW1cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICA0OCxcbiAgICAgICAgICAgICAgICAgIDEyOSxcbiAgICAgICAgICAgICAgICAgIDEyNlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHBhbGxpZHVtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTQ3MzgwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkhhbmRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE4NTYzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDg3MDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgaGFuZFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGhhbmRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4NTU2MjAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJoZWFkXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDExMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxODY3MFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkhlYWRcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjk1MzYwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIwNixcbiAgICAgICAgICAgICAgMTEwLFxuICAgICAgICAgICAgICA4NFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1MlwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJoZWFydFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTMyMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTg3ODdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJIZWFydFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ2FyZGlhYyBTdHJ1Y3R1cmUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODA4OTEwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgMjEwLFxuICAgICAgICAgICAgICAxMzlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiaHlvaWQgYm9uZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExMTkwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjA0MTdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJIeW9pZCBib25lXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIxMzg3MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJJbmZlcmlvciBjZXJlYmVsbGFyIHBlZHVuY2xlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjM5M1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUE2NjQwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAgICAgMTM1LFxuICAgICAgICAgICAgICAgICAgMTM1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGluZmVyaW9yIGNlcmViZWxsYXIgcGVkdW5jbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxODYsXG4gICAgICAgICAgICAgICAgICAxMzUsXG4gICAgICAgICAgICAgICAgICAxMzVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBpbmZlcmlvciBjZXJlYmVsbGFyIHBlZHVuY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjc3MDEwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkluZmVyaW9yIGxvbmdpdHVkaW5hbCBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyODI3M1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyODUwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTU5LFxuICAgICAgICAgICAgICAgICAgMTE2LFxuICAgICAgICAgICAgICAgICAgMTYzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGluZmVyaW9yIGxvbmdpdHVkaW5hbCBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTU5LFxuICAgICAgICAgICAgICAgICAgMTE2LFxuICAgICAgICAgICAgICAgICAgMTYzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgaW5mZXJpb3IgbG9uZ2l0dWRpbmFsIGZhc2NpY3VsdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1NTIzMzAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSW5uZXIgZWFyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMjg4OVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUFCNzAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjI5LFxuICAgICAgICAgICAgICAgICAgMTQ3LFxuICAgICAgICAgICAgICAgICAgMTE4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGlubmVyIGVhclwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIyOSxcbiAgICAgICAgICAgICAgICAgIDE0NyxcbiAgICAgICAgICAgICAgICAgIDExOFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGlubmVyIGVhclwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIyOTQ1MDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJJbnN1bGFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDIxNjQwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTI2MTBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxODgsXG4gICAgICAgICAgICAgICAgICAxMzUsXG4gICAgICAgICAgICAgICAgICAxNjZcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgaW5zdWxhciBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTg4LFxuICAgICAgICAgICAgICAgICAgMTM1LFxuICAgICAgICAgICAgICAgICAgMTY2XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgaW5zdWxhciBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzYxNjkwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIzMyxcbiAgICAgICAgICAgICAgMTM4LFxuICAgICAgICAgICAgICAxMTJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjYxMTZcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYXRyaWFsIHNlcHR1bVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTMyMTUwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjU4MzZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJJbnRlcmF0cmlhbCBzZXB0dW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIk11c2N1bGFyIEFuYXRvbXlcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1ODA5NTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTk1LFxuICAgICAgICAgICAgICAxMDAsXG4gICAgICAgICAgICAgIDczXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI2MTE2XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInZlbnRyaWN1bGFyIHNlcHR1bVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTMyNDEwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjU4NzBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJJbnRlcnZlbnRyaWN1bGFyIHNlcHR1bVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTXVzY3VsYXIgQW5hdG9teVwiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjU4OTAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTRcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJLaWRuZXlcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDIyNjQ2XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNzEwMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxODUsXG4gICAgICAgICAgICAgICAgICAxMDIsXG4gICAgICAgICAgICAgICAgICA4M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBraWRuZXlcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxODUsXG4gICAgICAgICAgICAgICAgICAxMDIsXG4gICAgICAgICAgICAgICAgICA4M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGtpZG5leVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjY0MDMzMDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkVuZG9zY29weSBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwNDBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJLbmVlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMTQ1Njc5OFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ5MjAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGtuZWVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBrbmVlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzI2OTYwMDJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxhY3JpbWFsIGJvbmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjIyNzMzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTExNUFcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgICAgICAyNTAsXG4gICAgICAgICAgICAgICAgICAxNjBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgbGFjcmltYWwgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjIyOTAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTUwLFxuICAgICAgICAgICAgICAyMDgsXG4gICAgICAgICAgICAgIDI0M1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDA0MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsYXJ5bnhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0yNDEwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDIzMDc4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGFyeW54XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJFbmRvc2NvcHkgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ1OTYwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxhdGVyYWwgY29ydGljb3NwaW5hbCB0cmFjdFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAxNTI0MDJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BNzA5M1wiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIwMSxcbiAgICAgICAgICAgICAgICAgIDE2MCxcbiAgICAgICAgICAgICAgICAgIDEzM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBjb3J0aWNvc3BpbmFsIHRyYWN0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjAxLFxuICAgICAgICAgICAgICAgICAgMTYwLFxuICAgICAgICAgICAgICAgICAgMTMzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgY29ydGljb3NwaW5hbCB0cmFjdFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ2MTAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGF0ZXJhbCB2ZW50cmljbGVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMTUyMjc5XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTE2NTBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICA4OCxcbiAgICAgICAgICAgICAgICAgIDEwNixcbiAgICAgICAgICAgICAgICAgIDIxNVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBsYXRlcmFsIHZlbnRyaWNsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDg4LFxuICAgICAgICAgICAgICAgICAgMTA2LFxuICAgICAgICAgICAgICAgICAgMjE1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgbGF0ZXJhbCB2ZW50cmljbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2NjcyMDAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTUyLFxuICAgICAgICAgICAgICA1NSxcbiAgICAgICAgICAgICAgMTNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCB2ZW50cmljbGUgb2YgaGVhcnRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zMjYwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI1ODk3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdCBWZW50cmljbGVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNhcmRpYWMgU3RydWN0dXJlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjg3ODc4MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMaW1iaWMgbG9iZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA0NTgzMzdcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMDAzNlwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE1NCxcbiAgICAgICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgICAgIDIwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBsaW1iaWMgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE1NCxcbiAgICAgICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgICAgIDIwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGxpbWJpYyBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjc5MjE1MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODgsXG4gICAgICAgICAgICAgIDkxLFxuICAgICAgICAgICAgICA5NVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsaXBzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTIwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMzc1OVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxpcFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0ODQ3NzAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTG93ZXIgbGVnXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMTE0MDYyMVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ5NDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGxlZ1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGxlZ1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjMwMDIxMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMb3dlciBsaW1iXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMzIxNlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ5MDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGxvd2VyIGxpbWJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBsb3dlciBsaW1iXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjE2ODUwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTG93ZXIgbG9iZSBvZiBsdW5nXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNTc1OFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTI4ODMwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjI0LFxuICAgICAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAgICAgMTYyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImluZmVyaW9yIGxvYmUgb2YgcmlnaHQgbHVuZ1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIyNCxcbiAgICAgICAgICAgICAgICAgIDE4NixcbiAgICAgICAgICAgICAgICAgIDE2MlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJpbmZlcmlvciBsb2JlIG9mIGxlZnQgbHVuZ1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjkwNTcyMDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTIsXG4gICAgICAgICAgICAgIDE4OCxcbiAgICAgICAgICAgICAgMTAyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImx1bWJhciB2ZXJ0ZWJyYWwgY29sdW1uXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTE1MDNcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyNDA5MVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkx1bWJhciBzcGluZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMjI0OTYwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTHVuZ1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjQxMDlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0yODAwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE5NyxcbiAgICAgICAgICAgICAgICAgIDE2NSxcbiAgICAgICAgICAgICAgICAgIDE0NVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBsdW5nXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTk3LFxuICAgICAgICAgICAgICAgICAgMTY1LFxuICAgICAgICAgICAgICAgICAgMTQ1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgbHVuZ1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM5NjA3MDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODUsXG4gICAgICAgICAgICAgIDEzNSxcbiAgICAgICAgICAgICAgMTM0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTYwXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm1hbGUgZXh0ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtOTAwMTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNzkyMlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1hbGUgZXh0ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiOTA0MTgwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIxNixcbiAgICAgICAgICAgICAgMTQ2LFxuICAgICAgICAgICAgICAxMjdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibWFsZSBpbnRlcm5hbCBnZW5pdGFsaWFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC05MDAyMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI3OTIzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTWFsZSBpbnRlcm5hbCBnZW5pdGFsaWFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzODI0MjAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjIyLFxuICAgICAgICAgICAgICAxOTgsXG4gICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtYW5kaWJsZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExMTgwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjQ2ODdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNYW5kaWJsZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI5MTYwOTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTWVkaWFsIExlbW5pc2N1c1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjg0MjBcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BNTI3MVwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NCxcbiAgICAgICAgICAgICAgICAgIDE0MCxcbiAgICAgICAgICAgICAgICAgIDEwM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBtZWRpYWwgbGVtbmlzY3VzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc0LFxuICAgICAgICAgICAgICAgICAgMTQwLFxuICAgICAgICAgICAgICAgICAgMTAzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgbWVkaWFsIGxlbW5pc2N1c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjMwMTE0MDAzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDI0NCxcbiAgICAgICAgICAgICAgMjA5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm1lZGlhc3RpbnVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDMzMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyNTA2NlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1lZGlhc3RpbnVtXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJUaG9yYWNpYyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzI0MTAwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibWVuaW5nZXNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMTExMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI1Mjg1XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTWVuaW5nZXNcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTIzMTAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTWlkZGxlIGNlcmViZWxsYXIgcGVkdW5jbGVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMTUyMzkyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTY2MzBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNDgsXG4gICAgICAgICAgICAgICAgICAxMjAsXG4gICAgICAgICAgICAgICAgICA3MlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBtaWRkbGUgY2VyZWJlbGxhciBwZWR1bmNsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE0OCxcbiAgICAgICAgICAgICAgICAgIDEyMCxcbiAgICAgICAgICAgICAgICAgIDcyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgbWlkZGxlIGNlcmViZWxsYXIgcGVkdW5jbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMzcyMzAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTWlkZGxlIGVhclwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTM0NTVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BQjMwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIwMSxcbiAgICAgICAgICAgICAgICAgIDExMixcbiAgICAgICAgICAgICAgICAgIDczXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IG1pZGRsZSBlYXJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMDEsXG4gICAgICAgICAgICAgICAgICAxMTIsXG4gICAgICAgICAgICAgICAgICA3M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IG1pZGRsZSBlYXJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNTM0MjAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjAyLFxuICAgICAgICAgICAgICAxNjQsXG4gICAgICAgICAgICAgIDE0MFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtaWRkbGUgbG9iZSBvZiByaWdodCBsdW5nXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMjgzMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNTc1N1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1pZGRsZSBsb2JlIG9mIHJpZ2h0IGx1bmdcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3MjQ4MTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTU5LFxuICAgICAgICAgICAgICA2MyxcbiAgICAgICAgICAgICAgMjdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjYxMTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibWl0cmFsIHZhbHZlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMzUzMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyNjI2NFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1pdHJhbCBWYWx2ZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTWVkaWFzdGludW0gQW5hdG9teSBGaW5kaW5nIG9yIEZlYXR1cmVcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI5MTEzNDAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjAxLFxuICAgICAgICAgICAgICAxMjEsXG4gICAgICAgICAgICAgIDc3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm11c2NsZXMgb2YgaGVhZFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTEzMTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjQwOTdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNdXNjbGUgb2YgaGVhZFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyMjY4ODAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjEzLFxuICAgICAgICAgICAgICAxMjQsXG4gICAgICAgICAgICAgIDEwOVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtdXNjbGVzIG9mIG5lY2tcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMzMwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI3NTMyXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTXVzY2xlIG9mIG5lY2tcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODE3MjcwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibmVja1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQxNjAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjc1MzBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJOZWNrXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ1MDQ4MDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA5MixcbiAgICAgICAgICAgICAgMTYyLFxuICAgICAgICAgICAgICAxMDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibmV1cm9oeXBvcGh5c2lzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQjEyMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMjAwOVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk5ldXJvaHlwb3BoeXNpc1wiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzNzUxMjAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiT2NjaXBpdGFsIGxvYmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI4Nzg1XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTI0MDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxODIsXG4gICAgICAgICAgICAgICAgICAxNjYsXG4gICAgICAgICAgICAgICAgICAxMTBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgb2NjaXBpdGFsIGxvYmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxODIsXG4gICAgICAgICAgICAgICAgICAxNjYsXG4gICAgICAgICAgICAgICAgICAxMTBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBvY2NpcGl0YWwgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjMxMDY1MDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMzQsXG4gICAgICAgICAgICAgIDIzNCxcbiAgICAgICAgICAgICAgMTk0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm9tZW50dW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1ENDYwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI4OTc3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiT21lbnR1bVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3Mzk4MDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA5OSxcbiAgICAgICAgICAgICAgMTA2LFxuICAgICAgICAgICAgICAyNFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJvcHRpYyBjaGlhc21cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BODAwQlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI5MTI2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiT3B0aWMgY2hpYXNtXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0NDQ1MzAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiT3B0aWMgcmFkaWF0aW9uXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyODI3N1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyODgwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgNzgsXG4gICAgICAgICAgICAgICAgICAxNTIsXG4gICAgICAgICAgICAgICAgICAxNDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgb3B0aWMgcmFkaWF0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgNzgsXG4gICAgICAgICAgICAgICAgICAxNTIsXG4gICAgICAgICAgICAgICAgICAxNDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBvcHRpYyByYWRpYXRpb25cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3MDEwNTAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiT3B0aWMgdHJhY3RcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMTUyNDA1XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTgwNjBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNTYsXG4gICAgICAgICAgICAgICAgICAxNzEsXG4gICAgICAgICAgICAgICAgICAxMDhcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgb3B0aWMgdHJhY3RcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNTYsXG4gICAgICAgICAgICAgICAgICAxNzEsXG4gICAgICAgICAgICAgICAgICAxMDhcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBvcHRpYyB0cmFjdFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUzMjM4MDAzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2MFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk92YXJ5XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyOTkzOVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTg3MDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjEzLFxuICAgICAgICAgICAgICAgICAgMTQxLFxuICAgICAgICAgICAgICAgICAgMTEzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IG92YXJ5XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjEzLFxuICAgICAgICAgICAgICAgICAgMTQxLFxuICAgICAgICAgICAgICAgICAgMTEzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgb3ZhcnlcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxNTQ5NzAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGFsYXRpbmUgYm9uZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjI3MzRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTE2MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDI0MixcbiAgICAgICAgICAgICAgICAgIDIxNyxcbiAgICAgICAgICAgICAgICAgIDEyM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBwYWxhdGluZSBib25lXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjQyLFxuICAgICAgICAgICAgICAgICAgMjE3LFxuICAgICAgICAgICAgICAgICAgMTIzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgcGFsYXRpbmUgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUxMjgzMDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNDksXG4gICAgICAgICAgICAgIDE4MCxcbiAgICAgICAgICAgICAgMTExXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMwXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBhbmNyZWFzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNjUwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMDI3NFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBhbmNyZWFzXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDVCwgTVIgYW5kIFBFVCBBbmF0b215IEltYWdlZFwiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE1Nzc2MDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQYXJpZXRhbCBib25lXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMDU1OFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExMTIwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjI5LFxuICAgICAgICAgICAgICAgICAgMjA0LFxuICAgICAgICAgICAgICAgICAgMTA5XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHBhcmlldGFsIGJvbmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMjksXG4gICAgICAgICAgICAgICAgICAyMDQsXG4gICAgICAgICAgICAgICAgICAxMDlcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBwYXJpZXRhbCBib25lXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQ5MjQwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBhcmlldGFsIGxvYmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMwNTYwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTIzMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNDEsXG4gICAgICAgICAgICAgICAgICA5MyxcbiAgICAgICAgICAgICAgICAgIDEzN1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBwYXJpZXRhbCBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTQxLFxuICAgICAgICAgICAgICAgICAgOTMsXG4gICAgICAgICAgICAgICAgICAxMzdcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBwYXJpZXRhbCBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTY2MzAwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE4NCxcbiAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAxNTRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicGVyaWNhcmRpYWwgY2F2aXR5XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMzkwNTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNTk3MlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBlcmljYXJkaWFsIGNhdml0eVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ2FyZGlhYyBTdHJ1Y3R1cmUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjU0ODkwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicGVyaWNhcmRpdW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zOTAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMxMDUwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGVyaWNhcmRpdW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNhcmRpYWMgU3RydWN0dXJlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc2ODQ4MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMjQsXG4gICAgICAgICAgICAgIDE5NCxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2N1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwZXJpcGhlcmFsIG5lcnZlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTA1MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMTExOVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBlcmlwaGVyYWwgbmVydmVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlcmlwaGVyYWwgTmVydm91cyBTeXN0ZW0gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODQ3ODIwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIxNixcbiAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY3XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBlcmlwaGVyYWwgbmVydm91cyBzeXN0ZW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMDE0MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA2NDE3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGVyaXBoZXJhbCBuZXJ2b3VzIHN5c3RlbVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVyaXBoZXJhbCBOZXJ2b3VzIFN5c3RlbSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMDU4MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjIwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBlcml0b25ldW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1ENDQwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMxMTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGVyaXRpb25ldW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxNTQyNTAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjA0LFxuICAgICAgICAgICAgICAxNDIsXG4gICAgICAgICAgICAgIDE3OFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwZXJpdG9uZWFsIGNhdml0eVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ0NDI1XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzE3MDQyNDdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQZXJpdG9uZWFsIGNhdml0eVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjgzNjcwMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODQsXG4gICAgICAgICAgICAgIDEwNSxcbiAgICAgICAgICAgICAgMTA4XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDQwXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBoYXJ5bnhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC01NTAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMxMzU0XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGhhcnlueFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiRW5kb3Njb3B5IEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1NDA2NjAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNDQsXG4gICAgICAgICAgICAgIDIwOVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwaWEgbWF0ZXJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMTI4MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMxODY5XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGlhIG1hdGVyXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIzMTgwMDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTMsXG4gICAgICAgICAgICAgIDEzNSxcbiAgICAgICAgICAgICAgMTkyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBpbmVhbCBnbGFuZFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUIyMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzE5MzlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQaW5lYWwgR2xhbmRcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNDU3OTMwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDU3LFxuICAgICAgICAgICAgICAxNTcsXG4gICAgICAgICAgICAgIDExMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwaXR1aXRhcnkgZ2xhbmRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1CMTAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMyMDA1XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGl0dWl0YXJ5XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjU2MzI5MDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxMjYsXG4gICAgICAgICAgICAgIDE2MSxcbiAgICAgICAgICAgICAgMTk3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBvc3RlcmlvciBjb21taXNzdXJlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTQ5MDRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjMyN1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBvc3RlcmlvciBjZXJlYnJhbCBjb21taXNzdXJlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3OTMzNjAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjMwLFxuICAgICAgICAgICAgICAxNTgsXG4gICAgICAgICAgICAgIDE0MFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwcm9zdGF0ZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTkyMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzM1NzJcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQcm9zdGF0ZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVsdmljIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQxMjE2MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMjUsXG4gICAgICAgICAgICAgIDEzMCxcbiAgICAgICAgICAgICAgMTA0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI2MTEzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInB1bG1vbmFyeSB2YWx2ZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTM1MjAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzQwODZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQdWxtb25hcnkgdmFsdmVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIk1lZGlhc3RpbnVtIEFuYXRvbXkgRmluZGluZyBvciBGZWF0dXJlXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzkwNTcwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlB1dGFtZW5cIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM0MTY5XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTM0MDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMTAsXG4gICAgICAgICAgICAgICAgICAxNTcsXG4gICAgICAgICAgICAgICAgICAxNjZcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgcHV0YW1lblwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIxMCxcbiAgICAgICAgICAgICAgICAgIDE1NyxcbiAgICAgICAgICAgICAgICAgIDE2NlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHB1dGFtZW5cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4OTI3ODAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTgwLFxuICAgICAgICAgICAgICAxMTksXG4gICAgICAgICAgICAgIDE1M1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyZXRyb3Blcml0b25lYWwgc3BhY2VcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1ENDkwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM1MzU5XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmV0cm9wZXJpdG9uZWFsIHNwYWNlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODI4NDkwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE4MSxcbiAgICAgICAgICAgICAgODUsXG4gICAgICAgICAgICAgIDU3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHZlbnRyaWNsZSBvZiBoZWFydFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTMyNTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjU4ODNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodCBWZW50cmljbGVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNhcmRpYWMgU3RydWN0dXJlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUzMDg1MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA3MCxcbiAgICAgICAgICAgICAgMTYzLFxuICAgICAgICAgICAgICAxMTdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwic2FsaXZhcnkgZ2xhbmRzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNjEwMDdcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzNjA5OFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNhbGl2YXJ5IGdsYW5kXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM4NTI5NDAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTZW1pbmFsIFZlc2ljbGVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM2NjI4XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtOTMwMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyNDUsXG4gICAgICAgICAgICAgICAgICAxNzIsXG4gICAgICAgICAgICAgICAgICAxNDdcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgc2VtaW5hbCB2ZXNpY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjQ1LFxuICAgICAgICAgICAgICAgICAgMTcyLFxuICAgICAgICAgICAgICAgICAgMTQ3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgc2VtaW5hbCB2ZXNpY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjQ3MzkwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiRW5kb3Njb3B5IEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDA0MFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNob3VsZGVyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzNzAwNFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQyMjIwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHNob3VsZGVyXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgc2hvdWxkZXJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxNjk4MjAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAxMjQsXG4gICAgICAgICAgICAgIDkyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNraW4gb2YgYWJkb21pbmFsIHdhbGxcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0wMjQ4MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjIyMTY2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU2tpbiBvZiBhYmRvbWVuXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzUwOTMwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE3MyxcbiAgICAgICAgICAgICAgMTIxLFxuICAgICAgICAgICAgICA4OFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJza2luIG9mIHRob3JhY2ljIHdhbGxcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0wMjQyNFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjIyMTQ5XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU2tpbiBvZiBjaGVzdFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc0MTYwMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNDEsXG4gICAgICAgICAgICAgIDIxMyxcbiAgICAgICAgICAgICAgMTQ0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNrdWxsXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTExMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzNzMwM1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNrdWxsXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjg5NTQ2MDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMDUsXG4gICAgICAgICAgICAgIDE2NyxcbiAgICAgICAgICAgICAgMTQyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNtYWxsIGJvd2VsXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTgwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMTg1MlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNtYWxsIEludGVzdGluZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjMwMzE1MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODIsXG4gICAgICAgICAgICAgIDEwNSxcbiAgICAgICAgICAgICAgMTA3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNvZnQgcGFsYXRlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTExMjBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMDIxOVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNvZnQgcGFsYXRlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ5NDYwMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNDQsXG4gICAgICAgICAgICAgIDIxNCxcbiAgICAgICAgICAgICAgNDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwic3BpbmFsIGNvcmRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BNzAxMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM3OTI1XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU3BpbmFsIGNvcmRcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjc0ODAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjAwLFxuICAgICAgICAgICAgICAyMDAsXG4gICAgICAgICAgICAgIDIxNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJncmF5IG1hdHRlciBvZiBzcGluYWwgY29yZFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUE3MDIwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA0NzU4NTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTcGluYWwgY29yZCBncmF5IG1hdHRlclwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMjk1ODAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjUwLFxuICAgICAgICAgICAgICAyNTAsXG4gICAgICAgICAgICAgIDIyNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ3aGl0ZSBtYXR0ZXIgb2Ygc3BpbmFsIGNvcmRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BNzA3MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNDU4NDU3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU3BpbmFsIGNvcmQgd2hpdGUgbWF0dGVyXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3MDg4MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNDQsXG4gICAgICAgICAgICAgIDIxNyxcbiAgICAgICAgICAgICAgMTU0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInN0ZXJudW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTIxMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM4MjkzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU3Rlcm51bVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjU2ODczMDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTYsXG4gICAgICAgICAgICAgIDEzMixcbiAgICAgICAgICAgICAgMTA1XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInN0b21hY2hcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC01NzAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM4MzUxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU3RvbWFjaFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2OTY5NTAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgODgsXG4gICAgICAgICAgICAgIDEwNixcbiAgICAgICAgICAgICAgMjE1XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInN1YmFyYWNobm9pZCBzcGFjZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUExNTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzg1MjdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTdWJhcmFjaG5vaWQgc3BhY2VcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzU5NTEwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlN1YnN0YW50aWEgbmlncmFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM4NTkwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTUxNjBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgMTA4LFxuICAgICAgICAgICAgICAgICAgMTEyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHN1YnN0YW50aWEgbmlncmFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAwLFxuICAgICAgICAgICAgICAgICAgMTA4LFxuICAgICAgICAgICAgICAgICAgMTEyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgc3Vic3RhbnRpYSBuaWdyYVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjcwMDA3MDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTdXBlcmlvciBsb25naXR1ZGluYWwgZmFzY2ljdWx1c1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjgyNzBcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjgyMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDEyNyxcbiAgICAgICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgICAgIDg4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHN1cGVyaW9yIGxvbmdpdHVkaW5hbCBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTI3LFxuICAgICAgICAgICAgICAgICAgMTUwLFxuICAgICAgICAgICAgICAgICAgODhcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBzdXBlcmlvciBsb25naXR1ZGluYWwgZmFzY2ljdWx1c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjg5MjAyMDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUZW1wb3JhbCBib25lXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzOTQ4NFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExMTMwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAgICAgMjQzLFxuICAgICAgICAgICAgICAgICAgMTUyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHRlbXBvcmFsIGJvbmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgICAgICAyNDMsXG4gICAgICAgICAgICAgICAgICAxNTJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCB0ZW1wb3JhbCBib25lXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjA5MTEwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRlbXBvcmFsIGxvYmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM5NDg1XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTI1MDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNjIsXG4gICAgICAgICAgICAgICAgICAxMTUsXG4gICAgICAgICAgICAgICAgICAxMDVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgdGVtcG9yYWwgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE2MixcbiAgICAgICAgICAgICAgICAgIDExNSxcbiAgICAgICAgICAgICAgICAgIDEwNVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHRlbXBvcmFsIGxvYmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3ODI3NzAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVGhhbGFtdXNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNDU4MjcxXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDA1OTNcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDEsXG4gICAgICAgICAgICAgICAgICAzOFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCB0aGFsYW11c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMSxcbiAgICAgICAgICAgICAgICAgIDM4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgdGhhbGFtdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMTk0MDYwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRoaWdoXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzOTg2NlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ5MTAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHRoaWdoXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgdGhpZ2hcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2ODM2NzAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjI2LFxuICAgICAgICAgICAgICAyMDIsXG4gICAgICAgICAgICAgIDEzNFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0aG9yYWNpYyB2ZXJ0ZWJyYWwgY29sdW1uXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTE1MDJcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDU4MTI2OVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRob3JhY2ljIHNwaW5lXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJUaG9yYWNpYyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTIyNDk1MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInRob3JheFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQzMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA4MTcwOTZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUaG9yYXhcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MTE4NTAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgNDcsXG4gICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgMTAzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInRoeW11c1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUM4MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDAxMTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUaHltdXNcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI5ODc1MDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA2MixcbiAgICAgICAgICAgICAgMTYyLFxuICAgICAgICAgICAgICAxMTRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjYxMTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidGh5cm9pZCBnbGFuZFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUI2MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDAxMzJcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUaHlyb2lkXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJNZWRpYXN0aW51bSBBbmF0b215IEZpbmRpbmcgb3IgRmVhdHVyZVwiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjY5NzQ4MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNjYsXG4gICAgICAgICAgICAgIDg0LFxuICAgICAgICAgICAgICA5NFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0b25ndWVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC01MzAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQwNDA4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVG9uZ3VlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIxOTc0MDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgMjIwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInRlZXRoXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTQwMTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MDQyNlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRvb3RoXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM4MTk5MDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODIsXG4gICAgICAgICAgICAgIDIyOCxcbiAgICAgICAgICAgICAgMjU1XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInRyYWNoZWFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0yNTAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQwNTc4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVHJhY2hlYVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ0NTY3MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNjYsXG4gICAgICAgICAgICAgIDcwLFxuICAgICAgICAgICAgICAzOFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNjExM1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0cmljdXNwaWQgdmFsdmVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zNTEwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQwOTYwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVHJpY3VzcGlkIFZhbHZlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJNZWRpYXN0aW51bSBBbmF0b215IEZpbmRpbmcgb3IgRmVhdHVyZVwiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ2MDMwMDAzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJVbmNpbmF0ZSBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyODI3MVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyODMwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTA2LFxuICAgICAgICAgICAgICAgICAgMTc0LFxuICAgICAgICAgICAgICAgICAgMTU1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHVuY2luYXRlIGZhc2NpY3VsdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxMDYsXG4gICAgICAgICAgICAgICAgICAxNzQsXG4gICAgICAgICAgICAgICAgICAxNTVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCB1bmNpbmF0ZSBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjYyMzAwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlVwcGVyIGFybVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA0NDY1MTZcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EODIwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBhcm1cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBhcm1cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0MDk4MzAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVXBwZXIgbGltYlwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTY1NTVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EODAwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCB1cHBlciBsaW1iXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgdXBwZXIgbGltYlwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUzMTIwMDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlVwcGVyIGxvYmUgb2YgbHVuZ1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjU3NTZcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0yODgyMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3MixcbiAgICAgICAgICAgICAgICAgIDEzOCxcbiAgICAgICAgICAgICAgICAgIDExNVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJzdXBlcmlvciBsb2JlIG9mIHJpZ2h0IGx1bmdcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzIsXG4gICAgICAgICAgICAgICAgICAxMzgsXG4gICAgICAgICAgICAgICAgICAxMTVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwic3VwZXJpb3IgbG9iZSBvZiBsZWZ0IGx1bmdcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0NTY1MzAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTI0LFxuICAgICAgICAgICAgICAxODYsXG4gICAgICAgICAgICAgIDIyM1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ1cmV0aHJhXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNzUwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MTk2N1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlVyZXRocmFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTM2NDgwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIwMyxcbiAgICAgICAgICAgICAgMTM2LFxuICAgICAgICAgICAgICAxMTZcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidXJpbmFyeSBzeXN0ZW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC03MDAwMVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMxNTA4NzUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVXJpbmFyeSBzeXN0ZW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMjI0ODkwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMTgxLFxuICAgICAgICAgICAgICAxNThcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidXRlcnVzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtODMwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MjE0OVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlV0ZXJ1c1wiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVsdmljIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM1MDM5MDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxOTMsXG4gICAgICAgICAgICAgIDEyMyxcbiAgICAgICAgICAgICAgMTAzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTYwXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInZhZ2luYVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTgyMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDIyMzJcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJWYWdpbmFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3Njc4NDAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJWYXMgZGVmZXJlbnNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQyMzYwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtOTYwMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyNDEsXG4gICAgICAgICAgICAgICAgICAxNzIsXG4gICAgICAgICAgICAgICAgICAxNTFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgZGVmZXJlbnQgZHVjdFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDI0MSxcbiAgICAgICAgICAgICAgICAgIDE3MixcbiAgICAgICAgICAgICAgICAgIDE1MVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGRlZmVyZW50IGR1Y3RcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1NzY3MTAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiWnlnb21hXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MzUzOVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExMTY2XCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAgICAgMTY3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHp5Z29tYXRpYyBib25lXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMzg4MTAwNlwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInNob3dBbmF0b215XCI6IGZhbHNlXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTW9ycGhvbG9naWNhbGx5IEFsdGVyZWQgU3RydWN0dXJlXCIsXG4gICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNDk3NTUwMDNcIixcbiAgICAgICAgXCJjaWRcIjogXCI3MDUxXCIsXG4gICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyMTE5OFwiLFxuICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIk0tMDEwMDBcIixcbiAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiU2VnbWVudGF0aW9uIFByb3BlcnR5IENhdGVnb3JpZXNcIixcbiAgICAgICAgXCJUeXBlXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTQ1LFxuICAgICAgICAgICAgICA2MCxcbiAgICAgICAgICAgICAgNjZcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQmxvb2QgY2xvdFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjbG90XCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTlcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDMwMjE0OFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJNLTM1MDAwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMZXNpb24gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzU3NTMwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIwNSxcbiAgICAgICAgICAgICAgMjA1LFxuICAgICAgICAgICAgICAxMDBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ3lzdFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjeXN0XCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTlcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxMDcwOVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJNLTMzNDBBXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMZXNpb24gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzY3NjQzMDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNDAsXG4gICAgICAgICAgICAgIDIyNCxcbiAgICAgICAgICAgICAgMjI4XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkVkZW1hXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImVkZW1hXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTlcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxMzYwNFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJNLTM2MzAwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMZXNpb24gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzk2NTQwMDJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgOTgsXG4gICAgICAgICAgICAgIDgzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkVtYm9sdXNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZW1ib2xpc21cIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1OVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMxNzA0MjEyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIk0tMzUzMDBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxlc2lvbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1NTU4NDAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTg4LFxuICAgICAgICAgICAgICA2NSxcbiAgICAgICAgICAgICAgMjhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSGVtb3JyaGFnZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJibGVlZGluZ1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU5XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTkwODBcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiTS0zNzAwMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGVzaW9uIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUwOTYwMDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNDQsXG4gICAgICAgICAgICAgIDIzOCxcbiAgICAgICAgICAgICAgMTQ0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1hc3NcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibWFzc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU5XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA1Nzc1NTlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiTS0wMzAwMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGVzaW9uIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQxNDcwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIxNixcbiAgICAgICAgICAgICAgMTkxLFxuICAgICAgICAgICAgICAyMTZcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTmVjcm9zaXNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibmVjcm9zaXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1OVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI3NTQwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIk0tNTQwMDBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxlc2lvbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2NTc0MDAxXCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwic2hvd0FuYXRvbXlcIjogdHJ1ZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJvZHkgU3Vic3RhbmNlXCIsXG4gICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiOTE3MjAwMDJcIixcbiAgICAgICAgXCJjaWRcIjogXCJcIixcbiAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNTA0MDgyXCIsXG4gICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDA4MFwiLFxuICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJcIixcbiAgICAgICAgXCJUeXBlXCI6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgMTQ1LFxuICAgICAgICAgICAgICAzMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCaWxlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImJpbGVcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA1Mzg4XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNjA2NTBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzAxNTAwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE3MCxcbiAgICAgICAgICAgICAgMjUwLFxuICAgICAgICAgICAgICAyNTBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQm9keSBmbHVpZFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJmbHVpZFwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDU4ODlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDA3MFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMjQ1NzAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgNzgsXG4gICAgICAgICAgICAgIDYzLFxuICAgICAgICAgICAgICAwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkZlY2VzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImZlY2VzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxNTczM1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTU5NjY2XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM5NDc3MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTgsXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjU1XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkdhc1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJnYXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE3MTEwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkMtMTAwODBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzQ5NDcwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIxNCxcbiAgICAgICAgICAgICAgMjMwLFxuICAgICAgICAgICAgICAxMzBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVXJpbmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidXJpbmVcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQyMDM2XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNzAwNjBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzgwMTQwMDVcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJzaG93QW5hdG9teVwiOiBmYWxzZVxuICAgICAgfVxuICAgIF1cbiAgfVxufWA7XG5cbmNvbnN0IHBhcnNlZEpzb24gPSBKU09OLnBhcnNlKGpzb24pO1xuXG5leHBvcnQgZGVmYXVsdCBwYXJzZWRKc29uO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0Jztcbi8vIGltcG9ydCAnLi9tZW51SU9CdXR0b25zLnN0eWwnO1xuXG4vKipcbiAqIEBjbGFzcyBNZW51SU9CdXR0b25zIC0gUmVuZGVycyBJbXBvcnQgYW5kL29yIEV4cG9ydCBidXR0b25zIGlmXG4gKiB0aGlzLnByb3BzLkltcG9ydENhbGxiYWNrT3JDb21wb25lbnQgYW5kL29yXG4gKiB0aGlzLnByb3BzLkV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQgYXJlIGRlZmluZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVJT0J1dHRvbnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQsXG4gICAgICBFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50LFxuICAgICAgb25JbXBvcnRCdXR0b25DbGljayxcbiAgICAgIG9uRXhwb3J0QnV0dG9uQ2xpY2tcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCAmJiAhRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHtJbXBvcnRDYWxsYmFja09yQ29tcG9uZW50ICYmIChcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17b25JbXBvcnRCdXR0b25DbGlja30+XG4gICAgICAgICAgICBJbXBvcnRcbiAgICAgICAgICA8L2E+XG4gICAgICAgICl9XG4gICAgICAgIHtFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50ICYmIChcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17b25FeHBvcnRCdXR0b25DbGlja30+XG4gICAgICAgICAgICBFeHBvcnRcbiAgICAgICAgICA8L2E+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIG9uRXhwb3J0QnV0dG9uQ2xpY2sgLSBIZWxwZXIgZnVuY3Rpb24gZm9yIGFubm90YXRpb24gbWVudSBjb21wb25lbnRzLlxuICogQ2FsbHMgRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudCBpZiBpdCBpcyBhIGZ1bmNpdG9uLCBvciBzZXRzXG4gKiB0aGlzLnN0YXRlLmV4cG9ydGluZyB0byB0cnVlIGlmIGl0IGlzIGEgY29tcG9uZW50LlxuICpcbiAqIEByZXR1cm5zIHtudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkV4cG9ydEJ1dHRvbkNsaWNrKCkge1xuICBjb25zdCB7IEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgaWYgKEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZXhwb3J0aW5nOiB0cnVlIH0pO1xuICB9IGVsc2Uge1xuICAgIEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBvbklPQ2FuY2VsIC0gSGVscGVyIGZ1bmN0aW9uIGZvciBhbm5vdGF0aW9uIG1lbnUgY29tcG9uZW50cy4gU2V0c1xuICogdGhpcy5zdGF0ZS5pbXBvcnRpbmcgYW5kIHRoaXMuc3RhdGUuZXhwb3J0aW5nIHRvIGZhbHNlLlxuICpcbiAqIEByZXR1cm5zIHtudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbklPQ2FuY2VsKCkge1xuICB0aGlzLnNldFN0YXRlKHtcbiAgICBpbXBvcnRpbmc6IGZhbHNlLFxuICAgIGV4cG9ydGluZzogZmFsc2VcbiAgfSk7XG59XG4iLCIvKipcbiAqIG9uSW1wb3J0QnV0dG9uQ2xpY2sgLSBIZWxwZXIgZnVuY3Rpb24gZm9yIGFubm90YXRpb24gbWVudSBjb21wb25lbnRzLlxuICogQ2FsbHMgSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCBpZiBpdCBpcyBhIGZ1bmNpdG9uLCBvciBzZXRzXG4gKiB0aGlzLnN0YXRlLmltcG9ydGluZyB0byB0cnVlIGlmIGl0IGlzIGEgY29tcG9uZW50LlxuICpcbiAqIEByZXR1cm5zIHtudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkltcG9ydEJ1dHRvbkNsaWNrKCkge1xuICBjb25zb2xlLmxvZyh0aGlzKTtcblxuICBjb25zdCB7IEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgaWYgKEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaW1wb3J0aW5nOiB0cnVlIH0pO1xuICB9IGVsc2Uge1xuICAgIEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMb2NrZWRDb2xsZWN0aW9uc0xpc3RJdGVtIGZyb20gJy4vTG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbS5qcyc7XG5cbi8vIGltcG9ydCAnLi9yb2lDb250b3VyTWVudS5zdHlsJztcblxuLyoqXG4gKiBAY2xhc3MgTG9ja2VkQ29sbGVjdGlvbnNMaXN0IC0gUmVuZGVycyBhIGxpc3Qgb2YgTG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbXMsXG4gKiBkaXNwbGF5aW5nIG1ldGFkYXRhIG9mIGxvY2tlZCBST0lDb250b3VyIENvbGxlY3Rpb25zLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NrZWRDb2xsZWN0aW9uc0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbG9ja2VkQ29sbGVjdGlvbnMsIG9uVW5sb2NrQ2xpY2ssIHNlcmllc0luc3RhbmNlVWlkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge2xvY2tlZENvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICA8TG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbVxuICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLm1ldGFkYXRhLnVpZH1cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBvblVubG9ja0NsaWNrPXtvblVubG9ja0NsaWNrfVxuICAgICAgICAgICAgc2VyaWVzSW5zdGFuY2VVaWQ9e3Nlcmllc0luc3RhbmNlVWlkfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvcm5lcnN0b25lVG9vbHMgZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG4vLyBpbXBvcnQgJy4vcm9pQ29udG91ck1lbnUuc3R5bCc7XG5cbmNvbnN0IG1vZHVsZXMgPSBjb3JuZXJzdG9uZVRvb2xzLnN0b3JlLm1vZHVsZXM7XG5cbi8qKlxuICogQGNsYXNzIExvY2tlZENvbGxlY3Rpb25zTGlzdEl0ZW0gLSBSZW5kZXJzIG1ldGFkYXRhIGZvciBhbiBpbmRpdmlkdWFsIGxvY2tlZFxuICogUk9JQ29udG91ciBDb2xsZWN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NrZWRDb2xsZWN0aW9uc0xpc3RJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGNvbnN0IHZpc2libGUgPSB0aGlzLnByb3BzLmNvbGxlY3Rpb24ubWV0YWRhdGEudmlzaWJsZTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBleHBhbmRlZDogZmFsc2UsXG4gICAgICB2aXNpYmxlXG4gICAgfTtcblxuICAgIHRoaXMub25Ub2dnbGVWaXNpYmlsaXR5Q2xpY2sgPSB0aGlzLm9uVG9nZ2xlVmlzaWJpbGl0eUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNob3dIaWRlQ2xpY2sgPSB0aGlzLm9uU2hvd0hpZGVDbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uVG9nZ2xlVmlzaWJpbGl0eUNsaWNrIC0gQ2FsbGJhY2sgdGhhdCB0b2dnbGVzIHRoZSBleHBhbmRzL2NvbGxhcHNlcyB0aGVcbiAgICogbGlzdCBvZiBjb2xsZWN0aW9uIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uVG9nZ2xlVmlzaWJpbGl0eUNsaWNrKCkge1xuICAgIGNvbnN0IHsgZXhwYW5kZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZXhwYW5kZWQ6ICFleHBhbmRlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvblNob3dIaWRlQ2xpY2sgLSBUb2dnbGVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBjb2xsZWN0aW9ucyBST0kgQ29udG91cnMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25TaG93SGlkZUNsaWNrKCkge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgc2VyaWVzSW5zdGFuY2VVaWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB2aXNpYmxlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHN0cnVjdHVyZVNldCA9IG1vZHVsZXMuZnJlZWhhbmQzRC5nZXR0ZXJzLnN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgY29sbGVjdGlvbi5tZXRhZGF0YS51aWQpO1xuXG4gICAgc3RydWN0dXJlU2V0LnZpc2libGUgPSAhdmlzaWJsZTtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogIXZpc2libGUgfSk7XG5cbiAgICAvLyBVcGRhdGUgdmlld3BvcnQuXG4gICAgLy8gY29uc3QgZWxlbWVudCA9IE9ISUYudmlld2VyYmFzZS52aWV3cG9ydFV0aWxzLmdldEFjdGl2ZVZpZXdwb3J0RWxlbWVudCgpO1xuICAgIC8vIFRPRE9cbiAgICAvLyBjb3JuZXJzdG9uZS51cGRhdGVJbWFnZShlbGVtZW50KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIG9uVW5sb2NrQ2xpY2sgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBleHBhbmRlZCwgdmlzaWJsZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gY29sbGVjdGlvbi5tZXRhZGF0YTtcbiAgICBjb25zdCBST0lDb250b3VyQXJyYXkgPSBjb2xsZWN0aW9uLlJPSUNvbnRvdXJBcnJheTtcblxuICAgIGNvbnN0IHZpc2libGVCdXR0b24gPSBleHBhbmRlZCA/ICdmYSBmYS1taW51cy1zcXVhcmUnIDogJ2ZhIGZhLXBsdXMtc3F1YXJlJztcbiAgICBjb25zdCBzaG93SGlkZUljb24gPSB2aXNpYmxlID8gJ2ZhIGZhLWV5ZScgOiAnZmEgZmEtZXllLXNsYXNoJztcblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDx0ciBjbGFzc05hbWU9XCJyb2ktbGlzdC1oZWFkZXJcIj5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPlxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCIgb25DbGljaz17dGhpcy5vblRvZ2dsZVZpc2liaWxpdHlDbGlja30+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17dmlzaWJsZUJ1dHRvbn0gLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0aCBjb2xTcGFuPVwiMlwiPnttZXRhZGF0YS5uYW1lfTwvdGg+XG4gICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbnRlcmVkLWNlbGxcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeVwiIG9uQ2xpY2s9e3RoaXMub25TaG93SGlkZUNsaWNrfT5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXtzaG93SGlkZUljb259IC8+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIG9uVW5sb2NrQ2xpY2sobWV0YWRhdGEudWlkKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtdW5sb2NrXCIgLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuXG4gICAgICAgIHtleHBhbmRlZCAmJiAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGggLz5cbiAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPkNvbnRvdXJzPC90aD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICB7Uk9JQ29udG91ckFycmF5Lm1hcChyb2lDb250b3VyID0+IChcbiAgICAgICAgICAgICAgPHRyIGtleT17cm9pQ29udG91ci5tZXRhZGF0YS51aWR9PlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJsZWZ0LWFsaWduZWQtY2VsbFwiPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtc3F1YXJlXCIgc3R5bGU9e3sgY29sb3I6IHJvaUNvbnRvdXIubWV0YWRhdGEuY29sb3IgfX0gLz5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJsZWZ0LWFsaWduZWQtY2VsbFwiPntyb2lDb250b3VyLm1ldGFkYXRhLm5hbWV9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPntyb2lDb250b3VyLm1ldGFkYXRhLnBvbHlnb25Db3VudH08L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKX1cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNZW51SU9CdXR0b25zIGZyb20gJy4uL2NvbW1vbi9NZW51SU9CdXR0b25zLmpzJztcbmltcG9ydCBXb3JraW5nQ29sbGVjdGlvbkxpc3QgZnJvbSAnLi9Xb3JraW5nQ29sbGVjdGlvbkxpc3QuanMnO1xuaW1wb3J0IExvY2tlZENvbGxlY3Rpb25zTGlzdCBmcm9tICcuL0xvY2tlZENvbGxlY3Rpb25zTGlzdC5qcyc7XG5pbXBvcnQgUm9pQ29udG91clNldHRpbmdzIGZyb20gJy4vUm9pQ29udG91clNldHRpbmdzLmpzJztcbmltcG9ydCBjb3JuZXJzdG9uZVRvb2xzIGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCB7IGNyZWF0ZU5ld1ZvbHVtZSwgc2V0Vm9sdW1lTmFtZSB9IGZyb20gJy4uLy4uL3V0aWwvZnJlZWhhbmROYW1lSU8uanMnO1xuaW1wb3J0IHVubG9ja1N0cnVjdHVyZVNldCBmcm9tICcuLi8uLi91dGlsL3VubG9ja1N0cnVjdHVyZVNldC5qcyc7XG5pbXBvcnQgb25JT0NhbmNlbCBmcm9tICcuLi9jb21tb24vaGVscGVycy9vbklPQ2FuY2VsLmpzJztcbmltcG9ydCBvbkltcG9ydEJ1dHRvbkNsaWNrIGZyb20gJy4uL2NvbW1vbi9oZWxwZXJzL29uSW1wb3J0QnV0dG9uQ2xpY2suanMnO1xuaW1wb3J0IG9uRXhwb3J0QnV0dG9uQ2xpY2sgZnJvbSAnLi4vY29tbW9uL2hlbHBlcnMvb25FeHBvcnRCdXR0b25DbGljay5qcyc7XG4vLyBpbXBvcnQgJy4vcm9pQ29udG91ck1lbnUuc3R5bCc7XG5cbmltcG9ydCBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50IGZyb20gJy4uLy4uL3V0aWwvZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudC5qcyc7XG5pbXBvcnQgZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQgZnJvbSAnLi4vLi4vdXRpbC9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudC5qcyc7XG5cbmNvbnN0IG1vZHVsZXMgPSBjb3JuZXJzdG9uZVRvb2xzLnN0b3JlLm1vZHVsZXM7XG5cbi8qKlxuICogQGNsYXNzIFJvaUNvbnRvdXJNZW51IC0gUmVuZGVycyBhIG1lbnUgZm9yIGltcG9ydGluZywgZXhwb3J0aW5nLCBjcmVhdGluZ1xuICogYW5kIHJlbmFtaW5nIFJPSSBDb250b3Vycy4gQXMgd2VsbCBhcyBzZXR0aW5nIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yXG4gKiB0aGUgRnJlZWhhbmQzRHRvb2wuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvaUNvbnRvdXJNZW51IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0bmVycyB0byBjb3JuZXJzdG9uZS5cblxuICAgIGNvbnN0IGVuYWJsZWRFbGVtZW50ID0gZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudChwcm9wcy52aWV3cG9ydHMsIHByb3BzLmFjdGl2ZUluZGV4KTtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50KGVuYWJsZWRFbGVtZW50KTtcblxuICAgIHRoaXMuZ2V0Um9pQ29udG91ckxpc3QgPSB0aGlzLmdldFJvaUNvbnRvdXJMaXN0LmJpbmQodGhpcyk7XG5cbiAgICBjb25zdCB7IHdvcmtpbmdDb2xsZWN0aW9uLCBsb2NrZWRDb2xsZWN0aW9ucywgYWN0aXZlUk9JQ29udG91ckluZGV4IH0gPSB0aGlzLmdldFJvaUNvbnRvdXJMaXN0KHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICB3b3JraW5nQ29sbGVjdGlvbixcbiAgICAgIGxvY2tlZENvbGxlY3Rpb25zLFxuICAgICAgdW5sb2NrQ29uZmlybWF0aW9uT3BlbjogZmFsc2UsXG4gICAgICByb2lDb2xsZWN0aW9uVG9VbmxvY2s6ICcnLFxuICAgICAgYWN0aXZlUk9JQ29udG91ckluZGV4LFxuICAgICAgaW1wb3J0aW5nOiBmYWxzZSxcbiAgICAgIGV4cG9ydGluZzogZmFsc2UsXG4gICAgICBzZXJpZXNJbnN0YW5jZVVpZFxuICAgIH07XG5cbiAgICB0aGlzLm9uTmV3Um9pQnV0dG9uQ2xpY2sgPSB0aGlzLm9uTmV3Um9pQnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uUm9pQ2hhbmdlID0gdGhpcy5vblJvaUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25SZW5hbWVCdXR0b25DbGljayA9IHRoaXMub25SZW5hbWVCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMuY29uZmlybVVubG9ja09uVW5sb2NrQ2xpY2sgPSB0aGlzLmNvbmZpcm1VbmxvY2tPblVubG9ja0NsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblVubG9ja0NhbmNlbENsaWNrID0gdGhpcy5vblVubG9ja0NhbmNlbENsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblVubG9ja0NvbmZpcm1DbGljayA9IHRoaXMub25VbmxvY2tDb25maXJtQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSU9Db21wbGV0ZSA9IHRoaXMub25JT0NvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbklPQ2FuY2VsID0gb25JT0NhbmNlbC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25JbXBvcnRCdXR0b25DbGljayA9IG9uSW1wb3J0QnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uRXhwb3J0QnV0dG9uQ2xpY2sgPSBvbkV4cG9ydEJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogZ2V0Um9pQ29udG91ckxpc3QgLSByZXR1cm5zIHRoZSB3b3JraW5nQ29sbGVjdGlvbiwgbG9ja2VkQ29sbGVjdGlvbnNcbiAgICogYW5kIHRoIGFjdGl2ZVJPSUNvbnRvdXJJbmRleC5cbiAgICpcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBnZXRSb2lDb250b3VyTGlzdChzZXJpZXNJbnN0YW5jZVVpZCkge1xuICAgIHNlcmllc0luc3RhbmNlVWlkID0gc2VyaWVzSW5zdGFuY2VVaWQgfHwgdGhpcy5zdGF0ZS5zZXJpZXNJbnN0YW5jZVVpZDtcblxuICAgIGxldCB3b3JraW5nQ29sbGVjdGlvbiA9IFtdO1xuICAgIGxldCBsb2NrZWRDb2xsZWN0aW9ucyA9IFtdO1xuICAgIGxldCBhY3RpdmVST0lDb250b3VySW5kZXggPSAwO1xuXG4gICAgaWYgKHNlcmllc0luc3RhbmNlVWlkKSB7XG4gICAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG5cbiAgICAgIGlmIChtb2R1bGVzLmZyZWVoYW5kM0QuZ2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpKSB7XG4gICAgICAgIGFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLmFjdGl2ZVJPSUNvbnRvdXJJbmRleChzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgICB9XG5cbiAgICAgIHdvcmtpbmdDb2xsZWN0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5fd29ya2luZ0NvbGxlY3Rpb24oc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgICAgbG9ja2VkQ29sbGVjdGlvbnMgPSB0aGlzLmNvbnN0cnVjdG9yLl9sb2NrZWRDb2xsZWN0aW9ucyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHdvcmtpbmdDb2xsZWN0aW9uLFxuICAgICAgbG9ja2VkQ29sbGVjdGlvbnMsXG4gICAgICBhY3RpdmVST0lDb250b3VySW5kZXhcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIHJlZnJlc2hSb2lDb250b3VyTGlzdCAtIEdyYWJzIHRoZSBST0kgQ29udG91cnMgZnJvbSB0aGUgZnJlZWhhbmQzRCBzdG9yZSBhbmRcbiAgICogcG9wdWxhdGVzIHN0YXRlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIHJlZnJlc2hSb2lDb250b3VyTGlzdCgpIHtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IHRoaXMuc3RhdGUuc2VyaWVzSW5zdGFuY2VVaWQ7XG5cbiAgICBjb25zdCB7IHdvcmtpbmdDb2xsZWN0aW9uLCBsb2NrZWRDb2xsZWN0aW9ucywgYWN0aXZlUk9JQ29udG91ckluZGV4IH0gPSB0aGlzLmdldFJvaUNvbnRvdXJMaXN0KHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgd29ya2luZ0NvbGxlY3Rpb24sXG4gICAgICBsb2NrZWRDb2xsZWN0aW9ucyxcbiAgICAgIGFjdGl2ZVJPSUNvbnRvdXJJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uSU9Db21wbGV0ZSAtIEEgY2FsbGJhY2sgZXhlY3V0ZWQgb24gc3VjY2VzZnVsIGNvbXBsZXRpb24gb2YgYW5cbiAgICogSU8gb3BwZXJhdGlvbi4gUmVjYWxjdWxhdGVzIHRoZSBST0kgQ29udG91ciBDb2xsZWN0aW9uIHN0YXRlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dHlwZX0gIGRlc2NyaXB0aW9uXG4gICAqL1xuICBvbklPQ29tcGxldGUoKSB7XG4gICAgY29uc3Qgc2VyaWVzSW5zdGFuY2VVaWQgPSB0aGlzLnN0YXRlLnNlcmllc0luc3RhbmNlVWlkO1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcbiAgICBsZXQgYWN0aXZlUk9JQ29udG91ckluZGV4ID0gMDtcblxuICAgIGlmIChtb2R1bGVzLmZyZWVoYW5kM0QuZ2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpKSB7XG4gICAgICBhY3RpdmVST0lDb250b3VySW5kZXggPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5hY3RpdmVST0lDb250b3VySW5kZXgoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgIH1cblxuICAgIGNvbnN0IHdvcmtpbmdDb2xsZWN0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5fd29ya2luZ0NvbGxlY3Rpb24oc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgIGNvbnN0IGxvY2tlZENvbGxlY3Rpb25zID0gdGhpcy5jb25zdHJ1Y3Rvci5fbG9ja2VkQ29sbGVjdGlvbnMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB3b3JraW5nQ29sbGVjdGlvbixcbiAgICAgIGxvY2tlZENvbGxlY3Rpb25zLFxuICAgICAgYWN0aXZlUk9JQ29udG91ckluZGV4LFxuICAgICAgaW1wb3J0aW5nOiBmYWxzZSxcbiAgICAgIGV4cG9ydGluZzogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbk5ld1JvaUJ1dHRvbkNsaWNrIC0gQ2FsbGJhY2sgdGhhdCBhZGRzIGEgbmV3IFJPSUNvbnRvdXIgdG8gdGhlXG4gICAqIGFjdGl2ZSBzZXJpZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25OZXdSb2lCdXR0b25DbGljaygpIHtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IHRoaXMuc3RhdGUuc2VyaWVzSW5zdGFuY2VVaWQ7XG5cbiAgICBjb25zdCBjYWxsYmFjayA9IG5hbWUgPT4ge1xuICAgICAgLy8gQ3JlYXRlIGFuZCBhY3RpdmF0ZSBuZXcgUk9JQ29udG91clxuXG4gICAgICAvLyBDaGVjayBpZiBkZWZhdWx0IHN0cnVjdHVyZVNldCBleGlzdHMgZm9yIHRoaXMgc2VyaWVzLlxuICAgICAgaWYgKCFtb2R1bGVzLmZyZWVoYW5kM0QuZ2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpKSB7XG4gICAgICAgIG1vZHVsZXMuZnJlZWhhbmQzRC5zZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9IG1vZHVsZXMuZnJlZWhhbmQzRC5zZXR0ZXJzLlJPSUNvbnRvdXJBbmRTZXRJbmRleEFjdGl2ZShcbiAgICAgICAgc2VyaWVzSW5zdGFuY2VVaWQsXG4gICAgICAgICdERUZBVUxUJyxcbiAgICAgICAgbmFtZVxuICAgICAgKTtcblxuICAgICAgY29uc3Qgd29ya2luZ0NvbGxlY3Rpb24gPSB0aGlzLmNvbnN0cnVjdG9yLl93b3JraW5nQ29sbGVjdGlvbihzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICAgIHRoaXMuc2V0U3RhdGUoeyB3b3JraW5nQ29sbGVjdGlvbiwgYWN0aXZlUk9JQ29udG91ckluZGV4IH0pO1xuICAgIH07XG5cbiAgICBjcmVhdGVOZXdWb2x1bWUoY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uUm9pQ2hhbmdlIC0gQ2FsbGJhY2sgdGhhdCBjaGFuZ2VzIHRoZSBhY3RpdmUgUk9JIENvbnRvdXIgYmVpbmcgZHJhd24uXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcn0gcm9pQ29udG91ckluZGV4IFRoZSBpbmRleCBvZiB0aGUgUk9JIENvbnRvdXIuXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25Sb2lDaGFuZ2Uocm9pQ29udG91ckluZGV4KSB7XG4gICAgY29uc3Qgc2VyaWVzSW5zdGFuY2VVaWQgPSB0aGlzLnN0YXRlLnNlcmllc0luc3RhbmNlVWlkO1xuXG4gICAgbW9kdWxlcy5mcmVlaGFuZDNELnNldHRlcnMuYWN0aXZlUk9JQ29udG91ckluZGV4KHJvaUNvbnRvdXJJbmRleCwgc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZVJPSUNvbnRvdXJJbmRleDogcm9pQ29udG91ckluZGV4IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uUmVuYW1lQnV0dG9uQ2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgdHJpZ2dlcnMgbmFtZSBpbnB1dCBmb3IgYW4gUk9JQ29udG91ci5cbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBtZXRhZGF0YSBUaGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgY29udG91cidzIG1ldGFkYXRhLlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uUmVuYW1lQnV0dG9uQ2xpY2sobWV0YWRhdGEpIHtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IHRoaXMuc3RhdGUuc2VyaWVzSW5zdGFuY2VVaWQ7XG5cbiAgICBjb25zdCBjYWxsYmFjayA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHdvcmtpbmdDb2xsZWN0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5fd29ya2luZ0NvbGxlY3Rpb24oc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgICB0aGlzLnNldFN0YXRlKHsgd29ya2luZ0NvbGxlY3Rpb24gfSk7XG4gICAgfTtcblxuICAgIHNldFZvbHVtZU5hbWUoc2VyaWVzSW5zdGFuY2VVaWQsICdERUZBVUxUJywgbWV0YWRhdGEudWlkLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogY29uZmlybVVubG9ja09uVW5sb2NrQ2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgdHJpZ2dlcnMgY29uZmlybWF0aW9uIG9mIHRoZVxuICAgKiB1bmxvY2tpbmcgb2YgYW4gUk9JIENvbnRvdXIgQ29sbGVjdGlvbi5cbiAgICpcbiAgICogQHBhcmFtICB7U3RyaW5nfSBzdHJ1Y3R1cmVTZXRVaWQgVGhlIFVJRCBvZiB0aGUgc3RydWN0dXJlU2V0LlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIGNvbmZpcm1VbmxvY2tPblVubG9ja0NsaWNrKHN0cnVjdHVyZVNldFVpZCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdW5sb2NrQ29uZmlybWF0aW9uT3BlbjogdHJ1ZSxcbiAgICAgIHJvaUNvbGxlY3Rpb25Ub1VubG9jazogc3RydWN0dXJlU2V0VWlkXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25VbmxvY2tDb25maXJtQ2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgdW5sb2NrcyBhbiBST0kgQ29udG91ciBDb2xsZWN0aW9uIGFuZFxuICAgKiBtb3ZlcyB0aGUgUk9JIENvbnRvdXJzIHRvIHRoZSB3b3JraW5nIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHt0eXBlfSAgZGVzY3JpcHRpb25cbiAgICovXG4gIG9uVW5sb2NrQ29uZmlybUNsaWNrKCkge1xuICAgIGNvbnN0IHsgc2VyaWVzSW5zdGFuY2VVaWQsIHJvaUNvbGxlY3Rpb25Ub1VubG9jayB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIHVubG9ja1N0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgcm9pQ29sbGVjdGlvblRvVW5sb2NrKTtcblxuICAgIGNvbnN0IHdvcmtpbmdDb2xsZWN0aW9uID0gdGhpcy5jb25zdHJ1Y3Rvci5fd29ya2luZ0NvbGxlY3Rpb24oc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgIGNvbnN0IGxvY2tlZENvbGxlY3Rpb25zID0gdGhpcy5jb25zdHJ1Y3Rvci5fbG9ja2VkQ29sbGVjdGlvbnMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB1bmxvY2tDb25maXJtYXRpb25PcGVuOiBmYWxzZSxcbiAgICAgIHdvcmtpbmdDb2xsZWN0aW9uLFxuICAgICAgbG9ja2VkQ29sbGVjdGlvbnNcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvblVubG9ja0NhbmNlbENsaWNrIC0gQSBjYWxsYmFjayB0aGF0IGNsb3NlcyB0aGUgdW5sb2NrIGNvbmZpcm1hdGlvbiB3aW5kb3dcbiAgICogYW5kIGFib3J0cyB1bmxvY2tpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25VbmxvY2tDYW5jZWxDbGljaygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgdW5sb2NrQ29uZmlybWF0aW9uT3BlbjogZmFsc2UgfSk7XG4gIH1cblxuICAvKipcbiAgICogX3dvcmtpbmdDb2xsZWN0aW9uIC0gUmV0dXJucyBhIGxpc3Qgb2YgdGhlIFJPSSBDb250b3Vyc1xuICAgKiBpbiB0aGUgd29ya2luZyBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0W119IEFuIGFycmF5IG9mIFJPSSBDb250b3Vycy5cbiAgICovXG4gIHN0YXRpYyBfd29ya2luZ0NvbGxlY3Rpb24oc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG5cbiAgICBsZXQgc2VyaWVzID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIGlmICghc2VyaWVzKSB7XG4gICAgICBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgICAgc2VyaWVzID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICB9XG5cbiAgICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgY29uc3QgUk9JQ29udG91ckNvbGxlY3Rpb24gPSBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb247XG5cbiAgICBjb25zdCB3b3JraW5nQ29sbGVjdGlvbiA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBST0lDb250b3VyQ29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKFJPSUNvbnRvdXJDb2xsZWN0aW9uW2ldKSB7XG4gICAgICAgIHdvcmtpbmdDb2xsZWN0aW9uLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgIG1ldGFkYXRhOiBST0lDb250b3VyQ29sbGVjdGlvbltpXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gd29ya2luZ0NvbGxlY3Rpb247XG4gIH1cblxuICAvKipcbiAgICogX2xvY2tlZENvbGxlY3Rpb25zIC0gUmV0dXJucyBhIGxpc3Qgb2YgbG9ja2VkIFJPSSBDb250b3VyIENvbGxlY3Rpb25zLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0fSBBbiBhcnJheSBvZiBsb2NrZWQgUk9JIENvbnRvdXIgQ29sbGVjdGlvbnMuXG4gICAqL1xuICBzdGF0aWMgX2xvY2tlZENvbGxlY3Rpb25zKHNlcmllc0luc3RhbmNlVWlkKSB7XG4gICAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gbW9kdWxlcy5mcmVlaGFuZDNEO1xuXG4gICAgbGV0IHNlcmllcyA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICBpZiAoIXNlcmllcykge1xuICAgICAgZnJlZWhhbmQzRFN0b3JlLnNldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICAgIHNlcmllcyA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RydWN0dXJlU2V0Q29sbGVjdGlvbiA9IHNlcmllcy5zdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uO1xuICAgIGNvbnN0IGxvY2tlZENvbGxlY3Rpb25zID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0cnVjdHVyZVNldENvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IHN0cnVjdHVyZVNldCA9IHN0cnVjdHVyZVNldENvbGxlY3Rpb25baV07XG5cbiAgICAgIGlmIChzdHJ1Y3R1cmVTZXQudWlkID09PSAnREVGQVVMVCcpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IFJPSUNvbnRvdXJDb2xsZWN0aW9uID0gc3RydWN0dXJlU2V0LlJPSUNvbnRvdXJDb2xsZWN0aW9uO1xuICAgICAgY29uc3QgUk9JQ29udG91ckFycmF5ID0gW107XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgUk9JQ29udG91ckNvbGxlY3Rpb24ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKFJPSUNvbnRvdXJDb2xsZWN0aW9uW2pdKSB7XG4gICAgICAgICAgUk9JQ29udG91ckFycmF5LnB1c2goe1xuICAgICAgICAgICAgaW5kZXg6IGosXG4gICAgICAgICAgICBtZXRhZGF0YTogUk9JQ29udG91ckNvbGxlY3Rpb25bal1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsb2NrZWRDb2xsZWN0aW9ucy5wdXNoKHtcbiAgICAgICAgbWV0YWRhdGE6IHN0cnVjdHVyZVNldCxcbiAgICAgICAgUk9JQ29udG91ckFycmF5XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9ja2VkQ29sbGVjdGlvbnM7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgd29ya2luZ0NvbGxlY3Rpb24sXG4gICAgICBsb2NrZWRDb2xsZWN0aW9ucyxcbiAgICAgIHVubG9ja0NvbmZpcm1hdGlvbk9wZW4sXG4gICAgICByb2lDb2xsZWN0aW9uVG9VbmxvY2ssXG4gICAgICBhY3RpdmVST0lDb250b3VySW5kZXgsXG4gICAgICBpbXBvcnRpbmcsXG4gICAgICBleHBvcnRpbmcsXG4gICAgICBzZXJpZXNJbnN0YW5jZVVpZFxuICAgIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgeyBJbXBvcnRDYWxsYmFja09yQ29tcG9uZW50LCBFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50IH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcblxuICAgIGxldCBjb21wb25lbnQ7XG5cbiAgICBpZiAoaW1wb3J0aW5nKSB7XG4gICAgICBjb21wb25lbnQgPSA8SW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCBvbkltcG9ydENvbXBsZXRlPXt0aGlzLm9uSU9Db21wbGV0ZX0gb25JbXBvcnRDYW5jZWw9e3RoaXMub25JT0NhbmNlbH0gLz47XG4gICAgfSBlbHNlIGlmIChleHBvcnRpbmcpIHtcbiAgICAgIGNvbXBvbmVudCA9IDxFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50IG9uRXhwb3J0Q29tcGxldGU9e3RoaXMub25JT0NvbXBsZXRlfSBvbkV4cG9ydENhbmNlbD17dGhpcy5vbklPQ2FuY2VsfSAvPjtcbiAgICB9IGVsc2UgaWYgKHVubG9ja0NvbmZpcm1hdGlvbk9wZW4pIHtcbiAgICAgIGNvbnN0IGNvbGxlY3Rpb24gPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHJvaUNvbGxlY3Rpb25Ub1VubG9jayk7XG5cbiAgICAgIGNvbnN0IGNvbGxlY3Rpb25OYW1lID0gY29sbGVjdGlvbi5uYW1lO1xuXG4gICAgICBjb21wb25lbnQgPSAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxoNT5VbmxvY2s8L2g1PlxuICAgICAgICAgICAgPHA+VW5sb2NrIHtjb2xsZWN0aW9uTmFtZX0gZm9yIGVkaXRpbmc/IFRoZSBST0lzIHdpbGwgYmUgbW92ZWQgdG8gdGhlIFdvcmtpbmcgUk9JIENvbGxlY3Rpb24uPC9wPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17dGhpcy5vblVubG9ja0NvbmZpcm1DbGlja30+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhIGZhLWNoZWNrLWNpcmNsZSBmYS0yeFwiIC8+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17dGhpcy5vblVubG9ja0NhbmNlbENsaWNrfT5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEgZmEtdGltZXMtY2lyY2xlIGZhLTJ4XCIgLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb21wb25lbnQgPSAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm9pLWNvbnRvdXItbWVudS1jb21wb25lbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvaS1jb250b3VyLW1lbnUtaGVhZGVyXCI+XG4gICAgICAgICAgICA8aDM+Uk9JIENvbnRvdXIgQ29sbGVjdGlvbnM8L2gzPlxuICAgICAgICAgICAgPE1lbnVJT0J1dHRvbnNcbiAgICAgICAgICAgICAgSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudD17SW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudH1cbiAgICAgICAgICAgICAgRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudD17RXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudH1cbiAgICAgICAgICAgICAgb25JbXBvcnRCdXR0b25DbGljaz17dGhpcy5vbkltcG9ydEJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgICBvbkV4cG9ydEJ1dHRvbkNsaWNrPXt0aGlzLm9uRXhwb3J0QnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwicm9pLWNvbnRvdXItbWVudS1jb2xsZWN0aW9uLWxpc3QtYm9keVwiPlxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInBlcHBlcm1pbnQtdGFibGVcIj5cbiAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgIHtzZXJpZXNJbnN0YW5jZVVpZCAmJiAoXG4gICAgICAgICAgICAgICAgICA8V29ya2luZ0NvbGxlY3Rpb25MaXN0XG4gICAgICAgICAgICAgICAgICAgIHdvcmtpbmdDb2xsZWN0aW9uPXt3b3JraW5nQ29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgYWN0aXZlUk9JQ29udG91ckluZGV4PXthY3RpdmVST0lDb250b3VySW5kZXh9XG4gICAgICAgICAgICAgICAgICAgIG9uUm9pQ2hhbmdlPXt0aGlzLm9uUm9pQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICBvblJlbmFtZUJ1dHRvbkNsaWNrPXt0aGlzLm9uUmVuYW1lQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAgIG9uTmV3Um9pQnV0dG9uQ2xpY2s9e3RoaXMub25OZXdSb2lCdXR0b25DbGlja31cbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICB7bG9ja2VkQ29sbGVjdGlvbnMubGVuZ3RoICE9PSAwICYmIChcbiAgICAgICAgICAgICAgICAgIDxMb2NrZWRDb2xsZWN0aW9uc0xpc3RcbiAgICAgICAgICAgICAgICAgICAgbG9ja2VkQ29sbGVjdGlvbnM9e2xvY2tlZENvbGxlY3Rpb25zfVxuICAgICAgICAgICAgICAgICAgICBvblVubG9ja0NsaWNrPXt0aGlzLmNvbmZpcm1VbmxvY2tPblVubG9ja0NsaWNrfVxuICAgICAgICAgICAgICAgICAgICBzZXJpZXNJbnN0YW5jZVVpZD17c2VyaWVzSW5zdGFuY2VVaWR9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxSb2lDb250b3VyU2V0dGluZ3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+e2NvbXBvbmVudH08L1JlYWN0LkZyYWdtZW50PjtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb3JuZXJzdG9uZVRvb2xzIGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcblxuY29uc3QgbW9kdWxlcyA9IGNvcm5lcnN0b25lVG9vbHMuc3RvcmUubW9kdWxlcztcblxuLy8gaW1wb3J0ICcuL3JvaUNvbnRvdXJNZW51LnN0eWwnO1xuXG4vKipcbiAqIEBjbGFzcyBSb2lDb250b3VyU2V0dGluZ3MgLSBBIGNvbXBvbmVudCB0aGF0IGFsbG93cyB0aGUgdXNlciB0byBjaGFuZ2VcbiAqIGNvbmZpZ3VyYXRpb24gb2YgdGhlIGZyZWVoYW5kM0QgdG9vbHMuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvaUNvbnRvdXJTZXR0aW5ncyBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzID0ge30pIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCB7IGludGVycG9sYXRlLCBkaXNwbGF5U3RhdHMgfSA9IG1vZHVsZXMuZnJlZWhhbmQzRC5zdGF0ZTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBpbnRlcnBvbGF0ZSxcbiAgICAgIGRpc3BsYXlTdGF0c1xuICAgIH07XG5cbiAgICB0aGlzLm9uRGlzcGxheVN0YXRzVG9nZ2xlQ2xpY2sgPSB0aGlzLm9uRGlzcGxheVN0YXRzVG9nZ2xlQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSW50ZXJwb2xhdGVUb2dnbGVDbGljayA9IHRoaXMub25JbnRlcnBvbGF0ZVRvZ2dsZUNsaWNrLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogb25EaXNwbGF5U3RhdHNUb2dnbGVDbGljayAtIEEgQ2FsbGJhY2sgdGhhdCB0b2dnbGVzIHRoZSBkaXNwbGF5IG9mIHN0YXRzXG4gICAqIHdpbmRvdyBvbiB0aGUgRnJlZWhhbmQzRFRvb2wuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25EaXNwbGF5U3RhdHNUb2dnbGVDbGljaygpIHtcbiAgICBtb2R1bGVzLmZyZWVoYW5kM0Quc2V0dGVycy50b2dnbGVEaXNwbGF5U3RhdHMoKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBkaXNwbGF5U3RhdHM6IG1vZHVsZXMuZnJlZWhhbmQzRC5zdGF0ZS5kaXNwbGF5U3RhdHMgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25JbnRlcnBvbGF0ZVRvZ2dsZUNsaWNrIC0gQSBjYWxsYmFjayB0aGF0IHRvZ2dsZXMgaW50ZXJwb2xhdGlvbiBtb2RlIGZvclxuICAgKiB0aGUgRnJlZWhhbmQzRFRvb2wuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25JbnRlcnBvbGF0ZVRvZ2dsZUNsaWNrKCkge1xuICAgIG1vZHVsZXMuZnJlZWhhbmQzRC5zZXR0ZXJzLnRvZ2dsZUludGVycG9sYXRlKCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgaW50ZXJwb2xhdGU6IG1vZHVsZXMuZnJlZWhhbmQzRC5zdGF0ZS5pbnRlcnBvbGF0ZSB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGludGVycG9sYXRlLCBkaXNwbGF5U3RhdHMgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb2ktY29udG91ci1tZW51LWZvb3RlclwiPlxuICAgICAgICA8aDM+U2V0dGluZ3M8L2gzPlxuICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1zZWNvbmRhcnlcIiBvbkNsaWNrPXt0aGlzLm9uSW50ZXJwb2xhdGVUb2dnbGVDbGlja30+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJyb2ktY29udG91ci1tZW51LW9wdGlvblwiPlxuICAgICAgICAgICAgPHN2Zz5cbiAgICAgICAgICAgICAgPHVzZVxuICAgICAgICAgICAgICAgIHhsaW5rSHJlZj17XG4gICAgICAgICAgICAgICAgICBpbnRlcnBvbGF0ZSA/XG4gICAgICAgICAgICAgICAgICAgICdwYWNrYWdlcy9pY3JfcGVwcGVybWludC10b29scy9hc3NldHMvaWNvbnMuc3ZnI2ljb24tZnJlZWhhbmQtaW50ZXJwb2xhdGUtb24nIDpcbiAgICAgICAgICAgICAgICAgICAgJ3BhY2thZ2VzL2ljcl9wZXBwZXJtaW50LXRvb2xzL2Fzc2V0cy9pY29ucy5zdmcjaWNvbi1mcmVlaGFuZC1pbnRlcnBvbGF0ZS1vZmYnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8bGFiZWw+SW50ZXJwb2xhdGlvbjwvbGFiZWw+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvYT5cbiAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCIgb25DbGljaz17dGhpcy5vbkRpc3BsYXlTdGF0c1RvZ2dsZUNsaWNrfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvaS1jb250b3VyLW1lbnUtb3B0aW9uXCI+XG4gICAgICAgICAgICA8c3ZnPlxuICAgICAgICAgICAgICA8dXNlXG4gICAgICAgICAgICAgICAgeGxpbmtIcmVmPXtcbiAgICAgICAgICAgICAgICAgIGRpc3BsYXlTdGF0cyA/XG4gICAgICAgICAgICAgICAgICAgICdwYWNrYWdlcy9pY3JfcGVwcGVybWludC10b29scy9hc3NldHMvaWNvbnMuc3ZnI2ljb24tZnJlZWhhbmQtc3RhdHMtb24nIDpcbiAgICAgICAgICAgICAgICAgICAgJ3BhY2thZ2VzL2ljcl9wZXBwZXJtaW50LXRvb2xzL2Fzc2V0cy9pY29ucy5zdmcjaWNvbi1mcmVlaGFuZC1zdGF0cy1vZmYnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgICAgICA8bGFiZWw+U3RhdHM8L2xhYmVsPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2E+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFdvcmtpbmdDb2xsZWN0aW9uTGlzdEl0ZW0gZnJvbSAnLi9Xb3JraW5nQ29sbGVjdGlvbkxpc3RJdGVtLmpzJztcblxuLy8gaW1wb3J0ICcuL3JvaUNvbnRvdXJNZW51LnN0eWwnO1xuXG4vKipcbiAqIEBjbGFzcyBXb3JraW5nUm9pQ29sbGVjdGlvbkxpc3QgLSBSZW5kZXJzIGEgbGlzdCBvZlxuICogV29ya2luZ0NvbGxlY3Rpb25MaXN0SXRlbSwgZGlzcGxheWluZyBtZXRhZGF0YSBvZiB0aGUgd29ya2luZyBST0lDb250b3VyXG4gKiBDb2xsZWN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXb3JraW5nUm9pQ29sbGVjdGlvbkxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHdvcmtpbmdDb2xsZWN0aW9uLFxuICAgICAgYWN0aXZlUk9JQ29udG91ckluZGV4LFxuICAgICAgb25Sb2lDaGFuZ2UsXG4gICAgICBvblJlbmFtZUJ1dHRvbkNsaWNrLFxuICAgICAgb25OZXdSb2lCdXR0b25DbGlja1xuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPHRyIGNsYXNzTmFtZT1cInJvaS1saXN0LWhlYWRlclwiPlxuICAgICAgICAgIDx0aCAvPlxuICAgICAgICAgIDx0aCBjb2xTcGFuPVwiNFwiPiBOZXcgUk9JIENvbnRvdXIgQ29sbGVjdGlvbjwvdGg+XG4gICAgICAgIDwvdHI+XG5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aD5EcmF3PC90aD5cbiAgICAgICAgICA8dGg+TmFtZTwvdGg+XG4gICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImNlbnRlcmVkLWNlbGxcIj5Db250b3VyczwvdGg+XG4gICAgICAgIDwvdHI+XG5cbiAgICAgICAge3dvcmtpbmdDb2xsZWN0aW9uLm1hcChyb2lDb250b3VyID0+IChcbiAgICAgICAgICA8V29ya2luZ0NvbGxlY3Rpb25MaXN0SXRlbVxuICAgICAgICAgICAga2V5PXtyb2lDb250b3VyLm1ldGFkYXRhLnVpZH1cbiAgICAgICAgICAgIHJvaUNvbnRvdXJJbmRleD17cm9pQ29udG91ci5pbmRleH1cbiAgICAgICAgICAgIG1ldGFkYXRhPXtyb2lDb250b3VyLm1ldGFkYXRhfVxuICAgICAgICAgICAgYWN0aXZlUk9JQ29udG91ckluZGV4PXthY3RpdmVST0lDb250b3VySW5kZXh9XG4gICAgICAgICAgICBvblJvaUNoYW5nZT17b25Sb2lDaGFuZ2V9XG4gICAgICAgICAgICBvblJlbmFtZUJ1dHRvbkNsaWNrPXtvblJlbmFtZUJ1dHRvbkNsaWNrfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuXG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggLz5cbiAgICAgICAgICA8dGg+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJyb2ktY29udG91ci1tZW51LW5ldy1idXR0b24gYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9e29uTmV3Um9pQnV0dG9uQ2xpY2t9PlxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1wbHVzLWNpcmNsZVwiIC8+IFJPSVxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8vIGltcG9ydCAnLi9yb2lDb250b3VyTWVudS5zdHlsJztcblxuLyoqXG4gKiBAY2xhc3MgV29ya2luZ0NvbGxlY3Rpb25MaXN0SXRlbSAtIFJlbmRlcnMgbWV0YWRhdGEgZm9yIHRoZSB3b3JraW5nXG4gKiBST0lDb250b3VyIENvbGxlY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmtpbmdDb2xsZWN0aW9uTGlzdEl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgcm9pQ29udG91ckluZGV4LCBtZXRhZGF0YSwgb25Sb2lDaGFuZ2UsIG9uUmVuYW1lQnV0dG9uQ2xpY2ssIGFjdGl2ZVJPSUNvbnRvdXJJbmRleCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGNoZWNrZWQgPSBhY3RpdmVST0lDb250b3VySW5kZXggPT09IHJvaUNvbnRvdXJJbmRleDtcbiAgICBjb25zdCBuYW1lID0gbWV0YWRhdGEubmFtZTtcbiAgICBjb25zdCBwb2x5Z29uQ291bnQgPSBtZXRhZGF0YS5wb2x5Z29uQ291bnQ7XG4gICAgY29uc3Qgcm9pQ29udG91ckNvbG9yID0gbWV0YWRhdGEuY29sb3I7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwibGVmdC1hbGlnbmVkLWNlbGxcIj5cbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1zcXVhcmVcIiBzdHlsZT17eyBjb2xvcjogcm9pQ29udG91ckNvbG9yIH19IC8+eycgJ31cbiAgICAgICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgY2hlY2tlZD17Y2hlY2tlZH0gb25DaGFuZ2U9eygpID0+IG9uUm9pQ2hhbmdlKHJvaUNvbnRvdXJJbmRleCl9IC8+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzc05hbWU9XCJsZWZ0LWFsaWduZWQtY2VsbFwiPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJyb2ktY29udG91ci1tZW51LW5hbWUtbGlua1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIG9uUmVuYW1lQnV0dG9uQ2xpY2sobWV0YWRhdGEpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7bmFtZX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD57cG9seWdvbkNvdW50fTwvdGQ+XG4gICAgICA8L3RyPlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBjb3JuZXJzdG9uZVRvb2xzIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG5jb25zdCBicnVzaE1vZHVsZSA9IGNvcm5lcnN0b25lVG9vbHMuc3RvcmUubW9kdWxlcy5icnVzaDtcbmNvbnN0IGJydXNoU3RhdGUgPSBicnVzaE1vZHVsZS5zdGF0ZTtcblxuLy8gaW1wb3J0ICcuL3NlZ21lbnRhdGlvbk1lbnUuc3R5bCc7XG5cbmNvbnN0IG1pbkdhdGVTZXBlcmF0aW9uID0gMTA7XG5cbi8qKlxuICogQGNsYXNzIEJydXNoU2V0dGluZ3MgLSBBIGNvbXBvbmVudCB0aGF0IGFsbG93cyB0aGUgdXNlciB0byBjaGFuZ2VcbiAqIGNvbmZpZ3VyYXRpb24gb2YgdGhlIEJydXNoIHRvb2xzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcnVzaFNldHRpbmdzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGNvbnN0IGN1c3RvbUdhdGVSYW5nZSA9IGJydXNoTW9kdWxlLmdldHRlcnMuY3VzdG9tR2F0ZVJhbmdlKCk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaG9sZUZpbGw6IGJydXNoU3RhdGUuaG9sZUZpbGwsXG4gICAgICBzdHJheVJlbW92ZTogYnJ1c2hTdGF0ZS5zdHJheVJlbW92ZSxcbiAgICAgIGFjdGl2ZUdhdGU6IGJydXNoU3RhdGUuYWN0aXZlR2F0ZSxcbiAgICAgIGN1c3RvbUdhdGVSYW5nZU1pbjogY3VzdG9tR2F0ZVJhbmdlWzBdLFxuICAgICAgY3VzdG9tR2F0ZVJhbmdlTWF4OiBjdXN0b21HYXRlUmFuZ2VbMV1cbiAgICB9O1xuXG4gICAgdGhpcy5vbkdhdGVDaGFuZ2UgPSB0aGlzLm9uR2F0ZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DdXN0b21HYXRlTWluQ2hhbmdlID0gdGhpcy5vbkN1c3RvbUdhdGVNaW5DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ3VzdG9tR2F0ZU1heENoYW5nZSA9IHRoaXMub25DdXN0b21HYXRlTWF4Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkhvbGVGaWxsQ2hhbmdlID0gdGhpcy5vbkhvbGVGaWxsQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblN0cmF5UmVtb3ZlQ2hhbmdlID0gdGhpcy5vblN0cmF5UmVtb3ZlQ2hhbmdlLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogb25HYXRlQ2hhbmdlIC0gQ2FsbGJhY2sgdGhhdCBjaGFuZ2VzIHRoZSBhY3RpdmUgZ2F0ZSBvZiB0aGUgU21hcnQgQ1QgQnJ1c2guXG4gICAqXG4gICAqIEBwYXJhbSAge3R5cGV9IGV2dCBkZXNjcmlwdGlvblxuICAgKiBAcmV0dXJucyB7dHlwZX0gICAgIGRlc2NyaXB0aW9uXG4gICAqL1xuICBvbkdhdGVDaGFuZ2UoZXZ0KSB7XG4gICAgY29uc3QgdmFsID0gZXZ0LnRhcmdldC52YWx1ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVHYXRlOiB2YWwgfSk7XG4gICAgYnJ1c2hTdGF0ZS5hY3RpdmVHYXRlID0gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uQ3VzdG9tR2F0ZU1pbkNoYW5nZSAtIENoYW5nZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYVxuICAgKiBjdXN0b20gU21hcnQgQ1QgR2F0ZS5cbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBldnQgVGhlIGV2ZW50LlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uQ3VzdG9tR2F0ZU1pbkNoYW5nZShldnQpIHtcbiAgICBsZXQgdmFsID0gTnVtYmVyKGV2dC50YXJnZXQudmFsdWUpO1xuXG4gICAgY29uc3QgY3VzdG9tUmFuZ2VNYXggPSB0aGlzLnN0YXRlLmN1c3RvbUdhdGVSYW5nZU1heDtcblxuICAgIGlmICh2YWwgPiBjdXN0b21SYW5nZU1heCAtIG1pbkdhdGVTZXBlcmF0aW9uKSB7XG4gICAgICB2YWwgPSBjdXN0b21SYW5nZU1heCAtIG1pbkdhdGVTZXBlcmF0aW9uO1xuICAgICAgZXZ0LnRhcmdldC52YWx1ZSA9IHZhbDtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgY3VzdG9tR2F0ZVJhbmdlTWluOiB2YWwgfSk7XG4gICAgYnJ1c2hNb2R1bGUuc2V0dGVycy5jdXN0b21HYXRlUmFuZ2UodmFsLCBudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbkN1c3RvbUdhdGVNYXhDaGFuZ2UgLSBDaGFuZ2VzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGFcbiAgICogY3VzdG9tIFNtYXJ0IENUIEdhdGUuXG4gICAqXG4gICAqIEBwYXJhbSAge29iamVjdH0gZXZ0IFRoZSBldmVudC5cbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBvbkN1c3RvbUdhdGVNYXhDaGFuZ2UoZXZ0KSB7XG4gICAgbGV0IHZhbCA9IE51bWJlcihldnQudGFyZ2V0LnZhbHVlKTtcblxuICAgIGNvbnN0IGN1c3RvbVJhbmdlTWluID0gdGhpcy5zdGF0ZS5jdXN0b21HYXRlUmFuZ2VNaW47XG5cbiAgICBpZiAodmFsIDwgY3VzdG9tUmFuZ2VNaW4gKyBtaW5HYXRlU2VwZXJhdGlvbikge1xuICAgICAgdmFsID0gY3VzdG9tUmFuZ2VNaW4gKyBtaW5HYXRlU2VwZXJhdGlvbjtcbiAgICAgIGV2dC50YXJnZXQudmFsdWUgPSB2YWw7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGN1c3RvbUdhdGVSYW5nZU1heDogdmFsIH0pO1xuICAgIGJydXNoTW9kdWxlLnNldHRlcnMuY3VzdG9tR2F0ZVJhbmdlKG51bGwsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogb25Ib2xlRmlsbENoYW5nZSAtIENoYW5nZXMgdGhlIHZhbHVlIG9mIHRoZSBob2xlIGZpbGwgcGFyYW1ldGVyIGZvciB0aGVcbiAgICogU21hcnQgQ1QgYW5kIEF1dG8gYnJ1c2hlcy5cbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBldnQgVGhlIGV2ZW50LlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uSG9sZUZpbGxDaGFuZ2UoZXZ0KSB7XG4gICAgY29uc3QgdmFsID0gTnVtYmVyKGV2dC50YXJnZXQudmFsdWUpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvbGVGaWxsOiB2YWwgfSk7XG4gICAgYnJ1c2hTdGF0ZS5ob2xlRmlsbCA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBvblN0cmF5UmVtb3ZlQ2hhbmdlIC0gQ2hhbmdlcyB0aGUgYmFsdWUgb2YgdGhlIHN0cmF5IHJlbW92ZSBwYXJhbWV0ZXIgZm9yXG4gICAqIHRoZSBTbWFydCBDVCBhbmQgQXV0byBicnVzaGVzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGV2dCBUaGUgZXZlbnQuXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25TdHJheVJlbW92ZUNoYW5nZShldnQpIHtcbiAgICBjb25zdCB2YWwgPSBOdW1iZXIoZXZ0LnRhcmdldC52YWx1ZSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgc3RyYXlSZW1vdmU6IHZhbCB9KTtcbiAgICBicnVzaFN0YXRlLnN0cmF5UmVtb3ZlID0gdmFsO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGhvbGVGaWxsUmFuZ2UgPSBicnVzaFN0YXRlLmhvbGVGaWxsUmFuZ2U7XG4gICAgY29uc3Qgc3RyYXlSZW1vdmVSYW5nZSA9IGJydXNoU3RhdGUuc3RyYXlSZW1vdmVSYW5nZTtcblxuICAgIGNvbnN0IHsgaG9sZUZpbGwsIHN0cmF5UmVtb3ZlLCBhY3RpdmVHYXRlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgZ2F0ZXMgPSBicnVzaFN0YXRlLmdhdGVzO1xuXG4gICAgY29uc3QgaG9sZUZpbGxMYWJlbCA9IGhvbGVGaWxsID09PSAwID8gXCJEb24ndCBmaWxsIGhvbGVzLlwiIDogYEZpbGwgaG9sZXMgPCR7aG9sZUZpbGx9JSBhcmVhIG9mIHByaW1hcnkgcmVnaW9uLmA7XG5cbiAgICBjb25zdCBzdHJheVJlbW92ZUxhYmVsID1cbiAgICAgIHN0cmF5UmVtb3ZlID09PSAwID9cbiAgICAgICAgJ1BhaW50IGFsbCBub24tcHJpbWFyeSByZWdpb25zLicgOlxuICAgICAgICBgRG9uJ3QgcGFpbnQgcmVnaW9ucyA8JHtzdHJheVJlbW92ZX0lIGFyZWEgb2YgcHJpbWFyeSByZWdpb24uYDtcblxuICAgIGxldCBjdXN0b21HYXRlcyA9IG51bGw7XG5cbiAgICBpZiAoYWN0aXZlR2F0ZSA9PT0gJ2N1c3RvbScpIHtcbiAgICAgIGNvbnN0IGN1c3RvbVJhbmdlID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5jdXN0b21HYXRlUmFuZ2UoKTtcblxuICAgICAgY3VzdG9tR2F0ZXMgPSAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJicnVzaC1zZXR0aW5ncy1ob3Jpem9udGFsLWJveFwiPlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjdXN0b21HYXRlTWluXCI+TWluOjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS10aGVtZWQgZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICAgICAgaWQ9XCJzdGFydFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJjdXN0b21HYXRlTWluXCJcbiAgICAgICAgICAgICAgbWluPXstMTAyNH1cbiAgICAgICAgICAgICAgbWF4PXszMDcyfVxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e2N1c3RvbVJhbmdlWzBdfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkN1c3RvbUdhdGVNaW5DaGFuZ2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnJ1c2gtc2V0dGluZ3MtaG9yaXpvbnRhbC1ib3hcIj5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9tR2F0ZU1heFwiPk1heDo8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tdGhlbWVkIGZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgIHR5cGU9XCJyYW5nZVwiXG4gICAgICAgICAgICAgIGlkPVwic3RhcnRcIlxuICAgICAgICAgICAgICBuYW1lPVwiY3VzdG9tR2F0ZU1heFwiXG4gICAgICAgICAgICAgIG1pbj17LTEwMjR9XG4gICAgICAgICAgICAgIG1heD17MzA3Mn1cbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtjdXN0b21SYW5nZVsxXX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DdXN0b21HYXRlTWF4Q2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlZ21lbnRhdGlvbi1tZW51LWZvb3RlclwiPlxuICAgICAgICA8aDM+IFNtYXJ0IENUIEdhdGUgU2VsZWN0aW9uPC9oMz5cbiAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLXRoZW1lZCBmb3JtLWNvbnRyb2xcIiBvbkNoYW5nZT17dGhpcy5vbkdhdGVDaGFuZ2V9IHZhbHVlPXthY3RpdmVHYXRlfT5cbiAgICAgICAgICB7Z2F0ZXMubWFwKGdhdGUgPT4gKFxuICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2dhdGUubmFtZX0gdmFsdWU9e2dhdGUubmFtZX0+e2Ake2dhdGUubmFtZX0gWyR7Z2F0ZS5yYW5nZVswXX0sICR7Z2F0ZS5yYW5nZVsxXX1dYH08L29wdGlvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9zZWxlY3Q+XG5cbiAgICAgICAge2N1c3RvbUdhdGVzfVxuXG4gICAgICAgIDxoMz4gU21hcnQvQXV0byBHYXRlIFNldHRpbmdzIDwvaDM+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaG9sZUZpbGxcIj57aG9sZUZpbGxMYWJlbH08L2xhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLXRoZW1lZCBmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgIHR5cGU9XCJyYW5nZVwiXG4gICAgICAgICAgaWQ9XCJzdGFydFwiXG4gICAgICAgICAgbmFtZT1cImhvbGVGaWxsXCJcbiAgICAgICAgICBtaW49e2hvbGVGaWxsUmFuZ2VbMF19XG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXtob2xlRmlsbH1cbiAgICAgICAgICBtYXg9e2hvbGVGaWxsUmFuZ2VbMV19XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Ib2xlRmlsbENoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzdHJheVJlbW92ZVwiPntzdHJheVJlbW92ZUxhYmVsfTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tdGhlbWVkIGZvcm0tY29udHJvbFwiXG4gICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICBpZD1cInN0YXJ0XCJcbiAgICAgICAgICBuYW1lPVwic3RyYXlSZW1vdmVcIlxuICAgICAgICAgIG1pbj17c3RyYXlSZW1vdmVSYW5nZVswXX1cbiAgICAgICAgICBkZWZhdWx0VmFsdWU9e3N0cmF5UmVtb3ZlfVxuICAgICAgICAgIG1heD17c3RyYXlSZW1vdmVSYW5nZVsxXX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vblN0cmF5UmVtb3ZlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNZW51SU9CdXR0b25zIGZyb20gJy4uL2NvbW1vbi9NZW51SU9CdXR0b25zLmpzJztcbmltcG9ydCBTZWdtZW50YXRpb25NZW51RGVsZXRlQ29uZmlybWF0aW9uIGZyb20gJy4vU2VnbWVudGF0aW9uTWVudURlbGV0ZUNvbmZpcm1hdGlvbi5qcyc7XG5pbXBvcnQgU2VnbWVudGF0aW9uTWVudUxpc3RCb2R5IGZyb20gJy4vU2VnbWVudGF0aW9uTWVudUxpc3RCb2R5LmpzJztcbmltcG9ydCBTZWdtZW50YXRpb25NZW51TGlzdEhlYWRlciBmcm9tICcuL1NlZ21lbnRhdGlvbk1lbnVMaXN0SGVhZGVyLmpzJztcbmltcG9ydCBCcnVzaFNldHRpbmdzIGZyb20gJy4vQnJ1c2hTZXR0aW5ncy5qcyc7XG5pbXBvcnQgY29ybmVyc3RvbmVUb29scyBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5pbXBvcnQgeyBlZGl0U2VnbWVudElucHV0IH0gZnJvbSAnLi4vLi4vdXRpbC9icnVzaE1ldGFkYXRhSU8uanMnO1xuaW1wb3J0IG9uSU9DYW5jZWwgZnJvbSAnLi4vY29tbW9uL2hlbHBlcnMvb25JT0NhbmNlbC5qcyc7XG5pbXBvcnQgb25JbXBvcnRCdXR0b25DbGljayBmcm9tICcuLi9jb21tb24vaGVscGVycy9vbkltcG9ydEJ1dHRvbkNsaWNrLmpzJztcbmltcG9ydCBvbkV4cG9ydEJ1dHRvbkNsaWNrIGZyb20gJy4uL2NvbW1vbi9oZWxwZXJzL29uRXhwb3J0QnV0dG9uQ2xpY2suanMnO1xuLy8gaW1wb3J0ICcuL3NlZ21lbnRhdGlvbk1lbnUuc3R5bCc7XG5cbmltcG9ydCBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50IGZyb20gJy4uLy4uL3V0aWwvZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudC5qcyc7XG5pbXBvcnQgZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQgZnJvbSAnLi4vLi4vdXRpbC9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudC5qcyc7XG5cbmNvbnN0IGJydXNoTW9kdWxlID0gY29ybmVyc3RvbmVUb29scy5zdG9yZS5tb2R1bGVzLmJydXNoO1xuXG4vKipcbiAqIEBjbGFzcyBTZWdtZW50YXRpb25NZW51IC0gUmVuZGVycyBhIG1lbnUgZm9yIGltcG9ydGluZywgZXhwb3J0aW5nLCBjcmVhdGluZ1xuICogYW5kIHJlbmFtaW5nIFNlZ21lbnRzLiBBcyB3ZWxsIGFzIHNldHRpbmcgY29uZmlndXJhdGlvbiBzZXR0aW5ncyBmb3JcbiAqIHRoZSBCcnVzaCB0b29scy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VnbWVudGF0aW9uTWVudSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzID0ge30pIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICBjb25zdCBlbmFibGVkRWxlbWVudCA9IGdldEFjdGl2ZVZpZXdwb3J0RW5hYmxlZEVsZW1lbnQocHJvcHMudmlld3BvcnRzLCBwcm9wcy5hY3RpdmVJbmRleCk7XG4gICAgY29uc3Qgc2VyaWVzSW5zdGFuY2VVaWQgPSBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudChlbmFibGVkRWxlbWVudCk7XG5cbiAgICB0aGlzLmdldFNlZ21lbnRMaXN0ID0gdGhpcy5nZXRTZWdtZW50TGlzdC5iaW5kKHRoaXMpO1xuXG4gICAgY29uc3QgeyBzZWdtZW50cywgaW1wb3J0TWV0YWRhdGEsIGFjdGl2ZVNlZ21lbnRJbmRleCB9ID0gdGhpcy5nZXRTZWdtZW50TGlzdChlbmFibGVkRWxlbWVudCwgc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGltcG9ydE1ldGFkYXRhLFxuICAgICAgc2VnbWVudHMsXG4gICAgICBzZXJpZXNJbnN0YW5jZVVpZCxcbiAgICAgIGVuYWJsZWRFbGVtZW50LFxuICAgICAgZGVsZXRlQ29uZmlybWF0aW9uT3BlbjogZmFsc2UsXG4gICAgICBzZWdtZW50VG9EZWxldGU6IDEsXG4gICAgICBhY3RpdmVTZWdtZW50SW5kZXgsXG4gICAgICBpbXBvcnRpbmc6IGZhbHNlLFxuICAgICAgZXhwb3J0aW5nOiBmYWxzZVxuICAgIH07XG5cbiAgICB0aGlzLm9uU2VnbWVudENoYW5nZSA9IHRoaXMub25TZWdtZW50Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkVkaXRDbGljayA9IHRoaXMub25FZGl0Q2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbmZpcm1EZWxldGVPbkRlbGV0ZUNsaWNrID0gdGhpcy5jb25maXJtRGVsZXRlT25EZWxldGVDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25EZWxldGVDYW5jZWxDbGljayA9IHRoaXMub25EZWxldGVDYW5jZWxDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25EZWxldGVDb25maXJtQ2xpY2sgPSB0aGlzLm9uRGVsZXRlQ29uZmlybUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkltcG9ydEJ1dHRvbkNsaWNrID0gb25JbXBvcnRCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25FeHBvcnRCdXR0b25DbGljayA9IG9uRXhwb3J0QnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSU9Db21wbGV0ZSA9IHRoaXMub25JT0NvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbklPQ2FuY2VsID0gb25JT0NhbmNlbC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldFNlZ21lbnRMaXN0IC0gR3JhYnMgdGhlIHNlZ21lbnRzIGZyb20gdGhlIGJydXNoU3RvcmUgYW5kXG4gICAqIHBvcHVsYXRlcyBzdGF0ZS5cbiAgICpcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBnZXRTZWdtZW50TGlzdChlbmFibGVkRWxlbWVudCwgc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICBlbmFibGVkRWxlbWVudCA9IGVuYWJsZWRFbGVtZW50IHx8IHRoaXMuc3RhdGUuZW5hYmxlZEVsZW1lbnQ7XG4gICAgc2VyaWVzSW5zdGFuY2VVaWQgPSBzZXJpZXNJbnN0YW5jZVVpZCB8fCB0aGlzLnN0YXRlLnNlcmllc0luc3RhbmNlVWlkO1xuXG4gICAgaWYgKCFlbmFibGVkRWxlbWVudCB8fCAhc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBpbXBvcnRNZXRhZGF0YSA9IHRoaXMuY29uc3RydWN0b3IuX2ltcG9ydE1ldGFkYXRhKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuY29uc3RydWN0b3IuX3NlZ21lbnRzKGVuYWJsZWRFbGVtZW50KTtcbiAgICBjb25zdCBhY3RpdmVTZWdtZW50SW5kZXggPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmFjdGl2ZVNlZ21lbnRJbmRleChlbmFibGVkRWxlbWVudCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGltcG9ydE1ldGFkYXRhLFxuICAgICAgc2VnbWVudHMsXG4gICAgICBhY3RpdmVTZWdtZW50SW5kZXhcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbklPQ29tcGxldGUgLSBBIGNhbGxiYWNrIGV4ZWN1dGVkIG9uIHN1Y2Nlc2Z1bCBjb21wbGV0aW9uIG9mIGFuXG4gICAqIElPIG9wcGVyYXRpb24uIFJlY2FsY3VsYXRlcyB0aGUgU2VnbWVudGF0aW9uIHN0YXRlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dHlwZX0gIGRlc2NyaXB0aW9uXG4gICAqL1xuICBvbklPQ29tcGxldGUoKSB7XG4gICAgY29uc3QgeyBzZXJpZXNJbnN0YW5jZVVpZCwgZW5hYmxlZEVsZW1lbnQgfSA9IHRoaXMuc3RhdGUuc2VyaWVzSW5zdGFuY2VVaWQ7XG5cbiAgICBjb25zdCBpbXBvcnRNZXRhZGF0YSA9IHRoaXMuY29uc3RydWN0b3IuX2ltcG9ydE1ldGFkYXRhKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuY29uc3RydWN0b3IuX3NlZ21lbnRzKGVuYWJsZWRFbGVtZW50KTtcbiAgICBjb25zdCBhY3RpdmVTZWdtZW50SW5kZXggPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmFjdGl2ZVNlZ21lbnRJbmRleChlbmFibGVkRWxlbWVudCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGltcG9ydE1ldGFkYXRhLFxuICAgICAgc2VnbWVudHMsXG4gICAgICBhY3RpdmVTZWdtZW50SW5kZXgsXG4gICAgICBpbXBvcnRpbmc6IGZhbHNlLFxuICAgICAgZXhwb3J0aW5nOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uU2VnbWVudENoYW5nZSAtIENhbGxiYWNrIHRoYXQgY2hhbmdlcyB0aGUgYWN0aXZlIHNlZ21lbnQgYmVpbmcgZHJhd24uXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcn0gc2VnbWVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgc2VnbWVudCB0byBzZXQgYWN0aXZlLlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uU2VnbWVudENoYW5nZShzZWdtZW50SW5kZXgpIHtcbiAgICBjb25zdCBlbmFibGVkRWxlbWVudCA9IHRoaXMuc3RhdGUuZWxlbWVudDtcblxuICAgIGJydXNoTW9kdWxlLnNldHRlcnMuYWN0aXZlU2VnbWVudEluZGV4KGVuYWJsZWRFbGVtZW50LCBzZWdtZW50SW5kZXgpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGFjdGl2ZVNlZ21lbnRJbmRleDogc2VnbWVudEluZGV4IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uRWRpdENsaWNrIC0gQSBjYWxsYmFjayB0aGF0IHRyaWdnZXJzIG1ldGFkYXRhIGlucHV0IGZvciBhIHNlZ21lbnQuXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcn0gc2VnbWVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgc2VnbWVudCBtZXRhZGF0YSB0byBlZGl0LlxuICAgKiBAcGFyYW0gIHtvYmplY3R9ICAgbWV0YWRhdGEgICAgIFRoZSBjdXJyZW50IG1ldGFkYXRhIG9mIHRoZSBzZWdtZW50LlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uRWRpdENsaWNrKHNlZ21lbnRJbmRleCwgbWV0YWRhdGEpIHtcbiAgICBlZGl0U2VnbWVudElucHV0KHNlZ21lbnRJbmRleCwgbWV0YWRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIGNvbmZpcm1EZWxldGVPbkRlbGV0ZUNsaWNrIC0gQSBjYWxsYmFjayB0aGF0IHRyaWdnZXJzIGNvbmZpcm1hdGlvbiBvZiBzZWdtZW50IGRlbGV0aW9uLlxuICAgKlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHNlZ21lbnRJbmRleCBUaGUgaW5kZXggb2YgdGhlIHNlZ21lbnQgYmVpbmcgZGVsZXRlZC5cbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBjb25maXJtRGVsZXRlT25EZWxldGVDbGljayhzZWdtZW50SW5kZXgpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbk9wZW46IHRydWUsXG4gICAgICBzZWdtZW50VG9EZWxldGU6IHNlZ21lbnRJbmRleFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uRGVsZXRlQ29uZmlybUNsaWNrIC0gQSBjYWxsYmFjayB0aGF0IGRlbGV0ZXMgYSBzZWdtZW50IGZvcm0gdGhlIHNlcmllcy5cbiAgICpcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBvbkRlbGV0ZUNvbmZpcm1DbGljaygpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRUb0RlbGV0ZSwgZW5hYmxlZEVsZW1lbnQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICBicnVzaE1vZHVsZS5zZXR0ZXJzLmRlbGV0ZVNlZ21lbnQoZW5hYmxlZEVsZW1lbnQsIHNlZ21lbnRUb0RlbGV0ZSk7XG5cbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuY29uc3RydWN0b3IuX3NlZ21lbnRzKGVuYWJsZWRFbGVtZW50KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGVsZXRlQ29uZmlybWF0aW9uT3BlbjogZmFsc2UsXG4gICAgICBzZWdtZW50c1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uRGVsZXRlQ2FuY2VsQ2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgY2xvc2VzIHRoZSBkZWxldGUgY29uZmlybWF0aW9uIHdpbmRvd1xuICAgKiBhbmQgYWJvcnRzIGRlbGV0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uRGVsZXRlQ2FuY2VsQ2xpY2soKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkZWxldGVDb25maXJtYXRpb25PcGVuOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIF9pbXBvcnRNZXRhZGF0YSAtIFJldHVybnMgdGhlIGltcG9ydCBtZXRhZGF0YSBmb3IgdGhlIGFjdGl2ZSBzZXJpZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IFRoZSBpbXBvcnRNZXRhZGF0YS5cbiAgICovXG4gIHN0YXRpYyBfaW1wb3J0TWV0YWRhdGEoc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICBjb25zdCBpbXBvcnRNZXRhZGF0YSA9IGJydXNoTW9kdWxlLmdldHRlcnMuaW1wb3J0TWV0YWRhdGEoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgaWYgKGltcG9ydE1ldGFkYXRhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBsYWJlbDogaW1wb3J0TWV0YWRhdGEubGFiZWwsXG4gICAgICAgIHR5cGU6IGltcG9ydE1ldGFkYXRhLnR5cGUsXG4gICAgICAgIG5hbWU6IGltcG9ydE1ldGFkYXRhLm5hbWUsXG4gICAgICAgIG1vZGlmaWVkOiBpbXBvcnRNZXRhZGF0YS5tb2RpZmllZCA/ICd0cnVlJyA6ICcgZmFsc2UnXG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiAnTmV3IFNlZ21lbnRhdGlvbiBDb2xsZWN0aW9uJyxcbiAgICAgIGxhYmVsOiAnJ1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogX3NlZ21lbnRzIC0gUmV0dXJucyBhbiBhcnJheSBvZiBzZWdtZW50IG1ldGFkYXRhIGZvciB0aGUgYWN0aXZlIHNlcmllcy5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdFtdfSBBbiBhcnJheSBvZiBzZWdtZW50IG1ldGFkYXRhLlxuICAgKi9cbiAgc3RhdGljIF9zZWdtZW50cyhlbGVtZW50KSB7XG4gICAgLy8gVE9ETyAtPiBzdXBwb3J0IGZvciBtdWx0aXBsZSBsYWJlbG1hcHMuXG4gICAgY29uc3Qgc2VnbWVudE1ldGFkYXRhID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5tZXRhZGF0YShlbGVtZW50KTtcblxuICAgIGlmICghc2VnbWVudE1ldGFkYXRhKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgY29uc3Qgc2VnbWVudHMgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2VnbWVudE1ldGFkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoc2VnbWVudE1ldGFkYXRhW2ldKSB7XG4gICAgICAgIHNlZ21lbnRzLnB1c2goe1xuICAgICAgICAgIGluZGV4OiBpLFxuICAgICAgICAgIG1ldGFkYXRhOiBzZWdtZW50TWV0YWRhdGFbaV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNlZ21lbnRzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGltcG9ydE1ldGFkYXRhLFxuICAgICAgc2VnbWVudHMsXG4gICAgICBkZWxldGVDb25maXJtYXRpb25PcGVuLFxuICAgICAgc2VnbWVudFRvRGVsZXRlLFxuICAgICAgYWN0aXZlU2VnbWVudEluZGV4LFxuICAgICAgZW5hYmxlZEVsZW1lbnQsXG4gICAgICBpbXBvcnRpbmcsXG4gICAgICBleHBvcnRpbmdcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHsgSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCwgRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCBjb21wb25lbnQ7XG5cbiAgICBpZiAoaW1wb3J0aW5nKSB7XG4gICAgICBjb21wb25lbnQgPSA8SW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCBvbkltcG9ydENvbXBsZXRlPXt0aGlzLm9uSU9Db21wbGV0ZX0gb25JbXBvcnRDYW5jZWw9e3RoaXMub25JT0NhbmNlbH0gLz47XG4gICAgfSBlbHNlIGlmIChleHBvcnRpbmcpIHtcbiAgICAgIGNvbXBvbmVudCA9IDxFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50IG9uRXhwb3J0Q29tcGxldGU9e3RoaXMub25JT0NvbXBsZXRlfSBvbkV4cG9ydENhbmNlbD17dGhpcy5vbklPQ2FuY2VsfSAvPjtcbiAgICB9IGVsc2UgaWYgKGRlbGV0ZUNvbmZpcm1hdGlvbk9wZW4pIHtcbiAgICAgIGNvbnN0IHNlZ21lbnRMYWJlbCA9IHNlZ21lbnRzLmZpbmQoc2VnbWVudCA9PiBzZWdtZW50LmluZGV4ID09PSBzZWdtZW50VG9EZWxldGUpLm1ldGFkYXRhLlNlZ21lbnRMYWJlbDtcblxuICAgICAgY29tcG9uZW50ID0gKFxuICAgICAgICA8U2VnbWVudGF0aW9uTWVudURlbGV0ZUNvbmZpcm1hdGlvblxuICAgICAgICAgIHNlZ21lbnRMYWJlbD17c2VnbWVudExhYmVsfVxuICAgICAgICAgIG9uRGVsZXRlQ29uZmlybUNsaWNrPXt0aGlzLm9uRGVsZXRlQ29uZmlybUNsaWNrfVxuICAgICAgICAgIG9uRGVsZXRlQ2FuY2VsQ2xpY2s9e3RoaXMub25EZWxldGVDYW5jZWxDbGlja31cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbXBvbmVudCA9IChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWdtZW50YXRpb24tbWVudS1jb21wb25lbnRcIj5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlZ21lbnRhdGlvbi1tZW51LWxpc3RcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VnbWVudGF0aW9uLW1lbnUtaGVhZGVyXCI+XG4gICAgICAgICAgICAgIDxoMz5TZWdtZW50czwvaDM+XG4gICAgICAgICAgICAgIDxNZW51SU9CdXR0b25zXG4gICAgICAgICAgICAgICAgSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudD17SW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudH1cbiAgICAgICAgICAgICAgICBFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50PXtFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgIG9uSW1wb3J0QnV0dG9uQ2xpY2s9e3RoaXMub25JbXBvcnRCdXR0b25DbGlja31cbiAgICAgICAgICAgICAgICBvbkV4cG9ydEJ1dHRvbkNsaWNrPXt0aGlzLm9uRXhwb3J0QnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJwZXBwZXJtaW50LXRhYmxlXCI+XG4gICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICA8U2VnbWVudGF0aW9uTWVudUxpc3RIZWFkZXIgaW1wb3J0TWV0YWRhdGE9e2ltcG9ydE1ldGFkYXRhfSAvPlxuICAgICAgICAgICAgICAgIDxTZWdtZW50YXRpb25NZW51TGlzdEJvZHlcbiAgICAgICAgICAgICAgICAgIHNlZ21lbnRzPXtzZWdtZW50c31cbiAgICAgICAgICAgICAgICAgIGFjdGl2ZVNlZ21lbnRJbmRleD17YWN0aXZlU2VnbWVudEluZGV4fVxuICAgICAgICAgICAgICAgICAgb25TZWdtZW50Q2hhbmdlPXt0aGlzLm9uU2VnbWVudENoYW5nZX1cbiAgICAgICAgICAgICAgICAgIG9uRWRpdENsaWNrPXt0aGlzLm9uRWRpdENsaWNrfVxuICAgICAgICAgICAgICAgICAgb25EZWxldGVDbGljaz17dGhpcy5jb25maXJtRGVsZXRlT25EZWxldGVDbGlja31cbiAgICAgICAgICAgICAgICAgIGVuYWJsZWRFbGVtZW50PXtlbmFibGVkRWxlbWVudH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8QnJ1c2hTZXR0aW5ncyAvPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxSZWFjdC5GcmFnbWVudD57Y29tcG9uZW50fTwvUmVhY3QuRnJhZ21lbnQ+O1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuLy8gaW1wb3J0ICcuL3NlZ21lbnRhdGlvbk1lbnUuc3R5bCc7XG5cbi8qKlxuICogQGNsYXNzIFNlZ21lbnRhdGlvbk1lbnVEZWxldGVDb25maXJtYXRpb24gLSBSZW5kZXJzIGEgY29uZmlybWF0aW9uIGRpYWxvZyBmb3JcbiAqIGNvbmZpcm1hdGlvbiBvZiBzZWdtZW50IGRlbGV0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWdtZW50YXRpb25NZW51RGVsZXRlQ29uZmlybWF0aW9uIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRMYWJlbCwgb25EZWxldGVDb25maXJtQ2xpY2ssIG9uRGVsZXRlQ2FuY2VsQ2xpY2sgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdj5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8aDU+V2FybmluZyE8L2g1PlxuICAgICAgICAgIDxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUge3NlZ21lbnRMYWJlbH0/IFRoaXMgY2Fubm90IGJlIHVuZG9uZS48L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlZy1kZWxldGUtaG9yaXpvbnRhbC1ib3hcIj5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17b25EZWxldGVDb25maXJtQ2xpY2t9PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEgZmEtY2hlY2stY2lyY2xlIGZhLTJ4XCIgLz5cbiAgICAgICAgICA8L2E+XG4gICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9e29uRGVsZXRlQ2FuY2VsQ2xpY2t9PlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEgZmEtdGltZXMtY2lyY2xlIGZhLTJ4XCIgLz5cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBTZWdtZW50YXRpb25NZW51TGlzdEl0ZW0gZnJvbSAnLi9TZWdtZW50YXRpb25NZW51TGlzdEl0ZW0uanMnO1xuaW1wb3J0IHsgbmV3U2VnbWVudCB9IGZyb20gJy4uLy4uL3V0aWwvYnJ1c2hNZXRhZGF0YUlPLmpzJztcblxuLy8gaW1wb3J0ICcuL3NlZ21lbnRhdGlvbk1lbnUuc3R5bCc7XG5cbi8qKlxuICogQGNsYXNzIFNlZ21lbnRhdGlvbk1lbnVMaXN0Qm9keSAtIFJlbmRlcnMgYSBsaXN0IG9mIFNlZ21lbnRhdGlvbk1lbnVMaXN0SXRlbXMsXG4gKiBkaXNwbGF5aW5nIHRoZSBtZXRhZGF0YSBvZiBzZWdtZW50cy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VnbWVudGF0aW9uTWVudUxpc3RCb2R5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHNlZ21lbnRzLCBhY3RpdmVTZWdtZW50SW5kZXgsIG9uU2VnbWVudENoYW5nZSwgb25FZGl0Q2xpY2ssIG9uRGVsZXRlQ2xpY2ssIGVuYWJsZWRFbGVtZW50IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge3NlZ21lbnRzLm1hcChzZWdtZW50ID0+IChcbiAgICAgICAgICA8U2VnbWVudGF0aW9uTWVudUxpc3RJdGVtXG4gICAgICAgICAgICBrZXk9e2Ake3NlZ21lbnQubWV0YWRhdGEuU2VnbWVudExhYmVsfV8ke3NlZ21lbnQuaW5kZXh9YH1cbiAgICAgICAgICAgIHNlZ21lbnRJbmRleD17c2VnbWVudC5pbmRleH1cbiAgICAgICAgICAgIG1ldGFkYXRhPXtzZWdtZW50Lm1ldGFkYXRhfVxuICAgICAgICAgICAgb25TZWdtZW50Q2hhbmdlPXtvblNlZ21lbnRDaGFuZ2V9XG4gICAgICAgICAgICBvbkVkaXRDbGljaz17b25FZGl0Q2xpY2t9XG4gICAgICAgICAgICBvbkRlbGV0ZUNsaWNrPXtvbkRlbGV0ZUNsaWNrfVxuICAgICAgICAgICAgY2hlY2tlZD17c2VnbWVudC5pbmRleCA9PT0gYWN0aXZlU2VnbWVudEluZGV4fVxuICAgICAgICAgICAgZW5hYmxlZEVsZW1lbnQ9e2VuYWJsZWRFbGVtZW50fVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoIC8+XG4gICAgICAgICAgPHRoPlxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwic2VnbWVudGF0aW9uLW1lbnUtbmV3LWJ1dHRvbiBidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17bmV3U2VnbWVudH0+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtY2lyY2xlXCIgLz4gU2VnbWVudFxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgIDwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICA8L1JlYWN0LkZyYWdtZW50PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG4vLyBpbXBvcnQgJy4vc2VnbWVudGF0aW9uTWVudS5zdHlsJztcblxuLyoqXG4gKiBAY2xhc3MgU2VnbWVudGF0aW9uTWVudUxpc3RIZWFkZXIgLSBSZW5kZXJzIHRoZSBoZWFkZXIgZm9yIHRoZVxuICogU2VnbWVudGF0aW9uTWVudUxpc3QgdGFibGUuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZ21lbnRhdGlvbk1lbnVMaXN0SGVhZGVyIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGltcG9ydE1ldGFkYXRhIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aCBjb2xTcGFuPVwiMlwiIGNsYXNzTmFtZT1cImxlZnQtYWxpZ25lZC1jZWxsIHNlZ21lbnRhdGlvbi1tZW51LWxpc3QtYm9yZGVyZWRcIj5cbiAgICAgICAgICAgIHtpbXBvcnRNZXRhZGF0YS5uYW1lfVxuICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgPHRoIGNvbFNwYW49XCIyXCIgY2xhc3NOYW1lPVwicmlnaHQtYWxpZ25lZC1jZWxsIHNlZ21lbnRhdGlvbi1tZW51LWxpc3QtYm9yZGVyZWRcIj5cbiAgICAgICAgICAgIHtpbXBvcnRNZXRhZGF0YS5sYWJlbH1cbiAgICAgICAgICA8L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgICB7aW1wb3J0TWV0YWRhdGEudHlwZSAmJiAoXG4gICAgICAgICAgPHRyPlxuICAgICAgICAgICAgPHRoIGNvbFNwYW49XCIyXCIgY2xhc3NOYW1lPVwibGVmdC1hbGlnbmVkLWNlbGwgc2VnbWVudGF0aW9uLW1lbnUtbGlzdC1ib3JkZXJlZFwiPlxuICAgICAgICAgICAgICBUeXBlOiB7aW1wb3J0TWV0YWRhdGEudHlwZX1cbiAgICAgICAgICAgIDwvdGg+XG4gICAgICAgICAgICA8dGggY29sU3Bhbj1cIjJcIiBjbGFzc05hbWU9XCJyaWdodC1hbGlnbmVkLWNlbGwgc2VnbWVudGF0aW9uLW1lbnUtbGlzdC1ib3JkZXJlZFwiPlxuICAgICAgICAgICAgICBNb2RpZmllZDoge2ltcG9ydE1ldGFkYXRhLm1vZGlmaWVkfVxuICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICA8L3RyPlxuICAgICAgICApfVxuICAgICAgICA8dHIgY2xhc3NOYW1lPVwic2VnbWVudGF0aW9uLW1lbnUtbGlzdC1ib3JkZXJlZFwiPlxuICAgICAgICAgIDx0aD5QYWludDwvdGg+XG4gICAgICAgICAgPHRoPkxhYmVsPC90aD5cbiAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPlR5cGU8L3RoPlxuICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJjZW50ZXJlZC1jZWxsXCI+RGVsZXRlPC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb3JuZXJzdG9uZVRvb2xzIGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcblxuLy8gaW1wb3J0ICcuL3NlZ21lbnRhdGlvbk1lbnUuc3R5bCc7XG5cbmNvbnN0IGJydXNoTW9kdWxlID0gY29ybmVyc3RvbmVUb29scy5zdG9yZS5tb2R1bGVzLmJydXNoO1xuXG4vKipcbiAqIEBjbGFzcyBTZWdtZW50YXRpb25NZW51TGlzdEl0ZW0gLSBSZW5kZXJzIG1ldGFkYXRhIGZvciBhIHNpbmdsZSBzZWdtZW50LlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWdtZW50YXRpb25NZW51TGlzdEl0ZW0gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIF9nZXRUeXBlV2l0aE1vZGlmaWVyIC0gUmV0dXJucyB0aGUgc2VnbWVudCB0eXBlIHdpdGggaXRzIG1vZGlmaWVyIGFzIGEgc3RyaW5nLlxuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgX2dldFR5cGVXaXRoTW9kaWZpZXIoKSB7XG4gICAgY29uc3QgeyBtZXRhZGF0YSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGxldCB0eXBlV2l0aE1vZGlmaWVyID0gbWV0YWRhdGEuU2VnbWVudGVkUHJvcGVydHlUeXBlQ29kZVNlcXVlbmNlLkNvZGVNZWFuaW5nO1xuXG4gICAgY29uc3QgbW9kaWZpZXIgPSBtZXRhZGF0YS5TZWdtZW50ZWRQcm9wZXJ0eVR5cGVDb2RlU2VxdWVuY2UuU2VnbWVudGVkUHJvcGVydHlUeXBlTW9kaWZpZXJDb2RlU2VxdWVuY2U7XG5cbiAgICBpZiAobW9kaWZpZXIpIHtcbiAgICAgIHR5cGVXaXRoTW9kaWZpZXIgKz0gYCAoJHttb2RpZmllci5Db2RlTWVhbmluZ30pYDtcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZVdpdGhNb2RpZmllcjtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IG1ldGFkYXRhLCBzZWdtZW50SW5kZXgsIG9uU2VnbWVudENoYW5nZSwgb25FZGl0Q2xpY2ssIG9uRGVsZXRlQ2xpY2ssIGNoZWNrZWQsIGVuYWJsZWRFbGVtZW50IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3Qgc2VnbWVudExhYmVsID0gbWV0YWRhdGEuU2VnbWVudExhYmVsO1xuICAgIGNvbnN0IGNvbG9ybWFwID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5hY3RpdmVDb3JuZXJzdG9uZUNvbG9yTWFwKGVuYWJsZWRFbGVtZW50KTtcbiAgICBjb25zdCBjb2xvciA9IGNvbG9ybWFwLmdldENvbG9yKHNlZ21lbnRJbmRleCk7XG4gICAgY29uc3Qgc2VnbWVudENvbG9yID0gYHJnYmEoJHtjb2xvclswXX0sICR7Y29sb3JbMV19LCAke2NvbG9yWzJdfSwgMS4wIClgO1xuXG4gICAgY29uc3Qgc2VnbWVudENhdGVnb3J5ID0gbWV0YWRhdGEuU2VnbWVudGVkUHJvcGVydHlDYXRlZ29yeUNvZGVTZXF1ZW5jZS5Db2RlTWVhbmluZztcbiAgICBjb25zdCB0eXBlV2l0aE1vZGlmaWVyID0gdGhpcy5fZ2V0VHlwZVdpdGhNb2RpZmllcigpO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbnRlcmVkLWNlbGxcIj5cbiAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS1zcXVhcmVcIiBzdHlsZT17eyBjb2xvcjogc2VnbWVudENvbG9yIH19IC8+eycgJ31cbiAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIHR5cGU9XCJyYWRpb1wiXG4gICAgICAgICAgICBjaGVja2VkPXtjaGVja2VkfVxuICAgICAgICAgICAgb25DaGFuZ2U9eygpID0+IHtcbiAgICAgICAgICAgICAgb25TZWdtZW50Q2hhbmdlKHNlZ21lbnRJbmRleCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzc05hbWU9XCJsZWZ0LWFsaWduZWQtY2VsbFwiPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZWdtZW50YXRpb24tbWVudS1uYW1lLWxpbmtcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBvbkVkaXRDbGljayhzZWdtZW50SW5kZXgsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3NlZ21lbnRMYWJlbH1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZD5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwic2VnbWVudGF0aW9uLW1lbnUtbmFtZS1saW5rXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgb25FZGl0Q2xpY2soc2VnbWVudEluZGV4LCBtZXRhZGF0YSk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHt0eXBlV2l0aE1vZGlmaWVyfVxuICAgICAgICAgICAgeycgLSAnfVxuICAgICAgICAgICAge3NlZ21lbnRDYXRlZ29yeX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvdGQ+XG4gICAgICAgIDx0ZCBjbGFzc05hbWU9XCJjZW50ZXJlZC1jZWxsXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeVwiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIG9uRGVsZXRlQ2xpY2soc2VnbWVudEluZGV4KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtdGltZXNcIiAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC90ZD5cbiAgICAgIDwvdHI+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IGluaXQsIHsgVE9PTF9OQU1FUyB9IGZyb20gJy4vaW5pdC5qcyc7XG5pbXBvcnQgU2VnbWVudGF0aW9uTWVudSBmcm9tICcuL2NvbXBvbmVudHMvc2VnbWVudGF0aW9uTWVudS9TZWdtZW50YXRpb25NZW51LmpzJztcbmltcG9ydCBSb2lDb250b3VyTWVudSBmcm9tICcuL2NvbXBvbmVudHMvcm9pQ29udG91ck1lbnUvUm9pQ29udG91ck1lbnUuanMnO1xuXG5jb25zdCBUT09MQkFSX0JVVFRPTl9UWVBFUyA9IHtcbiAgQ09NTUFORDogJ2NvbW1hbmQnLFxuICBTRVRfVE9PTF9BQ1RJVkU6ICdzZXRUb29sQWN0aXZlJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQge1xuICAvKipcbiAgICogT25seSByZXF1aXJlZCBwcm9wZXJ0eS4gU2hvdWxkIGJlIGEgdW5pcXVlIHZhbHVlIGFjcm9zcyBhbGwgZXh0ZW5zaW9ucy5cbiAgICovXG4gIGlkOiAnb2hpZi1zZWdtZW50YXRpb24tZXh0ZW5zaW9uJyxcblxuICBwcmVSZWdpc3RyYXRpb24oY29uZmlndXJhdGlvbiA9IHt9KSB7XG4gICAgaW5pdChjb25maWd1cmF0aW9uKTtcbiAgfSxcblxuICAvKipcbiAgICogUmVnaXN0ZXJzIG9uZSBvciBtb3JlIG5hbWVkIGNvbW1hbmRzIHNjb3BlZCB0byBhIGNvbnRleHQuIENvbW1hbmRzIGFyZVxuICAgKiB0aGUgcHJpbWFyeSBtZWFucyBmb3IuLi5cbiAgICovXG4gIGdldENvbW1hbmRzTW9kdWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZWZhdWx0Q29udGV4dDogJ1ZJRVdFUicsXG4gICAgICBhY3Rpb25zOiBbXSxcbiAgICAgIGRlZmluaXRpb25zOiBbXVxuICAgIH07XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gcHJvdmlkZSB0b29sYmFyIGRlZmluaXRpb25zIHRoYXQgd2lsbCBiZSBtZXJnZWQgd2l0aCBhbnlcbiAgICogZXhpc3RpbmcgYXBwbGljYXRpb24gdG9vbGJhciBjb25maWd1cmF0aW9uLiBVc2VkIHRvIGRldGVybWluZSB3aGljaFxuICAgKiBidXR0b25zIHNob3VsZCBiZSB2aXNpYmxlIHdoZW4sIHRoZWlyIG9yZGVyLCB3aGF0IGhhcHBlbnMgd2hlbiB0aGV5J3JlXG4gICAqIGNsaWNrZWQsIGV0Yy5cbiAgICovXG4gIGdldFRvb2xiYXJNb2R1bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGRlZmluaXRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2ZyZWVoYW5kUm9pVG9vbHMnLFxuICAgICAgICAgIGxhYmVsOiAnUk9JJyxcbiAgICAgICAgICBpY29uOiAnbGV2ZWwnLFxuICAgICAgICAgIGJ1dHRvbnM6IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6ICdGcmVlaGFuZFJvaScsXG4gICAgICAgICAgICAgIGxhYmVsOiAnRHJhdycsXG4gICAgICAgICAgICAgIGljb246ICdsZXZlbCcsXG4gICAgICAgICAgICAgIHR5cGU6IFRPT0xCQVJfQlVUVE9OX1RZUEVTLlNFVF9UT09MX0FDVElWRSxcbiAgICAgICAgICAgICAgY29tbWFuZE5hbWU6ICdzZXRUb29sQWN0aXZlJyxcbiAgICAgICAgICAgICAgY29tbWFuZE9wdGlvbnM6IHsgdG9vbE5hbWU6IFRPT0xfTkFNRVMuRlJFRUhBTkRfUk9JXzNEX1RPT0wgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6ICdGcmVlaGFuZFJvaVNjdWxwdG9yJyxcbiAgICAgICAgICAgICAgbGFiZWw6ICdTY3VscHQnLFxuICAgICAgICAgICAgICBpY29uOiAnbGV2ZWwnLFxuICAgICAgICAgICAgICB0eXBlOiBUT09MQkFSX0JVVFRPTl9UWVBFUy5TRVRfVE9PTF9BQ1RJVkUsXG4gICAgICAgICAgICAgIGNvbW1hbmROYW1lOiAnc2V0VG9vbEFjdGl2ZScsXG4gICAgICAgICAgICAgIGNvbW1hbmRPcHRpb25zOiB7IHRvb2xOYW1lOiBUT09MX05BTUVTLkZSRUVIQU5EX1JPSV8zRF9TQ1VMUFRPUl9UT09MIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2JydXNoVG9vbHMnLFxuICAgICAgICAgIGxhYmVsOiAnU2VnbWVudCcsXG4gICAgICAgICAgaWNvbjogJ2xldmVsJyxcbiAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiAnQnJ1c2gnLFxuICAgICAgICAgICAgICBsYWJlbDogJ01hbnVhbCcsXG4gICAgICAgICAgICAgIGljb246ICdsZXZlbCcsXG4gICAgICAgICAgICAgIHR5cGU6IFRPT0xCQVJfQlVUVE9OX1RZUEVTLlNFVF9UT09MX0FDVElWRSxcbiAgICAgICAgICAgICAgY29tbWFuZE5hbWU6ICdzZXRUb29sQWN0aXZlJyxcbiAgICAgICAgICAgICAgY29tbWFuZE9wdGlvbnM6IHsgdG9vbE5hbWU6IFRPT0xfTkFNRVMuQlJVU0hfM0RfVE9PTCB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogJ0JydXNoM0RIVUdhdGVkVG9vbCcsXG4gICAgICAgICAgICAgIGxhYmVsOiAnU21hcnQgQ1QnLFxuICAgICAgICAgICAgICBpY29uOiAnbGV2ZWwnLFxuICAgICAgICAgICAgICB0eXBlOiBUT09MQkFSX0JVVFRPTl9UWVBFUy5TRVRfVE9PTF9BQ1RJVkUsXG4gICAgICAgICAgICAgIGNvbW1hbmROYW1lOiAnc2V0VG9vbEFjdGl2ZScsXG4gICAgICAgICAgICAgIGNvbW1hbmRPcHRpb25zOiB7IHRvb2xOYW1lOiBUT09MX05BTUVTLkJSVVNIXzNEX0hVX0dBVEVEX1RPT0wgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6ICdCcnVzaDNEQXV0b0dhdGVkVG9vbCcsXG4gICAgICAgICAgICAgIGxhYmVsOiAnQXV0bycsXG4gICAgICAgICAgICAgIGljb246ICdsZXZlbCcsXG4gICAgICAgICAgICAgIHR5cGU6IFRPT0xCQVJfQlVUVE9OX1RZUEVTLlNFVF9UT09MX0FDVElWRSxcbiAgICAgICAgICAgICAgY29tbWFuZE5hbWU6ICdzZXRUb29sQWN0aXZlJyxcbiAgICAgICAgICAgICAgY29tbWFuZE9wdGlvbnM6IHsgdG9vbE5hbWU6IFRPT0xfTkFNRVMuQlJVU0hfM0RfQVVUT19HQVRFRF9UT09MIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBkZWZhdWx0Q29udGV4dDogJ0FDVElWRV9WSUVXUE9SVDo6Q09STkVSU1RPTkUnXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogVG90YWxseSBpbXBsZW1lbnRlZCwgZm9yIHJlYWwgbm93LlxuICAgKi9cbiAgZ2V0UGFuZWxNb2R1bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lbnVPcHRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpY29uOiAndGgtbGlzdCcsXG4gICAgICAgICAgbGFiZWw6ICdTZWdtZW50cycsXG4gICAgICAgICAgdGFyZ2V0OiAnc2VnbWVudC1wYW5lbCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICd0aCcsXG4gICAgICAgICAgbGFiZWw6ICdDb250b3VycycsXG4gICAgICAgICAgdGFyZ2V0OiAnY29udG91ci1wYW5lbCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnc2VnbWVudC1wYW5lbCcsXG4gICAgICAgICAgY29tcG9uZW50OiBTZWdtZW50YXRpb25NZW51XG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBpZDogJ2NvbnRvdXItcGFuZWwnLFxuICAgICAgICAgIGNvbXBvbmVudDogUm9pQ29udG91ck1lbnVcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGRlZmF1bHRDb250ZXh0OiBbJ1ZJRVdFUiddXG4gICAgfTtcbiAgfVxufTtcbiIsImltcG9ydCB7IHN0b3JlLCByZWdpc3RlciwgYWRkVG9vbCB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCBmcmVlaGFuZDNETW9kdWxlIGZyb20gJy4vbW9kdWxlcy9mcmVlaGFuZDNETW9kdWxlLmpzJztcbmltcG9ydCBleHRlbmRCcnVzaE1vZHVsZSBmcm9tICcuL21vZHVsZXMvZXh0ZW5kQnJ1c2hNb2R1bGUuanMnO1xuXG5pbXBvcnQgQnJ1c2gzRFRvb2wgZnJvbSAnLi90b29scy9CcnVzaDNEVG9vbC5qcyc7XG5pbXBvcnQgQnJ1c2gzREhVR2F0ZWRUb29sIGZyb20gJy4vdG9vbHMvQnJ1c2gzREhVR2F0ZWRUb29sLmpzJztcbmltcG9ydCBCcnVzaDNEQXV0b0dhdGVkVG9vbCBmcm9tICcuL3Rvb2xzL0JydXNoM0RBdXRvR2F0ZWRUb29sLmpzJztcbmltcG9ydCBGcmVlaGFuZFJvaTNEVG9vbCBmcm9tICcuL3Rvb2xzL0ZyZWVoYW5kUm9pM0RUb29sLmpzJztcbmltcG9ydCBGcmVlaGFuZFJvaTNEU2N1bHB0b3JUb29sIGZyb20gJy4vdG9vbHMvRnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbC5qcyc7XG5cbmxldCBUT09MX05BTUVTID0ge307XG5cbmV4cG9ydCB7IFRPT0xfTkFNRVMgfTtcblxuY29uc3QgbW9kdWxlcyA9IHN0b3JlLm1vZHVsZXM7XG5cbmNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gIG1heFJhZGl1czogNjQsXG4gIGhvbGVGaWxsOiAyLFxuICBob2xlRmlsbFJhbmdlOiBbMCwgMjBdLFxuICBzdHJheVJlbW92ZTogNSxcbiAgc3RyYXlSZW1vdmVSYW5nZTogWzAsIDk5XSxcbiAgaW50ZXJwb2xhdGU6IGZhbHNlLFxuICBzaG93RnJlZWhhbmRTdGF0czogZmFsc2UsXG4gIGJydXNoM2RUb29sTmFtZTogJ0JydXNoM0RUb29sJyxcbiAgYnJ1c2gzREhVR2F0ZWRUb29sTmFtZTogJ0JydXNoM0RIVUdhdGVkVG9vbCcsXG4gIGJydXNoM0RBdXRvR2F0ZWRUb29sOiAnQnJ1c2gzREF1dG9HYXRlZFRvb2wnLFxuICBmcmVlaGFuZFJvaTNEVG9vbDogJ0ZyZWVoYW5kUm9pM0RUb29sJyxcbiAgZnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbDogJ0ZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wnLFxuICBnYXRlczogW1xuICAgIHtcbiAgICAgIC8vIGh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcG1jL2FydGljbGVzL1BNQzQzMDk1MjIvXG4gICAgICBuYW1lOiAnYWRpcG9zZScsXG4gICAgICByYW5nZTogWy0xOTAsIC0zMF1cbiAgICB9LFxuICAgIHtcbiAgICAgIC8vIGh0dHBzOi8vd3d3Lm5jYmkubmxtLm5paC5nb3YvcG1jL2FydGljbGVzL1BNQzQzMDk1MjIvXG4gICAgICBuYW1lOiAnbXVzY2xlJyxcbiAgICAgIHJhbmdlOiBbLTI5LCAxNTBdXG4gICAgfSxcbiAgICB7XG4gICAgICBuYW1lOiAnY3VzdG9tJyxcbiAgICAgIHJhbmdlOiBbMCwgMTAwXVxuICAgIH1cbiAgXVxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5pdChjb25maWd1cmF0aW9uID0ge30pIHtcbiAgY29uc3QgYnJ1c2hNb2R1bGUgPSBtb2R1bGVzLmJydXNoO1xuICBjb25zdCBjb25maWcgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0Q29uZmlnLCBjb25maWd1cmF0aW9uKTtcblxuICBleHRlbmRCcnVzaE1vZHVsZShicnVzaE1vZHVsZSwgY29uZmlnKTtcblxuICByZWdpc3RlcignbW9kdWxlJywgJ2ZyZWVoYW5kM0QnLCBmcmVlaGFuZDNETW9kdWxlKTtcbiAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gbW9kdWxlcy5mcmVlaGFuZDNEO1xuXG4gIGZyZWVoYW5kM0RTdG9yZS5zdGF0ZS5pbnRlcnBvbGF0ZSA9IGNvbmZpZy5pbnRlcnBvbGF0ZTtcbiAgZnJlZWhhbmQzRFN0b3JlLnN0YXRlLmRpc3BsYXlTdGF0cyA9IGNvbmZpZy5zaG93RnJlZWhhbmRTdGF0cztcblxuICBhZGRUb29sKEJydXNoM0RUb29sLCB7IG5hbWU6IGNvbmZpZy5icnVzaDNkVG9vbE5hbWUgfSk7XG4gIGFkZFRvb2woQnJ1c2gzREhVR2F0ZWRUb29sLCB7IG5hbWU6IGNvbmZpZy5icnVzaDNESFVHYXRlZFRvb2xOYW1lIH0pO1xuICBhZGRUb29sKEJydXNoM0RBdXRvR2F0ZWRUb29sLCB7IG5hbWU6IGNvbmZpZy5icnVzaDNEQXV0b0dhdGVkVG9vbCB9KTtcbiAgYWRkVG9vbChGcmVlaGFuZFJvaTNEVG9vbCwgeyBuYW1lOiBjb25maWcuZnJlZWhhbmRSb2kzRFRvb2wgfSk7XG4gIGFkZFRvb2woRnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbCwge1xuICAgIG5hbWU6IGNvbmZpZy5mcmVlaGFuZFJvaTNEU2N1bHB0b3JUb29sLFxuICAgIHJlZmVyZW5jZWRUb29sTmFtZTogY29uZmlnLmZyZWVoYW5kUm9pM0RUb29sXG4gIH0pO1xuXG4gIC8vIFRPRE8gLT4gQ2xlYW4gdGhpcyB1cCBhIGJpdCBhZnRlciBQVy5cbiAgVE9PTF9OQU1FUy5GUkVFSEFORF9ST0lfM0RfVE9PTCA9IGNvbmZpZy5mcmVlaGFuZFJvaTNEVG9vbDtcbiAgVE9PTF9OQU1FUy5GUkVFSEFORF9ST0lfM0RfU0NVTFBUT1JfVE9PTCA9IGNvbmZpZy5mcmVlaGFuZFJvaTNEU2N1bHB0b3JUb29sO1xuICBUT09MX05BTUVTLkJSVVNIXzNEX1RPT0wgPSBjb25maWcuYnJ1c2gzZFRvb2xOYW1lO1xuICBUT09MX05BTUVTLkJSVVNIXzNEX0FVVE9fR0FURURfVE9PTCA9IGNvbmZpZy5icnVzaDNEQXV0b0dhdGVkVG9vbDtcbiAgVE9PTF9OQU1FUy5CUlVTSF8zRF9IVV9HQVRFRF9UT09MID0gY29uZmlnLmJydXNoM0RIVUdhdGVkVG9vbE5hbWU7XG5cbiAgY29uc29sZS5sb2coY29uZmlnKTtcblxuICBjb25zb2xlLmxvZyhUT09MX05BTUVTKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVuZEJydXNoTW9kdWxlKGJydXNoTW9kdWxlLCBjb25maWcpIHtcbiAgY29uc3QgYnJ1c2hTdGF0ZSA9IGJydXNoTW9kdWxlLnN0YXRlO1xuICBjb25zdCBnZXR0ZXJzID0gYnJ1c2hNb2R1bGUuZ2V0dGVycztcbiAgY29uc3Qgc2V0dGVycyA9IGJydXNoTW9kdWxlLnNldHRlcnM7XG5cbiAgYnJ1c2hTdGF0ZS5ob2xlRmlsbCA9IGNvbmZpZy5ob2xlRmlsbDtcbiAgYnJ1c2hTdGF0ZS5ob2xlRmlsbFJhbmdlID0gY29uZmlnLmhvbGVGaWxsUmFuZ2U7XG4gIGJydXNoU3RhdGUuc3RyYXlSZW1vdmUgPSBjb25maWcuc3RyYXlSZW1vdmU7XG4gIGJydXNoU3RhdGUuc3RyYXlSZW1vdmVSYW5nZSA9IGNvbmZpZy5zdHJheVJlbW92ZVJhbmdlO1xuICBicnVzaFN0YXRlLmdhdGVzID0gY29uZmlnLmdhdGVzO1xuICBicnVzaFN0YXRlLmFjdGl2ZUdhdGUgPSBicnVzaFN0YXRlLmdhdGVzWzBdLm5hbWU7XG4gIGJydXNoU3RhdGUubWF4UmFkaXVzID0gY29uZmlnLm1heFJhZGl1cztcblxuICBnZXR0ZXJzLmFjdGl2ZUdhdGVSYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCBhY3RpdmVHYXRlID0gYnJ1c2hTdGF0ZS5hY3RpdmVHYXRlO1xuICAgIGNvbnN0IGdhdGVzID0gYnJ1c2hTdGF0ZS5nYXRlcztcblxuICAgIGNvbnN0IGdhdGVJbmRleCA9IGdhdGVzLmZpbmRJbmRleChlbGVtZW50ID0+IHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm5hbWUgPT09IGFjdGl2ZUdhdGU7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gYnJ1c2hTdGF0ZS5nYXRlc1tnYXRlSW5kZXhdLnJhbmdlO1xuICB9O1xuXG4gIGdldHRlcnMuY3VzdG9tR2F0ZVJhbmdlID0gKCkgPT4ge1xuICAgIGNvbnN0IGdhdGVzID0gYnJ1c2hTdGF0ZS5nYXRlcztcblxuICAgIGNvbnN0IGdhdGVJbmRleCA9IGdhdGVzLmZpbmRJbmRleChlbGVtZW50ID0+IHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm5hbWUgPT09ICdjdXN0b20nO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJydXNoU3RhdGUuZ2F0ZXNbZ2F0ZUluZGV4XS5yYW5nZTtcbiAgfTtcblxuICBzZXR0ZXJzLmN1c3RvbUdhdGVSYW5nZSA9IChtaW4sIG1heCkgPT4ge1xuICAgIGNvbnN0IGdhdGVzID0gYnJ1c2hTdGF0ZS5nYXRlcztcblxuICAgIGNvbnN0IGdhdGVJbmRleCA9IGdhdGVzLmZpbmRJbmRleChlbGVtZW50ID0+IHtcbiAgICAgIHJldHVybiBlbGVtZW50Lm5hbWUgPT09ICdjdXN0b20nO1xuICAgIH0pO1xuXG4gICAgY29uc3QgY3VzdG9tR2F0ZVJhbmdlID0gYnJ1c2hTdGF0ZS5nYXRlc1tnYXRlSW5kZXhdLnJhbmdlO1xuXG4gICAgaWYgKG1pbiAhPT0gbnVsbCkge1xuICAgICAgY3VzdG9tR2F0ZVJhbmdlWzBdID0gbWluO1xuICAgIH1cblxuICAgIGlmIChtYXggIT09IG51bGwpIHtcbiAgICAgIGN1c3RvbUdhdGVSYW5nZVsxXSA9IG1heDtcbiAgICB9XG4gIH07XG5cbiAgZ2V0dGVycy5pbXBvcnRNZXRhZGF0YSA9IHNlcmllc0luc3RhbmNlVWlkID0+IHtcbiAgICBpZiAoYnJ1c2hNb2R1bGUuc3RhdGUuaW1wb3J0ICYmIGJydXNoTW9kdWxlLnN0YXRlLmltcG9ydFtzZXJpZXNJbnN0YW5jZVVpZF0pIHtcbiAgICAgIHJldHVybiBicnVzaE1vZHVsZS5zdGF0ZS5pbXBvcnRbc2VyaWVzSW5zdGFuY2VVaWRdO1xuICAgIH1cblxuICAgIHJldHVybjtcbiAgfTtcblxuICBzZXR0ZXJzLmltcG9ydE1ldGFkYXRhID0gKHNlcmllc0luc3RhbmNlVWlkLCBtZXRhZGF0YSkgPT4ge1xuICAgIC8vIFN0b3JlIHRoYXQgd2UndmUgaW1wb3J0ZWQgYSBjb2xsZWN0aW9uIGZvciB0aGlzIHNlcmllcy5cbiAgICBpZiAoIWJydXNoTW9kdWxlLnN0YXRlLmltcG9ydCkge1xuICAgICAgYnJ1c2hNb2R1bGUuc3RhdGUuaW1wb3J0ID0ge307XG4gICAgfVxuXG4gICAgYnJ1c2hNb2R1bGUuc3RhdGUuaW1wb3J0W3Nlcmllc0luc3RhbmNlVWlkXSA9IG1ldGFkYXRhO1xuICB9O1xuXG4gIHNldHRlcnMuaW1wb3J0TW9kaWZpZWQgPSBzZXJpZXNJbnN0YW5jZVVpZCA9PiB7XG4gICAgY29uc3QgaW1wb3J0TWV0YWRhdGEgPSBicnVzaE1vZHVsZS5zdGF0ZS5pbXBvcnRbc2VyaWVzSW5zdGFuY2VVaWRdO1xuXG4gICAgaWYgKGltcG9ydE1ldGFkYXRhLm1vZGlmaWVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW1wb3J0TWV0YWRhdGEubW9kaWZpZWQgPSB0cnVlO1xuXG4gICAgLy8gSmFtZXNBUGV0dHNcbiAgICAvLyBUT0RPOiBGb3JjZSB1cGRhdGUgb2YgY29tcG9uZW50LlxuICB9O1xufVxuIiwiaW1wb3J0IGNvcm5lcnN0b25lIGZyb20gJ2Nvcm5lcnN0b25lLWNvcmUnO1xuaW1wb3J0IGdlbmVyYXRlVUlEIGZyb20gJy4uL3V0aWwvZ2VuZXJhdGVVSUQuanMnO1xuaW1wb3J0IGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50IGZyb20gJy4uL3V0aWwvZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQuanMnO1xuXG4vKipcbiAqIEB0eXBlZGVmIHtzZXJpZXNbXX0gc2VyaWVzQ29sbGVjdGlvblxuICpcbiAqIEBleGFtcGxlXG4gKiBbXG4gKiAgIHNlcmllczEsXG4gKiAgIHNlcmllczJcbiAqIF07XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBzZXJpZXNcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSB1aWQgVGhlIHNlcmllc0luc3RhbmNlVWlkXG4gKiBAcHJvcGVydHkge251bWJlcn0gYWN0aXZlU3RydWN0dXJlU2V0SW5kZXggVGhlIGFjdGl2ZVN0cnVjdHVyZVNldCB3aXRoaW4gdGhlIHNlcmllcy5cbiAqIEBwcm9wZXJ0eSB7c3RydWN0dXJlU2V0W119IHN0cnVjdHVyZVNldENvbGxlY3Rpb24gQW4gYXJyYXkgb2Ygc3RydWN0dXJlU2V0cy5cbiAqXG4gKiBAZXhhbXBsZVxuICoge1xuICogIHVpZDogJ215U2VyaWVzSW5zdGFuY2VVaWQnLFxuICogIGFjdGl2ZVN0cnVjdHVyZVNldEluZGV4OiAwLFxuICogIHN0cnVjdHVyZVNldENvbGxlY3Rpb24sXG4gKiB9O1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gc3RydWN0dXJlU2V0XG4gKiBAcHJvcGVydHkge3N0cmluZ30gdWlkIFRoZSBzdHJ1Y3R1cmVTZXRVaWRcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIEEgaHVtYW4gcmVhZGFibGUgZGVzY3JpcHRvciBvZiB0aGUgc3RydWN0dXJlU2V0LlxuICogQHByb3BlcnR5IHtib29sZWFufSBpc0xvY2tlZCBXaGV0aGVyIHRoZSBzdHJ1Y3R1cmVTZXQgaXMgaW1tdXRhYmxlLlxuICogQHByb3BlcnR5IHtib29sZWFufSB2aXNpYmxlIFdoZXRoZXIgdGhlIHN0cnVjdHVyZVNldCBzaG91bGQgYmUgcmVuZGVyZWQuXG4gKiBAcHJvcGVydHkge251bWJlcn0gYWN0aXZlUk9JQ29udG91ckluZGV4IFRoZSBpbmRleCBvZiB0aGUgYWN0aXZlIFJPSUNvbnRvdXIuXG4gKiBAcHJvcGVydHkge1JPSUNvbnRvdXJbXX0gUk9JQ29udG91ckNvbGxlY3Rpb24gQW4gYXJyYXkgb2YgUk9JQ29udG91cnMuXG4gKlxuICogQGV4YW1wbGVcbiAqIHtcbiAqICAgdWlkOiAnbXlTdHJ1Y3R1cmVTZXRVaWQnLFxuICogICBuYW1lOiBgbXlMb3ZlbHlTdHJ1Y3R1cmVTZXRgLFxuICogICBpc0xvY2tlZDogZmFsc2UsXG4gKiAgIHZpc2libGU6IHRydWUsXG4gKiAgIGFjdGl2ZVJPSUNvbnRvdXJJbmRleDogNyxcbiAqICAgUk9JQ29udG91ckNvbGxlY3Rpb25cbiAqIH07XG4gKi9cblxuLyoqXG4gKiBAdHlwZWRlZiB7b2JqZWN0fSBST0lDb250b3VyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdWlkIFRoZSBST0lDb250b3VyVWlkLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IG5hbWUgQSBodW1hbiByZWFkYWJsZSBkZXNjcmlwdG9yIG9mIHRoZSBiaW9sb2dpY2FsIG9iamVjdCB0aGUgY29udG91ciBlbmNsb3Nlcy5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBjb2xvciBBIGNzcyBjb2xvciB0byByZW5kZXIgdGhlIHZvbHVtZSB3aXRoLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHBvbHlnb25Db3VudCBUaGUgbnVtYmVyIG9mIHBvbHlnb25zIHRoYXQgY29tcHJpc2UgdGhlIFJPSUNvbnRvdXIuXG4gKlxuICogQGV4YW1wbGVcbiAqIHtcbiAqICB1aWQ6ICdteVJPSUNvbnRvdXJVaWQnLFxuICogIG5hbWU6ICdteUxvdmVseVJPSUNvbnRvdXInLFxuICogIGNvbG9yOiAnY29ybmZsb3dlcmJsdWUnLFxuICogIHBvbHlnb25Db3VudDogJzM0J1xuICogfTtcbiAqL1xuXG4vLyBFYWNoIGNvbnRvdXIgcmVmZXJlbmNlcyBhIHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIFJPSUNvbnRvdXJVaWQuXG5cbmNvbnN0IHN0YXRlID0ge1xuICBzZXJpZXNDb2xsZWN0aW9uOiBbXSxcbiAgaW50ZXJwb2xhdGU6IGZhbHNlLFxuICBkaXNwbGF5U3RhdHM6IGZhbHNlXG59O1xuXG5mdW5jdGlvbiBjaGVjayhvYmplY3QsIG5hbWUpIHtcbiAgaWYgKCFvYmplY3QpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEluc3VmZmljaWVudCBpbmZvcm1hdGlvbiBwcm92aWRlZCwgbXVzdCBwcm92aWRlICR7bmFtZX0uYCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKSB7XG4gIGNoZWNrKHNlcmllc0luc3RhbmNlVWlkLCAnc2VyaWVzSW5zdGFuY2VVaWQnKTtcblxuICByZXR1cm4gc3RhdGUuc2VyaWVzQ29sbGVjdGlvbi5maW5kKHNlcmllcyA9PiB7XG4gICAgcmV0dXJuIHNlcmllcy51aWQgPT09IHNlcmllc0luc3RhbmNlVWlkO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQgPSAnREVGQVVMVCcpIHtcbiAgY2hlY2soc3RydWN0dXJlU2V0VWlkLCAnc3RydWN0dXJlU2V0VWlkJyk7XG5cbiAgY29uc3Qgc2VyaWVzID0gZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICBpZiAoIXNlcmllcykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBzZXJpZXMuc3RydWN0dXJlU2V0Q29sbGVjdGlvbi5maW5kKHN0cnVjdHVyZVNldCA9PiB7XG4gICAgcmV0dXJuIHN0cnVjdHVyZVNldC51aWQgPT09IHN0cnVjdHVyZVNldFVpZDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCkge1xuICBjaGVjayhST0lDb250b3VyVWlkLCAnUk9JQ29udG91clVpZCcpO1xuXG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IGdldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcblxuICBpZiAoIXN0cnVjdHVyZVNldCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb24uZmluZChST0lDb250b3VyID0+IHtcbiAgICByZXR1cm4gUk9JQ29udG91ciAmJiBST0lDb250b3VyLnVpZCA9PT0gUk9JQ29udG91clVpZDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFJPSUNvbnRvdXJJbmRleChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBST0lDb250b3VyVWlkKSB7XG4gIGNoZWNrKFJPSUNvbnRvdXJVaWQsICdST0lDb250b3VyVWlkJyk7XG5cbiAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gIGlmICghc3RydWN0dXJlU2V0KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvbi5maW5kSW5kZXgoUk9JQ29udG91ciA9PiB7XG4gICAgcmV0dXJuIFJPSUNvbnRvdXIudWlkID09PSBST0lDb250b3VyVWlkO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlU3RydWN0dXJlU2V0SW5kZXgoc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgY29uc3Qgc2VyaWVzID0gZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICByZXR1cm4gc2VyaWVzLmFjdGl2ZVN0cnVjdHVyZVNldEluZGV4O1xufVxuXG5mdW5jdGlvbiBnZXRBY3RpdmVST0lDb250b3VySW5kZXgoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCA9ICdERUZBVUxUJykge1xuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBnZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgcmV0dXJuIHN0cnVjdHVyZVNldC5hY3RpdmVST0lDb250b3VySW5kZXg7XG59XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZVJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCA9ICdERUZBVUxUJykge1xuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBnZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgY29uc3QgYWN0aXZlUk9JQ29udG91ckluZGV4ID0gc3RydWN0dXJlU2V0LmFjdGl2ZVJPSUNvbnRvdXJJbmRleDtcblxuICBpZiAoYWN0aXZlUk9JQ29udG91ckluZGV4ID09PSBudWxsIHx8IGFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvblthY3RpdmVST0lDb250b3VySW5kZXhdO1xufVxuXG5mdW5jdGlvbiBzZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgY2hlY2soc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gIGNvbnN0IHNlcmllcyA9IHtcbiAgICB1aWQ6IHNlcmllc0luc3RhbmNlVWlkLFxuICAgIGFjdGl2ZVN0cnVjdHVyZVNldEluZGV4OiBudWxsLFxuICAgIHN0cnVjdHVyZVNldENvbGxlY3Rpb246IFtdXG4gIH07XG5cbiAgc3RhdGUuc2VyaWVzQ29sbGVjdGlvbi5wdXNoKHNlcmllcyk7XG5cbiAgLy8gQWRkIGEgZGVmYXVsdCBzdHJ1Y3R1cmVTZXQgZm9yIHRoZSBzZXJpZXMuXG4gIHNldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgJ2RlZmF1bHQnLCB7XG4gICAgdWlkOiAnREVGQVVMVCdcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIHNldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgbmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNoZWNrKG5hbWUsICduYW1lJyk7XG5cbiAgbGV0IHNlcmllcyA9IGdldFNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgaWYgKCFzZXJpZXMpIHtcbiAgICAvLyBHZW5lcmF0ZSB0aGUgc2VyaWVzLlxuICAgIHNldFNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgc2VyaWVzID0gZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgfVxuXG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IHtcbiAgICB1aWQ6IG9wdGlvbnMudWlkID8gb3B0aW9ucy51aWQgOiBnZW5lcmF0ZVVJRCgpLFxuICAgIG5hbWUsXG4gICAgaXNMb2NrZWQ6IG9wdGlvbnMuaXNMb2NrZWQgPyBvcHRpb25zLmlzTG9ja2VkIDogZmFsc2UsXG4gICAgdmlzaWJsZTogb3B0aW9ucy52aXNpYmxlID8gb3B0aW9ucy52aXNpYmxlIDogdHJ1ZSxcbiAgICBhY3RpdmVST0lDb250b3VySW5kZXg6IG9wdGlvbnMuYWN0aXZlUk9JQ29udG91ckluZGV4ICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmFjdGl2ZVJPSUNvbnRvdXJJbmRleCA6IG51bGwsXG4gICAgUk9JQ29udG91ckNvbGxlY3Rpb246IFtdXG4gIH07XG5cbiAgc2VyaWVzLnN0cnVjdHVyZVNldENvbGxlY3Rpb24ucHVzaChzdHJ1Y3R1cmVTZXQpO1xufVxuXG5mdW5jdGlvbiBzZXRST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICBjaGVjayhuYW1lLCAnbmFtZScpO1xuXG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IGdldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcblxuICBpZiAoIXN0cnVjdHVyZVNldCkge1xuICAgIC8vIENhbid0IGdlbmVyYXRlIHRoZSBzdHJ1Y3R1cmVTZXQgYXMgbm90IGVub3VnaCBpbmZvIChubyBuYW1lKS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCBnZW5lcmF0ZSBST0lDb250b3VyLCBhcyB0aGUgc3RydWN0dXJlU2V0IHdpdGggJHtzdHJ1Y3R1cmVTZXRVaWR9IGRvZXMgbm90IGV4aXN0LmApO1xuICB9XG5cbiAgY29uc3QgUk9JQ29udG91ciA9IHtcbiAgICB1aWQ6IG9wdGlvbnMudWlkID8gb3B0aW9ucy51aWQgOiBnZW5lcmF0ZVVJRCgpLFxuICAgIG5hbWUsXG4gICAgY29sb3I6IG9wdGlvbnMuY29sb3IgPyBvcHRpb25zLmNvbG9yIDogZ2V0TmV4dENvbG9yKCksXG4gICAgcG9seWdvbkNvdW50OiBvcHRpb25zLnBvbHlnb25Db3VudCA/IG9wdGlvbnMucG9seWdvbkNvdW50IDogMFxuICB9O1xuXG4gIHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvbi5wdXNoKFJPSUNvbnRvdXIpO1xuXG4gIHJldHVybiBST0lDb250b3VyLnVpZDtcbn1cblxuZnVuY3Rpb24gc2V0Uk9JQ29udG91ckFuZFNldEluZGV4QWN0aXZlKHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICBzZXRST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIG5hbWUsIG9wdGlvbnMpO1xuXG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IGdldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcblxuICBjb25zdCBpbmRleCA9IHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvbi5sZW5ndGggLSAxO1xuXG4gIHN0cnVjdHVyZVNldC5hY3RpdmVST0lDb250b3VySW5kZXggPSBpbmRleDtcblxuICByZXR1cm4gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNldERlbGV0ZVJPSUZyb21TdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCkge1xuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBnZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG4gIGNvbnN0IFJPSUNvbnRvdXJDb2xsZWN0aW9uID0gc3RydWN0dXJlU2V0LlJPSUNvbnRvdXJDb2xsZWN0aW9uO1xuXG4gIGNvbnN0IFJPSUNvbnRvdXJJbmRleCA9IFJPSUNvbnRvdXJDb2xsZWN0aW9uLmZpbmRJbmRleChST0lDb250b3VyID0+IHtcbiAgICByZXR1cm4gUk9JQ29udG91ci51aWQgPT09IFJPSUNvbnRvdXJVaWQ7XG4gIH0pO1xuXG4gIFJPSUNvbnRvdXJDb2xsZWN0aW9uLnNwbGljZShST0lDb250b3VySW5kZXgsIDEpO1xufVxuXG5mdW5jdGlvbiBzZXRTdHJ1Y3R1cmVTZXROYW1lKG5hbWUsIHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpIHtcbiAgY2hlY2sobmFtZSwgJ25hbWUnKTtcblxuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBnZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgc3RydWN0dXJlU2V0Lm5hbWUgPSBuYW1lO1xufVxuXG5mdW5jdGlvbiBzZXREZWxldGVTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCkge1xuICBjb25zdCBzZXJpZXMgPSBnZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gIGNvbnN0IHN0cnVjdHVyZVNldENvbGxlY3Rpb24gPSBzZXJpZXMuc3RydWN0dXJlU2V0Q29sbGVjdGlvbjtcblxuICBjb25zdCBzdHJ1Y3R1cmVTZXRJbmRleCA9IHN0cnVjdHVyZVNldENvbGxlY3Rpb24uZmluZEluZGV4KHN0cnVjdHVyZVNldCA9PiB7XG4gICAgcmV0dXJuIHN0cnVjdHVyZVNldC51aWQgPT09IHN0cnVjdHVyZVNldFVpZDtcbiAgfSk7XG5cbiAgc3RydWN0dXJlU2V0Q29sbGVjdGlvbi5zcGxpY2Uoc3RydWN0dXJlU2V0SW5kZXgsIDEpO1xufVxuXG5mdW5jdGlvbiBzZXRST0lDb250b3VyTmFtZShuYW1lLCBzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBST0lDb250b3VyVWlkKSB7XG4gIGNoZWNrKG5hbWUsICduYW1lJyk7XG5cbiAgY29uc3QgUk9JQ29udG91ciA9IGdldFJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCk7XG5cbiAgUk9JQ29udG91ci5uYW1lID0gbmFtZTtcbn1cblxuZnVuY3Rpb24gc2V0QWN0aXZlU3RydWN0dXJlU2V0SW5kZXgoaW5kZXgsIHNlcmllc0luc3RhbmNlVWlkKSB7XG4gIGNoZWNrKGluZGV4LCAnaW5kZXgnKTtcblxuICBjb25zdCBzZXJpZXMgPSBnZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gIHNlcmllcy5hY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleCA9IGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXRBY3RpdmVTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCkge1xuICBjaGVjayhzdHJ1Y3R1cmVTZXRVaWQsICdzdHJ1Y3R1cmVTZXRVaWQnKTtcblxuICBjb25zdCBzZXJpZXMgPSBnZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICBjb25zdCBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uID0gc2VyaWVzLnN0cnVjdHVyZVNldENvbGxlY3Rpb247XG5cbiAgY29uc3Qgc3RydWN0dXJlU2V0SW5kZXggPSBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uLmZpbmRJbmRleChzdHJ1Y3R1cmVTZXQgPT4ge1xuICAgIHJldHVybiBzdHJ1Y3R1cmVTZXQudWlkID09PSBzdHJ1Y3R1cmVTZXRVaWQ7XG4gIH0pO1xuXG4gIHNlcmllcy5hY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleCA9IHN0cnVjdHVyZVNldEluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXRBY3RpdmVST0lDb250b3VySW5kZXgoaW5kZXgsIHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQgPSAnREVGQVVMVCcpIHtcbiAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gIHN0cnVjdHVyZVNldC5hY3RpdmVST0lDb250b3VySW5kZXggPSBpbmRleDtcbn1cblxuZnVuY3Rpb24gc2V0QWN0aXZlUk9JQ29udG91cihzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkID0gJ0RFRkFVTFQnLCBST0lDb250b3VyVWlkKSB7XG4gIGNoZWNrKFJPSUNvbnRvdXJVaWQsICdST0lDb250b3VyVWlkJyk7XG5cbiAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuICBjb25zdCBST0lDb250b3VyQ29sbGVjdGlvbiA9IHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvbjtcblxuICBjb25zdCBST0lDb250b3VySW5kZXggPSBST0lDb250b3VyQ29sbGVjdGlvbi5maW5kSW5kZXgoUk9JQ29udG91ciA9PiB7XG4gICAgcmV0dXJuIFJPSUNvbnRvdXIudWlkID09PSBST0lDb250b3VyVWlkO1xuICB9KTtcblxuICBzdHJ1Y3R1cmVTZXQuYWN0aXZlUk9JQ29udG91ckluZGV4ID0gUk9JQ29udG91ckluZGV4O1xufVxuXG5mdW5jdGlvbiBpbmNyZW1lbnRQb2x5Z29uQ291bnQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCkge1xuICBjb25zdCBST0lDb250b3VyID0gZ2V0Uk9JQ29udG91cihzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBST0lDb250b3VyVWlkKTtcblxuICBST0lDb250b3VyLnBvbHlnb25Db3VudCsrO1xufVxuXG5mdW5jdGlvbiBkZWNyZW1lbnRQb2x5Z29uQ291bnQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCkge1xuICBjb25zdCBST0lDb250b3VyID0gZ2V0Uk9JQ29udG91cihzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBST0lDb250b3VyVWlkKTtcblxuICBST0lDb250b3VyLnBvbHlnb25Db3VudC0tO1xufVxuXG5jb25zdCBnZXR0ZXJzID0ge1xuICBzZXJpZXM6IGdldFNlcmllcyxcbiAgc3RydWN0dXJlU2V0OiBnZXRTdHJ1Y3R1cmVTZXQsXG4gIFJPSUNvbnRvdXI6IGdldFJPSUNvbnRvdXIsXG4gIFJPSUNvbnRvdXJJbmRleDogZ2V0Uk9JQ29udG91ckluZGV4LFxuICBhY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleDogZ2V0QWN0aXZlU3RydWN0dXJlU2V0SW5kZXgsXG4gIGFjdGl2ZVJPSUNvbnRvdXJJbmRleDogZ2V0QWN0aXZlUk9JQ29udG91ckluZGV4LFxuICBhY3RpdmVST0lDb250b3VyOiBnZXRBY3RpdmVST0lDb250b3VyXG59O1xuXG5jb25zdCBzZXR0ZXJzID0ge1xuICBzZXJpZXM6IHNldFNlcmllcyxcbiAgc3RydWN0dXJlU2V0OiBzZXRTdHJ1Y3R1cmVTZXQsXG4gIFJPSUNvbnRvdXI6IHNldFJPSUNvbnRvdXIsXG4gIFJPSUNvbnRvdXJBbmRTZXRJbmRleEFjdGl2ZTogc2V0Uk9JQ29udG91ckFuZFNldEluZGV4QWN0aXZlLFxuICBkZWxldGVST0lGcm9tU3RydWN0dXJlU2V0OiBzZXREZWxldGVST0lGcm9tU3RydWN0dXJlU2V0LFxuICBkZWxldGVTdHJ1Y3R1cmVTZXQ6IHNldERlbGV0ZVN0cnVjdHVyZVNldCxcbiAgc3RydWN0dXJlU2V0TmFtZTogc2V0U3RydWN0dXJlU2V0TmFtZSxcbiAgUk9JQ29udG91ck5hbWU6IHNldFJPSUNvbnRvdXJOYW1lLFxuICBhY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleDogc2V0QWN0aXZlU3RydWN0dXJlU2V0SW5kZXgsXG4gIGFjdGl2ZVN0cnVjdHVyZVNldDogc2V0QWN0aXZlU3RydWN0dXJlU2V0LFxuICBhY3RpdmVST0lDb250b3VySW5kZXg6IHNldEFjdGl2ZVJPSUNvbnRvdXJJbmRleCxcbiAgYWN0aXZlUk9JQ29udG91cjogc2V0QWN0aXZlUk9JQ29udG91cixcbiAgaW5jcmVtZW50UG9seWdvbkNvdW50LFxuICBkZWNyZW1lbnRQb2x5Z29uQ291bnQsXG4gIHRvZ2dsZUludGVycG9sYXRlOiAoKSA9PiB7XG4gICAgc3RhdGUuaW50ZXJwb2xhdGUgPSAhc3RhdGUuaW50ZXJwb2xhdGU7XG4gIH0sXG4gIHRvZ2dsZURpc3BsYXlTdGF0czogKCkgPT4ge1xuICAgIHN0YXRlLmRpc3BsYXlTdGF0cyA9ICFzdGF0ZS5kaXNwbGF5U3RhdHM7XG4gIH1cbn07XG5cbi8qKlxuICogZW5hYmxlZEVsZW1lbnRDYWxsYmFjayAtIEVsZW1lbnQgc3BlY2lmaWMgaW5pdGlsaXNhdGlvbi5cbiAqIEBwdWJsaWNcbiAqIEBwYXJhbSAge09iamVjdH0gZW5hYmxlZEVsZW1lbnQgIFRoZSBlbGVtZW50IG9uIHdoaWNoIHRoZSBtb2R1bGUgaXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJlaW5nIGluaXRpYWxpc2VkLlxuICovXG5mdW5jdGlvbiBlbmFibGVkRWxlbWVudENhbGxiYWNrKGVsZW1lbnQpIHtcbiAgY29uc3QgZW5hYmxlZEVsZW1lbnQgPSBjb3JuZXJzdG9uZS5nZXRFbmFibGVkRWxlbWVudChlbGVtZW50KTtcblxuICBpZiAoIWVuYWJsZWRFbGVtZW50LmltYWdlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3Qgc2VyaWVzSW5zdGFuY2VVaWQgPSBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudChlbmFibGVkRWxlbWVudCk7XG5cbiAgaWYgKCFnZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpKSB7XG4gICAgLy8gR2VuZXJhdGUgc2VyaWVzIHN0b3JlLlxuICAgIHNldFNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBzdGF0ZSxcbiAgZW5hYmxlZEVsZW1lbnRDYWxsYmFjayxcbiAgZ2V0dGVycyxcbiAgc2V0dGVyc1xufTtcblxuY29uc3QgaW1wb3J0Q29sb3JzID0gW1xuICAnY29ybmZsb3dlcmJsdWUnLFxuICAnZmlyZWJyaWNrJyxcbiAgJ2dvbGRlbnJvZCcsXG4gICdibHVldmlvbGV0JyxcbiAgJ2luZGlhbnJlZCcsXG4gICdvcmFuZ2UnLFxuICAnbWVkaXVtdHVycXVvaXNlJyxcbiAgJ2xpZ2h0Y29yYWwnLFxuICAna2hha2knLFxuICAnZGFya21hZ2VudGEnLFxuICAnbGlnaHRzZWFncmVlbicsXG4gICd0b21hdG8nLFxuICAnYXF1YW1hcmluZScsXG4gICdkYXJrc2FsbW9uJyxcbiAgJ21vY2Nhc2luJyxcbiAgJ29yY2hpZCcsXG4gICdza3libHVlJyxcbiAgJ3BlcnUnXG5dO1xuXG4vLyBTdWNoIHRoYXQgZmlyc3QgY29sb3Igd2lsbCBiZSB0aGUgZmlyc3QgaW4gcm9pQ29sb3JzXG5sZXQgY3VycmVudENvbG9ySW5kZXggPSBpbXBvcnRDb2xvcnMubGVuZ3RoO1xuXG4vKipcbiAqIGdldE5leHRDb2xvclxuICpcbiAqIEByZXR1cm4ge3N0cmluZ30gQSBDU1MgcmVjb2duaXNlZCBjb2xvciB3aXRoIHdoaWNoIHRvIHJlbmRlciB0aGUgUk9JIGNvbnRvdXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0Q29sb3IoKSB7XG4gIGN1cnJlbnRDb2xvckluZGV4Kys7XG4gIGlmIChjdXJyZW50Q29sb3JJbmRleCA+PSBpbXBvcnRDb2xvcnMubGVuZ3RoKSB7XG4gICAgY3VycmVudENvbG9ySW5kZXggPSAwO1xuICB9XG5cbiAgcmV0dXJuIGltcG9ydENvbG9yc1tjdXJyZW50Q29sb3JJbmRleF07XG59XG4iLCJpbXBvcnQgY29ybmVyc3RvbmVUb29scyBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5pbXBvcnQgQnJ1c2gzREhVR2F0ZWRUb29sIGZyb20gJy4vQnJ1c2gzREhVR2F0ZWRUb29sLmpzJztcblxuY29uc3QgeyBnZXRDaXJjbGUgfSA9IGNvcm5lcnN0b25lVG9vbHMuaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ3V0aWwvYnJ1c2hVdGlscycpO1xuXG5jb25zdCBicnVzaE1vZHVsZSA9IGNvcm5lcnN0b25lVG9vbHMuc3RvcmUubW9kdWxlcy5icnVzaDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJ1c2gzREF1dG9HYXRlZFRvb2wgZXh0ZW5kcyBCcnVzaDNESFVHYXRlZFRvb2wge1xuICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uID0ge30pIHtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnID0ge307XG4gICAgY29uc3QgaW5pdGlhbENvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKGRlZmF1bHRDb25maWcsIGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgc3VwZXIoaW5pdGlhbENvbmZpZ3VyYXRpb24pO1xuXG4gICAgdGhpcy5pbml0aWFsQ29uZmlndXJhdGlvbiA9IGluaXRpYWxDb25maWd1cmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIE1PVVNFX0RPV04gZXZlbnQuXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2dCAtIFRoZSBldmVudC5cbiAgICovXG4gIHByZU1vdXNlRG93bkNhbGxiYWNrKGV2dCkge1xuICAgIHRoaXMuX3NldEN1c3RvbUdhdGUoZXZ0KTtcbiAgICB0aGlzLl9zdGFydFBhaW50aW5nKGV2dCk7XG5cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBfc2V0Q3VzdG9tR2F0ZSAtIEdldHMgdGhlIG1pbmltdW0gYW5kIG1heGltdW0gYnJ1c2ggdmFsdWVzIHdpdGhpbiB0aGUgaW1hZ2VcbiAgICogYW5kIHNldHMgdGhlIGdhdGUgbW9kZSB0byBcImN1c3RvbVwiIHdpdGggdGhlc2UgdmFsdWVzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGV2dCBUaGUgY29ybmVyc3RvbmUgZXZlbnQuXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgX3NldEN1c3RvbUdhdGUoZXZ0KSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZXZ0LmRldGFpbDtcbiAgICBjb25zdCBpbWFnZSA9IGV2ZW50RGF0YS5pbWFnZTtcbiAgICBjb25zdCB7IHJvd3MsIGNvbHVtbnMgfSA9IGltYWdlO1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gZXZlbnREYXRhLmN1cnJlbnRQb2ludHMuaW1hZ2U7XG4gICAgY29uc3QgcmFkaXVzID0gYnJ1c2hNb2R1bGUuc3RhdGUucmFkaXVzO1xuICAgIGNvbnN0IGltYWdlUGl4ZWxEYXRhID0gaW1hZ2UuZ2V0UGl4ZWxEYXRhKCk7XG4gICAgY29uc3QgcmVzY2FsZVNsb3BlID0gaW1hZ2Uuc2xvcGUgfHwgMTtcbiAgICBjb25zdCByZXNjYWxlSW50ZXJjZXB0ID0gaW1hZ2UuaW50ZXJjZXB0IHx8IDA7XG5cbiAgICBjb25zdCBjaXJjbGUgPSBnZXRDaXJjbGUocmFkaXVzLCByb3dzLCBjb2x1bW5zLCB4LCB5KTtcblxuICAgIC8vIEluaXRpYWxpc2UgaGkgYW5kIGxvIGFzIHRoZSBmaXJzdCBwaXhlbFZhbHVlIGluIHRoZSBjaXJjbGUuXG4gICAgbGV0IGxvID0gaW1hZ2VQaXhlbERhdGFbY2lyY2xlWzBdWzBdICsgY2lyY2xlWzBdWzFdICogcm93c107XG4gICAgbGV0IGhpID0gbG87XG5cbiAgICAvLyBGaW5kIHRoZSBoaWdoZXN0IGFuZCBsb3dlc3QgdmFsdWUuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaXJjbGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwaXhlbFZhbHVlID0gaW1hZ2VQaXhlbERhdGFbY2lyY2xlW2ldWzBdICsgY2lyY2xlW2ldWzFdICogcm93c107XG5cbiAgICAgIGlmIChwaXhlbFZhbHVlIDwgbG8pIHtcbiAgICAgICAgbG8gPSBwaXhlbFZhbHVlO1xuICAgICAgfVxuXG4gICAgICBpZiAocGl4ZWxWYWx1ZSA+IGhpKSB7XG4gICAgICAgIGhpID0gcGl4ZWxWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsbyA9IGxvICogcmVzY2FsZVNsb3BlICsgcmVzY2FsZUludGVyY2VwdDtcbiAgICBoaSA9IGhpICogcmVzY2FsZVNsb3BlICsgcmVzY2FsZUludGVyY2VwdDtcblxuICAgIHRoaXMuZ2F0ZSA9IFtsbywgaGldO1xuICB9XG5cbiAgLyoqXG4gICAqIF9nYXRlQ2lyY2xlIC0gR2l2ZW4gYW4gaW1hZ2UgYW5kIGEgYnJ1c2ggY2lyY2xlLCBnYXRlIHRoZSBjaXJjbGUgYmV0d2VlblxuICAgKiB0aGUgc2V0IGdhdGUgdmFsdWVzLCBhbmQgdGhlbiBjbGVhbnVwIHRoZSByZXN1bHRpbmcgbWFzayB1c2luZyB0aGVcbiAgICogaG9sZUZpbGwgYW5kIHN0cmF5UmVtb3ZlIHByb3BlcnRpZXMgb2YgdGhlIGJydXNoIG1vZHVsZS5cbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBpbWFnZSAgIFRoZSBjb3JuZXJzdG9uZSBpbWFnZS5cbiAgICogQHBhcmFtICB7TnVtYmVyW11bXX0gY2lyY2xlICBBbiBhcnJheSBvZiBpbWFnZSBwaXhlbHMgY29udGFpbmVkIHdpdGhpbiB0aGUgYnJ1c2hcbiAgICogICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUuXG4gICAqIEByZXR1cm5zIHtOdW1iZXJbXVtdfSAgQW4gYXJyYXkgY29udGFpbmluZyB0aGUgZ2F0ZWQvY2xlYW5lZCBwaXhlbHMgdG8gZmlsbC5cbiAgICovXG4gIF9nYXRlQ2lyY2xlKGltYWdlLCBjaXJjbGUpIHtcbiAgICBjb25zdCByb3dzID0gaW1hZ2UuaW1hZ2U7XG4gICAgY29uc3QgaW1hZ2VQaXhlbERhdGEgPSBpbWFnZS5nZXRQaXhlbERhdGEoKTtcbiAgICBjb25zdCBnYXRlVmFsdWVzID0gdGhpcy5nYXRlO1xuICAgIGNvbnN0IHJlc2NhbGVTbG9wZSA9IGltYWdlLnNsb3BlIHx8IDE7XG4gICAgY29uc3QgcmVzY2FsZUludGVyY2VwdCA9IGltYWdlLmludGVyY2VwdCB8fCAwO1xuXG4gICAgY29uc3QgZ2F0ZWRDaXJjbGVBcnJheSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaXJjbGUubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwaXhlbFZhbHVlID0gaW1hZ2VQaXhlbERhdGFbY2lyY2xlW2ldWzBdICsgY2lyY2xlW2ldWzFdICogcm93c107XG5cbiAgICAgIHBpeGVsVmFsdWUgPSBwaXhlbFZhbHVlICogcmVzY2FsZVNsb3BlICsgcmVzY2FsZUludGVyY2VwdDtcblxuICAgICAgaWYgKHBpeGVsVmFsdWUgPj0gZ2F0ZVZhbHVlc1swXSAmJiBwaXhlbFZhbHVlIDw9IGdhdGVWYWx1ZXNbMV0pIHtcbiAgICAgICAgZ2F0ZWRDaXJjbGVBcnJheS5wdXNoKGNpcmNsZVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFuR2F0ZWRDaXJjbGUoY2lyY2xlLCBnYXRlZENpcmNsZUFycmF5KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgc3RvcmUsIEVWRU5UUywgaW1wb3J0SW50ZXJuYWxNb2R1bGUgfSBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5pbXBvcnQgY29ybmVyc3RvbmUgZnJvbSAnY29ybmVyc3RvbmUtY29yZSc7XG5cbmltcG9ydCBCcnVzaDNEVG9vbCBmcm9tICcuL0JydXNoM0RUb29sLmpzJztcblxuY29uc3QgYnJ1c2hNb2R1bGUgPSBzdG9yZS5tb2R1bGVzLmJydXNoO1xuY29uc3QgeyBnZXRDaXJjbGUsIGRyYXdCcnVzaFBpeGVscyB9ID0gaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ3V0aWwvYnJ1c2hVdGlscycpO1xuXG5pbXBvcnQgZmxvb2RGaWxsIGZyb20gJy4vbi1kaW1lbnNpb25hbC1mbG9vZC1maWxsLmpzJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJ1c2gzREhVR2F0ZWRUb29sIGV4dGVuZHMgQnJ1c2gzRFRvb2wge1xuICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uID0ge30pIHtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnID0ge307XG4gICAgY29uc3QgaW5pdGlhbENvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKGRlZmF1bHRDb25maWcsIGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgc3VwZXIoaW5pdGlhbENvbmZpZ3VyYXRpb24pO1xuXG4gICAgdGhpcy5pbml0aWFsQ29uZmlndXJhdGlvbiA9IGluaXRpYWxDb25maWd1cmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIE1PVVNFX0RPV04gZXZlbnQuXG4gICAqXG4gICAqIEBvdmVycmlkZVxuICAgKiBAZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2dCAtIFRoZSBldmVudC5cbiAgICovXG4gIHByZU1vdXNlRG93bkNhbGxiYWNrKGV2dCkge1xuICAgIHRoaXMuYWN0aXZlR2F0ZVJhbmdlID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5hY3RpdmVHYXRlUmFuZ2UoKTtcblxuICAgIHRoaXMuX3N0YXJ0UGFpbnRpbmcoZXZ0KTtcblxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhaW50cyB0aGUgZGF0YSB0byB0aGUgY2FudmFzLlxuICAgKlxuICAgKiBAcHJvdGVjdGVkXG4gICAqIEBwYXJhbSAge09iamVjdH0gZXZ0IFRoZSBkYXRhIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIF9wYWludChldnQpIHtcbiAgICBjb25zdCBldmVudERhdGEgPSBldnQuZGV0YWlsO1xuICAgIGNvbnN0IHsgZWxlbWVudCwgaW1hZ2UgfSA9IGV2ZW50RGF0YTtcbiAgICBjb25zdCB7IHJvd3MsIGNvbHVtbnMgfSA9IGltYWdlO1xuICAgIGNvbnN0IHsgeCwgeSB9ID0gZXZlbnREYXRhLmN1cnJlbnRQb2ludHMuaW1hZ2U7XG5cbiAgICBpZiAoeCA8IDAgfHwgeCA+IGNvbHVtbnMgfHwgeSA8IDAgfHwgeSA+IHJvd3MpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCByYWRpdXMgPSBicnVzaE1vZHVsZS5zdGF0ZS5yYWRpdXM7XG4gICAgY29uc3QgcG9pbnRlckFycmF5ID0gdGhpcy5fZ2F0ZUNpcmNsZShpbWFnZSwgZ2V0Q2lyY2xlKHJhZGl1cywgcm93cywgY29sdW1ucywgeCwgeSkpO1xuXG4gICAgY29uc3QgeyBsYWJlbG1hcDNELCBjdXJyZW50SW1hZ2VJZEluZGV4LCBhY3RpdmVMYWJlbG1hcEluZGV4LCBzaG91bGRFcmFzZSB9ID0gdGhpcy5wYWludEV2ZW50RGF0YTtcblxuICAgIC8vIERyYXcgLyBFcmFzZSB0aGUgYWN0aXZlIGNvbG9yLlxuICAgIGRyYXdCcnVzaFBpeGVscyhwb2ludGVyQXJyYXksIGxhYmVsbWFwM0QsIGN1cnJlbnRJbWFnZUlkSW5kZXgsIGNvbHVtbnMsIHNob3VsZEVyYXNlKTtcblxuICAgIGNvcm5lcnN0b25lLnRyaWdnZXJFdmVudChlbGVtZW50LCBFVkVOVFMuTEFCRUxNQVBfTU9ESUZJRUQsIHtcbiAgICAgIGFjdGl2ZUxhYmVsbWFwSW5kZXhcbiAgICB9KTtcblxuICAgIGNvcm5lcnN0b25lLnVwZGF0ZUltYWdlKGV2dC5kZXRhaWwuZWxlbWVudCk7XG4gIH1cblxuICAvKipcbiAgICogX2dhdGVDaXJjbGUgLSBHaXZlbiBhbiBpbWFnZSBhbmQgYSBicnVzaCBjaXJjbGUsIGdhdGUgdGhlIGNpcmNsZSBiZXR3ZWVuXG4gICAqIHRoZSBzZXQgZ2F0ZSB2YWx1ZXMsIGFuZCB0aGVuIGNsZWFudXAgdGhlIHJlc3VsdGluZyBtYXNrIHVzaW5nIHRoZVxuICAgKiBob2xlRmlsbCBhbmQgc3RyYXlSZW1vdmUgcHJvcGVydGllcyBvZiB0aGUgYnJ1c2ggbW9kdWxlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGltYWdlICAgVGhlIGNvcm5lcnN0b25lIGltYWdlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJbXVtdfSBjaXJjbGUgIEFuIGFycmF5IG9mIGltYWdlIHBpeGVscyBjb250YWluZWQgd2l0aGluIHRoZSBicnVzaFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZS5cbiAgICogQHJldHVybnMge051bWJlcltdW119ICBBbiBhcnJheSBjb250YWluaW5nIHRoZSBnYXRlZC9jbGVhbmVkIHBpeGVscyB0byBmaWxsLlxuICAgKi9cbiAgX2dhdGVDaXJjbGUoaW1hZ2UsIGNpcmNsZSkge1xuICAgIGNvbnN0IHJvd3MgPSBpbWFnZS5yb3dzO1xuICAgIGNvbnN0IGltYWdlUGl4ZWxEYXRhID0gaW1hZ2UuZ2V0UGl4ZWxEYXRhKCk7XG4gICAgY29uc3QgZ2F0ZVJhbmdlID0gdGhpcy5hY3RpdmVHYXRlUmFuZ2U7XG4gICAgY29uc3QgcmVzY2FsZVNsb3BlID0gaW1hZ2Uuc2xvcGUgfHwgMTtcbiAgICBjb25zdCByZXNjYWxlSW50ZXJjZXB0ID0gaW1hZ2UuaW50ZXJjZXB0IHx8IDA7XG5cbiAgICBjb25zdCBnYXRlZENpcmNsZUFycmF5ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNpcmNsZS5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHBpeGVsVmFsdWUgPSBpbWFnZVBpeGVsRGF0YVtjaXJjbGVbaV1bMF0gKyBjaXJjbGVbaV1bMV0gKiByb3dzXTtcblxuICAgICAgcGl4ZWxWYWx1ZSA9IHBpeGVsVmFsdWUgKiByZXNjYWxlU2xvcGUgKyByZXNjYWxlSW50ZXJjZXB0O1xuXG4gICAgICBpZiAocGl4ZWxWYWx1ZSA+PSBnYXRlUmFuZ2VbMF0gJiYgcGl4ZWxWYWx1ZSA8PSBnYXRlUmFuZ2VbMV0pIHtcbiAgICAgICAgZ2F0ZWRDaXJjbGVBcnJheS5wdXNoKGNpcmNsZVtpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuX2NsZWFuR2F0ZWRDaXJjbGUoY2lyY2xlLCBnYXRlZENpcmNsZUFycmF5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBfZ2V0RWRnZVBpeGVscyAtIFJldHVybnMgdGhlIGluZGljaWVzIG9mIHRoZSBlZGdlIHBpeGVscyBmb3IgdGhlIGNpcmN1bGFyXG4gICAqIGJydXNoIGRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcltdW119IGRhdGEgVGhlIHNxdWFyZWQtY2lyY2xlIGRhdGEgd2hlcmUgYWxsIGNpcmNsZSBtZW1iZXJzIGFyZVxuICAgKiAgICAgICAgICAgICAgICAgICAgIDAsIGFuZCB2YWx1ZXMgb3V0c2lkZSB0aGUgY2lyY2xlIGFyZSAtMVxuICAgKiBAcmV0dXJucyB7TnVtYmVyW11bXX0gQW4gYXJyYXkgb2YgcG9zaXRpb25zIG9mIHRoZSBjaXJjbGUgZWRnZSBwaXhlbHMuXG4gICAqL1xuICBfZ2V0RWRnZVBpeGVscyhkYXRhKSB7XG4gICAgY29uc3QgZWRnZVBpeGVscyA9IFtdO1xuICAgIGNvbnN0IHhTaXplID0gZGF0YS5sZW5ndGg7XG4gICAgY29uc3QgeVNpemUgPSBkYXRhWzBdLmxlbmd0aDtcblxuICAgIC8vIGZpcnN0IGFuZCBsYXN0IHJvdyBhZGQgYWxsIG9mIHRvcCBhbmQgYm90dG9tIHdoaWNoIGFyZSBjaXJjbGUgbWVtYmVycy5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChkYXRhW2ldWzBdKSB7XG4gICAgICAgIGVkZ2VQaXhlbHMucHVzaChbaSwgMF0pO1xuICAgICAgICBlZGdlUGl4ZWxzLnB1c2goW2ksIHlTaXplIC0gMV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFsbCBvdGhlciByb3dzIC0gRmluZCBmaXJzdCBjaXJjbGUgbWVtYmVyLCBhbmQgdXNlIGl0cyBwb3NpdGlvbiB0byBhZGRcbiAgICAvLyBUaGUgZmlyc3QgYW5kIGxhc3QgY2lyY2xlIG1lbWJlciBvZiB0aGF0IHJvdy5cbiAgICBmb3IgKGxldCBqID0gMTsgaiA8IHlTaXplIC0gMTsgaisrKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKGRhdGFbaV1bal0pIHtcbiAgICAgICAgICBlZGdlUGl4ZWxzLnB1c2goW2ksIGpdKTtcbiAgICAgICAgICBlZGdlUGl4ZWxzLnB1c2goW3hTaXplIC0gMSAtIGksIGpdKTtcblxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGVkZ2VQaXhlbHM7XG4gIH1cblxuICAvKipcbiAgICogX2NsZWFuR2F0ZWRDaXJjbGUgLSBDbGVhbiB0aGUgSFUgZ2F0ZWQgY2lyY2xlIHVzaW5nIHRoZSBob2xlRmlsbCBhbmRcbiAgICogc3RyYXlSZW1vdmUgcHJvcGVydGllcyBvZiB0aGUgYnJ1c2ggbW9kdWxlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtOdW1iZXJbXVtdfSBjaXJjbGUgICAgIEFuIGFycmF5IG9mIHRoZSBwaXhlbCBpbmRpY2llcyB3aXRoaW4gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJ1c2ggY2lyY2xlLlxuICAgKiBAcGFyYW0gIHtOdW1iZXJbXVtdfSBnYXRlZENpcmNsZUFycmF5IEFuIGFycmF5IG9mIHRoZSBwaXhlbCBpbmRpY2llcyB3aXRoaW5cbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgZ2F0ZSByYW5nZS5cbiAgICogQHJldHVybnMge051bWJlcltdW119ICAgICAgICAgICAgICAgICAgVGhlIGNsZWFuZWQgYXJyYXkgb2YgcGl4ZWwgaW5kaWNpZXMuXG4gICAqL1xuICBfY2xlYW5HYXRlZENpcmNsZShjaXJjbGUsIGdhdGVkQ2lyY2xlQXJyYXkpIHtcbiAgICBjb25zdCB7IG1heCwgbWluIH0gPSB0aGlzLl9nZXRCb3VuZGluZ0JveE9mQ2lyY2xlKGNpcmNsZSk7XG5cbiAgICBjb25zdCB4U2l6ZSA9IG1heFswXSAtIG1pblswXSArIDE7XG4gICAgY29uc3QgeVNpemUgPSBtYXhbMV0gLSBtaW5bMV0gKyAxO1xuXG4gICAgY29uc3QgZGF0YSA9IHRoaXMuX2JveEdhdGVkQ2lyY2xlKGNpcmNsZSwgZ2F0ZWRDaXJjbGVBcnJheSwgbWluLCB4U2l6ZSwgeVNpemUpO1xuXG4gICAgLy8gRGVmaW5lIG91ciBnZXR0ZXIgZm9yIGFjY2Vzc2luZyB0aGUgZGF0YSBzdHJ1Y3R1cmUuXG4gICAgZnVuY3Rpb24gZ2V0dGVyKHgsIHkpIHtcbiAgICAgIHJldHVybiBkYXRhW3hdW3ldO1xuICAgIH1cblxuICAgIHRoaXMuX2Zsb29kRmlsbEVtcHR5UmVnaW9uc0Zyb21FZGdlcyhkYXRhLCBnZXR0ZXIpO1xuXG4gICAgY29uc3QgeyBob2xlcywgcmVnaW9ucyB9ID0gdGhpcy5fZmluZEhvbGVzQW5kUmVnaW9ucyhjaXJjbGUsIGRhdGEsIGdldHRlciwgbWluKTtcblxuICAgIGNvbnN0IGxhcmdlc3RSZWdpb25BcmVhID0gdGhpcy5fZ2V0QXJlYU9mTGFyZ2VzdFJlZ2lvbihyZWdpb25zKTtcblxuICAgIC8vIERlbGV0ZSBhbnkgcmVnaW9uIG91dHNpZGUgdGhlIGBzdHJheVJlbW92ZWAgdGhyZXNob2xkLlxuICAgIGZvciAobGV0IHIgPSAwOyByIDwgcmVnaW9ucy5sZW5ndGg7IHIrKykge1xuICAgICAgY29uc3QgcmVnaW9uID0gcmVnaW9uc1tyXTtcblxuICAgICAgaWYgKHJlZ2lvbi5sZW5ndGggPD0gKGJydXNoTW9kdWxlLnN0YXRlLnN0cmF5UmVtb3ZlIC8gMTAwLjApICogbGFyZ2VzdFJlZ2lvbkFyZWEpIHtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCByZWdpb24ubGVuZ3RoOyBwKyspIHtcbiAgICAgICAgICBkYXRhW3JlZ2lvbltwXVswXV1bcmVnaW9uW3BdWzFdXSA9IDM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBGaWxsIGluIGFueSBob2xlcyBzbWFsbGVyIHRoYW4gdGhlIGBob2xlRmlsbGAgdGhyZXNob2xkLlxuICAgIGZvciAobGV0IHIgPSAwOyByIDwgaG9sZXMubGVuZ3RoOyByKyspIHtcbiAgICAgIGNvbnN0IGhvbGUgPSBob2xlc1tyXTtcblxuICAgICAgaWYgKGhvbGUubGVuZ3RoIDw9IChicnVzaE1vZHVsZS5zdGF0ZS5ob2xlRmlsbCAvIDEwMC4wKSAqIGxhcmdlc3RSZWdpb25BcmVhKSB7XG4gICAgICAgIGZvciAobGV0IHAgPSAwOyBwIDwgaG9sZS5sZW5ndGg7IHArKykge1xuICAgICAgICAgIGRhdGFbaG9sZVtwXVswXV1baG9sZVtwXVsxXV0gPSA1O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgZmlsbGVkR2F0ZWRDaXJjbGVBcnJheSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4U2l6ZTsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHlTaXplOyBqKyspIHtcbiAgICAgICAgaWYgKGRhdGFbaV1bal0gPT09IDUpIHtcbiAgICAgICAgICBmaWxsZWRHYXRlZENpcmNsZUFycmF5LnB1c2goW2kgKyBtaW5bMF0sIGogKyBtaW5bMV1dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBmaWxsZWRHYXRlZENpcmNsZUFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIF9nZXRCb3VuZGluZ0JveE9mQ2lyY2xlIC0gUmV0dXJucyB0d28gcG9pbnRzIGRlZmluaW5nIHRoZSBleHRlbnQgb2YgdGhlIGNpcmNsZS5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyW11bXX0gY2lyY2xlICBBbiBhcnJheSBvZiB0aGUgcGl4ZWwgaW5kaWNpZXMgd2l0aGluIHRoZSBicnVzaCBjaXJjbGUuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9ICAgICAgICBUaGUgbWluaW11bSBhbmQgbWF4aW11bSBvZiB0aGUgZXh0ZW50LlxuICAgKi9cbiAgX2dldEJvdW5kaW5nQm94T2ZDaXJjbGUoY2lyY2xlKSB7XG4gICAgY29uc3QgbWF4ID0gW2NpcmNsZVswXVswXSwgY2lyY2xlWzBdWzFdXTtcbiAgICBjb25zdCBtaW4gPSBbY2lyY2xlWzBdWzBdLCBjaXJjbGVbMF1bMV1dO1xuXG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPCBjaXJjbGUubGVuZ3RoOyBwKyspIHtcbiAgICAgIGNvbnN0IFtpLCBqXSA9IGNpcmNsZVtwXTtcblxuICAgICAgaWYgKGkgPiBtYXhbMF0pIHtcbiAgICAgICAgbWF4WzBdID0gaTtcbiAgICAgIH0gZWxzZSBpZiAoaSA8IG1pblswXSkge1xuICAgICAgICBtaW5bMF0gPSBpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaiA+IG1heFsxXSkge1xuICAgICAgICBtYXhbMV0gPSBqO1xuICAgICAgfSBlbHNlIGlmIChqIDwgbWluWzFdKSB7XG4gICAgICAgIG1pblsxXSA9IGo7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgbWF4LCBtaW4gfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBfYm94R2F0ZWRDaXJjbGUgLSBHZW5lcmF0ZXMgYSByZWN0YW5ndWxhciBkYXRhc2V0IGZyb20gdGhlIGJydXNoIGNpcmNsZVxuICAgKiAgICAgICAgICAgICAgICAgICBmb3IgZWZmaWNpZW50IGZsb29kIGZpbGwvY2xlYW5pbmcuXG4gICAqXG4gICAqIEBwYXJhbSAge3R5cGV9IGNpcmNsZSAgICAgICAgICAgQW4gYXJyYXkgb2YgdGhlIHBpeGVsIGluZGljaWVzIHdpdGhpbiB0aGUgYnJ1c2ggY2lyY2xlLlxuICAgKiBAcGFyYW0gIHt0eXBlfSBnYXRlZENpcmNsZUFycmF5IFRoZSBjaXJjbGUgYXJyYXkgd2l0aCB0aGUgZ2F0ZSBhcHBsaWVkLlxuICAgKiBAcGFyYW0gIHt0eXBlfSBtaW4gICAgICAgICAgICAgIFRoZSBsb2NhdGlvbiBvZiB0aGUgdG9wIGxlZnQgcGl4ZWwgb2YgdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVkIGRhdGFzZXQgd2l0aCByZXNwZWN0IHRvIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVybHlpbmcgaW1hZ2UgZGF0YS5cbiAgICogQHBhcmFtICB7dHlwZX0geFNpemUgICAgICAgICAgICBUaGUgeCBzaXplIG9mIHRoZSBnZW5lcmF0ZWQgYm94LlxuICAgKiBAcGFyYW0gIHt0eXBlfSB5U2l6ZSAgICAgICAgICAgIFRoZSB5IHNpemUgb2YgdGhlIGdlbmVyYXRlZCBib3guXG4gICAqIEByZXR1cm5zIHtudW1iZXJbXVtdfSAgICAgICAgICAgVGhlIGRhdGEgd2l0aCBwaXhlbCBbMCwwXSBjZW50ZXJlZCBvbiBtaW4sXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIGNpcmNsZSBtYXJrZWQgd2l0aCAxIGZvciB1bm9jY3VwaWVkLCAyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIG9jY3VwaWVkIGFuZCAwIGZvciBvdXRzaWRlIG9mIHRoZSBjaXJjbGUgYm91bmRzLlxuICAgKi9cbiAgX2JveEdhdGVkQ2lyY2xlKGNpcmNsZSwgZ2F0ZWRDaXJjbGVBcnJheSwgbWluLCB4U2l6ZSwgeVNpemUpIHtcbiAgICBjb25zdCBkYXRhID0gW107XG5cbiAgICAvLyBGaWxsIGluIHNxdWFyZSBhcyAwIChvdXQgb2YgYm91bmRzL2lnbm9yZSkuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4U2l6ZTsgaSsrKSB7XG4gICAgICBkYXRhW2ldID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHlTaXplKTtcbiAgICB9XG5cbiAgICAvLyBmaWxsIGNpcmNsZSBpbiBhcyAxLlxuICAgIGZvciAobGV0IHAgPSAwOyBwIDwgY2lyY2xlLmxlbmd0aDsgcCsrKSB7XG4gICAgICBjb25zdCBpID0gY2lyY2xlW3BdWzBdIC0gbWluWzBdO1xuICAgICAgY29uc3QgaiA9IGNpcmNsZVtwXVsxXSAtIG1pblsxXTtcblxuICAgICAgZGF0YVtpXVtqXSA9IDE7XG4gICAgfVxuXG4gICAgLy8gZmlsbCBnYXRlZCByZWdpb24gYXMgMi5cbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IGdhdGVkQ2lyY2xlQXJyYXkubGVuZ3RoOyBwKyspIHtcbiAgICAgIGNvbnN0IGkgPSBnYXRlZENpcmNsZUFycmF5W3BdWzBdIC0gbWluWzBdO1xuICAgICAgY29uc3QgaiA9IGdhdGVkQ2lyY2xlQXJyYXlbcF1bMV0gLSBtaW5bMV07XG5cbiAgICAgIGRhdGFbaV1bal0gPSAyO1xuICAgIH1cblxuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIF9mbG9vZEZpbGxFbXB0eVJlZ2lvbnNGcm9tRWRnZXMgLSBGbG9vZCBmaWxscyBlbXB0eSByZWdpb25zIHdoaWNoIHRvdWNoIHRoZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRnZSBvZiB0aGUgY2lyY2xlIHdpdGggdGhlIHZhbHVlIDMuXG4gICAqXG4gICAqIEBwYXJhbSAge251bWJlcltdW119IGRhdGEgVGhlIGRhdGEgdG8gZmxvb2QgZmlsbC5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gZ2V0dGVyIFRoZSBnZXR0ZXIgZnVuY3Rpb24gZmxvb2RGaWxsIHVzZXMgdG8gYWNjZXNzIGFycmF5XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50cy5cbiAgICogQG1vZGlmaWVzIGRhdGFcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBfZmxvb2RGaWxsRW1wdHlSZWdpb25zRnJvbUVkZ2VzKGRhdGEsIGdldHRlcikge1xuICAgIGNvbnN0IGVkZ2VQaXhlbHMgPSB0aGlzLl9nZXRFZGdlUGl4ZWxzKGRhdGEpO1xuXG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPCBlZGdlUGl4ZWxzLmxlbmd0aDsgcCsrKSB7XG4gICAgICBjb25zdCBpID0gZWRnZVBpeGVsc1twXVswXTtcbiAgICAgIGNvbnN0IGogPSBlZGdlUGl4ZWxzW3BdWzFdO1xuXG4gICAgICBpZiAoZGF0YVtpXVtqXSA9PT0gMSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBmbG9vZEZpbGwoe1xuICAgICAgICAgIGdldHRlcjogZ2V0dGVyLFxuICAgICAgICAgIHNlZWQ6IFtpLCBqXVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBmbG9vZGVkID0gcmVzdWx0LmZsb29kZWQ7XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBmbG9vZGVkLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgZGF0YVtmbG9vZGVkW2tdWzBdXVtmbG9vZGVkW2tdWzFdXSA9IDM7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogX2ZpbmRIb2xlc0FuZFJlZ2lvbnMgLSBGaW5kcyBhbGwgdGhlIGhvbGVzIGFuZCByZWdpb25zIGFuZCByZXR1cm5zIHRoZWlyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zIHdpdGhpbiB0aGUgMkQgZGF0YSBzZXQuIFNldHMgdGhlIHZhbHVlIG9mXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgaG9sZXMgYW5kIHJlZ2lvbnMgdG8gNCBhbmQgNSwgcmVzcGVjdGl2ZWx5LlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJbXVtdfSBjaXJjbGUgQW4gYXJyYXkgb2YgdGhlIHBpeGVsIGluZGljaWVzIHdpdGhpbiB0aGUgYnJ1c2ggY2lyY2xlLlxuICAgKiBAcGFyYW0gIHtudW1iZXJbXVtdfSBkYXRhICAgVGhlIGRhdGEgc2V0LlxuICAgKiBAcGFyYW0gIHtmdW5jdGlvbn0gICBnZXR0ZXIgVGhlIGdldHRlciBmdW5jdGlvbiBmbG9vZEZpbGwgdXNlcyB0byBhY2Nlc3MgYXJyYXlcbiAgICogICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLlxuICAgKiBAcGFyYW0gIHtudW1iZXJbXX0gICBtaW4gICAgVGhlIGxvY2F0aW9uIG9mIHRoZSB0b3AgbGVmdCBwaXhlbCBvZiB0aGUgZGF0YXNldFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgd2l0aCByZXNwZWN0IHRvIHRoZSB1bmRlcmx5aW5nIGltYWdlIGRhdGEuXG4gICAqIEByZXR1cm5zIHtvYmplY3R9ICAgIEFuIG9iamVjdCBjb250YWluaW5nIGFycmF5cyBvZiB0aGUgb2NjdXBhdGlvbiBvZiBhbGxcbiAgICogICAgICAgICAgICAgICAgICAgICAgcmVnaW9ucyBhbmQgaG9sZXMgaW4gdGhlIGRhdGFzZXQuXG4gICAqL1xuICBfZmluZEhvbGVzQW5kUmVnaW9ucyhjaXJjbGUsIGRhdGEsIGdldHRlciwgbWluKSB7XG4gICAgY29uc3QgaG9sZXMgPSBbXTtcbiAgICBjb25zdCByZWdpb25zID0gW107XG5cbiAgICAvLyBGaW5kIGVhY2ggaG9sZSBhbmQgcGFpbnQgdGhlbSAzLlxuICAgIC8vIEZpbmQgY29udGlndW91cyByZWdpb25zIGFuZCBwYWludCB0aGVtIDQuXG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPCBjaXJjbGUubGVuZ3RoOyBwKyspIHtcbiAgICAgIGNvbnN0IGkgPSBjaXJjbGVbcF1bMF0gLSBtaW5bMF07XG4gICAgICBjb25zdCBqID0gY2lyY2xlW3BdWzFdIC0gbWluWzFdO1xuXG4gICAgICBpZiAoZGF0YVtpXVtqXSA9PT0gMSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSBmbG9vZEZpbGwoe1xuICAgICAgICAgIGdldHRlcjogZ2V0dGVyLFxuICAgICAgICAgIHNlZWQ6IFtpLCBqXVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBmbG9vZGVkID0gcmVzdWx0LmZsb29kZWQ7XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBmbG9vZGVkLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgZGF0YVtmbG9vZGVkW2tdWzBdXVtmbG9vZGVkW2tdWzFdXSA9IDQ7XG4gICAgICAgIH1cblxuICAgICAgICBob2xlcy5wdXNoKGZsb29kZWQpO1xuICAgICAgfSBlbHNlIGlmIChkYXRhW2ldW2pdID09PSAyKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZsb29kRmlsbCh7XG4gICAgICAgICAgZ2V0dGVyOiBnZXR0ZXIsXG4gICAgICAgICAgc2VlZDogW2ksIGpdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZsb29kZWQgPSByZXN1bHQuZmxvb2RlZDtcblxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGZsb29kZWQubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBkYXRhW2Zsb29kZWRba11bMF1dW2Zsb29kZWRba11bMV1dID0gNTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlZ2lvbnMucHVzaChmbG9vZGVkKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBob2xlcywgcmVnaW9ucyB9O1xuICB9XG5cbiAgLyoqXG4gICAqIF9nZXRBcmVhT2ZMYXJnZXN0UmVnaW9uIC0gUmV0dXJucyB0aGUgbnVtYmVyIG9mIHBpeGVscyBpbiB0aGUgbGFyZ2VzdFxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbiBvZiBhIGxpc3Qgb2YgcmVnaW9ucy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyW11bXVtdfSByZWdpb25zIEFuIGFycmF5IG9mIHJlZ2lvbnMgb2YgMkQgcG9pbnRzLlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSAgICAgICAgVGhlIGFyZWEgb2YgdGhlIGxhcmdlc3QgcmVnaW9uIGluIHBpeGVscy5cbiAgICovXG4gIF9nZXRBcmVhT2ZMYXJnZXN0UmVnaW9uKHJlZ2lvbnMpIHtcbiAgICBsZXQgbGFyZ2VzdFJlZ2lvbkFyZWEgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZWdpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVnaW9uc1tpXS5sZW5ndGggPiBsYXJnZXN0UmVnaW9uQXJlYSkge1xuICAgICAgICBsYXJnZXN0UmVnaW9uQXJlYSA9IHJlZ2lvbnNbaV0ubGVuZ3RoO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBsYXJnZXN0UmVnaW9uQXJlYTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQnJ1c2hUb29sLCBzdG9yZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCBnZW5lcmF0ZUJydXNoTWV0YWRhdGEgZnJvbSAnLi4vdXRpbC9nZW5lcmF0ZUJydXNoTWV0YWRhdGEuanMnO1xuXG5jb25zdCBicnVzaE1vZHVsZSA9IHN0b3JlLm1vZHVsZXMuYnJ1c2g7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJydXNoM0RUb29sIGV4dGVuZHMgQnJ1c2hUb29sIHtcbiAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiA9IHt9KSB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IHt9O1xuICAgIGNvbnN0IGluaXRpYWxDb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q29uZmlnLCBjb25maWd1cmF0aW9uKTtcblxuICAgIHN1cGVyKGluaXRpYWxDb25maWd1cmF0aW9uKTtcblxuICAgIHRoaXMuaW5pdGlhbENvbmZpZ3VyYXRpb24gPSBpbml0aWFsQ29uZmlndXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXNlIHBhaW50aW5nIHdpdGggYmFzZUJydXNoVG9vbFxuICAgKlxuICAgKiBAb3ZlcnJpZGUgQHByb3RlY3RlZFxuICAgKiBAZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2dCAtIFRoZSBldmVudC5cbiAgICovXG4gIF9zdGFydFBhaW50aW5nKGV2dCkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGV2dC5kZXRhaWw7XG4gICAgY29uc3QgZWxlbWVudCA9IGV2ZW50RGF0YS5lbGVtZW50O1xuXG4gICAgY29uc3QgeyBsYWJlbG1hcDNELCBjdXJyZW50SW1hZ2VJZEluZGV4LCBhY3RpdmVMYWJlbG1hcEluZGV4IH0gPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmdldEFuZENhY2hlTGFiZWxtYXAyRChlbGVtZW50KTtcblxuICAgIGNvbnN0IHNob3VsZEVyYXNlID0gdGhpcy5faXNDdHJsRG93bihldmVudERhdGEpIHx8IHRoaXMuY29uZmlndXJhdGlvbi5hbHdheXNFcmFzZU9uQ2xpY2s7XG5cbiAgICB0aGlzLnBhaW50RXZlbnREYXRhID0ge1xuICAgICAgbGFiZWxtYXAzRCxcbiAgICAgIGN1cnJlbnRJbWFnZUlkSW5kZXgsXG4gICAgICBhY3RpdmVMYWJlbG1hcEluZGV4LFxuICAgICAgc2hvdWxkRXJhc2VcbiAgICB9O1xuXG4gICAgY29uc3Qgc2VnbWVudEluZGV4ID0gbGFiZWxtYXAzRC5hY3RpdmVTZWdtZW50SW5kZXg7XG4gICAgbGV0IG1ldGFkYXRhID0gbGFiZWxtYXAzRC5tZXRhZGF0YVtzZWdtZW50SW5kZXhdO1xuXG4gICAgaWYgKCFtZXRhZGF0YSkge1xuICAgICAgbWV0YWRhdGEgPSBnZW5lcmF0ZUJydXNoTWV0YWRhdGEoJ1VubmFtZWQgU2VnbWVudCcpO1xuXG4gICAgICBicnVzaE1vZHVsZS5zZXR0ZXJzLm1ldGFkYXRhKGVsZW1lbnQsIGFjdGl2ZUxhYmVsbWFwSW5kZXgsIHNlZ21lbnRJbmRleCwgbWV0YWRhdGEpO1xuICAgIH1cblxuICAgIC8vIE1ldGFkYXRhIGFzc2lnbmVkLCBzdGFydCBkcmF3aW5nLlxuICAgIGlmIChldmVudERhdGEuY3VycmVudFBvaW50cykge1xuICAgICAgdGhpcy5fcGFpbnQoZXZ0KTtcbiAgICB9XG4gICAgdGhpcy5fZHJhd2luZyA9IHRydWU7XG4gICAgdGhpcy5fc3RhcnRMaXN0ZW5pbmdGb3JNb3VzZVVwKGVsZW1lbnQpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBGcmVlaGFuZFJvaVNjdWxwdG9yVG9vbCwgdG9vbENvbG9ycywgc3RvcmUsIGdldFRvb2xTdGF0ZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCB7IHVwZGF0ZUltYWdlIH0gZnJvbSAnY29ybmVyc3RvbmUtY29yZSc7XG5pbXBvcnQgaW50ZXJwb2xhdGUgZnJvbSAnLi4vdXRpbC9mcmVlaGFuZEludGVycG9sYXRlL2ludGVycG9sYXRlLmpzJztcblxuY29uc3QgeyBtb2R1bGVzLCBzdGF0ZSB9ID0gc3RvcmU7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wgZXh0ZW5kcyBGcmVlaGFuZFJvaVNjdWxwdG9yVG9vbCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb24gPSB7fSkge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBjb25maWd1cmF0aW9uOiBnZXREZWZhdWx0RnJlZWhhbmRTY3VscHRlck1vdXNlVG9vbENvbmZpZ3VyYXRpb24oKVxuICAgIH07XG4gICAgY29uc3QgaW5pdGlhbENvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKGRlZmF1bHRDb25maWcsIGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgc3VwZXIoaW5pdGlhbENvbmZpZ3VyYXRpb24pO1xuXG4gICAgLy8gQ3JlYXRlIGJvdW5kIGZ1bmN0aW9ucyBmb3IgcHJpdmF0ZSBldmVudCBsb29wLlxuICAgIHRoaXMuYWN0aXZlTW91c2VVcENhbGxiYWNrID0gdGhpcy5hY3RpdmVNb3VzZVVwQ2FsbGJhY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZWxlY3QgdGhlIGZyZWVoYW5kIHRvb2wgdG8gYmUgZWRpdGVkLiBEb24ndCBhbGxvdyBzZWxlY3Rpbmcgb2YgbG9ja2VkXG4gICAqIFJPSUNvbnRvdXJzLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnREYXRhIC0gRGF0YSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cbiAgICovXG4gIF9zZWxlY3RGcmVlaGFuZFRvb2woZXZlbnREYXRhKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudERhdGEuZWxlbWVudDtcbiAgICBjb25zdCBjbG9zZXN0VG9vbEluZGV4ID0gdGhpcy5fZ2V0Q2xvc2VzdEZyZWVoYW5kVG9vbE9uRWxlbWVudChlbGVtZW50LCBldmVudERhdGEpO1xuXG4gICAgaWYgKGNsb3Nlc3RUb29sSW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHRvb2xTdGF0ZSA9IGdldFRvb2xTdGF0ZShlbGVtZW50LCB0aGlzLnJlZmVyZW5jZWRUb29sTmFtZSk7XG5cbiAgICBjb25zdCB0b29sRGF0YSA9IHRvb2xTdGF0ZS5kYXRhW2Nsb3Nlc3RUb29sSW5kZXhdO1xuXG4gICAgY29uc3QgaXNMb2NrZWQgPSB0b29sRGF0YS5yZWZlcmVuY2VkU3RydWN0dXJlU2V0LmlzTG9ja2VkO1xuXG4gICAgaWYgKGlzTG9ja2VkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uZmlnLmhvdmVyQ29sb3IgPSB0b29sRGF0YS5yZWZlcmVuY2VkUk9JQ29udG91ci5jb2xvcjtcblxuICAgIGNvbmZpZy5jdXJyZW50VG9vbCA9IGNsb3Nlc3RUb29sSW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgTU9VU0VfVVAgZHVyaW5nIHRoZSBhY3RpdmUgbG9vcC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2dCAtIFRoZSBldmVudC5cbiAgICovXG4gIF9hY3RpdmVFbmQoZXZ0KSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZXZ0LmRldGFpbDtcbiAgICBjb25zdCBlbGVtZW50ID0gZXZlbnREYXRhLmVsZW1lbnQ7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uO1xuXG4gICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG5cbiAgICBzdGF0ZS5pc011bHRpUGFydFRvb2xBY3RpdmUgPSBmYWxzZTtcblxuICAgIHRoaXMuX2dldE1vdXNlTG9jYXRpb24oZXZlbnREYXRhKTtcbiAgICB0aGlzLl9pbnZhbGlkYXRlVG9vbERhdGEoZXZlbnREYXRhKTtcblxuICAgIGNvbmZpZy5tb3VzZVVwUmVuZGVyID0gdHJ1ZTtcblxuICAgIHRoaXMuX2RlYWN0aXZhdGVTY3VscHQoZWxlbWVudCk7XG5cbiAgICBjb25zdCB0b29sRGF0YSA9IGdldFRvb2xTdGF0ZShlbGVtZW50LCB0aGlzLnJlZmVyZW5jZWRUb29sTmFtZSk7XG4gICAgY29uc3QgZGF0YSA9IHRvb2xEYXRhLmRhdGFbY29uZmlnLmN1cnJlbnRUb29sXTtcblxuICAgIGlmIChtb2R1bGVzLmZyZWVoYW5kM0QuZ2V0dGVycy5pbnRlcnBvbGF0ZSgpKSB7XG4gICAgICBpbnRlcnBvbGF0ZShkYXRhKTtcbiAgICB9XG5cbiAgICAvLyBVcGRhdGUgdGhlIGltYWdlXG4gICAgdXBkYXRlSW1hZ2UoZXZlbnREYXRhLmVsZW1lbnQpO1xuXG4gICAgcHJldmVudFByb3BhZ2F0aW9uKGV2dCk7XG4gIH1cblxuICAvKipcbiAgICogSW52YWxpZGF0ZSB0aGUgZnJlZWhhbmQgdG9vbCBkYXRhLCB0aXJnZ2VyaW5nIHJlLWNhbGN1bGF0aW9uIG9mIHN0YXRpc3RpY3MuXG4gICAqXG4gICAqIEBwcml2YXRlIEBvdmVycmlkZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZlbnREYXRhIC0gRGF0YSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSBldmVudC5cbiAgICovXG4gIF9pbnZhbGlkYXRlVG9vbERhdGEoZXZlbnREYXRhKSB7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudERhdGEuZWxlbWVudDtcbiAgICBjb25zdCB0b29sRGF0YSA9IGdldFRvb2xTdGF0ZShlbGVtZW50LCB0aGlzLnJlZmVyZW5jZWRUb29sTmFtZSk7XG4gICAgY29uc3QgZGF0YSA9IHRvb2xEYXRhLmRhdGFbY29uZmlnLmN1cnJlbnRUb29sXTtcblxuICAgIGRhdGEuaW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgIGRhdGEuaW50ZXJwb2xhdGVkID0gZmFsc2U7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBkZWZhdWx0IGZyZWVoYW5kU2N1bHB0ZXJNb3VzZVRvb2wgY29uZmlndXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBkZWZhdWx0IGNvbmZpZ3VyYXRpb24gb2JqZWN0LlxuICovXG5mdW5jdGlvbiBnZXREZWZhdWx0RnJlZWhhbmRTY3VscHRlck1vdXNlVG9vbENvbmZpZ3VyYXRpb24oKSB7XG4gIHJldHVybiB7XG4gICAgbW91c2VMb2NhdGlvbjoge1xuICAgICAgaGFuZGxlczoge1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGhpZ2hsaWdodDogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbWluU3BhY2luZzogMSxcbiAgICBjdXJyZW50VG9vbDogbnVsbCxcbiAgICBkcmFnQ29sb3I6IHRvb2xDb2xvcnMuZ2V0QWN0aXZlQ29sb3IoKSxcbiAgICBob3ZlckNvbG9yOiB0b29sQ29sb3JzLmdldFRvb2xDb2xvcigpLFxuXG4gICAgLyogLS0tIEhvdmVyIG9wdGlvbnMgLS0tXG4gICAgc2hvd0N1cnNvck9uSG92ZXI6ICAgICAgICBTaG93cyBhIHByZXZpZXcgb2YgdGhlIHNjdWxwdGluZyByYWRpdXMgb24gaG92ZXIuXG4gICAgbGltaXRSYWRpdXNPdXRzaWRlUmVnaW9uOiBMaW1pdCBtYXggdG9vbHNpemUgb3V0c2lkZSB0aGUgc3ViamVjdCBST0kgYmFzZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uIHN1YmplY3QgUk9JIGFyZWEuXG4gICAgaG92ZXJDdXJzb3JGYWRlQWxwaGE6ICAgICBBbHBoYSB0byBmYWRlIHRvIHdoZW4gdG9vbCB2ZXJ5IGRpc3RhbnQgZnJvbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViamVjdCBST0kuXG4gICAgaG92ZXJDdXJzb3JGYWRlRGlzdGFuY2U6ICBEaXN0YW5jZSBmcm9tIFJPSSBpbiB3aGljaCB0byBmYWRlIHRoZSBob3ZlckN1cnNvclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGluIHVuaXRzIG9mIHJhZGlpKS5cbiAgICAqL1xuICAgIHNob3dDdXJzb3JPbkhvdmVyOiB0cnVlLFxuICAgIGxpbWl0UmFkaXVzT3V0c2lkZVJlZ2lvbjogdHJ1ZSxcbiAgICBob3ZlckN1cnNvckZhZGVBbHBoYTogMC41LFxuICAgIGhvdmVyQ3Vyc29yRmFkZURpc3RhbmNlOiAxLjJcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJldmVudFByb3BhZ2F0aW9uKGV2dCkge1xuICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG59XG4iLCJpbXBvcnQgeyBtZXRhRGF0YSwgdXBkYXRlSW1hZ2UsIHBpeGVsVG9DYW52YXMsIGdldEVuYWJsZWRFbGVtZW50LCBnZXRQaXhlbHMgfSBmcm9tICdjb3JuZXJzdG9uZS1jb3JlJztcbmltcG9ydCB7IHBvaW50IH0gZnJvbSAnY29ybmVyc3RvbmUtbWF0aCc7XG5pbXBvcnQge1xuICBpbXBvcnRJbnRlcm5hbE1vZHVsZSxcbiAgRnJlZWhhbmRSb2lUb29sLFxuICBnZXRUb29sU3RhdGUsXG4gIHN0b3JlLFxuICB0b29sU3R5bGUsXG4gIHRvb2xDb2xvcnMsXG4gIEVWRU5UU1xufSBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5cbmltcG9ydCBnZW5lcmF0ZVVJRCBmcm9tICcuLi91dGlsL2dlbmVyYXRlVUlELmpzJztcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tICcuLi91dGlsL2ZyZWVoYW5kSW50ZXJwb2xhdGUvaW50ZXJwb2xhdGUuanMnO1xuaW1wb3J0IGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50IGZyb20gJy4uL3V0aWwvZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQuanMnO1xuXG4vLyBDb3JuZXJzdG9uZSAzcmQgcGFydHkgZGV2IGtpdCBpbXBvcnRzXG5jb25zdCB7IGluc2VydE9yRGVsZXRlLCBmcmVlaGFuZEFyZWEsIGNhbGN1bGF0ZUZyZWVoYW5kU3RhdGlzdGljcyB9ID0gaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ3V0aWwvZnJlZWhhbmRVdGlscycpO1xuY29uc3QgZHJhdyA9IGltcG9ydEludGVybmFsTW9kdWxlKCdkcmF3aW5nL2RyYXcnKTtcbmNvbnN0IGRyYXdKb2luZWRMaW5lcyA9IGltcG9ydEludGVybmFsTW9kdWxlKCdkcmF3aW5nL2RyYXdKb2luZWRMaW5lcycpO1xuY29uc3QgZHJhd0hhbmRsZXMgPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgnZHJhd2luZy9kcmF3SGFuZGxlcycpO1xuY29uc3QgZHJhd0xpbmtlZFRleHRCb3ggPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgnZHJhd2luZy9kcmF3TGlua2VkVGV4dEJveCcpO1xuY29uc3QgbW92ZUhhbmRsZU5lYXJJbWFnZVBvaW50ID0gaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ21hbmlwdWxhdG9ycy9tb3ZlSGFuZGxlTmVhckltYWdlUG9pbnQnKTtcbmNvbnN0IGdldE5ld0NvbnRleHQgPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgnZHJhd2luZy9nZXROZXdDb250ZXh0Jyk7XG5jb25zdCBtb2R1bGVzID0gc3RvcmUubW9kdWxlcztcbmNvbnN0IG51bWJlcnNXaXRoQ29tbWFzID0gaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ3V0aWwvbnVtYmVyc1dpdGhDb21tYXMnKTtcbmNvbnN0IHBvaW50SW5zaWRlQm91bmRpbmdCb3ggPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgndXRpbC9wb2ludEluc2lkZUJvdW5kaW5nQm94Jyk7XG5jb25zdCBjYWxjdWxhdGVTVVYgPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgndXRpbC9jYWxjdWxhdGVTVVYnKTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJlZWhhbmRSb2kzRFRvb2wgZXh0ZW5kcyBGcmVlaGFuZFJvaVRvb2wge1xuICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uID0ge30pIHtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICAgICAgY29uZmlndXJhdGlvbjogZGVmYXVsdEZyZWVoYW5kQ29uZmlndXJhdGlvbigpXG4gICAgfTtcbiAgICBjb25zdCBpbml0aWFsQ29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdENvbmZpZywgY29uZmlndXJhdGlvbik7XG5cbiAgICBzdXBlcihpbml0aWFsQ29uZmlndXJhdGlvbik7XG5cbiAgICB0aGlzLmNvbmZpZ3VyYXRpb24uYWx3YXlzU2hvd0hhbmRsZXMgPSBmYWxzZTtcbiAgICB0aGlzLl9mcmVlaGFuZDNEU3RvcmUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG5cbiAgICB0aGlzLl9vbk1lYXN1cmVtZW50UmVtb3ZlZCA9IHRoaXMuX29uTWVhc3VyZW1lbnRSZW1vdmVkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5fZHJhd2luZ01vdXNlVXBDYWxsYmFjayA9IHRoaXMuX2RyYXdpbmdNb3VzZVVwQ2FsbGJhY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIG1lYXN1cmVtZW50IGRhdGEgZm9yIHRoaXMgdG9vbC5cbiAgICogQG92ZXJyaWRlIEBwdWJsaWMgQG1ldGhvZFxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gZXZlbnREYXRhXG4gICAqIEByZXR1cm5zIHtvYmplY3R9IG1lYXN1cmVtZW50RGF0YVxuICAgKi9cbiAgY3JlYXRlTmV3TWVhc3VyZW1lbnQoZXZlbnREYXRhKSB7XG4gICAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gdGhpcy5fZnJlZWhhbmQzRFN0b3JlO1xuICAgIGNvbnN0IGdvb2RFdmVudERhdGEgPSBldmVudERhdGEgJiYgZXZlbnREYXRhLmN1cnJlbnRQb2ludHMgJiYgZXZlbnREYXRhLmN1cnJlbnRQb2ludHMuaW1hZ2U7XG5cbiAgICBpZiAoIWdvb2RFdmVudERhdGEpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYHJlcXVpcmVkIGV2ZW50RGF0YSBub3Qgc3VwcGxpZWQgdG8gdG9vbCAke3RoaXMubmFtZX0ncyBjcmVhdGVOZXdNZWFzdXJlbWVudGApO1xuXG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgZW5hYmxlZEVsZW1lbnQgPSBnZXRFbmFibGVkRWxlbWVudCh0aGlzLmVsZW1lbnQpO1xuICAgIGNvbnN0IHNlcmllc0luc3RhbmNlVWlkID0gZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQoZW5hYmxlZEVsZW1lbnQpO1xuICAgIGNvbnN0IHJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsICdERUZBVUxUJyk7XG4gICAgY29uc3QgcmVmZXJlbmNlZFJPSUNvbnRvdXIgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5hY3RpdmVST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIGNvbnN0IG1lYXN1cmVtZW50RGF0YSA9IHtcbiAgICAgIHVpZDogZ2VuZXJhdGVVSUQoKSxcbiAgICAgIHNlcmllc0luc3RhbmNlVWlkLFxuICAgICAgc3RydWN0dXJlU2V0VWlkOiAnREVGQVVMVCcsXG4gICAgICBST0lDb250b3VyVWlkOiByZWZlcmVuY2VkUk9JQ29udG91ci51aWQsXG4gICAgICByZWZlcmVuY2VkUk9JQ29udG91cixcbiAgICAgIHJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQsXG4gICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgYWN0aXZlOiB0cnVlLFxuICAgICAgaW52YWxpZGF0ZWQ6IHRydWUsXG4gICAgICBoYW5kbGVzOiB7XG4gICAgICAgIHBvaW50czogW11cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgbWVhc3VyZW1lbnREYXRhLmhhbmRsZXMudGV4dEJveCA9IHtcbiAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICBoYXNNb3ZlZDogZmFsc2UsXG4gICAgICBtb3Zlc0luZGVwZW5kZW50bHk6IGZhbHNlLFxuICAgICAgZHJhd25JbmRlcGVuZGVudGx5OiB0cnVlLFxuICAgICAgYWxsb3dlZE91dHNpZGVJbWFnZTogdHJ1ZSxcbiAgICAgIGhhc0JvdW5kaW5nQm94OiB0cnVlXG4gICAgfTtcblxuICAgIGZyZWVoYW5kM0RTdG9yZS5zZXR0ZXJzLmluY3JlbWVudFBvbHlnb25Db3VudChzZXJpZXNJbnN0YW5jZVVpZCwgJ0RFRkFVTFQnLCByZWZlcmVuY2VkUk9JQ29udG91ci51aWQpO1xuXG4gICAgcmV0dXJuIG1lYXN1cmVtZW50RGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBjYWxsZWQgYnkgdGhlIG1vdXNlRG93bkFjdGl2YXRlIGV2ZW50LCBpZiB0b29sIGlzIGFjdGl2ZSBhbmRcbiAgICogdGhlIGV2ZW50IGlzIG5vdCBjYXVnaHQgYnkgbW91c2VEb3duQ2FsbGJhY2suXG4gICAqIEBvdmVycmlkZVxuICAgKlxuICAgKiBAZXZlbnRcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2dCAtIFRoZSBldmVudC5cbiAgICovXG4gIGFkZE5ld01lYXN1cmVtZW50KGV2dCwgaW50ZXJhY3Rpb25UeXBlKSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZXZ0LmRldGFpbDtcblxuICAgIC8vIENyZWF0ZSBtZXRhZGF0YSBpZiBpdCBkb2Vzbid0IGV4aXN0LlxuICAgIHRoaXMuX2FkZEFuZFNldFZvbHVtZUlmTm9Wb2x1bWVzKCk7XG4gICAgdGhpcy5fZHJhd2luZyA9IHRydWU7XG5cbiAgICB0aGlzLl9zdGFydERyYXdpbmcoZXZ0KTtcbiAgICB0aGlzLl9hZGRQb2ludChldmVudERhdGEpO1xuICAgIHByZXZlbnRQcm9wYWdhdGlvbihldnQpO1xuICB9XG5cbiAgX2FkZEFuZFNldFZvbHVtZUlmTm9Wb2x1bWVzKCkge1xuICAgIGNvbnN0IGVuYWJsZWRFbGVtZW50ID0gZ2V0RW5hYmxlZEVsZW1lbnQodGhpcy5lbGVtZW50KTtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50KGVuYWJsZWRFbGVtZW50KTtcbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG4gICAgbGV0IHNlcmllcyA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICBpZiAoIXNlcmllcykge1xuICAgICAgZnJlZWhhbmQzRFN0b3JlLnNldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICAgIHNlcmllcyA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgfVxuXG4gICAgY29uc3QgYWN0aXZlUk9JQ29udG91ciA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLmFjdGl2ZVJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgaWYgKCFhY3RpdmVST0lDb250b3VyKSB7XG4gICAgICBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5ST0lDb250b3VyQW5kU2V0SW5kZXhBY3RpdmUoc2VyaWVzSW5zdGFuY2VVaWQsICdERUZBVUxUJywgJ1VubmFtZWQgTGVzaW9uJyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBoYW5kbGUgb2YgYSBwYXJ0aWN1bGFyIHRvb2wgaWYgaXQgaXMgY2xvc2UgdG8gdGhlIG1vdXNlIGN1cnNvclxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IG9uIHdoaWNoIHRoZSByb2kgaXMgYmVpbmcgZHJhd24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhICAgICAgRGF0YSBvYmplY3QgYXNzb2NpYXRlZCB3aXRoIHRoZSB0b29sLlxuICAgKiBAcGFyYW0geyp9IGNvb3Jkc1xuICAgKiBAcmV0dXJucyB7TnVtYmVyfE9iamVjdHxCb29sZWFufVxuICAgKi9cbiAgX3BvaW50TmVhckhhbmRsZShlbGVtZW50LCBkYXRhLCBjb29yZHMpIHtcbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSB0aGlzLl9mcmVlaGFuZDNEU3RvcmU7XG5cbiAgICBpZiAoIWRhdGEuaGFuZGxlcyB8fCBkYXRhLmhhbmRsZXMucG9pbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZGF0YS52aXNpYmxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHBvaW50cyA9IGRhdGEuaGFuZGxlcy5wb2ludHM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaGFuZGxlQ2FudmFzID0gcGl4ZWxUb0NhbnZhcyhlbGVtZW50LCBwb2ludHNbaV0pO1xuXG4gICAgICBpZiAocG9pbnQuZGlzdGFuY2UoaGFuZGxlQ2FudmFzLCBjb29yZHMpIDwgNikge1xuICAgICAgICByZXR1cm4gaTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayB0byBzZWUgaWYgbW91c2UgaW4gYm91bmRpbmcgYm94IG9mIHRleHRib3hcbiAgICBpZiAoZnJlZWhhbmQzRFN0b3JlLnN0YXRlLmRpc3BsYXlTdGF0cyAmJiBkYXRhLmhhbmRsZXMudGV4dEJveCkge1xuICAgICAgaWYgKHBvaW50SW5zaWRlQm91bmRpbmdCb3goZGF0YS5oYW5kbGVzLnRleHRCb3gsIGNvb3JkcykpIHtcbiAgICAgICAgcmV0dXJuIGRhdGEuaGFuZGxlcy50ZXh0Qm94O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBY3RpdmUgbW91c2UgZG93biBjYWxsYmFjayB0aGF0IHRha2VzIHByaW9yaXR5IGlmIHRoZSB1c2VyIGlzIGF0dGVtcHRpbmdcbiAgICogdG8gaW5zZXJ0IG9yIGRlbGV0ZSBhIGhhbmRsZSB3aXRoIGN0cmwgKyBjbGljay5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGV2dCAtIFRoZSBldmVudC5cbiAgICovXG4gIHByZU1vdXNlRG93bkNhbGxiYWNrKGV2dCkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGV2dC5kZXRhaWw7XG5cbiAgICBjb25zdCB0b29sRGF0YSA9IGdldFRvb2xTdGF0ZShldnQuY3VycmVudFRhcmdldCwgdGhpcy5uYW1lKTtcblxuICAgIGlmICghdG9vbERhdGEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBuZWFyYnkgPSB0aGlzLl9wb2ludE5lYXJIYW5kbGVBbGxUb29scyhldmVudERhdGEpO1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IHRoaXMuX2ZyZWVoYW5kM0RTdG9yZTtcblxuICAgIGlmIChldmVudERhdGEuZXZlbnQuY3RybEtleSkge1xuICAgICAgaWYgKG5lYXJieSAhPT0gdW5kZWZpbmVkICYmIG5lYXJieS5oYW5kbGVOZWFyYnkuaGFzQm91bmRpbmdCb3gpIHtcbiAgICAgICAgLy8gQ3RybCArIGNsaWNrZWQgdGV4dEJveCwgZG8gbm90aGluZyBidXQgc3RpbGwgY29uc3VtZSBldmVudC5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGluc2VydE9yRGVsZXRlLmNhbGwodGhpcywgZXZ0LCBuZWFyYnkpO1xuICAgICAgfVxuXG4gICAgICBwcmV2ZW50UHJvcGFnYXRpb24oZXZ0KTtcblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCFuZWFyYnkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBkYXRhID0gdG9vbERhdGEuZGF0YVtuZWFyYnkudG9vbEluZGV4XTtcblxuICAgIC8vIENoZWNrIGlmIGxvY2tlZCBhbmQgcmV0dXJuXG4gICAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc3RydWN0dXJlU2V0KGRhdGEuc2VyaWVzSW5zdGFuY2VVaWQsIGRhdGEuc3RydWN0dXJlU2V0VWlkKTtcblxuICAgIGlmIChzdHJ1Y3R1cmVTZXQuaXNMb2NrZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogQ3VzdG9tIGNhbGxiYWNrIGZvciB3aGVuIGEgaGFuZGxlIGlzIHNlbGVjdGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGV2dFxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGhhbmRsZSBUaGUgc2VsZWN0ZWQgaGFuZGxlLlxuICAgKi9cbiAgaGFuZGxlU2VsZWN0ZWRDYWxsYmFjayhldnQsIGRhdGEsIGhhbmRsZSwgaW50ZXJhY3Rpb25UeXBlID0gJ21vdXNlJykge1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IHRoaXMuX2ZyZWVoYW5kM0RTdG9yZTtcbiAgICBjb25zdCBldmVudERhdGEgPSBldnQuZGV0YWlsO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudERhdGEuZWxlbWVudDtcblxuICAgIGlmIChldmVudERhdGEuZXZlbnQubWV0YUtleSkge1xuICAgICAgdGhpcy5fc3dpdGNoUk9JQ29udG91cihldnQsIGRhdGEpO1xuICAgICAgcHJldmVudFByb3BhZ2F0aW9uKGV2dCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoaGFuZGxlLmhhc0JvdW5kaW5nQm94ICYmIGZyZWVoYW5kM0RTdG9yZS5zdGF0ZS5kaXNwbGF5U3RhdHMpIHtcbiAgICAgIC8vIFVzZSBkZWZhdWx0IG1vdmUgaGFuZGxlciAtIENhbiBtb3ZlIHRleHRib3ggb2YgbG9ja2VkIFJPSUNvbnRvdXJzLlxuICAgICAgbW92ZUhhbmRsZU5lYXJJbWFnZVBvaW50KGV2dCwgdGhpcywgZGF0YSwgaGFuZGxlLCBpbnRlcmFjdGlvblR5cGUpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIENoZWNrIGlmIGxvY2tlZCBhbmQgcmV0dXJuXG4gICAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc3RydWN0dXJlU2V0KGRhdGEuc2VyaWVzSW5zdGFuY2VVaWQsIGRhdGEuc3RydWN0dXJlU2V0VWlkKTtcblxuICAgIGlmIChzdHJ1Y3R1cmVTZXQuaXNMb2NrZWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZ3VyYXRpb247XG5cbiAgICBjb25maWcuZHJhZ09yaWdpbiA9IHtcbiAgICAgIHg6IGhhbmRsZS54LFxuICAgICAgeTogaGFuZGxlLnlcbiAgICB9O1xuXG4gICAgLy8gSGF2ZSB0byBkbyB0aGlzIHRvIGdldCB0b29sIGluZGV4LlxuICAgIGNvbnN0IG5lYXJieSA9IHRoaXMuX3BvaW50TmVhckhhbmRsZUFsbFRvb2xzKGV2ZW50RGF0YSk7XG5cbiAgICBpZiAoIW5lYXJieSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGhhbmRsZU5lYXJieSA9IG5lYXJieS5oYW5kbGVOZWFyYnk7XG4gICAgY29uc3QgdG9vbEluZGV4ID0gbmVhcmJ5LnRvb2xJbmRleDtcblxuICAgIHRoaXMuX21vZGlmeWluZyA9IHRydWU7XG4gICAgY29uZmlnLmN1cnJlbnRIYW5kbGUgPSBoYW5kbGVOZWFyYnk7XG4gICAgY29uZmlnLmN1cnJlbnRUb29sID0gdG9vbEluZGV4O1xuXG4gICAgdGhpcy5fYWN0aXZhdGVNb2RpZnkoZWxlbWVudCk7XG4gICAgcHJldmVudFByb3BhZ2F0aW9uKGV2dCk7XG4gIH1cblxuICBfc3dpdGNoUk9JQ29udG91cihldnQsIGRhdGEpIHtcbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSB0aGlzLl9mcmVlaGFuZDNEU3RvcmU7XG5cbiAgICBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5hY3RpdmVST0lDb250b3VyKGRhdGEuc2VyaWVzSW5zdGFuY2VVaWQsIGRhdGEuc3RydWN0dXJlU2V0VWlkLCBkYXRhLlJPSUNvbnRvdXJVaWQpO1xuXG4gICAgdXBkYXRlSW1hZ2UoZXZ0LmRldGFpbC5lbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKlxuICAgKiBAcGFyYW0geyp9IGV2dFxuICAgKiBAcmV0dXJuc1xuICAgKi9cbiAgcmVuZGVyVG9vbERhdGEoZXZ0KSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZXZ0LmRldGFpbDtcbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSB0aGlzLl9mcmVlaGFuZDNEU3RvcmU7XG5cbiAgICAvLyBJZiB3ZSBoYXZlIG5vIHRvb2xTdGF0ZSBmb3IgdGhpcyBlbGVtZW50LCByZXR1cm4gaW1tZWRpYXRlbHkgYXMgdGhlcmUgaXMgbm90aGluZyB0byBkb1xuICAgIGNvbnN0IHRvb2xTdGF0ZSA9IGdldFRvb2xTdGF0ZShldnQuY3VycmVudFRhcmdldCwgdGhpcy5uYW1lKTtcblxuICAgIGlmICghdG9vbFN0YXRlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaW1hZ2UgPSBldmVudERhdGEuaW1hZ2U7XG4gICAgY29uc3QgZWxlbWVudCA9IGV2ZW50RGF0YS5lbGVtZW50O1xuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlndXJhdGlvbjtcbiAgICBjb25zdCBzZXJpZXNNb2R1bGUgPSBtZXRhRGF0YS5nZXQoJ2dlbmVyYWxTZXJpZXNNb2R1bGUnLCBpbWFnZS5pbWFnZUlkKTtcblxuICAgIGxldCBtb2RhbGl0eTtcblxuICAgIGlmIChzZXJpZXNNb2R1bGUpIHtcbiAgICAgIG1vZGFsaXR5ID0gc2VyaWVzTW9kdWxlLm1vZGFsaXR5O1xuICAgIH1cblxuICAgIC8vIFdlIGhhdmUgdG9vbCBkYXRhIGZvciB0aGlzIGVsZW1lbnQgLSBpdGVyYXRlIG92ZXIgZWFjaCBvbmUgYW5kIGRyYXcgaXRcbiAgICBjb25zdCBjb250ZXh0ID0gZ2V0TmV3Q29udGV4dChldmVudERhdGEuY2FudmFzQ29udGV4dC5jYW52YXMpO1xuXG4gICAgY29uc3QgbGluZVdpZHRoID0gdG9vbFN0eWxlLmdldFRvb2xXaWR0aCgpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0b29sU3RhdGUuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZGF0YSA9IHRvb2xTdGF0ZS5kYXRhW2ldO1xuICAgICAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZGF0YS5yZWZlcmVuY2VkU3RydWN0dXJlU2V0O1xuICAgICAgY29uc3QgUk9JQ29udG91ciA9IGRhdGEucmVmZXJlbmNlZFJPSUNvbnRvdXI7XG5cbiAgICAgIGlmIChkYXRhLnZpc2libGUgPT09IGZhbHNlIHx8ICFzdHJ1Y3R1cmVTZXQudmlzaWJsZSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgaXNST0lBY3RpdmUgPVxuICAgICAgICBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5ST0lDb250b3VySW5kZXgoZGF0YS5zZXJpZXNJbnN0YW5jZVVpZCwgZGF0YS5zdHJ1Y3R1cmVTZXRVaWQsIGRhdGEuUk9JQ29udG91clVpZCkgPT09XG4gICAgICAgIGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLmFjdGl2ZVJPSUNvbnRvdXJJbmRleChkYXRhLnNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgICAgZHJhdyhjb250ZXh0LCBjb250ZXh0ID0+IHtcbiAgICAgICAgbGV0IGNvbG9yID0gdG9vbENvbG9ycy5nZXRDb2xvcklmQWN0aXZlKGRhdGEpO1xuICAgICAgICBsZXQgZmlsbENvbG9yO1xuXG4gICAgICAgIGNvbnN0IHBvaW50cyA9IGRhdGEuaGFuZGxlcy5wb2ludHM7XG5cbiAgICAgICAgaWYgKGRhdGEuYWN0aXZlICYmICFzdHJ1Y3R1cmVTZXQuaXNMb2NrZWQpIHtcbiAgICAgICAgICBpZiAoZGF0YS5oYW5kbGVzLmludmFsaWRIYW5kbGVQbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIGNvbG9yID0gY29uZmlnLmludmFsaWRDb2xvcjtcbiAgICAgICAgICAgIGZpbGxDb2xvciA9IGNvbmZpZy5pbnZhbGlkQ29sb3I7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbG9yID0gdG9vbENvbG9ycy5nZXRDb2xvcklmQWN0aXZlKGRhdGEpO1xuICAgICAgICAgICAgZmlsbENvbG9yID0gdG9vbENvbG9ycy5nZXRGaWxsQ29sb3IoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29sb3IgPSBST0lDb250b3VyLmNvbG9yO1xuICAgICAgICAgIGZpbGxDb2xvciA9IFJPSUNvbnRvdXIuY29sb3I7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNST0lBY3RpdmUgJiYgZGF0YS5pbnRlcnBvbGF0ZWQpIHtcbiAgICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gY29uZmlnLmludGVycG9sYXRlZEFscGhhO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEuaGFuZGxlcy5wb2ludHMubGVuZ3RoKSB7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwb2ludHMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gWy4uLnBvaW50c1tqXS5saW5lc107XG5cbiAgICAgICAgICAgIGlmIChqID09PSBwb2ludHMubGVuZ3RoIC0gMSAmJiAhZGF0YS5wb2x5Qm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAgICAgLy8gSWYgaXQncyBzdGlsbCBiZWluZyBhY3RpdmVseSBkcmF3biwga2VlcCB0aGUgbGFzdCBsaW5lIHRvXG4gICAgICAgICAgICAgIC8vIFRoZSBtb3VzZSBsb2NhdGlvblxuICAgICAgICAgICAgICBsaW5lcy5wdXNoKGNvbmZpZy5tb3VzZUxvY2F0aW9uLmhhbmRsZXMuc3RhcnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZHJhd0pvaW5lZExpbmVzKGNvbnRleHQsIGV2ZW50RGF0YS5lbGVtZW50LCBkYXRhLmhhbmRsZXMucG9pbnRzW2pdLCBsaW5lcywgeyBjb2xvciB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0Lmdsb2JhbEFscGhhID0gMS4wO1xuXG4gICAgICAgIC8vIERyYXcgaGFuZGxlc1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgY29sb3IsXG4gICAgICAgICAgZmlsbDogZmlsbENvbG9yXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGlzUk9JQWN0aXZlICYmIGRhdGEuaW50ZXJwb2xhdGVkKSB7XG4gICAgICAgICAgLy8gUmVuZGVyIGRvdHRlZCBsaW5lXG4gICAgICAgICAgb3B0aW9ucy5oYW5kbGVSYWRpdXMgPSBjb25maWcuaW50ZXJwb2xhdGVkSGFuZGxlUmFkaXVzO1xuICAgICAgICAgIGRyYXdIYW5kbGVzKGNvbnRleHQsIGV2ZW50RGF0YSwgcG9pbnRzLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIGlmIChjb25maWcuYWx3YXlzU2hvd0hhbmRsZXMgfHwgKGRhdGEuYWN0aXZlICYmIGRhdGEucG9seUJvdW5kaW5nQm94KSkge1xuICAgICAgICAgIC8vIFJlbmRlciBhbGwgaGFuZGxlc1xuICAgICAgICAgIG9wdGlvbnMuaGFuZGxlUmFkaXVzID0gY29uZmlnLmFjdGl2ZUhhbmRsZVJhZGl1cztcbiAgICAgICAgICBkcmF3SGFuZGxlcyhjb250ZXh0LCBldmVudERhdGEsIHBvaW50cywgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YS5jYW5Db21wbGV0ZSkge1xuICAgICAgICAgIC8vIERyYXcgbGFyZ2UgaGFuZGxlIGF0IHRoZSBvcmlnaW4gaWYgY2FuIGNvbXBsZXRlIGRyYXdpbmdcbiAgICAgICAgICBvcHRpb25zLmhhbmRsZVJhZGl1cyA9IGNvbmZpZy5jb21wbGV0ZUhhbmRsZVJhZGl1cztcbiAgICAgICAgICBkcmF3SGFuZGxlcyhjb250ZXh0LCBldmVudERhdGEsIFtwb2ludHNbMF1dLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhLmFjdGl2ZSAmJiAhZGF0YS5wb2x5Qm91bmRpbmdCb3gpIHtcbiAgICAgICAgICAvLyBEcmF3IGhhbmRsZSBhdCBvcmlnaW4gYW5kIGF0IG1vdXNlIGlmIGFjdGl2ZWx5IGRyYXdpbmdcbiAgICAgICAgICBvcHRpb25zLmhhbmRsZVJhZGl1cyA9IGNvbmZpZy5hY3RpdmVIYW5kbGVSYWRpdXM7XG4gICAgICAgICAgZHJhd0hhbmRsZXMoY29udGV4dCwgZXZlbnREYXRhLCBjb25maWcubW91c2VMb2NhdGlvbi5oYW5kbGVzLCBvcHRpb25zKTtcbiAgICAgICAgICBkcmF3SGFuZGxlcyhjb250ZXh0LCBldmVudERhdGEsIFtwb2ludHNbMF1dLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmluZSB2YXJpYWJsZXMgZm9yIHRoZSBhcmVhIGFuZCBtZWFuL3N0YW5kYXJkIGRldmlhdGlvblxuICAgICAgICBsZXQgYXJlYSwgbWVhblN0ZERldiwgbWVhblN0ZERldlNVVjtcblxuICAgICAgICAvLyBQZXJmb3JtIGEgY2hlY2sgdG8gc2VlIGlmIHRoZSB0b29sIGhhcyBiZWVuIGludmFsaWRhdGVkLiBUaGlzIGlzIHRvIHByZXZlbnRcbiAgICAgICAgLy8gVW5uZWNlc3NhcnkgcmUtY2FsY3VsYXRpb24gb2YgdGhlIGFyZWEsIG1lYW4sIGFuZCBzdGFuZGFyZCBkZXZpYXRpb24gaWYgdGhlXG4gICAgICAgIC8vIEltYWdlIGlzIHJlLXJlbmRlcmVkIGJ1dCB0aGUgdG9vbCBoYXMgbm90IG1vdmVkIChlLmcuIGR1cmluZyBhIHpvb20pXG4gICAgICAgIGlmIChkYXRhLmludmFsaWRhdGVkID09PSBmYWxzZSkge1xuICAgICAgICAgIC8vIElmIHRoZSBkYXRhIGlzIG5vdCBpbnZhbGlkYXRlZCwgcmV0cmlldmUgaXQgZnJvbSB0aGUgdG9vbFN0YXRlXG4gICAgICAgICAgbWVhblN0ZERldiA9IGRhdGEubWVhblN0ZERldjtcbiAgICAgICAgICBtZWFuU3RkRGV2U1VWID0gZGF0YS5tZWFuU3RkRGV2U1VWO1xuICAgICAgICAgIGFyZWEgPSBkYXRhLmFyZWE7XG4gICAgICAgIH0gZWxzZSBpZiAoIWRhdGEuYWN0aXZlKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRhdGEgaGFzIGJlZW4gaW52YWxpZGF0ZWQsIGFuZCB0aGUgdG9vbCBpcyBub3QgY3VycmVudGx5IGFjdGl2ZSxcbiAgICAgICAgICAvLyBXZSBuZWVkIHRvIGNhbGN1bGF0ZSBpdCBhZ2Fpbi5cblxuICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBib3VuZHMgb2YgdGhlIFJPSSBpbiBpbWFnZSBjb29yZGluYXRlc1xuICAgICAgICAgIGNvbnN0IGJvdW5kcyA9IHtcbiAgICAgICAgICAgIGxlZnQ6IHBvaW50c1swXS54LFxuICAgICAgICAgICAgcmlnaHQ6IHBvaW50c1swXS54LFxuICAgICAgICAgICAgYm90dG9tOiBwb2ludHNbMF0ueSxcbiAgICAgICAgICAgIHRvcDogcG9pbnRzWzBdLnhcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGJvdW5kcy5sZWZ0ID0gTWF0aC5taW4oYm91bmRzLmxlZnQsIHBvaW50c1tpXS54KTtcbiAgICAgICAgICAgIGJvdW5kcy5yaWdodCA9IE1hdGgubWF4KGJvdW5kcy5yaWdodCwgcG9pbnRzW2ldLngpO1xuICAgICAgICAgICAgYm91bmRzLmJvdHRvbSA9IE1hdGgubWluKGJvdW5kcy5ib3R0b20sIHBvaW50c1tpXS55KTtcbiAgICAgICAgICAgIGJvdW5kcy50b3AgPSBNYXRoLm1heChib3VuZHMudG9wLCBwb2ludHNbaV0ueSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgcG9seUJvdW5kaW5nQm94ID0ge1xuICAgICAgICAgICAgbGVmdDogYm91bmRzLmxlZnQsXG4gICAgICAgICAgICB0b3A6IGJvdW5kcy5ib3R0b20sXG4gICAgICAgICAgICB3aWR0aDogTWF0aC5hYnMoYm91bmRzLnJpZ2h0IC0gYm91bmRzLmxlZnQpLFxuICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLmFicyhib3VuZHMudG9wIC0gYm91bmRzLmJvdHRvbSlcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gU3RvcmUgdGhlIGJvdW5kaW5nIGJveCBpbmZvcm1hdGlvbiBmb3IgdGhlIHRleHQgYm94XG4gICAgICAgICAgZGF0YS5wb2x5Qm91bmRpbmdCb3ggPSBwb2x5Qm91bmRpbmdCb3g7XG5cbiAgICAgICAgICAvLyBGaXJzdCwgbWFrZSBzdXJlIHRoaXMgaXMgbm90IGEgY29sb3IgaW1hZ2UsIHNpbmNlIG5vIG1lYW4gLyBzdGFuZGFyZFxuICAgICAgICAgIC8vIERldmlhdGlvbiB3aWxsIGJlIGNhbGN1bGF0ZWQgZm9yIGNvbG9yIGltYWdlcy5cbiAgICAgICAgICBpZiAoIWltYWdlLmNvbG9yKSB7XG4gICAgICAgICAgICAvLyBSZXRyaWV2ZSB0aGUgYXJyYXkgb2YgcGl4ZWxzIHRoYXQgdGhlIFJPSSBib3VuZHMgY292ZXJcbiAgICAgICAgICAgIGNvbnN0IHBpeGVscyA9IGdldFBpeGVscyhcbiAgICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgICAgcG9seUJvdW5kaW5nQm94LmxlZnQsXG4gICAgICAgICAgICAgIHBvbHlCb3VuZGluZ0JveC50b3AsXG4gICAgICAgICAgICAgIHBvbHlCb3VuZGluZ0JveC53aWR0aCxcbiAgICAgICAgICAgICAgcG9seUJvdW5kaW5nQm94LmhlaWdodFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBtZWFuICYgc3RhbmRhcmQgZGV2aWF0aW9uIGZyb20gdGhlIHBpeGVscyBhbmQgdGhlIG9iamVjdCBzaGFwZVxuICAgICAgICAgICAgbWVhblN0ZERldiA9IGNhbGN1bGF0ZUZyZWVoYW5kU3RhdGlzdGljcy5jYWxsKHRoaXMsIHBpeGVscywgcG9seUJvdW5kaW5nQm94LCBwb2ludHMpO1xuXG4gICAgICAgICAgICBpZiAobW9kYWxpdHkgPT09ICdQVCcpIHtcbiAgICAgICAgICAgICAgLy8gSWYgdGhlIGltYWdlIGlzIGZyb20gYSBQRVQgc2NhbiwgdXNlIHRoZSBESUNPTSB0YWdzIHRvXG4gICAgICAgICAgICAgIC8vIENhbGN1bGF0ZSB0aGUgU1VWIGZyb20gdGhlIG1lYW4gYW5kIHN0YW5kYXJkIGRldmlhdGlvbi5cblxuICAgICAgICAgICAgICAvLyBOb3RlIHRoYXQgYmVjYXVzZSB3ZSBhcmUgdXNpbmcgbW9kYWxpdHkgcGl4ZWwgdmFsdWVzIGZyb20gZ2V0UGl4ZWxzLCBhbmRcbiAgICAgICAgICAgICAgLy8gVGhlIGNhbGN1bGF0ZVNVViByb3V0aW5lIGFsc28gcmVzY2FsZXMgdG8gbW9kYWxpdHkgcGl4ZWwgdmFsdWVzLCB3ZSBhcmUgZmlyc3RcbiAgICAgICAgICAgICAgLy8gUmV0dXJuaW5nIHRoZSB2YWx1ZXMgdG8gc3RvcmVkUGl4ZWwgdmFsdWVzIGJlZm9yZSBjYWxjdWF0aW5nIFNVViB3aXRoIHRoZW0uXG4gICAgICAgICAgICAgIC8vIFRPRE86IENsZWFuIHRoaXMgdXA/IFNob3VsZCB3ZSBhZGQgYW4gb3B0aW9uIHRvIG5vdCBzY2FsZSBpbiBjYWxjdWxhdGVTVVY/XG4gICAgICAgICAgICAgIG1lYW5TdGREZXZTVVYgPSB7XG4gICAgICAgICAgICAgICAgbWVhbjogY2FsY3VsYXRlU1VWKGltYWdlLCAobWVhblN0ZERldi5tZWFuIC0gaW1hZ2UuaW50ZXJjZXB0KSAvIGltYWdlLnNsb3BlKSxcbiAgICAgICAgICAgICAgICBzdGREZXY6IGNhbGN1bGF0ZVNVVihpbWFnZSwgKG1lYW5TdGREZXYuc3RkRGV2IC0gaW1hZ2UuaW50ZXJjZXB0KSAvIGltYWdlLnNsb3BlKVxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBJZiB0aGUgbWVhbiBhbmQgc3RhbmRhcmQgZGV2aWF0aW9uIHZhbHVlcyBhcmUgc2FuZSwgc3RvcmUgdGhlbSBmb3IgbGF0ZXIgcmV0cmlldmFsXG4gICAgICAgICAgICBpZiAobWVhblN0ZERldiAmJiAhaXNOYU4obWVhblN0ZERldi5tZWFuKSkge1xuICAgICAgICAgICAgICBkYXRhLm1lYW5TdGREZXYgPSBtZWFuU3RkRGV2O1xuICAgICAgICAgICAgICBkYXRhLm1lYW5TdGREZXZTVVYgPSBtZWFuU3RkRGV2U1VWO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBwaXhlbCBzcGFjaW5nIHZhbHVlcywgYW5kIGlmIHRoZXkgYXJlIG5vdFxuICAgICAgICAgIC8vIFJlYWwgbm9uLXplcm8gdmFsdWVzLCBzZXQgdGhlbSB0byAxXG4gICAgICAgICAgY29uc3QgY29sdW1uUGl4ZWxTcGFjaW5nID0gaW1hZ2UuY29sdW1uUGl4ZWxTcGFjaW5nIHx8IDE7XG4gICAgICAgICAgY29uc3Qgcm93UGl4ZWxTcGFjaW5nID0gaW1hZ2Uucm93UGl4ZWxTcGFjaW5nIHx8IDE7XG4gICAgICAgICAgY29uc3Qgc2NhbGluZyA9IGNvbHVtblBpeGVsU3BhY2luZyAqIHJvd1BpeGVsU3BhY2luZztcblxuICAgICAgICAgIGFyZWEgPSBmcmVlaGFuZEFyZWEocG9pbnRzLCBzY2FsaW5nKTtcblxuICAgICAgICAgIC8vIElmIHRoZSBhcmVhIHZhbHVlIGlzIHNhbmUsIHN0b3JlIGl0IGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgICBpZiAoIWlzTmFOKGFyZWEpKSB7XG4gICAgICAgICAgICBkYXRhLmFyZWEgPSBhcmVhO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIFNldCB0aGUgaW52YWxpZGF0ZWQgZmxhZyB0byBmYWxzZSBzbyB0aGF0IHRoaXMgZGF0YSB3b24ndCBhdXRvbWF0aWNhbGx5IGJlIHJlY2FsY3VsYXRlZFxuICAgICAgICAgIGRhdGEuaW52YWxpZGF0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIE9ubHkgcmVuZGVyIHRleHQgaWYgcG9seWdvbiBST0kgaGFzIGJlZW4gY29tcGxldGVkLCBhbmQgaXMgYWN0aXZlLFxuICAgICAgICAvLyBPciBjb25maWcgaXMgc2V0IHRvIHNob3cgdGhlIHRleHRCb3ggYWxsIHRoZSB0aW1lXG4gICAgICAgIGlmIChkYXRhLnBvbHlCb3VuZGluZ0JveCAmJiAoZnJlZWhhbmQzRFN0b3JlLnN0YXRlLmRpc3BsYXlTdGF0cyB8fCBkYXRhLmFjdGl2ZSkpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgdGV4dGJveCBoYXMgbm90IGJlZW4gbW92ZWQgYnkgdGhlIHVzZXIsIGl0IHNob3VsZCBiZSBkaXNwbGF5ZWQgb24gdGhlIHJpZ2h0LW1vc3RcbiAgICAgICAgICAvLyBTaWRlIG9mIHRoZSB0b29sLlxuXG4gICAgICAgICAgaWYgKCFkYXRhLmhhbmRsZXMudGV4dEJveC5oYXNNb3ZlZCkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgcmlnaHRtb3N0IHNpZGUgb2YgdGhlIHBvbHlCb3VuZGluZ0JveCBhdCBpdHMgdmVydGljYWwgY2VudGVyLCBhbmQgcGxhY2UgdGhlIHRleHRib3ggaGVyZVxuICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHRoaXMgY2FsY3VsYXRlcyBpdCBpbiBpbWFnZSBjb29yZGluYXRlc1xuICAgICAgICAgICAgZGF0YS5oYW5kbGVzLnRleHRCb3gueCA9IGRhdGEucG9seUJvdW5kaW5nQm94LmxlZnQgKyBkYXRhLnBvbHlCb3VuZGluZ0JveC53aWR0aDtcbiAgICAgICAgICAgIGRhdGEuaGFuZGxlcy50ZXh0Qm94LnkgPSBkYXRhLnBvbHlCb3VuZGluZ0JveC50b3AgKyBkYXRhLnBvbHlCb3VuZGluZ0JveC5oZWlnaHQgLyAyO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IHRleHQgPSB0ZXh0Qm94VGV4dC5jYWxsKHRoaXMsIGRhdGEpO1xuXG4gICAgICAgICAgZHJhd0xpbmtlZFRleHRCb3goXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgZWxlbWVudCxcbiAgICAgICAgICAgIGRhdGEuaGFuZGxlcy50ZXh0Qm94LFxuICAgICAgICAgICAgdGV4dCxcbiAgICAgICAgICAgIHBvaW50cyxcbiAgICAgICAgICAgIHRleHRCb3hBbmNob3JQb2ludHMsXG4gICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgIGxpbmVXaWR0aCxcbiAgICAgICAgICAgIDAsXG4gICAgICAgICAgICB0cnVlXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdGV4dEJveFRleHQoZGF0YSkge1xuICAgICAgY29uc3QgUk9JQ29udG91ciA9IGRhdGEucmVmZXJlbmNlZFJPSUNvbnRvdXI7XG4gICAgICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBkYXRhLnJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQ7XG5cbiAgICAgIGNvbnN0IHsgbWVhblN0ZERldiwgbWVhblN0ZERldlNVViwgYXJlYSB9ID0gZGF0YTtcbiAgICAgIC8vIERlZmluZSBhbiBhcnJheSB0byBzdG9yZSB0aGUgcm93cyBvZiB0ZXh0IGZvciB0aGUgdGV4dGJveFxuICAgICAgY29uc3QgdGV4dExpbmVzID0gW107XG5cbiAgICAgIHRleHRMaW5lcy5wdXNoKFJPSUNvbnRvdXIubmFtZSk7XG5cbiAgICAgIGlmIChzdHJ1Y3R1cmVTZXQubmFtZSA9PT0gJ0RFRkFVTFQnKSB7XG4gICAgICAgIHRleHRMaW5lcy5wdXNoKCdXb3JraW5nIFJPSSBDb2xsZWN0aW9uJyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0TGluZXMucHVzaChzdHJ1Y3R1cmVTZXQubmFtZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIHRoZSBtZWFuIGFuZCBzdGFuZGFyZCBkZXZpYXRpb24gdmFsdWVzIGFyZSBwcmVzZW50LCBkaXNwbGF5IHRoZW1cbiAgICAgIGlmIChtZWFuU3RkRGV2ICYmIG1lYW5TdGREZXYubWVhbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIElmIHRoZSBtb2RhbGl0eSBpcyBDVCwgYWRkIEhVIHRvIGRlbm90ZSBIb3Vuc2ZpZWxkIFVuaXRzXG4gICAgICAgIGxldCBtb1N1ZmZpeCA9ICcnO1xuXG4gICAgICAgIGlmIChtb2RhbGl0eSA9PT0gJ0NUJykge1xuICAgICAgICAgIG1vU3VmZml4ID0gJyBIVSc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDcmVhdGUgYSBsaW5lIG9mIHRleHQgdG8gZGlzcGxheSB0aGUgbWVhbiBhbmQgYW55IHVuaXRzIHRoYXQgd2VyZSBzcGVjaWZpZWQgKGkuZS4gSFUpXG4gICAgICAgIGxldCBtZWFuVGV4dCA9IGBNZWFuOiAke251bWJlcnNXaXRoQ29tbWFzKG1lYW5TdGREZXYubWVhbi50b0ZpeGVkKDIpKX0ke21vU3VmZml4fWA7XG4gICAgICAgIC8vIENyZWF0ZSBhIGxpbmUgb2YgdGV4dCB0byBkaXNwbGF5IHRoZSBzdGFuZGFyZCBkZXZpYXRpb24gYW5kIGFueSB1bml0cyB0aGF0IHdlcmUgc3BlY2lmaWVkIChpLmUuIEhVKVxuICAgICAgICBsZXQgc3RkRGV2VGV4dCA9IGBTdGREZXY6ICR7bnVtYmVyc1dpdGhDb21tYXMobWVhblN0ZERldi5zdGREZXYudG9GaXhlZCgyKSl9JHttb1N1ZmZpeH1gO1xuXG4gICAgICAgIC8vIElmIHRoaXMgaW1hZ2UgaGFzIFNVViB2YWx1ZXMgdG8gZGlzcGxheSwgY29uY2F0ZW5hdGUgdGhlbSB0byB0aGUgdGV4dCBsaW5lXG4gICAgICAgIGlmIChtZWFuU3RkRGV2U1VWICYmIG1lYW5TdGREZXZTVVYubWVhbiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc3QgU1VWdGV4dCA9ICcgU1VWOiAnO1xuXG4gICAgICAgICAgbWVhblRleHQgKz0gU1VWdGV4dCArIG51bWJlcnNXaXRoQ29tbWFzKG1lYW5TdGREZXZTVVYubWVhbi50b0ZpeGVkKDIpKTtcbiAgICAgICAgICBzdGREZXZUZXh0ICs9IFNVVnRleHQgKyBudW1iZXJzV2l0aENvbW1hcyhtZWFuU3RkRGV2U1VWLnN0ZERldi50b0ZpeGVkKDIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCB0aGVzZSB0ZXh0IGxpbmVzIHRvIHRoZSBhcnJheSB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHRleHRib3hcbiAgICAgICAgdGV4dExpbmVzLnB1c2gobWVhblRleHQpO1xuICAgICAgICB0ZXh0TGluZXMucHVzaChzdGREZXZUZXh0KTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIGFyZWEgaXMgYSBzYW5lIHZhbHVlLCBkaXNwbGF5IGl0XG4gICAgICBpZiAoYXJlYSkge1xuICAgICAgICAvLyBEZXRlcm1pbmUgdGhlIGFyZWEgc3VmZml4IGJhc2VkIG9uIHRoZSBwaXhlbCBzcGFjaW5nIGluIHRoZSBpbWFnZS5cbiAgICAgICAgLy8gSWYgcGl4ZWwgc3BhY2luZyBpcyBwcmVzZW50LCB1c2UgbWlsbGltZXRlcnMuIE90aGVyd2lzZSwgdXNlIHBpeGVscy5cbiAgICAgICAgLy8gVGhpcyB1c2VzIENoYXIgY29kZSAxNzggZm9yIGEgc3VwZXJzY3JpcHQgMlxuICAgICAgICBsZXQgc3VmZml4ID0gYCBtbSR7U3RyaW5nLmZyb21DaGFyQ29kZSgxNzgpfWA7XG5cbiAgICAgICAgaWYgKCFpbWFnZS5yb3dQaXhlbFNwYWNpbmcgfHwgIWltYWdlLmNvbHVtblBpeGVsU3BhY2luZykge1xuICAgICAgICAgIHN1ZmZpeCA9IGAgcGl4ZWxzJHtTdHJpbmcuZnJvbUNoYXJDb2RlKDE3OCl9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIGxpbmUgb2YgdGV4dCB0byBkaXNwbGF5IHRoZSBhcmVhIGFuZCBpdHMgdW5pdHNcbiAgICAgICAgY29uc3QgYXJlYVRleHQgPSBgQXJlYTogJHtudW1iZXJzV2l0aENvbW1hcyhhcmVhLnRvRml4ZWQoMikpfSR7c3VmZml4fWA7XG5cbiAgICAgICAgLy8gQWRkIHRoaXMgdGV4dCBsaW5lIHRvIHRoZSBhcnJheSB0byBiZSBkaXNwbGF5ZWQgaW4gdGhlIHRleHRib3hcbiAgICAgICAgdGV4dExpbmVzLnB1c2goYXJlYVRleHQpO1xuICAgICAgfVxuXG4gICAgICB0ZXh0TGluZXMucHVzaChgJHtST0lDb250b3VyLnBvbHlnb25Db3VudH0gY29udG91cnNgKTtcblxuICAgICAgcmV0dXJuIHRleHRMaW5lcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXh0Qm94QW5jaG9yUG9pbnRzKHBvaW50cykge1xuICAgICAgcmV0dXJuIHBvaW50cztcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRW5kcyB0aGUgYWN0aXZlIGRyYXdpbmcgbG9vcCBhbmQgY29tcGxldGVzIHRoZSBwb2x5Z29uLlxuICAgKlxuICAgKiBAcHJpdmF0ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gZWxlbWVudCAtIFRoZSBlbGVtZW50IG9uIHdoaWNoIHRoZSByb2kgaXMgYmVpbmcgZHJhd24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBoYW5kbGVOZWFyYnkgLSB0aGUgaGFuZGxlIG5lYXJlc3QgdG8gdGhlIG1vdXNlIGN1cnNvci5cbiAgICovXG4gIF9lbmREcmF3aW5nKGVsZW1lbnQsIGhhbmRsZU5lYXJieSkge1xuICAgIGNvbnN0IHRvb2xTdGF0ZSA9IGdldFRvb2xTdGF0ZShlbGVtZW50LCB0aGlzLm5hbWUpO1xuXG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uO1xuXG4gICAgY29uc3QgZGF0YSA9IHRvb2xTdGF0ZS5kYXRhW2NvbmZpZy5jdXJyZW50VG9vbF07XG5cbiAgICBjb25zdCBwb2ludHMgPSBkYXRhLmhhbmRsZXMucG9pbnRzO1xuXG4gICAgZGF0YS5hY3RpdmUgPSBmYWxzZTtcbiAgICBkYXRhLmhpZ2hsaWdodCA9IGZhbHNlO1xuICAgIGRhdGEuaGFuZGxlcy5pbnZhbGlkSGFuZGxlUGxhY2VtZW50ID0gZmFsc2U7XG5cbiAgICAvLyBDb25uZWN0IHRoZSBlbmQgaGFuZGxlIHRvIHRoZSBvcmlnaW4gaGFuZGxlXG4gICAgaWYgKGhhbmRsZU5lYXJieSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwb2ludHNbY29uZmlnLmN1cnJlbnRIYW5kbGUgLSAxXS5saW5lcy5wdXNoKHBvaW50c1swXSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX21vZGlmeWluZykge1xuICAgICAgdGhpcy5fbW9kaWZ5aW5nID0gZmFsc2U7XG4gICAgICBkYXRhLmludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgIGRhdGEuaW50ZXJwb2xhdGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gUmVzZXQgdGhlIGN1cnJlbnQgaGFuZGxlXG4gICAgY29uZmlnLmN1cnJlbnRIYW5kbGUgPSAwO1xuICAgIGNvbmZpZy5jdXJyZW50VG9vbCA9IC0xO1xuICAgIGRhdGEuY2FuQ29tcGxldGUgPSBmYWxzZTtcblxuICAgIGlmICh0aGlzLl9kcmF3aW5nKSB7XG4gICAgICB0aGlzLl9kcmF3aW5nID0gZmFsc2U7XG4gICAgICB0aGlzLl9kZWFjdGl2YXRlRHJhdyhlbGVtZW50KTtcbiAgICB9XG5cbiAgICBpZiAobW9kdWxlcy5mcmVlaGFuZDNELnN0YXRlLmludGVycG9sYXRlKSB7XG4gICAgICBpbnRlcnBvbGF0ZShkYXRhLCBlbGVtZW50KTtcbiAgICB9XG5cbiAgICB1cGRhdGVJbWFnZShlbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXN0b20gY2FsbGJhY2sgZm9yIHdoZW4gdG9vbERhdGEgaXMgZGVsZXRlZC5cbiAgICpcbiAgICogQHBhcmFtICB7T2JqZWN0fSBldnRcbiAgICovXG4gIF9vbk1lYXN1cmVtZW50UmVtb3ZlZChldnQpIHtcbiAgICBjb25zdCBldmVudERhdGEgPSBldnQuZGV0YWlsO1xuXG4gICAgaWYgKGV2ZW50RGF0YS50b29sVHlwZSAhPT0gdGhpcy5uYW1lKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgbWVhc3VyZW1lbnREYXRhID0gZXZlbnREYXRhLm1lYXN1cmVtZW50RGF0YTtcblxuICAgIHRoaXMuX2ZyZWVoYW5kM0RTdG9yZS5zZXR0ZXJzLmRlY3JlbWVudFBvbHlnb25Db3VudChcbiAgICAgIG1lYXN1cmVtZW50RGF0YS5zZXJpZXNJbnN0YW5jZVVpZCxcbiAgICAgIG1lYXN1cmVtZW50RGF0YS5zdHJ1Y3R1cmVTZXRVaWQsXG4gICAgICBtZWFzdXJlbWVudERhdGEuUk9JQ29udG91clVpZFxuICAgICk7XG4gIH1cblxuICBwYXNzaXZlQ2FsbGJhY2soZWxlbWVudCkge1xuICAgIHRoaXMuX2Nsb3NlVG9vbElmRHJhd2luZyhlbGVtZW50KTtcbiAgICB0aGlzLl9hZGRNZWFzdXJlbWVudFJlbW92ZWRMaXN0ZW5lcihlbGVtZW50KTtcbiAgfVxuXG4gIGVuYWJsZWRDYWxsYmFjayhlbGVtZW50KSB7XG4gICAgdGhpcy5fY2xvc2VUb29sSWZEcmF3aW5nKGVsZW1lbnQpO1xuICAgIHRoaXMuX2FkZE1lYXN1cmVtZW50UmVtb3ZlZExpc3RlbmVyKGVsZW1lbnQpO1xuICB9XG5cbiAgYWN0aXZlQ2FsbGJhY2soZWxlbWVudCkge1xuICAgIHRoaXMuX2FkZE1lYXN1cmVtZW50UmVtb3ZlZExpc3RlbmVyKGVsZW1lbnQpO1xuICB9XG5cbiAgZGlzYWJsZWRDYWxsYmFjayhlbGVtZW50KSB7XG4gICAgdGhpcy5fY2xvc2VUb29sSWZEcmF3aW5nKGVsZW1lbnQpO1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVFMuTUVBU1VSRU1FTlRfUkVNT1ZFRCwgdGhpcy5fb25NZWFzdXJlbWVudFJlbW92ZWQpO1xuICB9XG5cbiAgX2FkZE1lYXN1cmVtZW50UmVtb3ZlZExpc3RlbmVyKGVsZW1lbnQpIHtcbiAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoRVZFTlRTLk1FQVNVUkVNRU5UX1JFTU9WRUQsIHRoaXMuX29uTWVhc3VyZW1lbnRSZW1vdmVkKTtcbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoRVZFTlRTLk1FQVNVUkVNRU5UX1JFTU9WRUQsIHRoaXMuX29uTWVhc3VyZW1lbnRSZW1vdmVkKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0RnJlZWhhbmRDb25maWd1cmF0aW9uKCkge1xuICByZXR1cm4ge1xuICAgIG1vdXNlTG9jYXRpb246IHtcbiAgICAgIGhhbmRsZXM6IHtcbiAgICAgICAgc3RhcnQ6IHtcbiAgICAgICAgICBoaWdobGlnaHQ6IHRydWUsXG4gICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIHNwYWNpbmc6IDEsXG4gICAgaW50ZXJwb2xhdGVkSGFuZGxlUmFkaXVzOiAwLjUsXG4gICAgaW50ZXJwb2xhdGVkQWxwaGE6IDAuNSxcbiAgICBhY3RpdmVIYW5kbGVSYWRpdXM6IDMsXG4gICAgY29tcGxldGVIYW5kbGVSYWRpdXM6IDYsXG4gICAgY29tcGxldGVIYW5kbGVSYWRpdXNUb3VjaDogMjgsXG4gICAgYWx3YXlzU2hvd0hhbmRsZXM6IGZhbHNlLFxuICAgIGludmFsaWRDb2xvcjogJ2NyaW1zb24nLFxuICAgIGN1cnJlbnRIYW5kbGU6IDAsXG4gICAgY3VycmVudFRvb2w6IC0xXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByZXZlbnRQcm9wYWdhdGlvbihldnQpIHtcbiAgZXZ0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpO1xuICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vdHV6ei9uLWRpbWVuc2lvbmFsLWZsb29kLWZpbGxcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICBsZXQgZ2V0dGVyLCBzZWVkLCBvbkZsb29kLCBvbkJvdW5kYXJ5LCBlcXVhbHMsIGRpYWdvbmFscywgc3RhcnROb2RlLCBwZXJtdXRhdGlvbnMsIHN0YWNrLCBmbG9vZGVkLCB2aXNpdHMsIGJvdW5kcztcblxuICBsZXQgaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBnZXR0ZXIgPSBvcHRpb25zLmdldHRlcjtcbiAgICBzZWVkID0gb3B0aW9ucy5zZWVkO1xuICAgIG9uRmxvb2QgPSBvcHRpb25zLm9uRmxvb2QgfHwgbm9vcDtcbiAgICBvbkJvdW5kYXJ5ID0gb3B0aW9ucy5vbkJvdW5kYXJ5IHx8IG5vb3A7XG4gICAgZXF1YWxzID0gb3B0aW9ucy5lcXVhbHMgfHwgZGVmYXVsdEVxdWFscztcbiAgICBkaWFnb25hbHMgPSBvcHRpb25zLmRpYWdvbmFscyB8fCBmYWxzZTtcbiAgICBzdGFydE5vZGUgPSBnZXQoc2VlZCk7XG4gICAgcGVybXV0YXRpb25zID0gcHJ1bmVkUGVybXV0YXRpb25zKCk7XG4gICAgc3RhY2sgPSBbXTtcbiAgICBmbG9vZGVkID0gW107XG4gICAgdmlzaXRzID0ge307XG4gICAgYm91bmRzID0ge307XG4gIH07XG5cbiAgbGV0IG1haW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgc3RhY2sucHVzaCh7IGN1cnJlbnRBcmdzOiBzZWVkIH0pO1xuXG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCA+IDApIHtcbiAgICAgIGZsb29kKHN0YWNrLnBvcCgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZmxvb2RlZDogZmxvb2RlZCxcbiAgICAgIGJvdW5kYXJpZXM6IGJvdW5kYXJpZXMoKVxuICAgIH07XG4gIH07XG5cbiAgbGV0IGZsb29kID0gZnVuY3Rpb24gKGpvYikge1xuICAgIGxldCBnZXRBcmdzID0gam9iLmN1cnJlbnRBcmdzO1xuICAgIGxldCBwcmVsZXRncyA9IGpvYi5wcmV2aW91c0FyZ3M7XG5cbiAgICBpZiAodmlzaXRlZChnZXRBcmdzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBtYXJrQXNWaXNpdGVkKGdldEFyZ3MpO1xuXG4gICAgaWYgKG1lbWJlcihnZXRBcmdzKSkge1xuICAgICAgbWFya0FzRmxvb2RlZChnZXRBcmdzKTtcbiAgICAgIHB1c2hBZGphY2VudChnZXRBcmdzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbWFya0FzQm91bmRhcnkocHJlbGV0Z3MpO1xuICAgIH1cbiAgfTtcblxuICBsZXQgdmlzaXRlZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICByZXR1cm4gdmlzaXRzW2tleV0gPT09IHRydWU7XG4gIH07XG5cbiAgbGV0IG1hcmtBc1Zpc2l0ZWQgPSBmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmlzaXRzW2tleV0gPSB0cnVlO1xuICB9O1xuXG4gIGxldCBtZW1iZXIgPSBmdW5jdGlvbiAoZ2V0QXJncykge1xuICAgIGxldCBub2RlID0gc2FmZWx5KGdldCwgW2dldEFyZ3NdKTtcblxuICAgIHJldHVybiBzYWZlbHkoZXF1YWxzLCBbbm9kZSwgc3RhcnROb2RlXSk7XG4gIH07XG5cbiAgbGV0IG1hcmtBc0Zsb29kZWQgPSBmdW5jdGlvbiAoZ2V0QXJncykge1xuICAgIGZsb29kZWQucHVzaChnZXRBcmdzKTtcbiAgICBvbkZsb29kLmFwcGx5KHVuZGVmaW5lZCwgZ2V0QXJncyk7XG4gIH07XG5cbiAgbGV0IG1hcmtBc0JvdW5kYXJ5ID0gZnVuY3Rpb24gKHByZWxldGdzKSB7XG4gICAgYm91bmRzW3ByZWxldGdzXSA9IHByZWxldGdzO1xuICAgIG9uQm91bmRhcnkuYXBwbHkodW5kZWZpbmVkLCBwcmVsZXRncyk7XG4gIH07XG5cbiAgbGV0IHB1c2hBZGphY2VudCA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwZXJtdXRhdGlvbnMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIGxldCBwZXJtID0gcGVybXV0YXRpb25zW2ldO1xuICAgICAgbGV0IG5leHRBcmdzID0gZ2V0QXJncy5zbGljZSgwKTtcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBnZXRBcmdzLmxlbmd0aDsgaiArPSAxKSB7XG4gICAgICAgIG5leHRBcmdzW2pdICs9IHBlcm1bal07XG4gICAgICB9XG5cbiAgICAgIHN0YWNrLnB1c2goe1xuICAgICAgICBjdXJyZW50QXJnczogbmV4dEFyZ3MsXG4gICAgICAgIHByZXZpb3VzQXJnczogZ2V0QXJnc1xuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIGxldCBnZXQgPSBmdW5jdGlvbiAoZ2V0QXJncykge1xuICAgIHJldHVybiBnZXR0ZXIuYXBwbHkodW5kZWZpbmVkLCBnZXRBcmdzKTtcbiAgfTtcblxuICBsZXQgc2FmZWx5ID0gZnVuY3Rpb24gKGYsIGFyZ3MpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGYuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge31cbiAgfTtcblxuICBsZXQgbm9vcCA9IGZ1bmN0aW9uICgpIHt9O1xuXG4gIGxldCBkZWZhdWx0RXF1YWxzID0gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICByZXR1cm4gYSA9PT0gYjtcbiAgfTtcblxuICBsZXQgcHJ1bmVkUGVybXV0YXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBwZXJtdXRhdGlvbnMgPSBwZXJtdXRlKHNlZWQubGVuZ3RoKTtcblxuICAgIHJldHVybiBwZXJtdXRhdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChwZXJtKSB7XG4gICAgICBsZXQgY291bnQgPSBjb3VudE5vblplcm9lcyhwZXJtKTtcblxuICAgICAgcmV0dXJuIGNvdW50ICE9PSAwICYmIChjb3VudCA9PT0gMSB8fCBkaWFnb25hbHMpO1xuICAgIH0pO1xuICB9O1xuXG4gIGxldCBwZXJtdXRlID0gZnVuY3Rpb24gKGxlbmd0aCkge1xuICAgIGxldCBwZXJtcyA9IFtdO1xuXG4gICAgbGV0IHBlcm11dGF0aW9uID0gZnVuY3Rpb24gKHN0cmluZykge1xuICAgICAgcmV0dXJuIHN0cmluZy5zcGxpdCgnJykubWFwKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIHJldHVybiBwYXJzZUludChjLCAxMCkgLSAxO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5wb3coMywgbGVuZ3RoKTsgaSArPSAxKSB7XG4gICAgICBsZXQgc3RyaW5nID0gbHBhZChpLnRvU3RyaW5nKDMpLCAnMCcsIGxlbmd0aCk7XG5cbiAgICAgIHBlcm1zLnB1c2gocGVybXV0YXRpb24oc3RyaW5nKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHBlcm1zO1xuICB9O1xuXG4gIGxldCBscGFkID0gZnVuY3Rpb24gKHN0cmluZywgY2hhcmFjdGVyLCBsZW5ndGgpIHtcbiAgICBsZXQgYXJyYXkgPSBuZXcgQXJyYXkobGVuZ3RoICsgMSk7XG4gICAgbGV0IHBhZCA9IGFycmF5LmpvaW4oY2hhcmFjdGVyKTtcblxuICAgIHJldHVybiAocGFkICsgc3RyaW5nKS5zbGljZSgtbGVuZ3RoKTtcbiAgfTtcblxuICBsZXQgY291bnROb25aZXJvZXMgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICBsZXQgY291bnQgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgaWYgKGFycmF5W2ldICE9PSAwKSB7XG4gICAgICAgIGNvdW50ICs9IDE7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNvdW50O1xuICB9O1xuXG4gIGxldCBib3VuZGFyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBhcnJheSA9IFtdO1xuXG4gICAgZm9yIChsZXQga2V5IGluIGJvdW5kcykge1xuICAgICAgaWYgKGJvdW5kcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgIGFycmF5LnVuc2hpZnQoYm91bmRzW2tleV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBhcnJheTtcbiAgfTtcblxuICBpbml0aWFsaXplKCk7XG4gIHJldHVybiBtYWluKCk7XG59O1xuIiwiaW1wb3J0IHsgc3RvcmUgfSBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5cbmltcG9ydCBnZW5lcmF0ZUJydXNoTWV0YWRhdGEgZnJvbSAnLi9nZW5lcmF0ZUJydXNoTWV0YWRhdGEuanMnO1xuXG5jb25zdCBicnVzaE1vZHVsZSA9IHN0b3JlLm1vZHVsZXMuYnJ1c2g7XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdTZWdtZW50SW5wdXQoc2VnSW5kZXgsIG1ldGFkYXRhKSB7XG4gIGJydXNoTWV0ZGF0YUlucHV0KHNlZ0luZGV4LCBtZXRhZGF0YSwgc2VnbWVudElucHV0Q2FsbGJhY2spO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWRpdFNlZ21lbnRJbnB1dChzZWdJbmRleCwgbWV0YWRhdGEpIHtcbiAgYnJ1c2hNZXRkYXRhSW5wdXQoc2VnSW5kZXgsIG1ldGFkYXRhLCBzZWdtZW50SW5wdXRDYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBuZXdTZWdtZW50KGVuYWJsZWRFbGVtZW50KSB7XG4gIGlmICghZW5hYmxlZEVsZW1lbnQpIHtcbiAgICByZXR1cm4gW107XG4gIH1cblxuICBjb25zdCBhY3RpdmVFbGVtZW50ID0gZW5hYmxlZEVsZW1lbnQuZWxlbWVudDtcblxuICBsZXQgc2VnbWVudE1ldGFkYXRhID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5tZXRhZGF0YShhY3RpdmVFbGVtZW50KTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoc2VnbWVudE1ldGFkYXRhKSkge1xuICAgIGNvbnN0IHsgbGFiZWxtYXAzRCB9ID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5nZXRBbmRDYWNoZUxhYmVsbWFwMkQoYWN0aXZlRWxlbWVudCk7XG5cbiAgICBzZWdtZW50TWV0YWRhdGEgPSBsYWJlbG1hcDNELm1ldGFkYXRhO1xuICB9XG5cbiAgY29uc3QgY29sb3JtYXAgPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmFjdGl2ZUNvcm5lcnN0b25lQ29sb3JNYXAoYWN0aXZlRWxlbWVudCk7XG5cbiAgY29uc3QgbnVtYmVyT2ZDb2xvcnMgPSBjb2xvcm1hcC5nZXROdW1iZXJPZkNvbG9ycygpO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgbnVtYmVyT2ZDb2xvcnM7IGkrKykge1xuICAgIGlmICghc2VnbWVudE1ldGFkYXRhW2ldKSB7XG4gICAgICBuZXdTZWdtZW50SW5wdXQoaSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gc2VnbWVudElucHV0Q2FsbGJhY2soZGF0YSkge1xuICBpZiAoIWRhdGEpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCB7IGxhYmVsLCBjYXRlZ29yeVVJRCwgdHlwZVVJRCwgbW9kaWZpZXJVSUQsIHNlZ0luZGV4LCBlbGVtZW50IH0gPSBkYXRhO1xuXG4gIGNvbnN0IG1ldGFkYXRhID0gZ2VuZXJhdGVCcnVzaE1ldGFkYXRhKGxhYmVsLCBjYXRlZ29yeVVJRCwgdHlwZVVJRCwgbW9kaWZpZXJVSUQpO1xuXG4gIC8vIFRPRE8gLT4gc3VwcG9ydCBmb3IgbXVsdGlwbGUgbGFiZWxtYXBzLlxuICBicnVzaE1vZHVsZS5zZXR0ZXJzLm1ldGFkYXRhKGVsZW1lbnQsIDAsIHNlZ0luZGV4LCBtZXRhZGF0YSk7XG4gIGJydXNoTW9kdWxlLnNldHRlcnMuYWN0aXZlU2VnbWVudEluZGV4KGVsZW1lbnQsIHNlZ0luZGV4KTtcbn1cblxuLyoqXG4gKiBPcGVucyB0aGUgYnJ1c2hNZXRhZGF0YSBkaWFsb2cuXG4gKlxuICovXG5cbi8vIFRPRE8gLT4gTmVlZCB0byBtYWtlIHRoaXMgaW50byBhIHJlYWN0LW1vZGFsP1xuZnVuY3Rpb24gYnJ1c2hNZXRkYXRhSW5wdXQoc2VnSW5kZXgsIG1ldGFkYXRhLCBjYWxsYmFjaykge1xuICBjb25zb2xlLmxvZygnVE9ETzogUmVtYWtlIGJydXNoTWV0YWRhdGEgaW5wdXQgbWVudSEnKTtcbiAgLypcbiAgY29uc3QgYnJ1c2hNZXRhZGF0YURpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdicnVzaE1ldGFkYXRhRGlhbG9nJyk7XG4gIGNvbnN0IGRpYWxvZ0RhdGEgPSBCbGF6ZS5nZXREYXRhKGJydXNoTWV0YWRhdGFEaWFsb2cpO1xuXG4gIGRpYWxvZ0RhdGEuYnJ1c2hNZXRhZGF0YURpYWxvZ1NlZ0luZGV4LnNldChzZWdJbmRleCk7XG4gIGRpYWxvZ0RhdGEuYnJ1c2hNZXRhZGF0YURpYWxvZ01ldGFkYXRhLnNldChtZXRhZGF0YSk7XG4gIGRpYWxvZ0RhdGEuYnJ1c2hNZXRhZGF0YURpYWxvZ0NhbGxiYWNrLnNldChjYWxsYmFjayk7XG5cbiAgYnJ1c2hNZXRhZGF0YURpYWxvZy5zaG93TW9kYWwoKTtcbiAgKi9cbn1cbiIsImltcG9ydCB7IHN0b3JlIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG5jb25zdCBtb2R1bGVzID0gc3RvcmUubW9kdWxlcztcblxuZXhwb3J0IGNsYXNzIFBvbHlnb24ge1xuICBjb25zdHJ1Y3RvcihcbiAgICBwb2ludHMsXG4gICAgc29wSW5zdGFuY2VVaWQsXG4gICAgc2VyaWVzSW5zdGFuY2VVaWQsXG4gICAgc3RydWN0dXJlU2V0VWlkLFxuICAgIFJPSUNvbnRvdXJVaWQsXG4gICAgcG9seWdvblVpZCxcbiAgICBmcmFtZU51bWJlcixcbiAgICBpbnRlcnBvbGF0ZWRcbiAgKSB7XG4gICAgdGhpcy5fcG9seVBvaW50cyA9IHRoaXMuX2RlZXBDb3B5UG9pbnRzKHBvaW50cyk7XG4gICAgdGhpcy5fc29wSW5zdGFuY2VVaWQgPSBzb3BJbnN0YW5jZVVpZDtcbiAgICB0aGlzLl9zZXJpZXNJbnN0YW5jZVVpZCA9IHNlcmllc0luc3RhbmNlVWlkO1xuICAgIHRoaXMuX3N0cnVjdHVyZVNldFVpZCA9IHN0cnVjdHVyZVNldFVpZDtcbiAgICB0aGlzLl9ST0lDb250b3VyVWlkID0gUk9JQ29udG91clVpZDtcbiAgICB0aGlzLl9wb2x5Z29uVWlkID0gcG9seWdvblVpZDtcbiAgICB0aGlzLl9mcmFtZU51bWJlciA9IGZyYW1lTnVtYmVyO1xuICAgIHRoaXMuX2ludGVycG9sYXRlZCA9IGludGVycG9sYXRlZDtcbiAgfVxuXG4gIF9kZWVwQ29weVBvaW50cyhwb2ludHMpIHtcbiAgICAvLyBDcmVhdGVzIGEgZGVlcCBjb3B5IG9mIHRoZSBwb2ludHMgYXJyYXlcbiAgICBjb25zdCBwb2x5UG9pbnRzID0gW107XG4gICAgY29uc3QgaXNaID0gcG9pbnRzWzBdLnogIT09IHVuZGVmaW5lZDtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwb2x5UG9pbnRzLnB1c2goe1xuICAgICAgICB4OiBwb2ludHNbaV0ueCxcbiAgICAgICAgeTogcG9pbnRzW2ldLnlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaXNaKSB7XG4gICAgICAgIHBvbHlQb2ludHNbaV0ueiA9IHBvaW50c1tpXS56O1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwb2x5UG9pbnRzO1xuICB9XG5cbiAgZ2V0RnJlZWhhbmRUb29sRGF0YShpbXBvcnRUeXBlKSB7XG4gICAgY29uc3Qgc2VyaWVzSW5zdGFuY2VVaWQgPSB0aGlzLl9zZXJpZXNJbnN0YW5jZVVpZDtcbiAgICBjb25zdCBzdHJ1Y3R1cmVTZXRVaWQgPSB0aGlzLl9zdHJ1Y3R1cmVTZXRVaWQ7XG4gICAgY29uc3QgUk9JQ29udG91clVpZCA9IHRoaXMuX1JPSUNvbnRvdXJVaWQ7XG5cbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG5cbiAgICBjb25zdCByZWZlcmVuY2VkUk9JQ29udG91ciA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLlJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCk7XG4gICAgY29uc3QgcmVmZXJlbmNlZFN0cnVjdHVyZVNldCA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcblxuICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICB1aWQ6IHRoaXMuX3BvbHlnb25VaWQsXG4gICAgICBzZXJpZXNJbnN0YW5jZVVpZCxcbiAgICAgIHN0cnVjdHVyZVNldFVpZCxcbiAgICAgIFJPSUNvbnRvdXJVaWQsXG4gICAgICByZWZlcmVuY2VkUk9JQ29udG91cixcbiAgICAgIHJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQsXG4gICAgICB2aXNpYmxlOiB0cnVlLFxuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIGludmFsaWRhdGVkOiB0cnVlLFxuICAgICAgaGFuZGxlczoge1xuICAgICAgICBwb2ludHM6IFtdXG4gICAgICB9XG4gICAgfTtcblxuICAgIGlmICh0aGlzLl9zb3BJbnN0YW5jZVVpZCkge1xuICAgICAgZGF0YS5zb3BJbnN0YW5jZVVJRCA9IHRoaXMuX3NvcEluc3RhbmNlVWlkO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9pbnRlcnBvbGF0ZWQpIHtcbiAgICAgIGRhdGEuaW50ZXJwb2xhdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB0aGlzLl9nZW5lcmF0ZVBvaW50cyhkYXRhLmhhbmRsZXMucG9pbnRzKTtcblxuICAgIGRhdGEuaGFuZGxlcy50ZXh0Qm94ID0ge1xuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIGhhc01vdmVkOiBmYWxzZSxcbiAgICAgIG1vdmVzSW5kZXBlbmRlbnRseTogZmFsc2UsXG4gICAgICBkcmF3bkluZGVwZW5kZW50bHk6IHRydWUsXG4gICAgICBhbGxvd2VkT3V0c2lkZUltYWdlOiB0cnVlLFxuICAgICAgaGFzQm91bmRpbmdCb3g6IHRydWVcbiAgICB9O1xuXG4gICAgZGF0YS5wb2x5Qm91bmRpbmdCb3ggPSB7fTtcblxuICAgIGRhdGEudG9CZVNjYWxlZCA9IGltcG9ydFR5cGU7XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIF9nZW5lcmF0ZVBvaW50cyhwb2ludHMpIHtcbiAgICAvLyBDb25zdHJ1Y3QgZGF0YS5oYW5kbGVzLnBvaW50cyBhcnJheVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fcG9seVBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgcG9pbnRzLnB1c2godGhpcy5fZGVlcENvcHlPbmVQb2ludChpKSk7XG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgbGluZXMgdG8gYmUgZHJhd25cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGkgPT09IHBvaW50cy5sZW5ndGggLSAxKSB7XG4gICAgICAgIHBvaW50c1tpXS5saW5lcy5wdXNoKHBvaW50c1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwb2ludHNbaV0ubGluZXMucHVzaChwb2ludHNbaSArIDFdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfZGVlcENvcHlPbmVQb2ludChpKSB7XG4gICAgbGV0IHBvaW50ID0ge1xuICAgICAgeDogdGhpcy5fcG9seVBvaW50c1tpXS54LFxuICAgICAgeTogdGhpcy5fcG9seVBvaW50c1tpXS55LFxuICAgICAgbGluZXM6IFtdXG4gICAgfTtcblxuICAgIGlmICh0aGlzLl9wb2x5UG9pbnRzW2ldLnogIT09IHVuZGVmaW5lZCkge1xuICAgICAgcG9pbnQueiA9IHRoaXMuX3BvbHlQb2ludHNbaV0uejtcbiAgICB9XG5cbiAgICByZXR1cm4gcG9pbnQ7XG4gIH1cblxuICBnZXQgcG9seVBvaW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9seVBvaW50cztcbiAgfVxuICBnZXQgc29wSW5zdGFuY2VVaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NvcEluc3RhbmNlVWlkO1xuICB9XG5cbiAgZ2V0IHVpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fcG9seWdvblVpZDtcbiAgfVxuXG4gIGdldCBmcmFtZU51bWJlcigpIHtcbiAgICByZXR1cm4gdGhpcy5fZnJhbWVOdW1iZXI7XG4gIH1cbn1cbiIsImltcG9ydCB7IGdsb2JhbEltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZU1hbmFnZXIsIGdldFRvb2xTdGF0ZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcblxuY29uc3QgZ2xvYmFsVG9vbFN0YXRlTWFuYWdlciA9IGdsb2JhbEltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZU1hbmFnZXI7XG5cbi8qKlxuICogZ2VuZXJhdGVJbnRlcnBvbGF0aW9uTGlzdCAtIEdlbmVyYXRlIHRoZSBsaXN0IG9mIGNvbnRvdXJzIHRvIGludGVycG9sYXRlLFxuICogaW5jbHVkaW5nIHdoZXRoZXIgdGhleSBhcmUgbmV3IGNvbnRvdXJzLCBvciBpbnRlcnBvbGF0ZWQgY29udG91cnMgdGhhdCBuZWVkXG4gKiB0byBiZSB1cGRhdGVkLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gdG9vbERhdGEgVGhlIHRvb2wgZGF0YSBvZiB0aGUgZnJlZWhhbmQzRCBjb250b3VyLlxuICogQHJldHVybiB7b2JqZWN0fSBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgUk9JQ29udG91ckRhdGEgYW5kIHRoZVxuICogaW50ZXJwb2xhdGlvbkxpc3QuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh0b29sRGF0YSwgZWxlbWVudCkge1xuICBjb25zdCBST0lDb250b3VyVWlkID0gdG9vbERhdGEuUk9JQ29udG91clVpZDtcbiAgY29uc3QgaW1hZ2VJZHMgPSBfZ2V0SW1hZ2VJZHNPZkFjdGl2ZVNlcmllcyhlbGVtZW50KTtcbiAgY29uc3QgUk9JQ29udG91ckRhdGEgPSBfZ2V0Uk9JQ29udG91ckRhdGEoaW1hZ2VJZHMsIFJPSUNvbnRvdXJVaWQpO1xuICBjb25zdCBleHRlbnQgPSBfZ2V0RXh0ZW50T2ZSZWdpb24oUk9JQ29udG91ckRhdGEpO1xuICBjb25zdCBzbGljZUVkaXRlZCA9IF9nZXRTbGljZVBvc2l0aW9uT2ZUb29sRGF0YShST0lDb250b3VyRGF0YSwgdG9vbERhdGEudWlkKTtcblxuICBjb25zdCBpbnRlcnBvbGF0aW9uTGlzdCA9IFtdO1xuXG4gIC8vIENoZWNrIGlmIGNvbnRvdXJzIGJldHdlZW4gdGhlIGV4dGVudCBjYW4gYmUgaW50ZXJwb2xhdGVkLlxuICBmb3IgKGxldCBpID0gZXh0ZW50WzBdICsgMTsgaSA8PSBleHRlbnRbMV0gLSAxOyBpKyspIHtcbiAgICBpZiAoX3NsaWNlTmVlZHNJbnRlcnBvbGF0aW5nKFJPSUNvbnRvdXJEYXRhLCBpKSkge1xuICAgICAgY29uc3QgY29udG91clBhaXIgPSBfZ2V0Qm91bmRpbmdQYWlyKGksIGV4dGVudCwgUk9JQ29udG91ckRhdGEpO1xuXG4gICAgICBpZiAoY29udG91clBhaXIgJiYgKGNvbnRvdXJQYWlyWzBdID09PSBzbGljZUVkaXRlZCB8fCBjb250b3VyUGFpclsxXSA9PT0gc2xpY2VFZGl0ZWQpKSB7XG4gICAgICAgIF9hcHBlbmRpbnRlcnBvbGF0aW9uTGlzdChjb250b3VyUGFpciwgaW50ZXJwb2xhdGlvbkxpc3QpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgUk9JQ29udG91ckRhdGEsXG4gICAgaW50ZXJwb2xhdGlvbkxpc3RcbiAgfTtcbn1cblxuLyoqXG4gKiBfZ2V0U2xpY2VQb3NpdGlvbk9mVG9vbERhdGEgLSBGaW5kcyB0aGUgc2xpY2UgdGhhdCB3YXMgZWRpdGVkLlxuICpcbiAqIEBwYXJhbSAge3R5cGV9IFJPSUNvbnRvdXJEYXRhIGRlc2NyaXB0aW9uXG4gKiBAcGFyYW0gIHt0eXBlfSBwb2x5Z29uVWlkICAgICBkZXNjcmlwdGlvblxuICogQHJldHVybiB7dHlwZX0gICAgICAgICAgICAgICAgZGVzY3JpcHRpb25cbiAqL1xuZnVuY3Rpb24gX2dldFNsaWNlUG9zaXRpb25PZlRvb2xEYXRhKFJPSUNvbnRvdXJEYXRhLCBwb2x5Z29uVWlkKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgUk9JQ29udG91ckRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoUk9JQ29udG91ckRhdGFbaV0uY29udG91cnMpIHtcbiAgICAgIGNvbnN0IGNvbnRvdXJzID0gUk9JQ29udG91ckRhdGFbaV0uY29udG91cnM7XG5cbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29udG91cnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKGNvbnRvdXJzW2pdLnVpZCA9PT0gcG9seWdvblVpZCkge1xuICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuO1xufVxuXG4vKipcbiAqIF9nZXRJbWFnZUlkc09mQWN0aXZlU2VyaWVzIC0gcmV0dXJucyBhbiBhcnJheSBvZiB0aGUgaW1hZ2VJZHMgZm9yIHRoZSBjdXJyZW50XG4gKiBhY3RpdmUgc2VyaWVzLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ1tdfSBBbiBhcnJheSBvZiBpbWFnZUlkcy5cbiAqL1xuXG5mdW5jdGlvbiBfZ2V0SW1hZ2VJZHNPZkFjdGl2ZVNlcmllcyhlbGVtZW50KSB7XG4gIGNvbnN0IHN0YWNrVG9vbFN0YXRlID0gZ2V0VG9vbFN0YXRlKGVsZW1lbnQsICdzdGFjaycpO1xuXG4gIHJldHVybiBzdGFja1Rvb2xTdGF0ZS5kYXRhWzBdLmltYWdlSWRzO1xufVxuXG4vKipcbiAqIF9nZXRST0lDb250b3VyRGF0YSAtIEdlbmVyYXRlcyBhIGxpc3Qgb2YgdGhlIHNsaWNlIGxvY2F0aW9ucyBvZiB0aGUgMkRcbiAqIHBvbHlnb25zIHRoYXQgbWFrZSB1cCB0aGUgUk9JQ29udG91ci5cbiAqXG4gKiBAcGFyYW0gIHtTdHJpbmdbXX0gaW1hZ2VJZHMgIEFuIGFycmF5IG9mIEltYWdlIElkcy5cbiAqIEBwYXJhbSAge3R5cGV9IFJPSUNvbnRvdXJVaWQgVGhlIFVJRCBvZiB0aGUgUk9JQ29udG91ci5cbiAqIEByZXR1cm4ge29iamVjdFtdfSAgICAgICAgICAgVGhlIGxpc3Qgb2YgY29udG91ciBsb2NhdGlvbnMgaW4gdGhlIHN0YWNrLlxuICovXG5cbmZ1bmN0aW9uIF9nZXRST0lDb250b3VyRGF0YShpbWFnZUlkcywgUk9JQ29udG91clVpZCkge1xuICBjb25zdCBST0lDb250b3VyRGF0YSA9IFtdO1xuICBjb25zdCB0b29sU3RhdGVNYW5hZ2VyID0gZ2xvYmFsVG9vbFN0YXRlTWFuYWdlci5zYXZlVG9vbFN0YXRlKCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZUlkcy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGltYWdlSWQgPSBpbWFnZUlkc1tpXTtcbiAgICBjb25zdCBpbWFnZVRvb2xTdGF0ZSA9IHRvb2xTdGF0ZU1hbmFnZXJbaW1hZ2VJZF07XG5cbiAgICBpZiAoIWltYWdlVG9vbFN0YXRlIHx8ICFpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaSkge1xuICAgICAgUk9JQ29udG91ckRhdGEucHVzaCh7XG4gICAgICAgIGltYWdlSWRcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb250b3VycyA9IGltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pLmRhdGEuZmlsdGVyKGNvbnRvdXIgPT4ge1xuICAgICAgICByZXR1cm4gY29udG91ci5ST0lDb250b3VyVWlkID09PSBST0lDb250b3VyVWlkO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGNvbnRvdXJzT25TbGljZSA9IHtcbiAgICAgICAgaW1hZ2VJZFxuICAgICAgfTtcblxuICAgICAgaWYgKGNvbnRvdXJzLmxlbmd0aCkge1xuICAgICAgICBjb250b3Vyc09uU2xpY2UuY29udG91cnMgPSBjb250b3VycztcbiAgICAgIH1cblxuICAgICAgUk9JQ29udG91ckRhdGEucHVzaChjb250b3Vyc09uU2xpY2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBST0lDb250b3VyRGF0YTtcbn1cblxuLyoqXG4gKiBfZ2V0RXh0ZW50T2ZSZWdpb24gLSBSZXR1cm5zIGEgMiBlbGVtZW50IGFycmF5IHdpdGggdGhlIHNsaWNlIGxvY2F0aW9ucyBvZlxuICogdG9wIGFuZCBib3R0b20gcG9seWdvbiBvZiB0aGUgUk9JQ29udG91ci5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IFJPSUNvbnRvdXJEYXRhICBEYXRhIG9uIHRoZSBzbGljZSBsb2NhdGlvbiBvZiBjb250b3Vyc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBST0lDb250b3VyLlxuICogQHJldHVybiB7TnVtYmVyW119ICAgICAgICAgICAgICAgVGhlIHNsaWNlIGxvY2F0aW9ucyBvZiB0aGUgdG9wIGFuZCBib3R0b21cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvbHlnb24gb2YgdGhlIFJPSUNvbnRvdXIuXG4gKi9cblxuZnVuY3Rpb24gX2dldEV4dGVudE9mUmVnaW9uKFJPSUNvbnRvdXJEYXRhKSB7XG4gIGNvbnN0IGV4dGVudCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgUk9JQ29udG91ckRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoUk9JQ29udG91ckRhdGFbaV0uY29udG91cnMpIHtcbiAgICAgIGV4dGVudC5wdXNoKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IFJPSUNvbnRvdXJEYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgaWYgKFJPSUNvbnRvdXJEYXRhW2ldLmNvbnRvdXJzKSB7XG4gICAgICBleHRlbnQucHVzaChpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBleHRlbnQ7XG59XG5cbi8qKlxuICogX3NsaWNlTmVlZHNJbnRlcnBvbGF0aW5nIC0gQ2hlY2sgd2hldGhlciB0aGVyZSBhcmUgbm8gY29udG91cnMgb24gdGhpc1xuICogc2xpY2UsIG9yIG9uZSB3aGljaCBpcyBhbiBpbnRlcnBvbGF0ZWQgY29udG91ci5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IFJPSUNvbnRvdXJEYXRhICBEYXRhIG9uIHRoZSBzbGljZSBsb2NhdGlvbiBvZiBjb250b3Vyc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBST0lDb250b3VyLlxuICogQHBhcmFtICB7TnVtYmVyfSBzbGljZUluZGV4ICAgICAgVGhlIHNsaWNlIGluZGV4LlxuICogQHJldHVybiB7Ym9vbGVhbn0gICAgICAgICAgICAgICAgV2hldGhlciBvciBub3QgdGhlIHNsaWNlIG5lZWRzIGludGVycG9sYXRpbmcuXG4gKi9cbmZ1bmN0aW9uIF9zbGljZU5lZWRzSW50ZXJwb2xhdGluZyhST0lDb250b3VyRGF0YSwgc2xpY2VJbmRleCkge1xuICByZXR1cm4gKFxuICAgICFST0lDb250b3VyRGF0YVtzbGljZUluZGV4XS5jb250b3VycyB8fFxuICAgIChST0lDb250b3VyRGF0YVtzbGljZUluZGV4XS5jb250b3Vycy5sZW5ndGggPT09IDEgJiYgUk9JQ29udG91ckRhdGFbc2xpY2VJbmRleF0uY29udG91cnNbMF0uaW50ZXJwb2xhdGVkKVxuICApO1xufVxuXG4vKipcbiAqIF9hcHBlbmRpbnRlcnBvbGF0aW9uTGlzdCAtIElmIHRoZSBjb250b3VyIG9uIHNsaWNlIGkgY2FuIGJlIHVwZGF0ZWQsIGFkZCBpdCB0byB0aGVcbiAqIGludGVycG9sYXRpb25MaXN0LlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gc2xpY2VJbmRleCAgICAgIFRoZSBzbGljZSBpbmRleC5cbiAqIEBwYXJhbSAge051bWJlcltdfSBleHRlbnQgICAgICAgIFRoZSBleHRlbnQgb2Ygc2xpY2Ugb2NjdXBhbmN5IG9mIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUk9JQ29udG91ci5cbiAqIEBwYXJhbSAge29iamVjdFtdfSBST0lDb250b3VyRGF0YSAgRGF0YSBmb3IgdGhlIHNsaWNlIGxvY2F0aW9uIG9mIGNvbnRvdXJzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIFJPSUNvbnRvdXIuXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gaW50ZXJwb2xhdGlvbkxpc3QgVGhlIGxpc3Qgb2YgY29udG91cnMgdG8gYmUgaW50ZXJwb2xhdGVkLlxuICogQHJldHVybiB7bnVsbH1cbiAqL1xuZnVuY3Rpb24gX2FwcGVuZGludGVycG9sYXRpb25MaXN0KGNvbnRvdXJQYWlyLCBpbnRlcnBvbGF0aW9uTGlzdCkge1xuICBpZiAoIWludGVycG9sYXRpb25MaXN0W2NvbnRvdXJQYWlyWzBdXSkge1xuICAgIGludGVycG9sYXRpb25MaXN0W2NvbnRvdXJQYWlyWzBdXSA9IHtcbiAgICAgIHBhaXI6IGNvbnRvdXJQYWlyLFxuICAgICAgbGlzdDogW11cbiAgICB9O1xuICB9XG59XG5cbi8qKlxuICogX2dldEJvdW5kaW5nUGFpciAtIEdpdmVuIHRoZSBzbGljZSBpbmRleCBhbmQgZXh0ZW50IG9mIHRoZSBST0lDb250b3VyLFxuICogZ2V0IHRoZSBwYWlyIG9mIHBvbHlnb25zIHRvIHVzZSBmb3IgaW50ZXJwb2xhdGlvbiBvZiB0aGUgc2xpY2UuIFJldHVybnNcbiAqIHVuZGVmaW5lZCBpZiB0aGVyZSBpcyBhbiBhbWJpZ3VpdHkgYW5kIGludGVycG9sYXRpb24gY2FuJ3QgdGFrZSBwbGFjZS5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHNsaWNlSW5kZXggICBUaGUgc2xpY2UgaW5kZXguXG4gKiBAcGFyYW0gIHtOdW1iZXJbXX0gZXh0ZW50ICAgICAgICBUaGUgZXh0ZW50IG9mIHNsaWNlIG9jY3VwYW5jeSBvZiB0aGVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJPSUNvbnRvdXIuXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gUk9JQ29udG91ckRhdGEgIERhdGEgZm9yIHRoZSBzbGljZSBsb2NhdGlvbiBvZiBjb250b3Vyc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBST0lDb250b3VyLlxuICogQHJldHVybiB7TnVtYmVyW10gfHwgdW5kZWZpbmVkfSAgVGhlIHBhaXIgb2Ygc2xpY2UgaW5kaWNpZXMsIG9yIHVuZGVmaW5lZCBpZlxuICogdGhlIGNvbnRvdXJzIHRvIHVzZSBmb3IgaW50ZXJwb2xhdGlvbiBpcyBhbWJpZ3VvdXMuXG4gKi9cblxuZnVuY3Rpb24gX2dldEJvdW5kaW5nUGFpcihzbGljZUluZGV4LCBleHRlbnQsIFJPSUNvbnRvdXJEYXRhKSB7XG4gIGxldCBjb250b3VyUGFpciA9IFtdO1xuICBsZXQgY2FuSW50ZXJwb2xhdGUgPSB0cnVlO1xuXG4gIC8vIENoZWNrIGZvciBuZWFyZXN0IGxvd2VzdCBzbGljZUluZGV4IGNvbnRhaW5pbmcgY29udG91cnMuXG4gIGZvciAobGV0IGkgPSBzbGljZUluZGV4IC0gMTsgaSA+PSBleHRlbnRbMF07IGktLSkge1xuICAgIGlmIChST0lDb250b3VyRGF0YVtpXS5jb250b3Vycykge1xuICAgICAgY29uc3QgY29udG91cnMgPSBST0lDb250b3VyRGF0YVtpXS5jb250b3VycztcblxuICAgICAgaWYgKGNvbnRvdXJzWzBdLmludGVycG9sYXRlZCkge1xuICAgICAgICAvLyBUaGlzIGNvbnRvdXIgaXMgaW50ZXJwb2xhdGVkLiBXZSBuZWVkIHRvXG4gICAgICAgIC8vIEZpbmQgYSBzb2xpZCBjb250b3VyIHRvIGludGVycG9sYXRlIGZyb20uXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udG91cnMubGVuZ3RoID4gMSkge1xuICAgICAgICBjYW5JbnRlcnBvbGF0ZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICAvLyBGb3VuZCBzaW5nbGUsIG5vbiBpbnRlcnBvbGF0ZWQgY29udG91ciB0byBpbnRlcnBvbGF0ZSBmcm9tLlxuICAgICAgY29udG91clBhaXIucHVzaChpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGlmICghY2FuSW50ZXJwb2xhdGUpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBDaGVjayBmb3IgbmVhcmVzdCB1cHBlciBzbGljZUluZGV4IGNvbnRhaW5pbmcgY29udG91cnMuXG4gIGZvciAobGV0IGkgPSBzbGljZUluZGV4ICsgMTsgaSA8PSBleHRlbnRbMV07IGkrKykge1xuICAgIGlmIChST0lDb250b3VyRGF0YVtpXS5jb250b3Vycykge1xuICAgICAgY29uc3QgY29udG91cnMgPSBST0lDb250b3VyRGF0YVtpXS5jb250b3VycztcblxuICAgICAgaWYgKGNvbnRvdXJzWzBdLmludGVycG9sYXRlZCkge1xuICAgICAgICAvLyBUaGlzIGNvbnRvdXIgaXMgaW50ZXJwb2xhdGVkLiBXZSBuZWVkIHRvXG4gICAgICAgIC8vIEZpbmQgYSBzb2xpZCBjb250b3VyIHRvIGludGVycG9sYXRlIGZyb20uXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29udG91cnMubGVuZ3RoID4gMSkge1xuICAgICAgICBjYW5JbnRlcnBvbGF0ZSA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBjb250b3VyUGFpci5wdXNoKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjYW5JbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBjb250b3VyUGFpcjtcbn1cbiIsImltcG9ydCB7IGdsb2JhbEltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZU1hbmFnZXIsIHN0b3JlIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG5pbXBvcnQgeyBQb2x5Z29uIH0gZnJvbSAnLi4vY2xhc3Nlcy9Qb2x5Z29uLmpzJztcbmltcG9ydCBnZW5lcmF0ZVVJRCBmcm9tICcuLi9nZW5lcmF0ZVVJRC5qcyc7XG5pbXBvcnQgZ2VuZXJhdGVJbnRlcnBvbGF0aW9uRGF0YSBmcm9tICcuL2dlbmVyYXRlSW50ZXJwb2xhdGlvbkRhdGEuanMnO1xuXG5jb25zdCBnbG9iYWxUb29sU3RhdGVNYW5hZ2VyID0gZ2xvYmFsSW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlTWFuYWdlcjtcbmNvbnN0IGRQID0gMC4yOyAvLyBBaW0gZm9yIDwgMC4ybW0gYmV0d2VlbiBpbnRlcnBvbGF0ZWQgbm9kZXMgd2hlbiBzdXBlci1zYW1wbGluZy5cbmNvbnN0IG1vZHVsZXMgPSBzdG9yZS5tb2R1bGVzO1xuXG4vKipcbiAqIGludGVycG9sYXRlIC0gSW50ZXJwb2xhdGUgbWlzc2luZyBjb250b3VycyBpbiB0aGUgUk9JQ29udG91ci5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IHRvb2xEYXRhIFRoZSB0b29sIGRhdGEgb2YgdGhlIGZyZWVoYW5kM0QgY29udG91ci5cbiAqIEByZXR1cm4ge251bGx9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh0b29sRGF0YSwgZWxlbWVudCkge1xuICBjb25zdCB7IFJPSUNvbnRvdXJEYXRhLCBpbnRlcnBvbGF0aW9uTGlzdCB9ID0gZ2VuZXJhdGVJbnRlcnBvbGF0aW9uRGF0YSh0b29sRGF0YSwgZWxlbWVudCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnRlcnBvbGF0aW9uTGlzdC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpbnRlcnBvbGF0aW9uTGlzdFtpXSkge1xuICAgICAgX2xpbmVhcmx5SW50ZXJwb2xhdGVCZXR3ZWVuKGludGVycG9sYXRpb25MaXN0W2ldLmxpc3QsIGludGVycG9sYXRpb25MaXN0W2ldLnBhaXIsIFJPSUNvbnRvdXJEYXRhKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBfbGluZWFybHlJbnRlcnBvbGF0ZUJldHdlZW4gLSBMaW5lYXJseSBpbnRlcnBvbGF0ZSBhbGwgdGhlIHNsaWNlcyBpbiB0aGVcbiAqIGluZGljaWVzIGFycmF5IGJldHdlZW4gdGhlIGNvbnRvdXJQYWlyLlxuICpcbiAqIEBwYXJhbSAge051bWJlcltdfSBpbmRpY2llcyAgICAgQW4gYXJyYXkgb2Ygc2xpY2UgaW5kaWNpZXMgdG8gaW50ZXJwb2xhdGUuXG4gKiBAcGFyYW0gIHtOdW1iZXJbXX0gY29udG91clBhaXIgIFRoZSBwYWlyIG9mIGNvbnRvdXJzIHRvIGludGVycG9sYXRlIGJldHdlZW4uXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gUk9JQ29udG91ckRhdGEgIERhdGEgZm9yIHRoZSBzbGljZSBsb2NhdGlvbiBvZiBjb250b3Vyc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIFJPSUNvbnRvdXIuXG4gKiBAcmV0dXJuIHtudWxsfVxuICovXG5cbmZ1bmN0aW9uIF9saW5lYXJseUludGVycG9sYXRlQmV0d2VlbihpbmRpY2llcywgY29udG91clBhaXIsIFJPSUNvbnRvdXJEYXRhKSB7XG4gIGNvbnN0IGMxID0gX2dlbmVyYXRlQ2xvc2VkQ29udG91cihST0lDb250b3VyRGF0YVtjb250b3VyUGFpclswXV0uY29udG91cnNbMF0uaGFuZGxlcy5wb2ludHMpO1xuICBjb25zdCBjMiA9IF9nZW5lcmF0ZUNsb3NlZENvbnRvdXIoUk9JQ29udG91ckRhdGFbY29udG91clBhaXJbMV1dLmNvbnRvdXJzWzBdLmhhbmRsZXMucG9pbnRzKTtcblxuICBjb25zdCB7IGMxSW50ZXJwLCBjMkludGVycCB9ID0gX2dlbmVyYXRlSW50ZXJwb2xhdGlvbkNvbnRvdXJQYWlyKGMxLCBjMik7XG5cbiAgLy8gVXNpbmcgdGhlIG5ld2x5IGNvbnN0cnVjdGVkIGNvbnRvdXJzLCBpbnRlcnBvbGF0ZSBlYWNoIFJPSS5cbiAgaW5kaWNpZXMuZm9yRWFjaChmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICBfbGluZWFybHlJbnRlcnBvbGF0ZUNvbnRvdXIoYzFJbnRlcnAsIGMySW50ZXJwLCBpbmRleCwgY29udG91clBhaXIsIFJPSUNvbnRvdXJEYXRhLCBjMS54Lmxlbmd0aCA+IGMyLngubGVuZ3RoKTtcbiAgfSk7XG59XG5cbi8qKlxuICogX2xpbmVhcmx5SW50ZXJwb2xhdGVDb250b3VyIC0gSW5zZXJ0cyBhIGxpbmVhcmx5IGludGVycG9sYXRlZCBjb250b3VyIGF0XG4gKiBzcGVjaWZpZWQgc2xpY2UgaW5kZXguXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBjMUludGVycCAgICAgICBUaGUgZmlyc3QgcmVmZXJlbmNlIGNvbnRvdXIuXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMySW50ZXJwICAgICAgIFRoZSBzZWNvbmQgcmVmZXJlbmNlIGNvbnRvdXIuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHNsaWNlSW5kZXggICAgICAgVGhlIHNsaWNlIGluZGV4IHRvIGludGVycG9sYXRlLlxuICogQHBhcmFtICB7TnVtYmVye319IGNvbnRvdXJQYWlyICAgIFRoZSBzbGljZSBpbmRpY2llcyBvZiB0aGUgcmVmZXJlbmNlIGNvbnRvdXJzLlxuICogQHBhcmFtICB7b2JqZWN0W119IFJPSUNvbnRvdXJEYXRhICBEYXRhIGZvciB0aGUgc2xpY2UgbG9jYXRpb24gb2YgY29udG91cnNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgUk9JQ29udG91ci5cbiAqIEBwYXJhbSAge2Jvb2xlYW59IGMxSGFzTW9yZU5vZGVzIFRydWUgaWYgYzEgaGFzIG1vcmUgbm9kZXMgdGhhbiBjMi5cbiAqIEByZXR1cm4ge251bGx9XG4gKi9cbmZ1bmN0aW9uIF9saW5lYXJseUludGVycG9sYXRlQ29udG91cihjMUludGVycCwgYzJJbnRlcnAsIHNsaWNlSW5kZXgsIGNvbnRvdXJQYWlyLCBST0lDb250b3VyRGF0YSwgYzFIYXNNb3JlTm9kZXMpIHtcbiAgY29uc3QgekludGVycCA9IChzbGljZUluZGV4IC0gY29udG91clBhaXJbMF0pIC8gKGNvbnRvdXJQYWlyWzFdIC0gY29udG91clBhaXJbMF0pO1xuICBjb25zdCBpbnRlcnBvbGF0ZWQyRENvbnRvdXIgPSBfZ2VuZXJhdGVJbnRlcnBvbGF0ZWRPcGVuQ29udG91cihjMUludGVycCwgYzJJbnRlcnAsIHpJbnRlcnAsIGMxSGFzTW9yZU5vZGVzKTtcblxuICBjb25zdCBjMU1ldGFkYXRhID0gUk9JQ29udG91ckRhdGFbY29udG91clBhaXJbMF1dLmNvbnRvdXJzWzBdO1xuXG4gIGlmIChST0lDb250b3VyRGF0YVtzbGljZUluZGV4XS5jb250b3Vycykge1xuICAgIF9lZGl0SW50ZXJwb2xhdGVkQ29udG91cihpbnRlcnBvbGF0ZWQyRENvbnRvdXIsIFJPSUNvbnRvdXJEYXRhW3NsaWNlSW5kZXhdLmltYWdlSWQsIGMxTWV0YWRhdGEpO1xuICB9IGVsc2Uge1xuICAgIF9hZGRJbnRlcnBvbGF0ZWRDb250b3VyKGludGVycG9sYXRlZDJEQ29udG91ciwgUk9JQ29udG91ckRhdGFbc2xpY2VJbmRleF0uaW1hZ2VJZCwgYzFNZXRhZGF0YSk7XG4gIH1cbn1cblxuLyoqXG4gKiBfZ2VuZXJhdGVJbnRlcnBvbGF0aW9uQ29udG91clBhaXIgLSBnZW5lcmF0ZXMgdHdvIGFsaWduZWQgY29udG91cnMgd2l0aCBhblxuICogZXF1YWwgbnVtYmVyIG9mIG5vZGVzIGZyb20gd2hpY2ggYW4gaW50ZXJtZWRpYXRlIGNvbnRvdXIgbWF5IGJlIGludGVycG9sYXRlZC5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMxIFRoZSBmaXJzdCBjb250b3VyLlxuICogQHBhcmFtICB7b2JqZWN0fSBjMiBUaGUgc2Vjb25kIGNvbnRvdXIuXG4gKiBAcmV0dXJuIHtvYmplY3R9ICBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgdHdvIGNvbnRvdXJzLlxuICovXG5mdW5jdGlvbiBfZ2VuZXJhdGVJbnRlcnBvbGF0aW9uQ29udG91clBhaXIoYzEsIGMyKSB7XG4gIGNvbnN0IGN1bVBlcmltMSA9IF9nZXRDdW11bGF0aXZlUGVyaW1ldGVyKGMxKTtcbiAgY29uc3QgY3VtUGVyaW0yID0gX2dldEN1bXVsYXRpdmVQZXJpbWV0ZXIoYzIpO1xuXG4gIGNvbnN0IGludGVycE5vZGVzID0gTWF0aC5tYXgoXG4gICAgTWF0aC5jZWlsKGN1bVBlcmltMVtjdW1QZXJpbTEubGVuZ3RoIC0gMV0gLyBkUCksXG4gICAgTWF0aC5jZWlsKGN1bVBlcmltMltjdW1QZXJpbTIubGVuZ3RoIC0gMV0gLyBkUClcbiAgKTtcblxuICBjb25zdCBjdW1QZXJpbTFOb3JtID0gX25vcm1hbGlzZWRDdW11bGF0aXZlUGVyaW1ldGVyKGN1bVBlcmltMSk7XG4gIGNvbnN0IGN1bVBlcmltMk5vcm0gPSBfbm9ybWFsaXNlZEN1bXVsYXRpdmVQZXJpbWV0ZXIoY3VtUGVyaW0yKTtcblxuICBjb25zdCBudW1Ob2RlczEgPSBpbnRlcnBOb2RlcyArIGMyLngubGVuZ3RoO1xuICBjb25zdCBudW1Ob2RlczIgPSBpbnRlcnBOb2RlcyArIGMxLngubGVuZ3RoO1xuXG4gIC8vIGNvbmNhdGluYXRlIHAgJiYgY3VtUGVyaW1Ob3JtXG4gIGNvbnN0IHBlcmltMUludGVycCA9IF9nZXRJbnRlcnBvbGF0ZWRQZXJpbShudW1Ob2RlczEsIGN1bVBlcmltMU5vcm0pO1xuICBjb25zdCBwZXJpbTJJbnRlcnAgPSBfZ2V0SW50ZXJwb2xhdGVkUGVyaW0obnVtTm9kZXMyLCBjdW1QZXJpbTJOb3JtKTtcblxuICBjb25zdCBwZXJpbTFJbmQgPSBfZ2V0SW5kaWNhdG9yQXJyYXkoYzEsIG51bU5vZGVzMSk7XG4gIGNvbnN0IHBlcmltMkluZCA9IF9nZXRJbmRpY2F0b3JBcnJheShjMiwgbnVtTm9kZXMyKTtcblxuICBjb25zdCBub2Rlc1BlclNlZ21lbnQxID0gX2dldE5vZGVzUGVyU2VnbWVudChwZXJpbTFJbnRlcnAsIHBlcmltMUluZCk7XG4gIGNvbnN0IG5vZGVzUGVyU2VnbWVudDIgPSBfZ2V0Tm9kZXNQZXJTZWdtZW50KHBlcmltMkludGVycCwgcGVyaW0ySW5kKTtcblxuICBjb25zdCBjMWkgPSBfZ2V0U3VwZXJTYW1wbGVkQ29udG91cihjMSwgbm9kZXNQZXJTZWdtZW50MSk7XG4gIGNvbnN0IGMyaSA9IF9nZXRTdXBlclNhbXBsZWRDb250b3VyKGMyLCBub2Rlc1BlclNlZ21lbnQyKTtcblxuICAvLyBLZWVwIGMyaSBmaXhlZCBhbmQgc2hpZnQgdGhlIHN0YXJ0aW5nIG5vZGUgb2YgYzFpIHRvIG1pbmltaXNlIHRoZSB0b3RhbCBsZW5ndGggb2Ygc2VnbWVudHMuXG4gIF9zaGlmdFN1cGVyU2FtcGxlZENvbnRvdXJJblBsYWNlKGMxaSwgYzJpKTtcblxuICByZXR1cm4gX3JlZHVjZUNvbnRvdXJzVG9PcmlnaW5Ob2RlcyhjMWksIGMyaSk7XG59XG5cbi8qKlxuICogX2FkZEludGVycG9sYXRlZENvbnRvdXIgLSBBZGRzIGEgbmV3IGNvbnRvdXIgdG8gdGhlIGltYWdlSWQuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBpbnRlcnBvbGF0ZWQyRENvbnRvdXIgVGhlIHBvbHlnb24gdG8gYWRkIHRvIHRoZSBST0lDb250b3VyLlxuICogQHBhcmFtICB7U3RyaW5nfSBpbWFnZUlkICAgICAgICAgICAgICAgVGhlIGltYWdlSWQgdG8gYWRkIHRoZSBwb2x5Z29uIHRvLlxuICogQHBhcmFtICB7dHlwZX0gcmVmZXJlbmNlZFRvb2xEYXRhICAgIFRoZSB0b29sRGF0YSBvZiBhbm90aGVyIHBvbHlnb24gaW4gdGhlXG4gKiBST0lDb250b3VyLCB0byBhc3NpZ24gYXBwcm9wcmlhdGUgbWV0YWRhdGEgdG8gdGhlIG5ldyBwb2x5Z29uLlxuICogQHJldHVybiB7bnVsbH1cbiAqL1xuZnVuY3Rpb24gX2FkZEludGVycG9sYXRlZENvbnRvdXIoaW50ZXJwb2xhdGVkMkRDb250b3VyLCBpbWFnZUlkLCByZWZlcmVuY2VkVG9vbERhdGEpIHtcbiAgY29uc3QgcG9pbnRzID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnRlcnBvbGF0ZWQyRENvbnRvdXIueC5sZW5ndGg7IGkrKykge1xuICAgIHBvaW50cy5wdXNoKHtcbiAgICAgIHg6IGludGVycG9sYXRlZDJEQ29udG91ci54W2ldLFxuICAgICAgeTogaW50ZXJwb2xhdGVkMkRDb250b3VyLnlbaV1cbiAgICB9KTtcbiAgfVxuXG4gIGNvbnN0IHBvbHlnb24gPSBuZXcgUG9seWdvbihcbiAgICBwb2ludHMsXG4gICAgbnVsbCxcbiAgICByZWZlcmVuY2VkVG9vbERhdGEuc2VyaWVzSW5zdGFuY2VVaWQsXG4gICAgcmVmZXJlbmNlZFRvb2xEYXRhLnN0cnVjdHVyZVNldFVpZCxcbiAgICByZWZlcmVuY2VkVG9vbERhdGEuUk9JQ29udG91clVpZCxcbiAgICBnZW5lcmF0ZVVJRCgpLFxuICAgIG51bGwsXG4gICAgdHJ1ZVxuICApO1xuXG4gIGNvbnN0IHRvb2xTdGF0ZU1hbmFnZXIgPSBnbG9iYWxUb29sU3RhdGVNYW5hZ2VyLnNhdmVUb29sU3RhdGUoKTtcblxuICBpZiAoIXRvb2xTdGF0ZU1hbmFnZXJbaW1hZ2VJZF0pIHtcbiAgICB0b29sU3RhdGVNYW5hZ2VyW2ltYWdlSWRdID0ge307XG4gIH1cblxuICBjb25zdCBpbWFnZVRvb2xTdGF0ZSA9IHRvb2xTdGF0ZU1hbmFnZXJbaW1hZ2VJZF07XG5cbiAgaWYgKCFpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaSkge1xuICAgIGltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pID0ge307XG4gICAgaW1hZ2VUb29sU3RhdGUuZnJlZWhhbmRSb2kuZGF0YSA9IFtdO1xuICB9IGVsc2UgaWYgKCFpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhKSB7XG4gICAgaW1hZ2VUb29sU3RhdGUuZnJlZWhhbmRSb2kuZGF0YSA9IFtdO1xuICB9XG5cbiAgaW1hZ2VUb29sU3RhdGUuZnJlZWhhbmRSb2kuZGF0YS5wdXNoKHBvbHlnb24uZ2V0RnJlZWhhbmRUb29sRGF0YShmYWxzZSkpO1xuXG4gIG1vZHVsZXMuZnJlZWhhbmQzRC5zZXR0ZXJzLmluY3JlbWVudFBvbHlnb25Db3VudChcbiAgICByZWZlcmVuY2VkVG9vbERhdGEuc2VyaWVzSW5zdGFuY2VVaWQsXG4gICAgcmVmZXJlbmNlZFRvb2xEYXRhLnN0cnVjdHVyZVNldFVpZCxcbiAgICByZWZlcmVuY2VkVG9vbERhdGEuUk9JQ29udG91clVpZFxuICApO1xufVxuXG4vKipcbiAqIF9lZGl0SW50ZXJwb2xhdGVkQ29udG91ciAtIEVkaXRzIGFuIGludGVycG9sYXRlZCBwb2x5Z29uIG9uIHRoZSBpbWFnZUlkXG4gKiB0aGF0IGNvcnJlc3BvbmRzIHRvIHRoZSBzcGVjaWZpZWQgUk9JQ29udG91ci5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGludGVycG9sYXRlZDJEQ29udG91ciBUaGUgcG9seWdvbiB0byBhZGQgdG8gdGhlIFJPSUNvbnRvdXIuXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGltYWdlSWQgICAgICAgICAgICAgICBUaGUgaW1hZ2VJZCB0byBhZGQgdGhlIHBvbHlnb24gdG8uXG4gKiBAcGFyYW0gIHt0eXBlfSByZWZlcmVuY2VkVG9vbERhdGEgICAgVGhlIHRvb2xEYXRhIG9mIGFub3RoZXIgcG9seWdvbiBpbiB0aGVcbiAqIFJPSUNvbnRvdXIsIHRvIGFzc2lnbiBhcHByb3ByaWF0ZSBtZXRhZGF0YSB0byB0aGUgbmV3IHBvbHlnb24uXG4gKiBAcmV0dXJuIHtudWxsfVxuICovXG5mdW5jdGlvbiBfZWRpdEludGVycG9sYXRlZENvbnRvdXIoaW50ZXJwb2xhdGVkMkRDb250b3VyLCBpbWFnZUlkLCByZWZlcmVuY2VkVG9vbERhdGEpIHtcbiAgY29uc3QgdG9vbFN0YXRlTWFuYWdlciA9IGdsb2JhbFRvb2xTdGF0ZU1hbmFnZXIuc2F2ZVRvb2xTdGF0ZSgpO1xuICBjb25zdCBpbWFnZVRvb2xTdGF0ZSA9IHRvb2xTdGF0ZU1hbmFnZXJbaW1hZ2VJZF07XG5cbiAgaWYgKCFpbWFnZVRvb2xTdGF0ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW1hZ2UgdG9vbHN0YXRlIGRvZXMgbm90IGV4aXN0LiBUaGlzIHNob3VsZCBub3QgYmUgcmVhY2hlZCBpbiB0aGlzIGNhc2UhJyk7XG4gIH1cblxuICAvLyBGaW5kIHRoZSBpbmRleCBvZiB0aGUgcG9seWdvbiBvbiB0aGlzIHNsaWNlIGNvcnJlc3BvbmRpbmcgdG9cbiAgLy8gVGhlIFJPSUNvbnRvdXIuXG4gIGxldCB0b29sRGF0YUluZGV4O1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2VUb29sU3RhdGUuZnJlZWhhbmRSb2kuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhW2ldLlJPSUNvbnRvdXJVaWQgPT09IHJlZmVyZW5jZWRUb29sRGF0YS5ST0lDb250b3VyVWlkKSB7XG4gICAgICB0b29sRGF0YUluZGV4ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IG9sZFBvbHlnb24gPSBpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhW3Rvb2xEYXRhSW5kZXhdO1xuICBjb25zdCBwb2ludHMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGludGVycG9sYXRlZDJEQ29udG91ci54Lmxlbmd0aDsgaSsrKSB7XG4gICAgcG9pbnRzLnB1c2goe1xuICAgICAgeDogaW50ZXJwb2xhdGVkMkRDb250b3VyLnhbaV0sXG4gICAgICB5OiBpbnRlcnBvbGF0ZWQyRENvbnRvdXIueVtpXVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgdXBkYXRlZFBvbHlnb24gPSBuZXcgUG9seWdvbihcbiAgICBwb2ludHMsXG4gICAgbnVsbCxcbiAgICBvbGRQb2x5Z29uLnNlcmllc0luc3RhbmNlVWlkLFxuICAgIG9sZFBvbHlnb24uc3RydWN0dXJlU2V0VWlkLFxuICAgIG9sZFBvbHlnb24uUk9JQ29udG91clVpZCxcbiAgICBvbGRQb2x5Z29uLnVpZCxcbiAgICBudWxsLFxuICAgIHRydWVcbiAgKTtcblxuICBpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhW3Rvb2xEYXRhSW5kZXhdID0gdXBkYXRlZFBvbHlnb24uZ2V0RnJlZWhhbmRUb29sRGF0YShmYWxzZSk7XG59XG5cbi8qKlxuICogX2dlbmVyYXRlSW50ZXJwb2xhdGVkT3BlbkNvbnRvdXIgLSBJbnRlcnBvbGF0ZSBhbiBvcGVuIGNvbnRvdXIgYmV0d2VlbiBjMWlyXG4gKiBhbmQgYzJpciBhdCB0aGUgekludGVycCBwb3NpdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMxaXIgICAgICAgICAgICBUaGUgaW50ZXJwb2xhdGVkIGMxIGNvbnRvdXIgd2l0aFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXJmbHVvdXMgbm9kZXMgcmVtb3ZlZC5cbiAqIEBwYXJhbSAge29iamVjdH0gYzJpciAgICAgICAgICAgIFRoZSBpbnRlcnBvbGF0ZWQgYzIgY29udG91ciB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBlcmZsdW91cyBub2RlcyByZW1vdmVkLlxuICogQHBhcmFtICB7TnVtYmVyfSB6SW50ZXJwICAgICAgICAgVGhlIHotIGNvb3JkaW5hdGUgb2YgdGhlIGRlc2lyZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGludGVycG9sYXRpb24uXG4gKiBAcGFyYW0gIHtib29sZWFufSBjMUhhc01vcmVOb2RlcyBUcnVlIGlmIGMxIGhhcyBtb3JlIG9yaWdpbmFsIG5vZGVzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGFuIGMyLlxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgICAgVGhlIGludGVycG9sYXRlZCBjb250b3VyIGF0IHo9ekludGVycC5cbiAqL1xuZnVuY3Rpb24gX2dlbmVyYXRlSW50ZXJwb2xhdGVkT3BlbkNvbnRvdXIoYzFpciwgYzJpciwgekludGVycCwgYzFIYXNNb3JlTm9kZXMpIHtcbiAgY29uc3QgY0ludGVycCA9IHtcbiAgICB4OiBbXSxcbiAgICB5OiBbXVxuICB9O1xuXG4gIGNvbnN0IGluZGljaWVzID0gYzFIYXNNb3JlTm9kZXMgPyBjMWlyLkkgOiBjMmlyLkk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjMWlyLngubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaW5kaWNpZXNbaV0pIHtcbiAgICAgIGNJbnRlcnAueC5wdXNoKCgxIC0gekludGVycCkgKiBjMWlyLnhbaV0gKyB6SW50ZXJwICogYzJpci54W2ldKTtcbiAgICAgIGNJbnRlcnAueS5wdXNoKCgxIC0gekludGVycCkgKiBjMWlyLnlbaV0gKyB6SW50ZXJwICogYzJpci55W2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY0ludGVycDtcbn1cblxuLyoqXG4gKiBfcmVkdWNlQ29udG91cnNUb09yaWdpbk5vZGVzIC0gUmVtb3ZlcyBhbnkgbm9kZXMgZnJvbSB0aGUgY29udG91cnMgdGhhdCBkb24ndFxuICogY29ycmVzcG9uZCB0byBhbiBvcmlnaW5hbCBjb250b3VyIG5vZGUuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBjMWkgVGhlIGZpcnN0IHN1cGVyLXNhbXBsZWQgY29udG91ci5cbiAqIEBwYXJhbSAge29iamVjdH0gYzJpIFRoZSBzZWNvbmQgc3VwZXItc2FtcGxlZCBjb250b3VyLlxuICogQHJldHVybiB7b2JqZWN0fSAgICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHR3byByZWR1Y2VkIGNvbnRvdXJzLlxuICovXG5mdW5jdGlvbiBfcmVkdWNlQ29udG91cnNUb09yaWdpbk5vZGVzKGMxaSwgYzJpKSB7XG4gIGNvbnN0IGMxSW50ZXJwID0ge1xuICAgIHg6IFtdLFxuICAgIHk6IFtdLFxuICAgIEk6IFtdXG4gIH07XG4gIGNvbnN0IGMySW50ZXJwID0ge1xuICAgIHg6IFtdLFxuICAgIHk6IFtdLFxuICAgIEk6IFtdXG4gIH07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjMWkueC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChjMWkuSVtpXSB8fCBjMmkuSVtpXSkge1xuICAgICAgYzFJbnRlcnAueC5wdXNoKGMxaS54W2ldKTtcbiAgICAgIGMxSW50ZXJwLnkucHVzaChjMWkueVtpXSk7XG4gICAgICBjMUludGVycC5JLnB1c2goYzFpLklbaV0pO1xuXG4gICAgICBjMkludGVycC54LnB1c2goYzJpLnhbaV0pO1xuICAgICAgYzJJbnRlcnAueS5wdXNoKGMyaS55W2ldKTtcbiAgICAgIGMySW50ZXJwLkkucHVzaChjMmkuSVtpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjMUludGVycCxcbiAgICBjMkludGVycFxuICB9O1xufVxuXG4vKipcbiAqIF9zaGlmdFN1cGVyU2FtcGxlZENvbnRvdXJJblBsYWNlIC0gU2hpZnRzIHRoZSBpbmRpY2llcyBvZiBjMWkgYXJvdW5kIHRvXG4gKiBtaW5pbWlzZTogU1VNICh8YzFpW2ldLWMyaVtpXXwpIGZyb20gMCB0byBOLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYzFpIFRoZSBjb250b3VyIHRvIHNoaWZ0LlxuICogQHBhcmFtICB7b2JqZWN0fSBjMmkgVGhlIHJlZmVyZW5jZSBjb250b3VyLlxuICogQG1vZGlmaWVzIGMxaVxuICovXG5mdW5jdGlvbiBfc2hpZnRTdXBlclNhbXBsZWRDb250b3VySW5QbGFjZShjMWksIGMyaSkge1xuICBjb25zdCBjMWlMZW5ndGggPSBjMWkueC5sZW5ndGg7XG5cbiAgbGV0IG9wdGltYWwgPSB7XG4gICAgc3RhcnRpbmdOb2RlOiAwLFxuICAgIHRvdGFsU3F1YXJlZFhZTGVuZ3RoczogSW5maW5pdHlcbiAgfTtcblxuICBmb3IgKGxldCBzdGFydGluZ05vZGUgPSAwOyBzdGFydGluZ05vZGUgPCBjMWlMZW5ndGg7IHN0YXJ0aW5nTm9kZSsrKSB7XG4gICAgbGV0IG5vZGUgPSBzdGFydGluZ05vZGU7XG5cbiAgICAvLyBOT1RFOiAxKSBJZ25vcmUgY2FsY3VsYXRpbmcgWiwgYXMgdGhlIHN1bSBvZiBhbGwgc3F1YXJlZCBaIGRpc3RhbmNlcyB3aWxsIGFsd2F5cyBiZSBhIGNvbnN0YW50LlxuICAgIC8vIE5PVEU6IDIpIERvbid0IG5lZWQgYWN0dWFsIGxlbmd0aCwgc28gZG9uJ3Qgd29ycnkgYWJvdXQgc3F1YXJlIHJvb3RpbmcuXG4gICAgbGV0IHRvdGFsU3F1YXJlZFhZTGVuZ3RocyA9IDA7XG5cbiAgICBmb3IgKGxldCBpdHRlcmF0aW9uID0gMDsgaXR0ZXJhdGlvbiA8IGMxaUxlbmd0aDsgaXR0ZXJhdGlvbisrKSB7XG4gICAgICB0b3RhbFNxdWFyZWRYWUxlbmd0aHMgKz0gKGMxaS54W25vZGVdIC0gYzJpLnhbaXR0ZXJhdGlvbl0pICoqIDIgKyAoYzFpLnlbbm9kZV0gLSBjMmkueVtpdHRlcmF0aW9uXSkgKiogMjtcblxuICAgICAgbm9kZSsrO1xuXG4gICAgICBpZiAobm9kZSA9PT0gYzFpTGVuZ3RoKSBub2RlID0gMDtcbiAgICB9XG5cbiAgICBpZiAodG90YWxTcXVhcmVkWFlMZW5ndGhzIDwgb3B0aW1hbC50b3RhbFNxdWFyZWRYWUxlbmd0aHMpIHtcbiAgICAgIG9wdGltYWwudG90YWxTcXVhcmVkWFlMZW5ndGhzID0gdG90YWxTcXVhcmVkWFlMZW5ndGhzO1xuICAgICAgb3B0aW1hbC5zdGFydGluZ05vZGUgPSBzdGFydGluZ05vZGU7XG4gICAgfVxuICB9XG5cbiAgbGV0IG5vZGUgPSBvcHRpbWFsLnN0YXJ0aW5nTm9kZTtcblxuICBfc2hpZnRDaXJjdWxhckFycmF5KGMxaS54LCBub2RlKTtcbiAgX3NoaWZ0Q2lyY3VsYXJBcnJheShjMWkueSwgbm9kZSk7XG4gIF9zaGlmdENpcmN1bGFyQXJyYXkoYzFpLkksIG5vZGUpO1xufVxuXG4vKipcbiAqIF9zaGlmdENpcmN1bGFyQXJyYXkgLSBTaGlmdCB0aGUgY2lyY3VsYXIgYXJyYXkgYnkgdGhlIGNvdW50LlxuICpcbiAqIEBwYXJhbSAgeypbXX0gYXJyICAgVGhlIGFycmF5LlxuICogQHBhcmFtICB7TnVtYmVyfSBjb3VudCBUaGUgc2hpZnQuXG4gKiBAcmV0dXJuIHsqW119ICAgICAgIFRoZSBzaGlmdGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBfc2hpZnRDaXJjdWxhckFycmF5KGFyciwgY291bnQpIHtcbiAgY291bnQgLT0gYXJyLmxlbmd0aCAqIE1hdGguZmxvb3IoY291bnQgLyBhcnIubGVuZ3RoKTtcbiAgYXJyLnB1c2guYXBwbHkoYXJyLCBhcnIuc3BsaWNlKDAsIGNvdW50KSk7XG4gIHJldHVybiBhcnI7XG59XG5cbi8qKlxuICogX2dldFN1cGVyU2FtcGxlZENvbnRvdXIgLSBHZW5lcmF0ZXMgYSBzdXBlciBzYW1wbGVkIGNvbnRvdXIgd2l0aCBhZGRpdGlvbmFsXG4gKiBub2RlcyBhZGRlZCBwZXIgc2VnbWVudC5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMgICAgICAgICAgICAgICAgIFRoZSBvcmlnaW5hbCBjb250b3VyLlxuICogQHBhcmFtICB7TnVtYmVyW119IG5vZGVzUGVyU2VnbWVudCBBbiBhcnJheSBvZiB0aGUgbnVtYmVyIG9mIG5vZGVzIHRvIGFkZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwZXIgbGluZSBzZWdtZW50LlxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgICAgICAgICBUaGUgc3VwZXIgc2FtcGxlZCBjb250b3VyLlxuICovXG5mdW5jdGlvbiBfZ2V0U3VwZXJTYW1wbGVkQ29udG91cihjLCBub2Rlc1BlclNlZ21lbnQpIHtcbiAgY29uc3QgY2kgPSB7XG4gICAgeDogW10sXG4gICAgeTogW10sXG4gICAgSTogW11cbiAgfTtcblxuICAvLyBMZW5ndGggLSAxLCBwcm9kdWNlcyAnb3BlbicgcG9seWdvbi5cbiAgZm9yIChsZXQgbiA9IDA7IG4gPCBjLngubGVuZ3RoIC0gMTsgbisrKSB7XG4gICAgLy8gQWRkIG9yaWdpbmFsIG5vZGUuXG4gICAgY2kueC5wdXNoKGMueFtuXSk7XG4gICAgY2kueS5wdXNoKGMueVtuXSk7XG4gICAgY2kuSS5wdXNoKHRydWUpO1xuXG4gICAgLy8gQWRkIGxpbmVyYWxseSBpbnRlcnBvbGF0ZWQgbm9kZXMuXG4gICAgY29uc3QgeFNwYWNpbmcgPSAoYy54W24gKyAxXSAtIGMueFtuXSkgLyAobm9kZXNQZXJTZWdtZW50W25dICsgMSk7XG4gICAgY29uc3QgeVNwYWNpbmcgPSAoYy55W24gKyAxXSAtIGMueVtuXSkgLyAobm9kZXNQZXJTZWdtZW50W25dICsgMSk7XG5cbiAgICAvLyBBZGQgb3RoZXIgbm9kZXNQZXJTZWdtZW50IC0gMSBvdGhlciBub2RlcyAoYXMgYWxyZWFkeSBwdXQgaW4gb3JpZ2luYWwgbm9kZSkuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlc1BlclNlZ21lbnRbbl0gLSAxOyBpKyspIHtcbiAgICAgIGNpLngucHVzaChjaS54W2NpLngubGVuZ3RoIC0gMV0gKyB4U3BhY2luZyk7XG4gICAgICBjaS55LnB1c2goY2kueVtjaS55Lmxlbmd0aCAtIDFdICsgeVNwYWNpbmcpO1xuICAgICAgY2kuSS5wdXNoKGZhbHNlKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gY2k7XG59XG5cbi8qKlxuICogX2dldE5vZGVzUGVyU2VnbWVudCAtIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIG51bWJlciBvZiBpbnRlcnBvbGF0ZWQgbm9kZXNcbiAqIHRvIGJlIGFkZGVkIGFsb25nIGVhY2ggbGluZSBzZWdtZW50IG9mIGEgcG9seWdvbi5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJbXX0gcGVyaW1JbnRlcnAgTm9ybWFsaXNlZCBhcnJheSBvZiBvcmlnaW5hbCBhbmQgYWRkZWQgbm9kZXMuXG4gKiBAcGFyYW0gIHtib29sZWFuW119IHBlcmltSW5kICAgIFRoZSBpbmRpY2F0b3IgYXJyYXkgZGVzY3JpYmluZyB0aGUgbG9jYXRpb24gb2ZcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvcmlnaW5hbCBjb250b3VyJ3Mgbm9kZXMuXG4gKiBAcmV0dXJuIHtOdW1iZXJbXX0gICAgICAgICBBbiBhcnJheSBjb250YWluZ2luZyB0aGUgbnVtYmVyIG9mIG5vZGVzIHRvIGJlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRlZCBwZXIgb3JpZ2luYWwgbGluZSBzZWdtZW50LlxuICovXG5mdW5jdGlvbiBfZ2V0Tm9kZXNQZXJTZWdtZW50KHBlcmltSW50ZXJwLCBwZXJpbUluZCkge1xuICBjb25zdCBpZHggPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBlcmltSW50ZXJwLmxlbmd0aDsgKytpKSBpZHhbaV0gPSBpO1xuICBpZHguc29ydChmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBwZXJpbUludGVycFthXSA8IHBlcmltSW50ZXJwW2JdID8gLTEgOiBwZXJpbUludGVycFthXSA+IHBlcmltSW50ZXJwW2JdO1xuICB9KTtcblxuICBjb25zdCBwZXJpbUluZFNvcnRlZCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGVyaW1JbmQubGVuZ3RoOyBpKyspIHtcbiAgICBwZXJpbUluZFNvcnRlZC5wdXNoKHBlcmltSW5kW2lkeFtpXV0pO1xuICB9XG5cbiAgY29uc3QgaW5kaWNpZXNPZk9yaWdpbk5vZGVzID0gcGVyaW1JbmRTb3J0ZWQucmVkdWNlKGZ1bmN0aW9uIChhcnIsIGVsZW1lbnRWYWx1ZSwgaSkge1xuICAgIGlmIChlbGVtZW50VmFsdWUpIGFyci5wdXNoKGkpO1xuICAgIHJldHVybiBhcnI7XG4gIH0sIFtdKTtcblxuICBjb25zdCBub2Rlc1BlclNlZ21lbnQgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljaWVzT2ZPcmlnaW5Ob2Rlcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBub2Rlc1BlclNlZ21lbnQucHVzaChpbmRpY2llc09mT3JpZ2luTm9kZXNbaSArIDFdIC0gaW5kaWNpZXNPZk9yaWdpbk5vZGVzW2ldKTtcbiAgfVxuXG4gIHJldHVybiBub2Rlc1BlclNlZ21lbnQ7XG59XG5cbi8qKlxuICogX2dldEluZGljYXRvckFycmF5IC0gUHJvZHVjZXMgYW4gYXJyYXkgb2YgdGhlIGxvY2F0aW9uIG9mIHRoZSBvcmlnaW5hbCBub2Rlc1xuICogaW4gYSBzdXBlciBzYW1wbGVkIGNvbnRvdXIuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBjb250b3VyICAgVGhlIG9yaWdpbmFsIGNvbnRvdXIuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG51bU5vZGVzIFRoZSBudW1iZXIgb2Ygbm9kZXMgYWRkZWQuXG4gKiBAcmV0dXJuIHtib29sZWFuW119ICAgICAgICAgICBUaGUgaW5kaWNhdG9yIGFycmF5IG9mIG9yaWdpbmFsIG5vZGUgbG9jYXRpb25zLlxuICovXG5mdW5jdGlvbiBfZ2V0SW5kaWNhdG9yQXJyYXkoY29udG91ciwgbnVtTm9kZXMpIHtcbiAgY29uc3QgcGVyaW1JbmQgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG51bU5vZGVzIC0gMjsgaSsrKSB7XG4gICAgcGVyaW1JbmQucHVzaChmYWxzZSk7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRvdXIueC5sZW5ndGg7IGkrKykge1xuICAgIHBlcmltSW5kLnB1c2godHJ1ZSk7XG4gIH1cblxuICByZXR1cm4gcGVyaW1JbmQ7XG59XG5cbi8qKlxuICogX2dldEludGVycG9sYXRlZFBlcmltIC0gQWRkcyBhZGRpdGlvbmFsIGludGVycG9sYXRlZCBub2RlcyB0byB0aGVcbiAqIG5vcm1hbGlzZWQgcGVyaW1ldGVyIGFycmF5LlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gbnVtTm9kZXMgICAgVGhlIG51bWJlciBvZiBub2RlcyB0byBhZGQuXG4gKiBAcGFyYW0gIHtOdW1iZXJbXX0gY3VtUGVyaW1Ob3JtIFRoZSBjdW11bGF0aXZlIHBlcmltZXRlciBhcnJheS5cbiAqIEByZXR1cm4ge051bWJlcltdfSAgICAgICAgICAgICAgVGhlIGFycmF5IG9mIG5vZGVzLlxuICovXG5mdW5jdGlvbiBfZ2V0SW50ZXJwb2xhdGVkUGVyaW0obnVtTm9kZXMsIGN1bVBlcmltTm9ybSkge1xuICBjb25zdCBkaWZmID0gMSAvIChudW1Ob2RlcyAtIDEpO1xuICBjb25zdCBsaW5zcGFjZSA9IFtkaWZmXTtcblxuICAvLyBMZW5ndGggLSAyIGFzIHdlIGFyZSBkaXNjYXJkaW5nIDAgYW4gMSBmb3IgZWZmaWNpZW5jeSAobm8gbmVlZCB0byBjYWxjdWxhdGUgdGhlbSkuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgbnVtTm9kZXMgLSAyOyBpKyspIHtcbiAgICBsaW5zcGFjZS5wdXNoKGxpbnNwYWNlW2xpbnNwYWNlLmxlbmd0aCAtIDFdICsgZGlmZik7XG4gIH1cblxuICByZXR1cm4gbGluc3BhY2UuY29uY2F0KGN1bVBlcmltTm9ybSk7XG59XG5cbi8qKlxuICogX2dldEN1bXVsYXRpdmVQZXJpbWV0ZXIgLSBSZXR1cm5zIGFuIGFycmF5IG9mIHRoZSB0aGUgY3VtdWxhdGl2ZSBwZXJpbWV0ZXIgYXRcbiAqIGVhY2ggbm9kZSBvZiB0aGUgY29udG91ci5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbnRvdXIgVGhlIGNvbnRvdXIuXG4gKiBAcmV0dXJuIHtOdW1iZXJbXX0gICAgICAgICBBbiBhcnJheSBvZiB0aGUgY3VtdWxhdGl2ZSBwZXJpbWV0ZXIgYXQgZWFjaCBub2RlLlxuICovXG5mdW5jdGlvbiBfZ2V0Q3VtdWxhdGl2ZVBlcmltZXRlcihjb250b3VyKSB7XG4gIGxldCBjdW11bGF0aXZlUGVyaW1ldGVyID0gWzBdO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgY29udG91ci54Lmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgbGVuZ3RoT2ZTZWdtZW50ID0gTWF0aC5zcXJ0KChjb250b3VyLnhbaV0gLSBjb250b3VyLnhbaSAtIDFdKSAqKiAyICsgKGNvbnRvdXIueVtpXSAtIGNvbnRvdXIueVtpIC0gMV0pICoqIDIpO1xuXG4gICAgY3VtdWxhdGl2ZVBlcmltZXRlci5wdXNoKGN1bXVsYXRpdmVQZXJpbWV0ZXJbaSAtIDFdICsgbGVuZ3RoT2ZTZWdtZW50KTtcbiAgfVxuXG4gIHJldHVybiBjdW11bGF0aXZlUGVyaW1ldGVyO1xufVxuXG4vKipcbiAqIF9ub3JtYWxpc2VkQ3VtdWxhdGl2ZVBlcmltZXRlciAtIE5vcm1hbGlzZXMgdGhlIGN1bXVsYXRpdmUgcGVyaW1ldGVyIGFycmF5LlxuICpcbiAqIEBwYXJhbSAge3R5cGV9IGN1bVBlcmltIEFuIGFycmF5IG9mIHRoZSBjdW11bGF0aXZlIHBlcmltZXRlciBhdCBlYWNoIG9mIGFcbiAqIGNvbnRvdXIuXG4gKiBAcmV0dXJuIHt0eXBlfSAgICAgICAgICBUaGUgbm9ybWFsaXNlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gX25vcm1hbGlzZWRDdW11bGF0aXZlUGVyaW1ldGVyKGN1bVBlcmltKSB7XG4gIGNvbnN0IGN1bVBlcmltTm9ybSA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY3VtUGVyaW0ubGVuZ3RoOyBpKyspIHtcbiAgICBjdW1QZXJpbU5vcm0ucHVzaChjdW1QZXJpbVtpXSAvIGN1bVBlcmltW2N1bVBlcmltLmxlbmd0aCAtIDFdKTtcbiAgfVxuXG4gIHJldHVybiBjdW1QZXJpbU5vcm07XG59XG5cbi8qKlxuICogX2dlbmVyYXRlQ2xvc2VkQ29udG91ciAtIEdlbmVyYXRlIGEgY2xvY2t3aXNlIGNvbnRvdXIgb2JqZWN0IGZyb20gdGhlIHBvaW50c1xuICogb2YgYSBjbG9ja3dpc2Ugb3IgYW50aS1jbG9ja3dpc2UgcG9seWdvbi5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gcG9pbnRzIFRoZSBwb2ludHMgdG8gZ2VuZXJhdGUgdGhlIGNvbnRvdXIgZnJvbS5cbiAqIEByZXR1cm4ge29iamVjdH0gICAgICAgICAgIFRoZSBnZW5lcmF0ZWQgY29udG91ciBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIF9nZW5lcmF0ZUNsb3NlZENvbnRvdXIocG9pbnRzKSB7XG4gIGNvbnN0IGMgPSB7XG4gICAgeDogW10sXG4gICAgeTogW11cbiAgfTtcblxuICAvLyBOT1RFOiBGb3IgeiBwb3NpdGlvbnMgd2Ugb25seSBuZWVkIHRoZSByZWxhdGl2ZSBkaWZmZXJlbmNlIGZvciBpbnRlcnBvbGF0aW9uLCB0aHVzIHVzZSBmcmFtZSBpbmRleCBhcyBaLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGMueFtpXSA9IHBvaW50c1tpXS54O1xuICAgIGMueVtpXSA9IHBvaW50c1tpXS55O1xuICB9XG5cbiAgLy8gUHVzaCBsYXN0IG5vZGUgdG8gY3JlYXRlIGNsb3NlZCBjb250b3VyLlxuICBjLngucHVzaChjLnhbMF0pO1xuICBjLnkucHVzaChjLnlbMF0pO1xuXG4gIF9yZXZlcnNlSWZBbnRpQ2xvY2t3aXNlKGMpO1xuXG4gIHJldHVybiBjO1xufVxuXG4vKipcbiAqIF9yZXZlcnNlSWZBbnRpQ2xvY2t3aXNlIC0gSWYgdGhlIGNvbnRvdXIncyBub2RlcyBydW4gYW50aS1jbG9ja3dpc2UsXG4gKiByZXZlcnNlIHRoZW0uXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBjb250b3VyIFRoZSBjb250b3VyLlxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgIFRoZSBjb250b3VyLCBjb3JyZWN0ZWQgdG8gYmUgY2xvY2t3aXNlIGlmIGFwcHJvcHJpYXRlLlxuICovXG5mdW5jdGlvbiBfcmV2ZXJzZUlmQW50aUNsb2Nrd2lzZShjb250b3VyKSB7XG4gIGNvbnN0IGxlbmd0aCA9IGNvbnRvdXIueC5sZW5ndGg7XG4gIGNvbnN0IGNvbnRvdXJYTWVhbiA9IGNvbnRvdXIueC5yZWR1Y2UoZ2V0U3VtUmVkdWNlcikgLyBsZW5ndGg7XG4gIGxldCBjaGVja1N1bSA9IDA7XG5cbiAgZm9yIChsZXQgayA9IDAsIGkgPSAxLCBqID0gMjsgayA8IGxlbmd0aDsgaysrKSB7XG4gICAgY2hlY2tTdW0gKz0gKGNvbnRvdXIueFtpXSAtIGNvbnRvdXJYTWVhbikgKiAoY29udG91ci55W2pdIC0gY29udG91ci55W2tdKTtcbiAgICBpKys7XG4gICAgaisrO1xuICAgIGlmIChpID49IGxlbmd0aCkgaSA9IDA7XG4gICAgaWYgKGogPj0gbGVuZ3RoKSBqID0gMDtcbiAgfVxuXG4gIGlmIChjaGVja1N1bSA+IDApIHtcbiAgICBjb250b3VyLngucmV2ZXJzZSgpO1xuICAgIGNvbnRvdXIueS5yZXZlcnNlKCk7XG4gIH1cbn1cblxuLyoqXG4gKiBnZXRTdW1SZWR1Y2VyIC0gQSByZWR1Y2VyIGZ1bmN0aW9uIHRoYXQgY2FsY3VsYXRlcyB0aGUgc3VtIG9mIGFuIGFycmF5LlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gdG90YWwgVGhlIHJ1bm5pbmcgdG90YWwuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IG51bSAgIFRoZSBudW1lcmljYWwgdmFsdWUgb2YgdGhlIGFycmF5IGVsZW1lbnQuXG4gKiBAcmV0dXJuIHtOdW1iZXJ9ICAgICAgIFRoZSB1cGRhdGVkIHJ1bm5pbmcgdG90YWwuXG4gKi9cbmZ1bmN0aW9uIGdldFN1bVJlZHVjZXIodG90YWwsIG51bSkge1xuICByZXR1cm4gdG90YWwgKyBudW07XG59XG4iLCIvLyBpbXBvcnQgeyBzdG9yZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbi8vIGltcG9ydCBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudCBmcm9tICcuL2dldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50LmpzJztcblxuLy8gY29uc3QgbW9kdWxlcyA9IHN0b3JlLm1vZHVsZXM7XG5cbi8vIFRPRE8gLT4gUmVkZWZpbmUgdGhpcyB3aGVuIHdlIHJlYnVpbGQgaW5wdXQuXG4vKlxuZnVuY3Rpb24gY3JlYXRlTmV3Vm9sdW1lQ2FsbGJhY2sobmFtZSwgZWxlbWVudCkge1xuICAvLyBDcmVhdGUgYW5kIGFjdGl2YXRlIG5ldyBST0lDb250b3VyXG4gIGNvbnN0IGFjdGl2ZVNlcmllc0luc3RhbmNlVWlkID0gZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQoZWxlbWVudCk7XG5cbiAgLy8gQ2hlY2sgaWYgZGVmYXVsdCBzdHJ1Y3R1cmVTZXQgZXhpc3RzIGZvciB0aGlzIHNlcmllcy5cbiAgaWYgKCFtb2R1bGVzLmZyZWVoYW5kM0QuZ2V0dGVycy5zZXJpZXMoYWN0aXZlU2VyaWVzSW5zdGFuY2VVaWQpKSB7XG4gICAgbW9kdWxlcy5mcmVlaGFuZDNELnNldHRlcnMuc2VyaWVzKGFjdGl2ZVNlcmllc0luc3RhbmNlVWlkKTtcbiAgfVxuXG4gIG1vZHVsZXMuZnJlZWhhbmQzRC5zZXR0ZXJzLlJPSUNvbnRvdXJBbmRTZXRJbmRleEFjdGl2ZShhY3RpdmVTZXJpZXNJbnN0YW5jZVVpZCwgJ0RFRkFVTFQnLCBuYW1lKTtcbn1cbiovXG5cbi8qKlxuICogT3BlbnMgVUkgdGhhdCBhbGxvd3MgdXNlciB0byBjaG9zZSBhIG5hbWUgZm9yIGEgbmV3IHZvbHVtZSwgYW5kIHByb2Nlc3Nlc1xuICogdGhlIHJlc3BvbnNlLlxuICpcbiAqL1xuXG4vLyBUT0RPIC0+IEltcGxlbWVudCBkaWFsb2dzIG9yIHNtdGguXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTmV3Vm9sdW1lKGNhbGxiYWNrKSB7XG4gIC8vIGNvbnN0IGZyZWVoYW5kU2V0TmFtZURpYWxvZyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdmcmVlaGFuZFNldE5hbWVEaWFsb2cnKTtcbiAgLy8gSmFtZXNBUGV0dHNcbiAgLy8gY29uc3QgZGlhbG9nRGF0YSA9IEJsYXplLmdldERhdGEoZnJlZWhhbmRTZXROYW1lRGlhbG9nKTtcbiAgLy8gZGlhbG9nRGF0YS5mcmVlaGFuZFNldE5hbWVEaWFsb2dEZWZhdWx0TmFtZS5zZXQoJycpO1xuICAvLyBkaWFsb2dEYXRhLmZyZWVoYW5kU2V0TmFtZURpYWxvZ0lkLnNldChNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKCkpO1xuICAvLyBkaWFsb2dEYXRhLmZyZWVoYW5kU2V0TmFtZURpYWxvZ0NhbGxiYWNrLnNldChjYWxsYmFjayB8fCBjcmVhdGVOZXdWb2x1bWVDYWxsYmFjayk7XG4gIC8vIGZyZWVoYW5kU2V0TmFtZURpYWxvZy5zaG93TW9kYWwoKTtcbn1cblxuLyoqXG4gKiBPcGVucyBVSSB0aGF0IGFsbG93cyB1c2VyIHRvIGNoYW5nZSBhIHZvbHVtZSdzIG5hbWUsXG4gKiBhbmQgcHJvY2Vzc2VzIHRoZSByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VyaWVzSW5zdGFuY2VVaWQgIFRoZSBVSUQgb2YgdGhlIHNlcmllcyB0aGUgUk9JQ29udG91ciBpcyBhc3NvY2lhdGVkIHdpdGguXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RydWN0dXJlU2V0VWlkICAgIFRoZSBVSUQgb2YgdGhlIHN0cnVjdHVyZVNldCB0aGUgUk9JQ29udG91ciBiZWxvbmdzIHRvLlxuICogQHBhcmFtIHtTdHJpbmd9IFJPSUNvbnRvdXJVaWQgICAgICBUaGUgVUlEIG9mIHRoZSBST0lDb250b3VyVWlkLlxuICpcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0Vm9sdW1lTmFtZShzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBST0lDb250b3VyVWlkLCBjYWxsYmFjaykge1xuICAvLyBUT0RPIC0+IHNldFZvbHVtZU5hbWVcbiAgLypcbiAgY29uc3QgUk9JQ29udG91ciA9IG1vZHVsZXMuZnJlZWhhbmQzRC5nZXR0ZXJzLlJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCk7XG5cbiAgLy8gQ3VycmVudCBuYW1lOlxuICBsZXQgb2xkTmFtZTtcblxuICBpZiAoUk9JQ29udG91ci5uYW1lKSB7XG4gICAgb2xkTmFtZSA9IFJPSUNvbnRvdXIubmFtZTtcbiAgfSBlbHNlIHtcbiAgICBvbGROYW1lID0gJyc7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRWb2x1bWVOYW1lQ2FsbGJhY2sobmFtZSkge1xuICAgIFJPSUNvbnRvdXIubmFtZSA9IG5hbWU7XG5cbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayhuYW1lKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBmcmVlaGFuZFNldE5hbWVEaWFsb2cgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnZnJlZWhhbmRTZXROYW1lRGlhbG9nJyk7XG5cbiAgLy8gSmFtZXNBUGV0dHNcbiAgY29uc3QgZGlhbG9nRGF0YSA9IEJsYXplLmdldERhdGEoZnJlZWhhbmRTZXROYW1lRGlhbG9nKTtcblxuICBkaWFsb2dEYXRhLmZyZWVoYW5kU2V0TmFtZURpYWxvZ0RlZmF1bHROYW1lLnNldChvbGROYW1lKTtcbiAgZGlhbG9nRGF0YS5mcmVlaGFuZFNldE5hbWVEaWFsb2dJZC5zZXQoTWF0aC5yYW5kb20oKS50b1N0cmluZygpKTtcbiAgZGlhbG9nRGF0YS5mcmVlaGFuZFNldE5hbWVEaWFsb2dDYWxsYmFjay5zZXQoc2V0Vm9sdW1lTmFtZUNhbGxiYWNrKTtcbiAgZnJlZWhhbmRTZXROYW1lRGlhbG9nLnNob3dNb2RhbCgpO1xuICAqL1xufVxuIiwiaW1wb3J0IEdlbmVyYWxBbmF0b215TGlzdCBmcm9tICcuLi9HZW5lcmFsQW5hdG9teWxpc3QuanMnO1xuXG5jb25zdCBjYXRlZ29yaWVzID0gR2VuZXJhbEFuYXRvbXlMaXN0LlNlZ21lbnRhdGlvbkNvZGVzLkNhdGVnb3J5O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZW5lcmF0ZU1ldGFkYXRhKGxhYmVsLCBjYXRlZ29yeVVJRCA9ICdULUQwMDUwJywgdHlwZVVJRCA9ICdULUQwMDUwJywgbW9kaWZpZXJVSUQpIHtcbiAgY29uc3QgY2F0ZWdvcnkgPSBjYXRlZ29yaWVzLmZpbmQoY2F0ZWdvcmllc0kgPT4gY2F0ZWdvcmllc0kuQ29kZVZhbHVlID09PSBjYXRlZ29yeVVJRCk7XG4gIGNvbnN0IHR5cGUgPSBjYXRlZ29yeS5UeXBlLmZpbmQodHlwZXNJID0+IHR5cGVzSS5Db2RlVmFsdWUgPT09IHR5cGVVSUQpO1xuXG4gIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgIFNlZ21lbnRlZFByb3BlcnR5Q2F0ZWdvcnlDb2RlU2VxdWVuY2U6IHtcbiAgICAgIENvZGVWYWx1ZTogY2F0ZWdvcnkuQ29kZVZhbHVlLFxuICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogY2F0ZWdvcnkuQ29kaW5nU2NoZW1lRGVzaWduYXRvcixcbiAgICAgIENvZGVNZWFuaW5nOiBjYXRlZ29yeS5Db2RlTWVhbmluZ1xuICAgIH0sXG4gICAgU2VnbWVudExhYmVsOiBsYWJlbCxcbiAgICBTZWdtZW50QWxnb3JpdGhtVHlwZTogJ01BTlVBTCcsXG5cbiAgICBTZWdtZW50ZWRQcm9wZXJ0eVR5cGVDb2RlU2VxdWVuY2U6IHtcbiAgICAgIENvZGVWYWx1ZTogdHlwZS5Db2RlVmFsdWUsXG4gICAgICBDb2RpbmdTY2hlbWVEZXNpZ25hdG9yOiB0eXBlLkNvZGluZ1NjaGVtZURlc2lnbmF0b3IsXG4gICAgICBDb2RlTWVhbmluZzogdHlwZS5Db2RlTWVhbmluZ1xuICAgIH1cbiAgfTtcblxuICBpZiAobW9kaWZpZXJVSUQpIHtcbiAgICBjb25zdCBtb2RmaWVyID0gdHlwZS5Nb2RpZmllci5maW5kKG1vZGlmaWVySSA9PiBtb2RpZmllckkuQ29kZVZhbHVlID09PSBtb2RpZmllclVJRCk7XG5cbiAgICBtZXRhZGF0YS5TZWdtZW50ZWRQcm9wZXJ0eVR5cGVDb2RlU2VxdWVuY2UuU2VnbWVudGVkUHJvcGVydHlUeXBlTW9kaWZpZXJDb2RlU2VxdWVuY2UgPSB7XG4gICAgICBDb2RlVmFsdWU6IG1vZGZpZXIuQ29kZVZhbHVlLFxuICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogbW9kZmllci5Db2RpbmdTY2hlbWVEZXNpZ25hdG9yLFxuICAgICAgQ29kZU1lYW5pbmc6IG1vZGZpZXIuQ29kZU1lYW5pbmdcbiAgICB9O1xuXG4gICAgbWV0YWRhdGEuUmVjb21tZW5kZWREaXNwbGF5Q0lFTGFiVmFsdWUgPSBtb2RmaWVyLnJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlO1xuICB9IGVsc2Uge1xuICAgIG1ldGFkYXRhLlJlY29tbWVuZGVkRGlzcGxheUNJRUxhYlZhbHVlID0gdHlwZS5yZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBtZXRhZGF0YTtcbn1cbiIsIi8qKlxuICogR2VuZXJhdGVzIGEgVVVJRCBmb3IgdGhlIGVuYWJsZWRFbGVtZW50LlxuICogQGV4cG9ydCBAcHVibGljIEBtZXRob2RcbiAqIEBuYW1lIGdlbmVyYXRlVUlEXG4gKlxuICogQHJldHVybiB7U3RyaW5nfSB0aGUgVVVJRC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKCkge1xuICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvODgwOTQ3Mi85MjA4MzIwIFB1YmxpYyBEb21haW4vTUlUXG4gIC8qIGVzbGludCBuby1iaXR3aXNlOiBbXCJlcnJvclwiLCB7IFwiYWxsb3dcIjogW1wiJlwiLFwifFwiXSB9XSAqL1xuICBsZXQgZCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXG4gIGlmICh0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicpIHtcbiAgICBkICs9IHBlcmZvcm1hbmNlLm5vdygpOyAvLyBVc2UgaGlnaC1wcmVjaXNpb24gdGltZXIgaWYgYXZhaWxhYmxlXG4gIH1cbiAgcmV0dXJuICd4LngueC54LngueC54eHh4Lnh4eC54LngueHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4Jy5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgY29uc3QgciA9IChkICsgTWF0aC5yYW5kb20oKSAqIDE2KSAlIDE2IHwgMDtcblxuICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgcmV0dXJuIChjID09PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4KS50b1N0cmluZygxNik7XG4gIH0pO1xufVxuIiwiLyoqXG4gKiBHcmFicyBgZG9tYCByZWZlcmVuY2UgZm9yIHRoZSBlbmFibGVkRWxlbWVudCBvZlxuICogdGhlIGFjdGl2ZSB2aWV3cG9ydFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50KHZpZXdwb3J0cywgYWN0aXZlSW5kZXgpIHtcbiAgY29uc3QgYWN0aXZlVmlld3BvcnQgPSB2aWV3cG9ydHNbYWN0aXZlSW5kZXhdIHx8IHt9O1xuXG4gIHJldHVybiBhY3RpdmVWaWV3cG9ydC5kb207XG59XG4iLCJpbXBvcnQgY29ybmVyc3RvbmUgZnJvbSAnY29ybmVyc3RvbmUtY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50KGVuYWJsZWRFbGVtZW50KSB7XG4gIGlmICghZW5hYmxlZEVsZW1lbnQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBpbWFnZUlkID0gZW5hYmxlZEVsZW1lbnQuaW1hZ2UuaW1hZ2VJZDtcbiAgY29uc3QgZ2VuZXJhbFNlcmllc01vZHVsZSA9IGNvcm5lcnN0b25lLm1ldGFEYXRhLmdldCgnZ2VuZXJhbFNlcmllc01vZHVsZScsIGltYWdlSWQpO1xuXG4gIHJldHVybiBnZW5lcmFsU2VyaWVzTW9kdWxlLnNlcmllc0luc3RhbmNlVUlEO1xufVxuIiwiaW1wb3J0IGNvcm5lcnN0b25lIGZyb20gJ2Nvcm5lcnN0b25lLWNvcmUnO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBzZXJpZXNJbnN0YW5jZVVpZCBmcm9tIGFuIGltYWdlLCBnaXZlbiB0aGUgaW1hZ2VJZC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gaW1hZ2VJZCBUaGUgSUQgb2YgdGhlIGltYWdlIGJlaW5nIHF1ZXJpZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUltYWdlSWQoaW1hZ2VJZCkge1xuICBjb25zdCBnZW5lcmFsU2VyaWVzTW9kdWxlID0gY29ybmVyc3RvbmUubWV0YURhdGEuZ2V0KCdnZW5lcmFsU2VyaWVzTW9kdWxlJywgaW1hZ2VJZCk7XG5cbiAgcmV0dXJuIGdlbmVyYWxTZXJpZXNNb2R1bGUuc2VyaWVzSW5zdGFuY2VVSUQ7XG59XG4iLCJpbXBvcnQgeyBzdG9yZSwgZ2xvYmFsSW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlTWFuYWdlciB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcblxuaW1wb3J0IGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUltYWdlSWQgZnJvbSAnLi9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21JbWFnZUlkLmpzJztcblxuY29uc3QgbW9kdWxlcyA9IHN0b3JlLm1vZHVsZXM7XG5jb25zdCBnbG9iYWxUb29sU3RhdGVNYW5hZ2VyID0gZ2xvYmFsSW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlTWFuYWdlcjtcblxuLyoqXG4gKiBVbmxvY2sgYSBzdHJ1Y3R1cmVTZXQsIG1vdmluZyB0aGVtIHRvIHRoZSB3b3JraW5nIGRpcmVjdG9yeVxuICogc28gdGhhdCB0aGV5IG1heSBiZSBlZGl0ZWRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gc2VyaWVzSW5zdGFuY2VVaWQgIFRoZSBVSUQgb2YgdGhlIHNlcmllcyBvbiB3aGljaCB0aGUgUk9Jc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNpZGUuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RydWN0dXJlU2V0VWlkICAgIFRoZSB1aWQgb2YgdGhlIG5ld2x5IGNyZWF0ZWQgc3RydWN0dXJlU2V0LlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCkge1xuICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcblxuICBjb25zdCBST0lDb250b3VyQ29sbGVjdGlvbiA9IHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvbjtcblxuICBjb25zdCB3b3JraW5nU3RydWN0dXJlU2V0ID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAvLyBDcmVhdGUgbmV3IFJPSUNvbnRvdXJzIGluIHRoZSB3b3JraW5nIGRpcmVjdG9yeS5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBST0lDb250b3VyQ29sbGVjdGlvbi5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IFJPSUNvbnRvdXIgPSBST0lDb250b3VyQ29sbGVjdGlvbltpXTtcblxuICAgIGZyZWVoYW5kM0RTdG9yZS5zZXR0ZXJzLlJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsICdERUZBVUxUJywgUk9JQ29udG91ci5uYW1lLCB7XG4gICAgICB1aWQ6IFJPSUNvbnRvdXIudWlkLFxuICAgICAgcG9seWdvbkNvdW50OiBST0lDb250b3VyLnBvbHlnb25Db3VudCxcbiAgICAgIGNvbG9yOiBST0lDb250b3VyLmNvbG9yXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCB0b29sU3RhdGVNYW5hZ2VyID0gZ2xvYmFsVG9vbFN0YXRlTWFuYWdlci5zYXZlVG9vbFN0YXRlKCk7XG5cbiAgT2JqZWN0LmtleXModG9vbFN0YXRlTWFuYWdlcikuZm9yRWFjaChlbGVtZW50SWQgPT4ge1xuICAgIC8vIE9ubHkgZ2V0IHBvbHlnb25zIGZyb20gdGhpcyBzZXJpZXNcbiAgICBpZiAoZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tSW1hZ2VJZChlbGVtZW50SWQpID09PSBzZXJpZXNJbnN0YW5jZVVpZCkge1xuICAgICAgLy8gZ3JhYiB0aGUgZnJlZWhhbmQgdG9vbCBmb3IgdGhpcyBESUNPTSBpbnN0YW5jZVxuXG4gICAgICBpZiAodG9vbFN0YXRlTWFuYWdlciAmJiB0b29sU3RhdGVNYW5hZ2VyW2VsZW1lbnRJZF0gJiYgdG9vbFN0YXRlTWFuYWdlcltlbGVtZW50SWRdLmZyZWVoYW5kUm9pKSB7XG4gICAgICAgIGNvbnN0IHRvb2xTdGF0ZSA9IHRvb2xTdGF0ZU1hbmFnZXJbZWxlbWVudElkXS5mcmVlaGFuZFJvaTtcbiAgICAgICAgY29uc3QgdG9vbERhdGEgPSB0b29sU3RhdGUuZGF0YTtcblxuICAgICAgICBtb3ZlUG9seWdvbnNJbkluc3RhbmNlKHdvcmtpbmdTdHJ1Y3R1cmVTZXQsIHRvb2xEYXRhLCBzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICAvLyBSZW1vdmUgbmFtZWQgc3RydWN0dXJlU2V0LlxuICBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5kZWxldGVTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgaWYgKHdvcmtpbmdTdHJ1Y3R1cmVTZXQuYWN0aXZlUk9JQ29udG91ckluZGV4ID09PSBudWxsKSB7XG4gICAgd29ya2luZ1N0cnVjdHVyZVNldC5hY3RpdmVST0lDb250b3VySW5kZXggPSAwO1xuICB9XG59XG5cbi8qKlxuICogTW92ZXMgdGhlIFJPSXMgZGVmaW5lZCBieSB0aGUgc2VyaWVzSW5zdGFuY2VVaWQsIHJvaUNvbGxlY3Rpb25OYW1lXG4gKiBhbmQgZXhwb3J0TWFzayBmcm9tIHRoZSB3b3JraW5nIGRpcmVjdG9yeSB0byBhIG5ldyBuYW1lZCByb2lDb2xsZWN0aW9uLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gZXhwb3J0RGF0YSAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlcXVpcmVkIGluZm9ybWF0aW9uXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvIGV4ZWN1dGUgdGhlIG1vdmUgb3BwZXJhdGlvbi5cbiAqL1xuZnVuY3Rpb24gbW92ZVBvbHlnb25zSW5JbnN0YW5jZSh3b3JraW5nU3RydWN0dXJlU2V0LCB0b29sRGF0YSwgc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gbW9kdWxlcy5mcmVlaGFuZDNEO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdG9vbERhdGEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkYXRhID0gdG9vbERhdGFbaV07XG5cbiAgICBjb25zdCByZWZlcmVuY2VkUk9JQ29udG91ciA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLlJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsICdERUZBVUxUJywgZGF0YS5ST0lDb250b3VyVWlkKTtcblxuICAgIGNvbnN0IHJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsICdERUZBVUxUJyk7XG5cbiAgICBkYXRhLnN0cnVjdHVyZVNldFVpZCA9ICdERUZBVUxUJztcbiAgICBkYXRhLnJlZmVyZW5jZWRST0lDb250b3VyID0gcmVmZXJlbmNlZFJPSUNvbnRvdXI7XG4gICAgZGF0YS5yZWZlcmVuY2VkU3RydWN0dXJlU2V0ID0gcmVmZXJlbmNlZFN0cnVjdHVyZVNldDtcbiAgfVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Nvcm5lcnN0b25lX2NvcmVfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfY29ybmVyc3RvbmVfbWF0aF9fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9jb3JuZXJzdG9uZV90b29sc19fOyIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fOyJdLCJzb3VyY2VSb290IjoiIn0=