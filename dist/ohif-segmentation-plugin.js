(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("cornerstone-core"), require("cornerstone-math"), require("cornerstone-tools"), require("react"));
	else if(typeof define === 'function' && define.amd)
		define("ohif-segmentation-plugin", ["cornerstone-core", "cornerstone-math", "cornerstone-tools", "react"], factory);
	else if(typeof exports === 'object')
		exports["ohif-segmentation-plugin"] = factory(require("cornerstone-core"), require("cornerstone-math"), require("cornerstone-tools"), require("react"));
	else
		root["ohif-segmentation-plugin"] = factory(root["cornerstone-core"], root["cornerstone-math"], root["cornerstone-tools"], root["react"]);
})(typeof self !== 'undefined' ? self : this, function(__WEBPACK_EXTERNAL_MODULE_cornerstone_core__, __WEBPACK_EXTERNAL_MODULE_cornerstone_math__, __WEBPACK_EXTERNAL_MODULE_cornerstone_tools__, __WEBPACK_EXTERNAL_MODULE_react__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/GeneralAnatomylist.js":
/*!***********************************!*\
  !*** ./src/GeneralAnatomylist.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var json = "{\n  \"SegmentationCategoryTypeContextName\": \"Segmentation category and type - 3D Slicer General Anatomy list\",\n  \"@schema\": \"https://raw.githubusercontent.com/qiicr/dcmqi/master/doc/schemas/segment-context-schema.json#\",\n  \"SegmentationCodes\": {\n    \"Category\": [\n      {\n        \"CodeMeaning\": \"Tissue\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"85756007\",\n        \"cid\": \"7051\",\n        \"UMLSConceptUID\": \"C0040300\",\n        \"CodeValue\": \"T-D0050\",\n        \"contextGroupName\": \"Segmentation Property Categories\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              128,\n              174,\n              128\n            ],\n            \"CodeMeaning\": \"Tissue\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tissue\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0040300\",\n            \"CodeValue\": \"T-D0050\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"85756007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              101,\n              79\n            ],\n            \"CodeMeaning\": \"Artery\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"artery\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0555806\",\n            \"CodeValue\": \"T-41066\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"275989006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              230,\n              220,\n              70\n            ],\n            \"CodeMeaning\": \"Body fat\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"fat\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0344335\",\n            \"CodeValue\": \"F-03D38\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"248300009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              241,\n              214,\n              145\n            ],\n            \"CodeMeaning\": \"Bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"bone\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0262950\",\n            \"CodeValue\": \"T-D016E\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"272673000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              183,\n              156,\n              220\n            ],\n            \"CodeMeaning\": \"Capillary\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"capillary\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0006901\",\n            \"CodeValue\": \"T-40050\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"20982000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              111,\n              184,\n              210\n            ],\n            \"CodeMeaning\": \"Cartilage\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cartilage\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0007301\",\n            \"CodeValue\": \"T-D021B\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"309312004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              111,\n              184,\n              210\n            ],\n            \"CodeMeaning\": \"Connective tissue\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"connective tissue\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0009780\",\n            \"CodeValue\": \"T-1A200\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"21793004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              183,\n              214,\n              211\n            ],\n            \"CodeMeaning\": \"Ligament\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"ligament\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0023685\",\n            \"CodeValue\": \"T-18010\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"52082005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              68,\n              172,\n              100\n            ],\n            \"CodeMeaning\": \"Lymph node\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lymph node\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0024204\",\n            \"CodeValue\": \"T-C4000\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"59441001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              111,\n              197,\n              131\n            ],\n            \"CodeMeaning\": \"Lymphatic vessel\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lymphatic vessel\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0229889\",\n            \"CodeValue\": \"T-C6010\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"83555006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              178,\n              212,\n              242\n            ],\n            \"CodeMeaning\": \"Meniscus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"meniscus\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0224498\",\n            \"CodeValue\": \"T-15009\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"74135004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              192,\n              104,\n              88\n            ],\n            \"CodeMeaning\": \"Muscle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscle\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0026845\",\n            \"CodeValue\": \"T-13001\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"71616004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              214,\n              49\n            ],\n            \"CodeMeaning\": \"Nerve\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"nerve\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C1268169\",\n            \"CodeValue\": \"T-D0598\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"119410002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              221,\n              130,\n              101\n            ],\n            \"CodeMeaning\": \"Organ\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"organ\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C1285092\",\n            \"CodeValue\": \"T-1A310\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"2861001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"CodeMeaning\": \"Skin\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skin\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C1123023\",\n            \"CodeValue\": \"T-01000\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"39937001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              152,\n              189,\n              207\n            ],\n            \"CodeMeaning\": \"Tendon\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tendon\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0039508\",\n            \"CodeValue\": \"T-17010\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"13024002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              0,\n              151,\n              206\n            ],\n            \"CodeMeaning\": \"Vein\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"vein\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0447146\",\n            \"CodeValue\": \"T-4806E\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"181378009\"\n          }\n        ],\n        \"showAnatomy\": true\n      },\n      {\n        \"CodeMeaning\": \"Anatomical Structure\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"123037004\",\n        \"cid\": \"7051\",\n        \"UMLSConceptUID\": \"C1268086\",\n        \"CodeValue\": \"T-D000A\",\n        \"contextGroupName\": \"Segmentation Property Categories\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"abdomen\",\n            \"CodeValue\": \"T-D4000\",\n            \"UMLSConceptUID\": \"C0000726\",\n            \"CodeMeaning\": \"Abdomen\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"113345001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              186,\n              124,\n              161\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"abdominal cavity\",\n            \"CodeValue\": \"T-D4010\",\n            \"UMLSConceptUID\": \"C0230168\",\n            \"CodeMeaning\": \"Abdominal cavity\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"52731004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              171,\n              85,\n              68\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of abdominal wall\",\n            \"CodeValue\": \"T-14001\",\n            \"UMLSConceptUID\": \"C1279385\",\n            \"CodeMeaning\": \"Abdominal wall muscle\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"195879000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              60,\n              143,\n              83\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"adenohypophysis\",\n            \"CodeValue\": \"T-B1100\",\n            \"UMLSConceptUID\": \"C0032008\",\n            \"CodeMeaning\": \"Adenohypophysis\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"62818001\"\n          },\n          {\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"cid\": \"7154\",\n            \"CodeMeaning\": \"Adrenal gland\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0001625\",\n            \"CodeValue\": \"T-B3000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  249,\n                  186,\n                  150\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right adrenal gland\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  249,\n                  186,\n                  150\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left adrenal gland\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"23451007\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Amygdala\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0002708\",\n            \"CodeValue\": \"T-A3230\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  98,\n                  153,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right amygdaloid complex\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  98,\n                  153,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left amygdaloid complex\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"4958002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              224,\n              199\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"anus\",\n            \"CodeValue\": \"T-59900\",\n            \"UMLSConceptUID\": \"C0003461\",\n            \"CodeMeaning\": \"Anus\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"53505006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              224,\n              97,\n              76\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"aorta\",\n            \"CodeValue\": \"T-42000\",\n            \"UMLSConceptUID\": \"C0003483\",\n            \"CodeMeaning\": \"Aorta\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"15825003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              218,\n              123,\n              97\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"aortic valve\",\n            \"CodeValue\": \"T-35400\",\n            \"UMLSConceptUID\": \"C0003501\",\n            \"CodeMeaning\": \"Aortic Valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"34202007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"arachnoid\",\n            \"CodeValue\": \"T-A1220\",\n            \"UMLSConceptUID\": \"C0003707\",\n            \"CodeMeaning\": \"Arachnoid\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"75042008\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Arcuate Fasciculus\",\n            \"CodingSchemeDesignator\": \"FMA\",\n            \"UMLSConceptUID\": \"C2329633\",\n            \"CodeValue\": \"276650\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  125,\n                  102,\n                  154\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right arcuate fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  125,\n                  102,\n                  154\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left arcuate fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              226,\n              77\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"autonomic nerve\",\n            \"CodeValue\": \"T-A9605\",\n            \"UMLSConceptUID\": \"C0206250\",\n            \"CodeMeaning\": \"Autonomic nerve\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"53520000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              0,\n              145,\n              30\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"biliary tree\",\n            \"CodeValue\": \"T-60610\",\n            \"UMLSConceptUID\": \"C0005400\",\n            \"CodeMeaning\": \"Bile Duct\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"28273000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              222,\n              154,\n              132\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urinary bladder\",\n            \"CodeValue\": \"T-74000\",\n            \"UMLSConceptUID\": \"C0005682\",\n            \"CodeMeaning\": \"Bladder\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"89837001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              239,\n              172\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skeleton of thorax\",\n            \"CodeValue\": \"T-D0170\",\n            \"UMLSConceptUID\": \"C0448157\",\n            \"CodeMeaning\": \"Bone of thorax\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"272710004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              242,\n              206,\n              142\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skeleton of neck\",\n            \"CodeValue\": \"T-D006D\",\n            \"UMLSConceptUID\": \"C0730130\",\n            \"CodeMeaning\": \"Bone structure of head and/or neck\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"312779009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              250,\n              225\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"brain\",\n            \"CodeValue\": \"T-A0100\",\n            \"UMLSConceptUID\": \"C0006104\",\n            \"CodeMeaning\": \"Brain\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"12738006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              85,\n              188,\n              255\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"CSF space\",\n            \"CodeValue\": \"T-A0109\",\n            \"UMLSConceptUID\": \"C0459387\",\n            \"CodeMeaning\": \"Brain cerebrospinal fluid pathway\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"280371009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"ventricles of brain\",\n            \"CodeValue\": \"T-A1600\",\n            \"UMLSConceptUID\": \"C0007799\",\n            \"CodeMeaning\": \"Brain ventricle\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35764002\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Caudate nucleus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0007461\",\n            \"CodeValue\": \"T-A3200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  30,\n                  111,\n                  85\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right caudate nucleus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  30,\n                  111,\n                  85\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left caudate nucleus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"11000004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              214,\n              49\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"central nervous system\",\n            \"CodeValue\": \"T-A0090\",\n            \"UMLSConceptUID\": \"C0927232\",\n            \"CodeMeaning\": \"Central nervous system\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"21483005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              194,\n              195,\n              164\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebellar white matter\",\n            \"CodeValue\": \"T-A6080\",\n            \"UMLSConceptUID\": \"C0152381\",\n            \"CodeMeaning\": \"Cerebellar white matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"33060004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebral aqueduct\",\n            \"CodeValue\": \"T-A1800\",\n            \"UMLSConceptUID\": \"C0007769\",\n            \"CodeMeaning\": \"Cerebral aqueduct\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"80447000\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Cerebral fornix\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152334\",\n            \"CodeValue\": \"T-A2970\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  64,\n                  123,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right fornix\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  64,\n                  123,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left fornix\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"87463005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              128,\n              174,\n              128\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebral cortex\",\n            \"CodeValue\": \"T-A2020\",\n            \"UMLSConceptUID\": \"C0007776\",\n            \"CodeMeaning\": \"Cerebral Grey Matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"40146001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              250,\n              225\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cerebral white matter\",\n            \"CodeValue\": \"T-A2030\",\n            \"UMLSConceptUID\": \"C0152295\",\n            \"CodeMeaning\": \"Cerebral White Matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"68523003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              255,\n              207\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cervical vertebral column\",\n            \"CodeValue\": \"T-11501\",\n            \"UMLSConceptUID\": \"C0728985\",\n            \"CodeMeaning\": \"Cervical spine\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"122494005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              188,\n              95,\n              76\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of thoracic wall\",\n            \"CodeValue\": \"T-14122\",\n            \"UMLSConceptUID\": \"C1269825\",\n            \"CodeMeaning\": \"Chest wall muscle\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"372074006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Cingulum\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228272\",\n            \"CodeValue\": \"T-A2840\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  146,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right cingulum bundle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  146,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left cingulum bundle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"37035000\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Clavicle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0008913\",\n            \"CodeValue\": \"T-12310\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  205,\n                  179,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right clavicle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  205,\n                  179,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left clavicle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"51299004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              204,\n              168,\n              143\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"colon\",\n            \"CodeValue\": \"T-59300\",\n            \"UMLSConceptUID\": \"C0009368\",\n            \"CodeMeaning\": \"Colon\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"71854001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              97,\n              113,\n              158\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"corpus callosum\",\n            \"CodeValue\": \"T-A2700\",\n            \"UMLSConceptUID\": \"C0010090\",\n            \"CodeMeaning\": \"Corpus callosum\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"88442005\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Corpus striatum\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0010097\",\n            \"CodeValue\": \"T-A3100\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  140,\n                  190\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right striatum\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  140,\n                  190\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left striatum\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"31428008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              234,\n              92\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cranial nerves\",\n            \"CodeValue\": \"T-A8000\",\n            \"UMLSConceptUID\": \"C0010268\",\n            \"CodeMeaning\": \"Cranial nerve\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"25238003\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Diencephalon\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0012144\",\n            \"CodeValue\": \"T-A0102\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  69,\n                  110,\n                  53\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"diencephalon\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"87563008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              253,\n              229\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"duodenum\",\n            \"CodeValue\": \"T-58200\",\n            \"UMLSConceptUID\": \"C0013303\",\n            \"CodeMeaning\": \"Duodenum\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"38848004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"dura mater\",\n            \"CodeValue\": \"T-A1120\",\n            \"UMLSConceptUID\": \"C0013313\",\n            \"CodeMeaning\": \"Dura mater\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"18545000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              211,\n              171,\n              143\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"esophagus\",\n            \"CodeValue\": \"T-56000\",\n            \"UMLSConceptUID\": \"C0014876\",\n            \"CodeMeaning\": \"Esophagus\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"32849002\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"External ear\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0013453\",\n            \"CodeValue\": \"T-AB100\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  122,\n                  90\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right external ear\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  122,\n                  90\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left external ear\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"28347008\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Eyeball\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0229242\",\n            \"CodeValue\": \"T-AA770\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  194,\n                  142,\n                  0\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right eyeball\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  194,\n                  142,\n                  0\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left eyeball\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"79652003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              185,\n              135,\n              134\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"female external genitalia\",\n            \"CodeValue\": \"T-80010\",\n            \"UMLSConceptUID\": \"C0227747\",\n            \"CodeMeaning\": \"Female external genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"86969008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              170,\n              147\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"female internal genitalia\",\n            \"CodeValue\": \"T-80020\",\n            \"UMLSConceptUID\": \"C0227748\",\n            \"CodeMeaning\": \"Female internal genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"87759004\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Foot\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016504\",\n            \"CodeValue\": \"T-D9700\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right foot\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left foot\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"56459004\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Forearm\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016536\",\n            \"CodeValue\": \"T-D8500\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right forearm\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left forearm\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"14975008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"fourth ventricle\",\n            \"CodeValue\": \"T-A1820\",\n            \"UMLSConceptUID\": \"C0149556\",\n            \"CodeMeaning\": \"Fourth ventricle\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35918002\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Frontal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016732\",\n            \"CodeValue\": \"T-11110\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  203,\n                  179,\n                  77\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right frontal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  203,\n                  179,\n                  77\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left frontal bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"74872008\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Frontal lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016733\",\n            \"CodeValue\": \"T-A2200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  83,\n                  146,\n                  164\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right frontal lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  83,\n                  146,\n                  164\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left frontal lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"83251001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              139,\n              150,\n              98\n            ],\n            \"cid\": \"4040\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"gallbladder\",\n            \"CodeValue\": \"T-63000\",\n            \"UMLSConceptUID\": \"C0016976\",\n            \"CodeMeaning\": \"Gallbladder\",\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"28231008\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Globus pallidus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0017651\",\n            \"CodeValue\": \"T-A3500\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  48,\n                  129,\n                  126\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right pallidum\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  48,\n                  129,\n                  126\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left pallidum\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"14738005\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Hand\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0018563\",\n            \"CodeValue\": \"T-D8700\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right hand\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left hand\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"85562004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"head\",\n            \"CodeValue\": \"T-D1100\",\n            \"UMLSConceptUID\": \"C0018670\",\n            \"CodeMeaning\": \"Head\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"69536005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              206,\n              110,\n              84\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"heart\",\n            \"CodeValue\": \"T-32000\",\n            \"UMLSConceptUID\": \"C0018787\",\n            \"CodeMeaning\": \"Heart\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"80891009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              210,\n              139\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"hyoid bone\",\n            \"CodeValue\": \"T-11190\",\n            \"UMLSConceptUID\": \"C0020417\",\n            \"CodeMeaning\": \"Hyoid bone\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"21387005\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Inferior cerebellar peduncle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152393\",\n            \"CodeValue\": \"T-A6640\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  186,\n                  135,\n                  135\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right inferior cerebellar peduncle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  186,\n                  135,\n                  135\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left inferior cerebellar peduncle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"67701001\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Inferior longitudinal fasciculus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228273\",\n            \"CodeValue\": \"T-A2850\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  159,\n                  116,\n                  163\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right inferior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  159,\n                  116,\n                  163\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left inferior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"55233005\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Inner ear\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0022889\",\n            \"CodeValue\": \"T-AB700\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  147,\n                  118\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right inner ear\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  147,\n                  118\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left inner ear\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"22945000\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Insula\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0021640\",\n            \"CodeValue\": \"T-A2610\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  188,\n                  135,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right insular lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  188,\n                  135,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left insular lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"36169008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              233,\n              138,\n              112\n            ],\n            \"cid\": \"6116\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"atrial septum\",\n            \"CodeValue\": \"T-32150\",\n            \"UMLSConceptUID\": \"C0225836\",\n            \"CodeMeaning\": \"Interatrial septum\",\n            \"contextGroupName\": \"Muscular Anatomy\",\n            \"SNOMEDCTConceptID\": \"58095006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              195,\n              100,\n              73\n            ],\n            \"cid\": \"6116\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"ventricular septum\",\n            \"CodeValue\": \"T-32410\",\n            \"UMLSConceptUID\": \"C0225870\",\n            \"CodeMeaning\": \"Interventricular septum\",\n            \"contextGroupName\": \"Muscular Anatomy\",\n            \"SNOMEDCTConceptID\": \"589001\"\n          },\n          {\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"cid\": \"7154\",\n            \"CodeMeaning\": \"Kidney\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0022646\",\n            \"CodeValue\": \"T-71000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  185,\n                  102,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right kidney\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  185,\n                  102,\n                  83\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left kidney\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"64033007\"\n          },\n          {\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"cid\": \"4040\",\n            \"CodeMeaning\": \"Knee\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C1456798\",\n            \"CodeValue\": \"T-D9200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right knee\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left knee\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"72696002\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Lacrimal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0222733\",\n            \"CodeValue\": \"T-1115A\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  250,\n                  160\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lacrimal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"6229007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              150,\n              208,\n              243\n            ],\n            \"cid\": \"4040\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"larynx\",\n            \"CodeValue\": \"T-24100\",\n            \"UMLSConceptUID\": \"C0023078\",\n            \"CodeMeaning\": \"Larynx\",\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"4596009\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Lateral corticospinal tract\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152402\",\n            \"CodeValue\": \"T-A7093\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  160,\n                  133\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right corticospinal tract\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  160,\n                  133\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left corticospinal tract\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"461002\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Lateral ventricle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152279\",\n            \"CodeValue\": \"T-A1650\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  88,\n                  106,\n                  215\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lateral ventricle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  88,\n                  106,\n                  215\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left lateral ventricle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"66720007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              152,\n              55,\n              13\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"left ventricle of heart\",\n            \"CodeValue\": \"T-32600\",\n            \"UMLSConceptUID\": \"C0225897\",\n            \"CodeMeaning\": \"Left Ventricle\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"87878005\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Limbic lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0458337\",\n            \"CodeValue\": \"T-A0036\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  150,\n                  201\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right limbic lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  154,\n                  150,\n                  201\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left limbic lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"279215006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              188,\n              91,\n              95\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lips\",\n            \"CodeValue\": \"T-52000\",\n            \"UMLSConceptUID\": \"C0023759\",\n            \"CodeMeaning\": \"Lip\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"48477009\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Lower leg\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C1140621\",\n            \"CodeValue\": \"T-D9400\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right leg\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left leg\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"30021000\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Lower limb\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0023216\",\n            \"CodeValue\": \"T-D9000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lower limb\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left lower limb\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"61685007\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Lower lobe of lung\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0225758\",\n            \"CodeValue\": \"T-28830\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  224,\n                  186,\n                  162\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"inferior lobe of right lung\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  224,\n                  186,\n                  162\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"inferior lobe of left lung\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"90572001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              212,\n              188,\n              102\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"lumbar vertebral column\",\n            \"CodeValue\": \"T-11503\",\n            \"UMLSConceptUID\": \"C0024091\",\n            \"CodeMeaning\": \"Lumbar spine\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"122496007\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Lung\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0024109\",\n            \"CodeValue\": \"T-28000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  197,\n                  165,\n                  145\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right lung\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  197,\n                  165,\n                  145\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left lung\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"39607008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              185,\n              135,\n              134\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"male external genitalia\",\n            \"CodeValue\": \"T-90010\",\n            \"UMLSConceptUID\": \"C0227922\",\n            \"CodeMeaning\": \"Male external genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"90418005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              146,\n              127\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"male internal genitalia\",\n            \"CodeValue\": \"T-90020\",\n            \"UMLSConceptUID\": \"C0227923\",\n            \"CodeMeaning\": \"Male internal genitalia\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"38242008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              222,\n              198,\n              101\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mandible\",\n            \"CodeValue\": \"T-11180\",\n            \"UMLSConceptUID\": \"C0024687\",\n            \"CodeMeaning\": \"Mandible\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"91609006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Medial Lemniscus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228420\",\n            \"CodeValue\": \"T-A5271\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  140,\n                  103\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right medial lemniscus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  174,\n                  140,\n                  103\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left medial lemniscus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"30114003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mediastinum\",\n            \"CodeValue\": \"T-D3300\",\n            \"UMLSConceptUID\": \"C0025066\",\n            \"CodeMeaning\": \"Mediastinum\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"72410000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"meninges\",\n            \"CodeValue\": \"T-A1110\",\n            \"UMLSConceptUID\": \"C0025285\",\n            \"CodeMeaning\": \"Meninges\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"1231004\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Middle cerebellar peduncle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152392\",\n            \"CodeValue\": \"T-A6630\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  148,\n                  120,\n                  72\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right middle cerebellar peduncle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  148,\n                  120,\n                  72\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left middle cerebellar peduncle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"33723005\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Middle ear\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0013455\",\n            \"CodeValue\": \"T-AB300\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  112,\n                  73\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right middle ear\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  201,\n                  112,\n                  73\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left middle ear\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"25342003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              202,\n              164,\n              140\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"middle lobe of right lung\",\n            \"CodeValue\": \"T-28300\",\n            \"UMLSConceptUID\": \"C0225757\",\n            \"CodeMeaning\": \"Middle lobe of right lung\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"72481006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              159,\n              63,\n              27\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mitral valve\",\n            \"CodeValue\": \"T-35300\",\n            \"UMLSConceptUID\": \"C0026264\",\n            \"CodeMeaning\": \"Mitral Valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"91134007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              201,\n              121,\n              77\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of head\",\n            \"CodeValue\": \"T-13100\",\n            \"UMLSConceptUID\": \"C0224097\",\n            \"CodeMeaning\": \"Muscle of head\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"22688005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              213,\n              124,\n              109\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"muscles of neck\",\n            \"CodeValue\": \"T-13300\",\n            \"UMLSConceptUID\": \"C0027532\",\n            \"CodeMeaning\": \"Muscle of neck\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"81727001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"neck\",\n            \"CodeValue\": \"T-D1600\",\n            \"UMLSConceptUID\": \"C0027530\",\n            \"CodeMeaning\": \"Neck\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"45048000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              92,\n              162,\n              109\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"neurohypophysis\",\n            \"CodeValue\": \"T-B1200\",\n            \"UMLSConceptUID\": \"C0032009\",\n            \"CodeMeaning\": \"Neurohypophysis\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"37512009\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Occipital lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0028785\",\n            \"CodeValue\": \"T-A2400\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  182,\n                  166,\n                  110\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right occipital lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  182,\n                  166,\n                  110\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left occipital lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"31065004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              234,\n              234,\n              194\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"omentum\",\n            \"CodeValue\": \"T-D4600\",\n            \"UMLSConceptUID\": \"C0028977\",\n            \"CodeMeaning\": \"Omentum\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"27398004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              99,\n              106,\n              24\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"optic chiasm\",\n            \"CodeValue\": \"T-A800B\",\n            \"UMLSConceptUID\": \"C0029126\",\n            \"CodeMeaning\": \"Optic chiasm\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"244453006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Optic radiation\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228277\",\n            \"CodeValue\": \"T-A2880\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  78,\n                  152,\n                  141\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right optic radiation\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  78,\n                  152,\n                  141\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left optic radiation\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"70105001\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Optic tract\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0152405\",\n            \"CodeValue\": \"T-A8060\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  156,\n                  171,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right optic tract\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  156,\n                  171,\n                  108\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left optic tract\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"53238003\"\n          },\n          {\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"cid\": \"7160\",\n            \"CodeMeaning\": \"Ovary\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0029939\",\n            \"CodeValue\": \"T-87000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  213,\n                  141,\n                  113\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right ovary\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  213,\n                  141,\n                  113\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left ovary\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"15497006\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Palatine bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0222734\",\n            \"CodeValue\": \"T-11160\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  242,\n                  217,\n                  123\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right palatine bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  242,\n                  217,\n                  123\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left palatine bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"51283005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              249,\n              180,\n              111\n            ],\n            \"cid\": \"4030\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pancreas\",\n            \"CodeValue\": \"T-65000\",\n            \"UMLSConceptUID\": \"C0030274\",\n            \"CodeMeaning\": \"Pancreas\",\n            \"contextGroupName\": \"CT, MR and PET Anatomy Imaged\",\n            \"SNOMEDCTConceptID\": \"15776009\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Parietal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0030558\",\n            \"CodeValue\": \"T-11120\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  204,\n                  109\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right parietal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  229,\n                  204,\n                  109\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left parietal bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"24924006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Parietal lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0030560\",\n            \"CodeValue\": \"T-A2300\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  141,\n                  93,\n                  137\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right parietal lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  141,\n                  93,\n                  137\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left parietal lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"16630005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              184,\n              122,\n              154\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pericardial cavity\",\n            \"CodeValue\": \"T-39050\",\n            \"UMLSConceptUID\": \"C0225972\",\n            \"CodeMeaning\": \"Pericardial cavity\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"25489000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pericardium\",\n            \"CodeValue\": \"T-39000\",\n            \"UMLSConceptUID\": \"C0031050\",\n            \"CodeMeaning\": \"Pericardium\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"76848001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              224,\n              194,\n              0\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peripheral nerve\",\n            \"CodeValue\": \"T-A0500\",\n            \"UMLSConceptUID\": \"C0031119\",\n            \"CodeMeaning\": \"Peripheral nerve\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"84782009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              186,\n              0\n            ],\n            \"cid\": \"7167\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peripheral nervous system\",\n            \"CodeValue\": \"T-A0140\",\n            \"UMLSConceptUID\": \"C0206417\",\n            \"CodeMeaning\": \"Peripheral nervous system\",\n            \"contextGroupName\": \"Peripheral Nervous System Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"3058005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              255,\n              220\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peritoneum\",\n            \"CodeValue\": \"T-D4400\",\n            \"UMLSConceptUID\": \"C0031153\",\n            \"CodeMeaning\": \"Peritioneum\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"15425007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              204,\n              142,\n              178\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"peritoneal cavity\",\n            \"CodeValue\": \"T-D4425\",\n            \"UMLSConceptUID\": \"C1704247\",\n            \"CodeMeaning\": \"Peritoneal cavity\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"83670000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              184,\n              105,\n              108\n            ],\n            \"cid\": \"4040\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pharynx\",\n            \"CodeValue\": \"T-55000\",\n            \"UMLSConceptUID\": \"C0031354\",\n            \"CodeMeaning\": \"Pharynx\",\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"54066008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              244,\n              209\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pia mater\",\n            \"CodeValue\": \"T-A1280\",\n            \"UMLSConceptUID\": \"C0031869\",\n            \"CodeMeaning\": \"Pia mater\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"23180006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              253,\n              135,\n              192\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pineal gland\",\n            \"CodeValue\": \"T-B2000\",\n            \"UMLSConceptUID\": \"C0031939\",\n            \"CodeMeaning\": \"Pineal Gland\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"45793000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              57,\n              157,\n              110\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pituitary gland\",\n            \"CodeValue\": \"T-B1000\",\n            \"UMLSConceptUID\": \"C0032005\",\n            \"CodeMeaning\": \"Pituitary\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"56329008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              126,\n              161,\n              197\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"posterior commissure\",\n            \"CodeValue\": \"T-A4904\",\n            \"UMLSConceptUID\": \"C0152327\",\n            \"CodeMeaning\": \"Posterior cerebral commissure\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"279336005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              230,\n              158,\n              140\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"prostate\",\n            \"CodeValue\": \"T-92000\",\n            \"UMLSConceptUID\": \"C0033572\",\n            \"CodeMeaning\": \"Prostate\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"41216001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              225,\n              130,\n              104\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"pulmonary valve\",\n            \"CodeValue\": \"T-35200\",\n            \"UMLSConceptUID\": \"C0034086\",\n            \"CodeMeaning\": \"Pulmonary valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"39057004\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Putamen\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0034169\",\n            \"CodeValue\": \"T-A3400\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  210,\n                  157,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right putamen\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  210,\n                  157,\n                  166\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left putamen\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"89278009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              180,\n              119,\n              153\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"retroperitoneal space\",\n            \"CodeValue\": \"T-D4900\",\n            \"UMLSConceptUID\": \"C0035359\",\n            \"CodeMeaning\": \"Retroperitoneal space\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"82849001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              181,\n              85,\n              57\n            ],\n            \"cid\": \"7152\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"right ventricle of heart\",\n            \"CodeValue\": \"T-32500\",\n            \"UMLSConceptUID\": \"C0225883\",\n            \"CodeMeaning\": \"Right Ventricle\",\n            \"contextGroupName\": \"Cardiac Structure Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"53085002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              70,\n              163,\n              117\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"salivary glands\",\n            \"CodeValue\": \"T-61007\",\n            \"UMLSConceptUID\": \"C0036098\",\n            \"CodeMeaning\": \"Salivary gland\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"385294005\"\n          },\n          {\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"cid\": \"7160\",\n            \"CodeMeaning\": \"Seminal Vesicle\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0036628\",\n            \"CodeValue\": \"T-93000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  245,\n                  172,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right seminal vesicle\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  245,\n                  172,\n                  147\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left seminal vesicle\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"64739004\"\n          },\n          {\n            \"contextGroupName\": \"Endoscopy Anatomic Regions\",\n            \"cid\": \"4040\",\n            \"CodeMeaning\": \"Shoulder\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0037004\",\n            \"CodeValue\": \"T-D2220\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right shoulder\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left shoulder\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"16982005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              124,\n              92\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skin of abdominal wall\",\n            \"CodeValue\": \"T-02480\",\n            \"UMLSConceptUID\": \"C0222166\",\n            \"CodeMeaning\": \"Skin of abdomen\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"75093004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              173,\n              121,\n              88\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skin of thoracic wall\",\n            \"CodeValue\": \"T-02424\",\n            \"UMLSConceptUID\": \"C0222149\",\n            \"CodeMeaning\": \"Skin of chest\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"74160004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              241,\n              213,\n              144\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"skull\",\n            \"CodeValue\": \"T-11100\",\n            \"UMLSConceptUID\": \"C0037303\",\n            \"CodeMeaning\": \"Skull\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"89546000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              205,\n              167,\n              142\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"small bowel\",\n            \"CodeValue\": \"T-58000\",\n            \"UMLSConceptUID\": \"C0021852\",\n            \"CodeMeaning\": \"Small Intestine\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"30315005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              182,\n              105,\n              107\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"soft palate\",\n            \"CodeValue\": \"T-51120\",\n            \"UMLSConceptUID\": \"C0030219\",\n            \"CodeMeaning\": \"Soft palate\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"49460000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              214,\n              49\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"spinal cord\",\n            \"CodeValue\": \"T-A7010\",\n            \"UMLSConceptUID\": \"C0037925\",\n            \"CodeMeaning\": \"Spinal cord\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"2748008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              200,\n              200,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"gray matter of spinal cord\",\n            \"CodeValue\": \"T-A7020\",\n            \"UMLSConceptUID\": \"C0475853\",\n            \"CodeMeaning\": \"Spinal cord gray matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"12958003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              250,\n              250,\n              225\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"white matter of spinal cord\",\n            \"CodeValue\": \"T-A7070\",\n            \"UMLSConceptUID\": \"C0458457\",\n            \"CodeMeaning\": \"Spinal cord white matter\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"27088001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              244,\n              217,\n              154\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"sternum\",\n            \"CodeValue\": \"T-11210\",\n            \"UMLSConceptUID\": \"C0038293\",\n            \"CodeMeaning\": \"Sternum\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"56873002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              132,\n              105\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"stomach\",\n            \"CodeValue\": \"T-57000\",\n            \"UMLSConceptUID\": \"C0038351\",\n            \"CodeMeaning\": \"Stomach\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"69695003\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              88,\n              106,\n              215\n            ],\n            \"cid\": \"7153\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"subarachnoid space\",\n            \"CodeValue\": \"T-A1500\",\n            \"UMLSConceptUID\": \"C0038527\",\n            \"CodeMeaning\": \"Subarachnoid space\",\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35951006\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Substantia nigra\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0038590\",\n            \"CodeValue\": \"T-A5160\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  0,\n                  108,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right substantia nigra\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  0,\n                  108,\n                  112\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left substantia nigra\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"70007007\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Superior longitudinal fasciculus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228270\",\n            \"CodeValue\": \"T-A2820\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  127,\n                  150,\n                  88\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right superior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  127,\n                  150,\n                  88\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left superior longitudinal fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"89202009\"\n          },\n          {\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"cid\": \"4028\",\n            \"CodeMeaning\": \"Temporal bone\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0039484\",\n            \"CodeValue\": \"T-11130\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  243,\n                  152\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right temporal bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  243,\n                  152\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left temporal bone\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"60911003\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Temporal lobe\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0039485\",\n            \"CodeValue\": \"T-A2500\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  162,\n                  115,\n                  105\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right temporal lobe\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  162,\n                  115,\n                  105\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left temporal lobe\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"78277001\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Thalamus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0458271\",\n            \"CodeValue\": \"T-D0593\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  122,\n                  101,\n                  38\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right thalamus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  122,\n                  101,\n                  38\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left thalamus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"119406000\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Thigh\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0039866\",\n            \"CodeValue\": \"T-D9100\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right thigh\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left thigh\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"68367000\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              226,\n              202,\n              134\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thoracic vertebral column\",\n            \"CodeValue\": \"T-11502\",\n            \"UMLSConceptUID\": \"C0581269\",\n            \"CodeMeaning\": \"Thoracic spine\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"122495006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              177,\n              122,\n              101\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thorax\",\n            \"CodeValue\": \"T-D3000\",\n            \"UMLSConceptUID\": \"C0817096\",\n            \"CodeMeaning\": \"Thorax\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"51185008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              47,\n              150,\n              103\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thymus\",\n            \"CodeValue\": \"T-C8000\",\n            \"UMLSConceptUID\": \"C0040113\",\n            \"CodeMeaning\": \"Thymus\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"9875009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              62,\n              162,\n              114\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"thyroid gland\",\n            \"CodeValue\": \"T-B6000\",\n            \"UMLSConceptUID\": \"C0040132\",\n            \"CodeMeaning\": \"Thyroid\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"69748006\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              166,\n              84,\n              94\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tongue\",\n            \"CodeValue\": \"T-53000\",\n            \"UMLSConceptUID\": \"C0040408\",\n            \"CodeMeaning\": \"Tongue\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"21974007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              250,\n              220\n            ],\n            \"cid\": \"4028\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"teeth\",\n            \"CodeValue\": \"T-54010\",\n            \"UMLSConceptUID\": \"C0040426\",\n            \"CodeMeaning\": \"Tooth\",\n            \"contextGroupName\": \"Craniofacial Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"38199008\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              182,\n              228,\n              255\n            ],\n            \"cid\": \"7155\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"trachea\",\n            \"CodeValue\": \"T-25000\",\n            \"UMLSConceptUID\": \"C0040578\",\n            \"CodeMeaning\": \"Trachea\",\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"44567001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              166,\n              70,\n              38\n            ],\n            \"cid\": \"6113\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"tricuspid valve\",\n            \"CodeValue\": \"T-35100\",\n            \"UMLSConceptUID\": \"C0040960\",\n            \"CodeMeaning\": \"Tricuspid Valve\",\n            \"contextGroupName\": \"Mediastinum Anatomy Finding or Feature\",\n            \"SNOMEDCTConceptID\": \"46030003\"\n          },\n          {\n            \"contextGroupName\": \"CNS Tissue Segmentation Types\",\n            \"cid\": \"7153\",\n            \"CodeMeaning\": \"Uncinate fasciculus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0228271\",\n            \"CodeValue\": \"T-A2830\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  106,\n                  174,\n                  155\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right uncinate fasciculus\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  106,\n                  174,\n                  155\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left uncinate fasciculus\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"26230003\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Upper arm\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0446516\",\n            \"CodeValue\": \"T-D8200\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right arm\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left arm\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"40983000\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Upper limb\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0016555\",\n            \"CodeValue\": \"T-D8000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right upper limb\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  177,\n                  122,\n                  101\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left upper limb\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"53120007\"\n          },\n          {\n            \"contextGroupName\": \"Thoracic Tissue Segmentation Types\",\n            \"cid\": \"7155\",\n            \"CodeMeaning\": \"Upper lobe of lung\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0225756\",\n            \"CodeValue\": \"T-28820\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  172,\n                  138,\n                  115\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"superior lobe of right lung\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  172,\n                  138,\n                  115\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"superior lobe of left lung\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"45653009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              124,\n              186,\n              223\n            ],\n            \"cid\": \"4031\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urethra\",\n            \"CodeValue\": \"T-75000\",\n            \"UMLSConceptUID\": \"C0041967\",\n            \"CodeMeaning\": \"Urethra\",\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"SNOMEDCTConceptID\": \"13648007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              203,\n              136,\n              116\n            ],\n            \"cid\": \"7154\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urinary system\",\n            \"CodeValue\": \"T-70001\",\n            \"UMLSConceptUID\": \"C1508753\",\n            \"CodeMeaning\": \"Urinary system\",\n            \"contextGroupName\": \"Abdominal Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"122489005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              255,\n              181,\n              158\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"uterus\",\n            \"CodeValue\": \"T-83000\",\n            \"UMLSConceptUID\": \"C0042149\",\n            \"CodeMeaning\": \"Uterus\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"35039007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              193,\n              123,\n              103\n            ],\n            \"cid\": \"7160\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"vagina\",\n            \"CodeValue\": \"T-82000\",\n            \"UMLSConceptUID\": \"C0042232\",\n            \"CodeMeaning\": \"Vagina\",\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"76784001\"\n          },\n          {\n            \"contextGroupName\": \"Pelvic Organ Segmentation Types\",\n            \"cid\": \"7160\",\n            \"CodeMeaning\": \"Vas deferens\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0042360\",\n            \"CodeValue\": \"T-96000\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  241,\n                  172,\n                  151\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right deferent duct\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              },\n              {\n                \"recommendedDisplayRGBValue\": [\n                  241,\n                  172,\n                  151\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"left deferent duct\",\n                \"CodeValue\": \"G-A101\",\n                \"UMLSConceptUID\": \"C0205091\",\n                \"CodeMeaning\": \"Left\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"7771000\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"57671007\"\n          },\n          {\n            \"contextGroupName\": \"Common Anatomic Regions\",\n            \"cid\": \"4031\",\n            \"CodeMeaning\": \"Zygoma\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"UMLSConceptUID\": \"C0043539\",\n            \"CodeValue\": \"T-11166\",\n            \"Modifier\": [\n              {\n                \"recommendedDisplayRGBValue\": [\n                  255,\n                  255,\n                  167\n                ],\n                \"cid\": \"244\",\n                \"CodingSchemeDesignator\": \"SRT\",\n                \"3dSlicerLabel\": \"right zygomatic bone\",\n                \"CodeValue\": \"G-A100\",\n                \"UMLSConceptUID\": \"C0205090\",\n                \"CodeMeaning\": \"Right\",\n                \"contextGroupName\": \"Laterality\",\n                \"SNOMEDCTConceptID\": \"24028007\"\n              }\n            ],\n            \"SNOMEDCTConceptID\": \"13881006\"\n          }\n        ],\n        \"showAnatomy\": false\n      },\n      {\n        \"CodeMeaning\": \"Morphologically Altered Structure\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"49755003\",\n        \"cid\": \"7051\",\n        \"UMLSConceptUID\": \"C0221198\",\n        \"CodeValue\": \"M-01000\",\n        \"contextGroupName\": \"Segmentation Property Categories\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              145,\n              60,\n              66\n            ],\n            \"CodeMeaning\": \"Blood clot\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"clot\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0302148\",\n            \"CodeValue\": \"M-35000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"75753009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              205,\n              205,\n              100\n            ],\n            \"CodeMeaning\": \"Cyst\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"cyst\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0010709\",\n            \"CodeValue\": \"M-3340A\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"367643001\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              140,\n              224,\n              228\n            ],\n            \"CodeMeaning\": \"Edema\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"edema\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0013604\",\n            \"CodeValue\": \"M-36300\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"79654002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              150,\n              98,\n              83\n            ],\n            \"CodeMeaning\": \"Embolus\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"embolism\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C1704212\",\n            \"CodeValue\": \"M-35300\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"55584005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              188,\n              65,\n              28\n            ],\n            \"CodeMeaning\": \"Hemorrhage\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"bleeding\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0019080\",\n            \"CodeValue\": \"M-37000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"50960005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              144,\n              238,\n              144\n            ],\n            \"CodeMeaning\": \"Mass\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"mass\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0577559\",\n            \"CodeValue\": \"M-03000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"4147007\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              216,\n              191,\n              216\n            ],\n            \"CodeMeaning\": \"Necrosis\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"necrosis\",\n            \"cid\": \"7159\",\n            \"UMLSConceptUID\": \"C0027540\",\n            \"CodeValue\": \"M-54000\",\n            \"contextGroupName\": \"Lesion Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"6574001\"\n          }\n        ],\n        \"showAnatomy\": true\n      },\n      {\n        \"CodeMeaning\": \"Body Substance\",\n        \"CodingSchemeDesignator\": \"SRT\",\n        \"SNOMEDCTConceptID\": \"91720002\",\n        \"cid\": \"\",\n        \"UMLSConceptUID\": \"C0504082\",\n        \"CodeValue\": \"T-D0080\",\n        \"contextGroupName\": \"\",\n        \"Type\": [\n          {\n            \"recommendedDisplayRGBValue\": [\n              0,\n              145,\n              30\n            ],\n            \"CodeMeaning\": \"Bile\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"bile\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0005388\",\n            \"CodeValue\": \"T-60650\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"70150004\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              170,\n              250,\n              250\n            ],\n            \"CodeMeaning\": \"Body fluid\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"fluid\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0005889\",\n            \"CodeValue\": \"T-D0070\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"32457005\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              78,\n              63,\n              0\n            ],\n            \"CodeMeaning\": \"Feces\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"feces\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0015733\",\n            \"CodeValue\": \"T-59666\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"39477002\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              218,\n              255,\n              255\n            ],\n            \"CodeMeaning\": \"Gas\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"gas\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0017110\",\n            \"CodeValue\": \"C-10080\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"74947009\"\n          },\n          {\n            \"recommendedDisplayRGBValue\": [\n              214,\n              230,\n              130\n            ],\n            \"CodeMeaning\": \"Urine\",\n            \"CodingSchemeDesignator\": \"SRT\",\n            \"3dSlicerLabel\": \"urine\",\n            \"cid\": \"7166\",\n            \"UMLSConceptUID\": \"C0042036\",\n            \"CodeValue\": \"T-70060\",\n            \"contextGroupName\": \"Common Tissue Segmentation Types\",\n            \"SNOMEDCTConceptID\": \"78014005\"\n          }\n        ],\n        \"showAnatomy\": false\n      }\n    ]\n  }\n}";
var parsedJson = JSON.parse(json);
/* harmony default export */ __webpack_exports__["default"] = (parsedJson);

/***/ }),

/***/ "./src/commandsModule.js":
/*!*******************************!*\
  !*** ./src/commandsModule.js ***!
  \*******************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _util_getActiveBrushToolsForElement_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util/getActiveBrushToolsForElement.js */ "./src/util/getActiveBrushToolsForElement.js");
/* harmony import */ var _util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util/getActiveViewportEnabledElement.js */ "./src/util/getActiveViewportEnabledElement.js");
/* harmony import */ var _util_getActiveFreehandToolsForElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util/getActiveFreehandToolsForElement.js */ "./src/util/getActiveFreehandToolsForElement.js");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_3__);




var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_3__["store"].modules.brush;
var actions = {
  nextSegmentForActiveViewport: function nextSegmentForActiveViewport(_ref) {
    var viewports = _ref.viewports;
    var activeBrushTools = Object(_util_getActiveBrushToolsForElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(viewports);

    if (!activeBrushTools.length) {
      return;
    }

    var brushTool = activeBrushTools[0];
    brushTool.nextSegment();
  },
  previousSegmentForActiveViewport: function previousSegmentForActiveViewport(_ref2) {
    var viewports = _ref2.viewports;
    var activeBrushTools = Object(_util_getActiveBrushToolsForElement_js__WEBPACK_IMPORTED_MODULE_0__["default"])(viewports);

    if (!activeBrushTools.length) {
      return;
    }

    var brushTool = activeBrushTools[0];
    brushTool.previousSegment();
  },
  increaseBrushSize: function increaseBrushSize() {
    var oldRadius = brushModule.state.radius;
    var newRadius = Math.floor(oldRadius * 1.2); // If e.g. only 2 pixels big. Math.floor(2*1.2) = 2.
    // Hence, have minimum increment of 1 pixel.

    if (newRadius === oldRadius) {
      newRadius += 1;
    }

    brushModule.setters.radius(newRadius);
  },
  decreaseBrushSize: function decreaseBrushSize() {
    var oldRadius = brushModule.state.radius;
    var newRadius = Math.floor(oldRadius * 0.8);
    brushModule.setters.radius(newRadius);
  },
  cancelFreehandDrawing: function cancelFreehandDrawing(_ref3) {
    var viewports = _ref3.viewports;
    var enabledElement = Object(_util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(viewports.viewportSpecificData, viewports.activeViewportIndex);
    var activeFreehandTools = Object(_util_getActiveFreehandToolsForElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(viewports);

    if (!activeFreehandTools.length) {
      return;
    }

    activeFreehandTools[0].cancelDrawing(enabledElement.element);
  }
};
var definitions = {
  nextSegmentForActiveViewport: {
    commandFn: actions.nextSegmentForActiveViewport,
    storeContexts: ['viewports']
  },
  previousSegmentForActiveViewport: {
    commandFn: actions.previousSegmentForActiveViewport,
    storeContexts: ['viewports']
  },
  increaseBrushSize: {
    commandFn: actions.increaseBrushSize
  },
  decreaseBrushSize: {
    commandFn: actions.decreaseBrushSize
  },
  cancelFreehandDrawing: {
    commandFn: actions.cancelFreehandDrawing,
    storeContexts: ['viewports']
  }
};
/* harmony default export */ __webpack_exports__["default"] = ({
  actions: actions,
  definitions: definitions,
  defaultContext: 'ACTIVE_VIEWPORT::CORNERSTONE'
});

/***/ }),

/***/ "./src/components/common/MenuIOButtons.js":
/*!************************************************!*\
  !*** ./src/components/common/MenuIOButtons.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MenuIOButtons; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }


/**
 * @class MenuIOButtons - Renders Import and/or Export buttons if
 * this.props.ImportCallbackOrComponent and/or
 * this.props.ExportCallbackOrComponent are defined.
 */

var MenuIOButtons =
/*#__PURE__*/
function (_React$Component) {
  _inherits(MenuIOButtons, _React$Component);

  function MenuIOButtons() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, MenuIOButtons);

    return _possibleConstructorReturn(this, _getPrototypeOf(MenuIOButtons).call(this, props));
  }

  _createClass(MenuIOButtons, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          ImportCallbackOrComponent = _this$props.ImportCallbackOrComponent,
          ExportCallbackOrComponent = _this$props.ExportCallbackOrComponent,
          onImportButtonClick = _this$props.onImportButtonClick,
          onExportButtonClick = _this$props.onExportButtonClick;

      if (!ImportCallbackOrComponent && !ExportCallbackOrComponent) {
        return null;
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, ImportCallbackOrComponent && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onImportButtonClick
      }, "Import"), ExportCallbackOrComponent && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onExportButtonClick
      }, "Export"));
    }
  }]);

  return MenuIOButtons;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/common/helpers/onExportButtonClick.js":
/*!**************************************************************!*\
  !*** ./src/components/common/helpers/onExportButtonClick.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onExportButtonClick; });
/**
 * onExportButtonClick - Helper function for annotation menu components.
 * Calls ExportCallbackOrComponent if it is a funciton, or sets
 * this.state.exporting to true if it is a component.
 *
 * @returns {null}
 */
function onExportButtonClick() {
  var ExportCallbackOrComponent = this.props.ExportCallbackOrComponent;

  if (ExportCallbackOrComponent.prototype.isReactComponent) {
    this.setState({
      exporting: true
    });
  } else {
    ExportCallbackOrComponent();
  }
}

/***/ }),

/***/ "./src/components/common/helpers/onIOCancel.js":
/*!*****************************************************!*\
  !*** ./src/components/common/helpers/onIOCancel.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onIOCancel; });
/**
 * onIOCancel - Helper function for annotation menu components. Sets
 * this.state.importing and this.state.exporting to false.
 *
 * @returns {null}
 */
function onIOCancel() {
  this.setState({
    importing: false,
    exporting: false
  });
}

/***/ }),

/***/ "./src/components/common/helpers/onImportButtonClick.js":
/*!**************************************************************!*\
  !*** ./src/components/common/helpers/onImportButtonClick.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return onImportButtonClick; });
/**
 * onImportButtonClick - Helper function for annotation menu components.
 * Calls ImportCallbackOrComponent if it is a funciton, or sets
 * this.state.importing to true if it is a component.
 *
 * @returns {null}
 */
function onImportButtonClick() {
  console.log(this);
  var ImportCallbackOrComponent = this.props.ImportCallbackOrComponent;

  if (ImportCallbackOrComponent.prototype.isReactComponent) {
    this.setState({
      importing: true
    });
  } else {
    ImportCallbackOrComponent();
  }
}

/***/ }),

/***/ "./src/components/roiContourMenu/LockedCollectionsList.js":
/*!****************************************************************!*\
  !*** ./src/components/roiContourMenu/LockedCollectionsList.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LockedCollectionsList; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _LockedCollectionsListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./LockedCollectionsListItem.js */ "./src/components/roiContourMenu/LockedCollectionsListItem.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }


 // import './roiContourMenu.styl';

/**
 * @class LockedCollectionsList - Renders a list of LockedCollectionsListItems,
 * displaying metadata of locked ROIContour Collections.
 */

var LockedCollectionsList =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LockedCollectionsList, _React$Component);

  function LockedCollectionsList() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LockedCollectionsList);

    return _possibleConstructorReturn(this, _getPrototypeOf(LockedCollectionsList).call(this, props));
  }

  _createClass(LockedCollectionsList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          lockedCollections = _this$props.lockedCollections,
          onUnlockClick = _this$props.onUnlockClick,
          seriesInstanceUid = _this$props.seriesInstanceUid;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, lockedCollections.map(function (collection) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_LockedCollectionsListItem_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          key: collection.metadata.uid,
          collection: collection,
          onUnlockClick: onUnlockClick,
          seriesInstanceUid: seriesInstanceUid
        });
      }));
    }
  }]);

  return LockedCollectionsList;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/LockedCollectionsListItem.js":
/*!********************************************************************!*\
  !*** ./src/components/roiContourMenu/LockedCollectionsListItem.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LockedCollectionsListItem; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }


 // import './roiContourMenu.styl';

var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default.a.store.modules;
/**
 * @class LockedCollectionsListItem - Renders metadata for an individual locked
 * ROIContour Collection.
 */

var LockedCollectionsListItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(LockedCollectionsListItem, _React$Component);

  function LockedCollectionsListItem() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, LockedCollectionsListItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(LockedCollectionsListItem).call(this, props));
    var visible = _this.props.collection.metadata.visible;
    _this.state = {
      expanded: false,
      visible: visible
    };
    _this.onToggleVisibilityClick = _this.onToggleVisibilityClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onShowHideClick = _this.onShowHideClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * onToggleVisibilityClick - Callback that toggles the expands/collapses the
   * list of collection metadata.
   *
   * @returns {null}
   */


  _createClass(LockedCollectionsListItem, [{
    key: "onToggleVisibilityClick",
    value: function onToggleVisibilityClick() {
      var expanded = this.state.expanded;
      this.setState({
        expanded: !expanded
      });
    }
    /**
     * onShowHideClick - Toggles the visibility of the collections ROI Contours.
     *
     * @returns {null}
     */

  }, {
    key: "onShowHideClick",
    value: function onShowHideClick() {
      var _this$props = this.props,
          collection = _this$props.collection,
          seriesInstanceUid = _this$props.seriesInstanceUid;
      var visible = this.state.visible;
      var structureSet = modules.freehand3D.getters.structureSet(seriesInstanceUid, collection.metadata.uid);
      structureSet.visible = !visible;
      this.setState({
        visible: !visible
      }); // Update viewport.
      // const element = OHIF.viewerbase.viewportUtils.getActiveViewportElement();
      // TODO
      // cornerstone.updateImage(element);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          collection = _this$props2.collection,
          onUnlockClick = _this$props2.onUnlockClick;
      var _this$state = this.state,
          expanded = _this$state.expanded,
          visible = _this$state.visible;
      var metadata = collection.metadata;
      var ROIContourArray = collection.ROIContourArray;
      var visibleButton = expanded ? 'fa fa-minus-square' : 'fa fa-plus-square';
      var showHideIcon = visible ? 'fa fa-eye' : 'fa fa-eye-slash';
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
        className: "roi-list-header"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: this.onToggleVisibilityClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: visibleButton
      }))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2"
      }, metadata.name), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: this.onShowHideClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: showHideIcon
      }))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: function onClick() {
          onUnlockClick(metadata.uid);
        }
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-unlock"
      })))), expanded && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Name"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Contours")), ROIContourArray.map(function (roiContour) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
          key: roiContour.metadata.uid
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
          className: "left-aligned-cell"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
          className: "fa fa-square",
          style: {
            color: roiContour.metadata.color
          }
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
          className: "left-aligned-cell"
        }, roiContour.metadata.name), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
          className: "centered-cell"
        }, roiContour.metadata.polygonCount));
      })));
    }
  }]);

  return LockedCollectionsListItem;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/RoiContourMenu.js":
/*!*********************************************************!*\
  !*** ./src/components/roiContourMenu/RoiContourMenu.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RoiContourMenu; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/MenuIOButtons.js */ "./src/components/common/MenuIOButtons.js");
/* harmony import */ var _WorkingCollectionList_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./WorkingCollectionList.js */ "./src/components/roiContourMenu/WorkingCollectionList.js");
/* harmony import */ var _LockedCollectionsList_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./LockedCollectionsList.js */ "./src/components/roiContourMenu/LockedCollectionsList.js");
/* harmony import */ var _RoiContourSettings_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./RoiContourSettings.js */ "./src/components/roiContourMenu/RoiContourSettings.js");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_5__);
/* harmony import */ var _util_unlockStructureSet_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../util/unlockStructureSet.js */ "./src/util/unlockStructureSet.js");
/* harmony import */ var _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../common/helpers/onIOCancel.js */ "./src/components/common/helpers/onIOCancel.js");
/* harmony import */ var _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/helpers/onImportButtonClick.js */ "./src/components/common/helpers/onImportButtonClick.js");
/* harmony import */ var _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/helpers/onExportButtonClick.js */ "./src/components/common/helpers/onExportButtonClick.js");
/* harmony import */ var _util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/getActiveViewportEnabledElement.js */ "./src/util/getActiveViewportEnabledElement.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }










 // import style from './roiContourMenu.styl';



var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_5___default.a.store.modules;
/**
 * @class RoiContourMenu - Renders a menu for importing, exporting, creating
 * and renaming ROI Contours. As well as setting configuration settings for
 * the Freehand3Dtool.
 */

var RoiContourMenu =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RoiContourMenu, _React$Component);

  function RoiContourMenu() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RoiContourMenu);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoiContourMenu).call(this, props)); // add event listners to cornerstone.

    var enabledElement = Object(_util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_10__["default"])(props.viewports, props.activeIndex);
    var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__["default"])(enabledElement);
    _this.getRoiContourList = _this.getRoiContourList.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    var workingCollection = [];
    var lockedCollections = [];
    var activeROIContourIndex = 1;

    if (seriesInstanceUid) {
      var roiContourList = _this.getRoiContourList(seriesInstanceUid);

      workingCollection = roiContourList.workingCollection;
      lockedCollections = roiContourList.lockedCollections;
      activeROIContourIndex = roiContourList.activeROIContourIndex;
    }

    _this.state = {
      workingCollection: workingCollection,
      lockedCollections: lockedCollections,
      unlockConfirmationOpen: false,
      roiCollectionToUnlock: '',
      activeROIContourIndex: activeROIContourIndex,
      importing: false,
      exporting: false,
      seriesInstanceUid: seriesInstanceUid
    };
    _this.onNewRoiButtonClick = _this.onNewRoiButtonClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onRoiChange = _this.onRoiChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onRenameButtonClick = _this.onRenameButtonClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.confirmUnlockOnUnlockClick = _this.confirmUnlockOnUnlockClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onUnlockCancelClick = _this.onUnlockCancelClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onUnlockConfirmClick = _this.onUnlockConfirmClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOComplete = _this.onIOComplete.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOCancel = _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_7__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onImportButtonClick = _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_8__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onExportButtonClick = _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * getRoiContourList - returns the workingCollection, lockedCollections
   * and th activeROIContourIndex.
   *
   * @returns {null}
   */


  _createClass(RoiContourMenu, [{
    key: "getRoiContourList",
    value: function getRoiContourList(seriesInstanceUid) {
      seriesInstanceUid = seriesInstanceUid || this.state.seriesInstanceUid;
      var workingCollection = [];
      var lockedCollections = [];
      var activeROIContourIndex = 0;

      if (seriesInstanceUid) {
        var freehand3DModule = modules.freehand3D;

        if (freehand3DModule.getters.series(seriesInstanceUid)) {
          activeROIContourIndex = freehand3DModule.getters.activeROIContourIndex(seriesInstanceUid);
        }

        workingCollection = this.constructor._workingCollection(seriesInstanceUid);
        lockedCollections = this.constructor._lockedCollections(seriesInstanceUid);
      }

      return {
        workingCollection: workingCollection,
        lockedCollections: lockedCollections,
        activeROIContourIndex: activeROIContourIndex
      };
    }
    /**
     * refreshRoiContourList - Grabs the ROI Contours from the freehand3D store and
     * populates state.
     *
     * @returns {null}
     */

  }, {
    key: "refreshRoiContourList",
    value: function refreshRoiContourList() {
      var seriesInstanceUid = this.state.seriesInstanceUid;

      var _this$getRoiContourLi = this.getRoiContourList(seriesInstanceUid),
          workingCollection = _this$getRoiContourLi.workingCollection,
          lockedCollections = _this$getRoiContourLi.lockedCollections,
          activeROIContourIndex = _this$getRoiContourLi.activeROIContourIndex;

      this.setState({
        workingCollection: workingCollection,
        lockedCollections: lockedCollections,
        activeROIContourIndex: activeROIContourIndex
      });
    }
    /**
     * onIOComplete - A callback executed on succesful completion of an
     * IO opperation. Recalculates the ROI Contour Collection state.
     *
     * @returns {type}  description
     */

  }, {
    key: "onIOComplete",
    value: function onIOComplete() {
      var seriesInstanceUid = this.state.seriesInstanceUid;
      var freehand3DStore = modules.freehand3D;
      var activeROIContourIndex = 0;

      if (modules.freehand3D.getters.series(seriesInstanceUid)) {
        activeROIContourIndex = freehand3DStore.getters.activeROIContourIndex(seriesInstanceUid);
      }

      var workingCollection = this.constructor._workingCollection(seriesInstanceUid);

      var lockedCollections = this.constructor._lockedCollections(seriesInstanceUid);

      this.setState({
        workingCollection: workingCollection,
        lockedCollections: lockedCollections,
        activeROIContourIndex: activeROIContourIndex,
        importing: false,
        exporting: false
      });
    }
    /**
     * onNewRoiButtonClick - Callback that adds a new ROIContour to the
     * active series.
     *
     * @returns {null}
     */

  }, {
    key: "onNewRoiButtonClick",
    value: function onNewRoiButtonClick() {
      var seriesInstanceUid = this.state.seriesInstanceUid;
      var freehand3DStore = modules.freehand3D;
      var series = freehand3DStore.getters.series(seriesInstanceUid);

      if (!series) {
        freehand3DStore.setters.series(seriesInstanceUid);
        series = freehand3DStore.getters.series(seriesInstanceUid);
      }

      var activeROIContourIndex = freehand3DStore.setters.ROIContourAndSetIndexActive(seriesInstanceUid, 'DEFAULT', 'Unnamed Lesion');

      var workingCollection = this.constructor._workingCollection(seriesInstanceUid);

      this.setState({
        workingCollection: workingCollection,
        activeROIContourIndex: activeROIContourIndex
      });
    }
    /**
     * onRoiChange - Callback that changes the active ROI Contour being drawn.
     *
     * @param  {Number} roiContourIndex The index of the ROI Contour.
     * @returns {null}
     */

  }, {
    key: "onRoiChange",
    value: function onRoiChange(roiContourIndex) {
      var seriesInstanceUid = this.state.seriesInstanceUid;
      modules.freehand3D.setters.activeROIContourIndex(roiContourIndex, seriesInstanceUid);
      this.setState({
        activeROIContourIndex: roiContourIndex
      });
    }
    /**
     * onRenameButtonClick - A callback that triggers name input for an ROIContour.
     *
     * @param  {object} metadata The current state of the contour's metadata.
     * @returns {null}
     */

  }, {
    key: "onRenameButtonClick",
    value: function onRenameButtonClick(metadata) {} // const seriesInstanceUid = this.state.seriesInstanceUid;
    // TODO -> switch the element to a text box and allow input.

    /**
     * confirmUnlockOnUnlockClick - A callback that triggers confirmation of the
     * unlocking of an ROI Contour Collection.
     *
     * @param  {String} structureSetUid The UID of the structureSet.
     * @returns {null}
     */

  }, {
    key: "confirmUnlockOnUnlockClick",
    value: function confirmUnlockOnUnlockClick(structureSetUid) {
      this.setState({
        unlockConfirmationOpen: true,
        roiCollectionToUnlock: structureSetUid
      });
    }
    /**
     * onUnlockConfirmClick - A callback that unlocks an ROI Contour Collection and
     * moves the ROI Contours to the working collection.
     *
     * @returns {type}  description
     */

  }, {
    key: "onUnlockConfirmClick",
    value: function onUnlockConfirmClick() {
      var _this$state = this.state,
          seriesInstanceUid = _this$state.seriesInstanceUid,
          roiCollectionToUnlock = _this$state.roiCollectionToUnlock;
      Object(_util_unlockStructureSet_js__WEBPACK_IMPORTED_MODULE_6__["default"])(seriesInstanceUid, roiCollectionToUnlock);

      var workingCollection = this.constructor._workingCollection(seriesInstanceUid);

      var lockedCollections = this.constructor._lockedCollections(seriesInstanceUid);

      this.setState({
        unlockConfirmationOpen: false,
        workingCollection: workingCollection,
        lockedCollections: lockedCollections
      });
    }
    /**
     * onUnlockCancelClick - A callback that closes the unlock confirmation window
     * and aborts unlocking.
     *
     * @returns {null}
     */

  }, {
    key: "onUnlockCancelClick",
    value: function onUnlockCancelClick() {
      this.setState({
        unlockConfirmationOpen: false
      });
    }
    /**
     * _workingCollection - Returns a list of the ROI Contours
     * in the working collection.
     *
     * @returns {object[]} An array of ROI Contours.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          workingCollection = _this$state2.workingCollection,
          lockedCollections = _this$state2.lockedCollections,
          unlockConfirmationOpen = _this$state2.unlockConfirmationOpen,
          roiCollectionToUnlock = _this$state2.roiCollectionToUnlock,
          activeROIContourIndex = _this$state2.activeROIContourIndex,
          importing = _this$state2.importing,
          exporting = _this$state2.exporting,
          seriesInstanceUid = _this$state2.seriesInstanceUid;
      var _this$props = this.props,
          ImportCallbackOrComponent = _this$props.ImportCallbackOrComponent,
          ExportCallbackOrComponent = _this$props.ExportCallbackOrComponent;
      var freehand3DStore = modules.freehand3D;
      var component;

      if (importing) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ImportCallbackOrComponent, {
          onImportComplete: this.onIOComplete,
          onImportCancel: this.onIOCancel
        });
      } else if (exporting) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ExportCallbackOrComponent, {
          onExportComplete: this.onIOComplete,
          onExportCancel: this.onIOCancel
        });
      } else if (unlockConfirmationOpen) {
        var collection = freehand3DStore.getters.structureSet(seriesInstanceUid, roiCollectionToUnlock);
        var collectionName = collection.name;
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", null, "Unlock"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, "Unlock ", collectionName, " for editing? The ROIs will be moved to the Working ROI Collection.")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
          className: "btn btn-sm btn-primary",
          onClick: this.onUnlockConfirmClick
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
          className: "fa fa fa-check-circle fa-2x"
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
          className: "btn btn-sm btn-primary",
          onClick: this.onUnlockCancelClick
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
          className: "fa fa fa-times-circle fa-2x"
        }))));
      } else {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          style: {
            padding: '15px',
            color: 'white'
          },
          className: "roi-contour-menu-component"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, "ROI Contour Collections"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          ImportCallbackOrComponent: ImportCallbackOrComponent,
          ExportCallbackOrComponent: ExportCallbackOrComponent,
          onImportButtonClick: this.onImportButtonClick,
          onExportButtonClick: this.onExportButtonClick
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "roi-contour-menu-collection-list-body"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("table", {
          className: "peppermint-table"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tbody", null, seriesInstanceUid && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_WorkingCollectionList_js__WEBPACK_IMPORTED_MODULE_2__["default"], {
          workingCollection: workingCollection,
          activeROIContourIndex: activeROIContourIndex,
          onRoiChange: this.onRoiChange,
          onRenameButtonClick: this.onRenameButtonClick,
          onNewRoiButtonClick: this.onNewRoiButtonClick
        }), lockedCollections.length !== 0 && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_LockedCollectionsList_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
          lockedCollections: lockedCollections,
          onUnlockClick: this.confirmUnlockOnUnlockClick,
          seriesInstanceUid: seriesInstanceUid
        })))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_RoiContourSettings_js__WEBPACK_IMPORTED_MODULE_4__["default"], null));
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, component);
    }
  }], [{
    key: "_workingCollection",
    value: function _workingCollection(seriesInstanceUid) {
      var freehand3DStore = modules.freehand3D;
      var series = freehand3DStore.getters.series(seriesInstanceUid);

      if (!series) {
        freehand3DStore.setters.series(seriesInstanceUid);
        series = freehand3DStore.getters.series(seriesInstanceUid);
      }

      var structureSet = freehand3DStore.getters.structureSet(seriesInstanceUid);
      var ROIContourCollection = structureSet.ROIContourCollection;
      var workingCollection = [];

      for (var i = 0; i < ROIContourCollection.length; i++) {
        if (ROIContourCollection[i]) {
          workingCollection.push({
            index: i,
            metadata: ROIContourCollection[i]
          });
        }
      }

      return workingCollection;
    }
    /**
     * _lockedCollections - Returns a list of locked ROI Contour Collections.
     *
     * @returns {object} An array of locked ROI Contour Collections.
     */

  }, {
    key: "_lockedCollections",
    value: function _lockedCollections(seriesInstanceUid) {
      var freehand3DStore = modules.freehand3D;
      var series = freehand3DStore.getters.series(seriesInstanceUid);

      if (!series) {
        freehand3DStore.setters.series(seriesInstanceUid);
        series = freehand3DStore.getters.series(seriesInstanceUid);
      }

      var structureSetCollection = series.structureSetCollection;
      var lockedCollections = [];

      for (var i = 0; i < structureSetCollection.length; i++) {
        var structureSet = structureSetCollection[i];

        if (structureSet.uid === 'DEFAULT') {
          continue;
        }

        var ROIContourCollection = structureSet.ROIContourCollection;
        var ROIContourArray = [];

        for (var j = 0; j < ROIContourCollection.length; j++) {
          if (ROIContourCollection[j]) {
            ROIContourArray.push({
              index: j,
              metadata: ROIContourCollection[j]
            });
          }
        }

        lockedCollections.push({
          metadata: structureSet,
          ROIContourArray: ROIContourArray
        });
      }

      return lockedCollections;
    }
  }]);

  return RoiContourMenu;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/RoiContourSettings.js":
/*!*************************************************************!*\
  !*** ./src/components/roiContourMenu/RoiContourSettings.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return RoiContourSettings; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
!(function webpackMissingModule() { var e = new Error("Cannot find module 'react-viewerbase'"); e.code = 'MODULE_NOT_FOUND'; throw e; }());
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }





var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .roi-contour-menu {   color: var(--text-primary-color);   text-align: center;   height: 100%; } .roi-contour-menu .roi-contour-menu-component {   height: 100%; } .roi-contour-menu h3 {   font-weight: 400; } .roi-contour-menu .roi-contour-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   padding-right: 18px;   padding-left: 18px;   width: 100%; } .roi-contour-menu .roi-contour-menu-header a {   height: 30px;   width: 80px; } .roi-contour-menu .roi-contour-menu-collection-list-body {   height: calc(90% - 180px);   padding-right: 18px;   padding-left: 18px;   overflow-y: auto;   overflow-x: hidden;   scrollbar-color: var(--text-secondary-color) var(ui-gray-darkest);   word-wrap: break-word; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link {   color: var(--text-primary-color); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link:hover {   color: var(--text-secondary-color); } .roi-contour-menu .roi-contour-menu-new-button {   float: center;   width: 100%; } .roi-contour-menu .roi-list-header {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .roi-contour-menu .roi-contour-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-align: center;       align-items: center; } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option svg {   background-color: transparent;   width: 50px;   height: 50px; } "
document.head.appendChild(_css)
var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default.a.store.modules;
/**
 * @class RoiContourSettings - A component that allows the user to change
 * configuration of the freehand3D tools.
 */

var RoiContourSettings =
/*#__PURE__*/
function (_React$Component) {
  _inherits(RoiContourSettings, _React$Component);

  function RoiContourSettings() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, RoiContourSettings);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(RoiContourSettings).call(this, props));
    var interpolate = modules.freehand3D.state.interpolate;
    _this.state = {
      interpolate: interpolate
    };
    _this.onInterpolateToggleClick = _this.onInterpolateToggleClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * onInterpolateToggleClick - A callback that toggles interpolation mode for
   * the Freehand3DTool.
   *
   * @returns {null}
   */


  _createClass(RoiContourSettings, [{
    key: "onInterpolateToggleClick",
    value: function onInterpolateToggleClick() {
      modules.freehand3D.setters.toggleInterpolate();
      this.setState({
        interpolate: modules.freehand3D.state.interpolate
      });
    }
  }, {
    key: "render",
    value: function render() {
      var interpolate = this.state.interpolate;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        style: {
          backgroundColor: 'var(--ui-gray-dark)',
          outline: '1px solid var(--ui-border-color)',
          borderRadius: '4px'
        },
        className: "roi-contour-menu-footer"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, "Settings"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        style: {
          cursor: 'select'
        },
        onClick: this.onInterpolateToggleClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", null, interpolate ? react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(!(function webpackMissingModule() { var e = new Error("Cannot find module 'react-viewerbase'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), {
        name: "check"
      }) : react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(!(function webpackMissingModule() { var e = new Error("Cannot find module 'react-viewerbase'"); e.code = 'MODULE_NOT_FOUND'; throw e; }()), {
        name: "times"
      }), "Interpolation")));
    }
  }]);

  return RoiContourSettings;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/WorkingCollectionList.js":
/*!****************************************************************!*\
  !*** ./src/components/roiContourMenu/WorkingCollectionList.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return WorkingRoiCollectionList; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _WorkingCollectionListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./WorkingCollectionListItem.js */ "./src/components/roiContourMenu/WorkingCollectionListItem.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .roi-contour-menu {   color: var(--text-primary-color);   text-align: center;   height: 100%; } .roi-contour-menu .roi-contour-menu-component {   height: 100%; } .roi-contour-menu h3 {   font-weight: 400; } .roi-contour-menu .roi-contour-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   padding-right: 18px;   padding-left: 18px;   width: 100%; } .roi-contour-menu .roi-contour-menu-header a {   height: 30px;   width: 80px; } .roi-contour-menu .roi-contour-menu-collection-list-body {   height: calc(90% - 180px);   padding-right: 18px;   padding-left: 18px;   overflow-y: auto;   overflow-x: hidden;   scrollbar-color: var(--text-secondary-color) var(ui-gray-darkest);   word-wrap: break-word; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link {   color: var(--text-primary-color); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link:hover {   color: var(--text-secondary-color); } .roi-contour-menu .roi-contour-menu-new-button {   float: center;   width: 100%; } .roi-contour-menu .roi-list-header {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .roi-contour-menu .roi-contour-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-align: center;       align-items: center; } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option svg {   background-color: transparent;   width: 50px;   height: 50px; } "
document.head.appendChild(_css)
/**
 * @class WorkingRoiCollectionList - Renders a list of
 * WorkingCollectionListItem, displaying metadata of the working ROIContour
 * Collection.
 */

var WorkingRoiCollectionList =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WorkingRoiCollectionList, _React$Component);

  function WorkingRoiCollectionList() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WorkingRoiCollectionList);

    return _possibleConstructorReturn(this, _getPrototypeOf(WorkingRoiCollectionList).call(this, props));
  }

  _createClass(WorkingRoiCollectionList, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          workingCollection = _this$props.workingCollection,
          activeROIContourIndex = _this$props.activeROIContourIndex,
          onRoiChange = _this$props.onRoiChange,
          onRenameButtonClick = _this$props.onRenameButtonClick,
          onNewRoiButtonClick = _this$props.onNewRoiButtonClick;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
        className: "roi-list-header"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "4"
      }, " New ROI Contour Collection")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Draw"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Name"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Contours")), workingCollection.map(function (roiContour) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_WorkingCollectionListItem_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          key: roiContour.metadata.uid,
          roiContourIndex: roiContour.index,
          metadata: roiContour.metadata,
          activeROIContourIndex: activeROIContourIndex,
          onRoiChange: onRoiChange,
          onRenameButtonClick: onRenameButtonClick
        });
      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "roi-contour-menu-new-button btn btn-sm btn-primary",
        onClick: onNewRoiButtonClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-plus-circle"
      }), " ROI"))));
    }
  }]);

  return WorkingRoiCollectionList;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/roiContourMenu/WorkingCollectionListItem.js":
/*!********************************************************************!*\
  !*** ./src/components/roiContourMenu/WorkingCollectionListItem.js ***!
  \********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return WorkingCollectionListItem; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }




var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .roi-contour-menu {   color: var(--text-primary-color);   text-align: center;   height: 100%; } .roi-contour-menu .roi-contour-menu-component {   height: 100%; } .roi-contour-menu h3 {   font-weight: 400; } .roi-contour-menu .roi-contour-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   padding-right: 18px;   padding-left: 18px;   width: 100%; } .roi-contour-menu .roi-contour-menu-header a {   height: 30px;   width: 80px; } .roi-contour-menu .roi-contour-menu-collection-list-body {   height: calc(90% - 180px);   padding-right: 18px;   padding-left: 18px;   overflow-y: auto;   overflow-x: hidden;   scrollbar-color: var(--text-secondary-color) var(ui-gray-darkest);   word-wrap: break-word; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link {   color: var(--text-primary-color); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link:hover {   color: var(--text-secondary-color); } .roi-contour-menu .roi-contour-menu-new-button {   float: center;   width: 100%; } .roi-contour-menu .roi-list-header {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .roi-contour-menu .roi-contour-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-align: center;       align-items: center; } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option svg {   background-color: transparent;   width: 50px;   height: 50px; } "
document.head.appendChild(_css)
var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__["store"].modules;
/**
 * @class WorkingCollectionListItem - Renders metadata for the working
 * ROIContour Collection.
 */

var WorkingCollectionListItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(WorkingCollectionListItem, _React$Component);

  function WorkingCollectionListItem() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, WorkingCollectionListItem);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(WorkingCollectionListItem).call(this, props));
    _this.onTextInputChange = _this.onTextInputChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }

  _createClass(WorkingCollectionListItem, [{
    key: "onTextInputChange",
    value: function onTextInputChange(evt) {
      var name = evt.target.value;

      if (name.replace(' ', '').length > 0) {
        var metadata = this.props.metadata;
        var freehand3DModule = modules.freehand3D;
        freehand3DModule.setters.ROIContourName(name, metadata.seriesInstanceUid, metadata.structureSetUid, metadata.uid);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          roiContourIndex = _this$props.roiContourIndex,
          metadata = _this$props.metadata,
          onRoiChange = _this$props.onRoiChange,
          onRenameButtonClick = _this$props.onRenameButtonClick,
          activeROIContourIndex = _this$props.activeROIContourIndex;
      var checked = activeROIContourIndex === roiContourIndex;
      var name = metadata.name;
      var polygonCount = metadata.polygonCount;
      var roiContourColor = metadata.color;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "left-aligned-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-square",
        style: {
          color: roiContourColor
        }
      }), ' ', react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        type: "radio",
        checked: checked,
        onChange: function onChange() {
          return onRoiChange(roiContourIndex);
        }
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "left-aligned-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "roi-contour-menu-name-link",
        onClick: function onClick() {
          onRenameButtonClick(metadata);
        }
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        name: "roiContourName",
        className: "form-themed form-control",
        onChange: this.onTextInputChange,
        type: "text",
        autoComplete: "off",
        defaultValue: name,
        placeholder: "Enter ROI Name...",
        tabIndex: "1"
      }), name)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", null, polygonCount));
    }
  }]);

  return WorkingCollectionListItem;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/BrushSettings.js":
/*!**********************************************************!*\
  !*** ./src/components/segmentationMenu/BrushSettings.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return BrushSettings; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }




var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } "
document.head.appendChild(_css)
var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default.a.store.modules.brush;
var brushState = brushModule.state;
var minGateSeperation = 10;
/**
 * @class BrushSettings - A component that allows the user to change
 * configuration of the Brush tools.
 */

var BrushSettings =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BrushSettings, _React$Component);

  function BrushSettings() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, BrushSettings);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(BrushSettings).call(this, props));
    var customGateRange = brushModule.getters.customGateRange();
    _this.state = {
      holeFill: brushState.holeFill,
      strayRemove: brushState.strayRemove,
      activeGate: brushState.activeGate,
      customGateRangeMin: customGateRange[0],
      customGateRangeMax: customGateRange[1]
    };
    _this.onGateChange = _this.onGateChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onCustomGateMinChange = _this.onCustomGateMinChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onCustomGateMaxChange = _this.onCustomGateMaxChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onHoleFillChange = _this.onHoleFillChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onStrayRemoveChange = _this.onStrayRemoveChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * onGateChange - Callback that changes the active gate of the Smart CT Brush.
   *
   * @param  {type} evt description
   * @returns {type}     description
   */


  _createClass(BrushSettings, [{
    key: "onGateChange",
    value: function onGateChange(evt) {
      var val = evt.target.value;
      this.setState({
        activeGate: val
      });
      brushState.activeGate = val;
    }
    /**
     * onCustomGateMinChange - Changes the minimum value of a
     * custom Smart CT Gate.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onCustomGateMinChange",
    value: function onCustomGateMinChange(evt) {
      var val = Number(evt.target.value);
      var customRangeMax = this.state.customGateRangeMax;

      if (val > customRangeMax - minGateSeperation) {
        val = customRangeMax - minGateSeperation;
        evt.target.value = val;
      }

      this.setState({
        customGateRangeMin: val
      });
      brushModule.setters.customGateRange(val, null);
    }
    /**
     * onCustomGateMaxChange - Changes the maximum value of a
     * custom Smart CT Gate.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onCustomGateMaxChange",
    value: function onCustomGateMaxChange(evt) {
      var val = Number(evt.target.value);
      var customRangeMin = this.state.customGateRangeMin;

      if (val < customRangeMin + minGateSeperation) {
        val = customRangeMin + minGateSeperation;
        evt.target.value = val;
      }

      this.setState({
        customGateRangeMax: val
      });
      brushModule.setters.customGateRange(null, val);
    }
    /**
     * onHoleFillChange - Changes the value of the hole fill parameter for the
     * Smart CT and Auto brushes.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onHoleFillChange",
    value: function onHoleFillChange(evt) {
      var val = Number(evt.target.value);
      this.setState({
        holeFill: val
      });
      brushState.holeFill = val;
    }
    /**
     * onStrayRemoveChange - Changes the balue of the stray remove parameter for
     * the Smart CT and Auto brushes.
     *
     * @param  {object} evt The event.
     * @returns {null}
     */

  }, {
    key: "onStrayRemoveChange",
    value: function onStrayRemoveChange(evt) {
      var val = Number(evt.target.value);
      this.setState({
        strayRemove: val
      });
      brushState.strayRemove = val;
    }
  }, {
    key: "render",
    value: function render() {
      var holeFillRange = brushState.holeFillRange;
      var strayRemoveRange = brushState.strayRemoveRange;
      var _this$state = this.state,
          holeFill = _this$state.holeFill,
          strayRemove = _this$state.strayRemove,
          activeGate = _this$state.activeGate;
      var gates = brushState.gates;
      var holeFillLabel = holeFill === 0 ? "Don't fill holes." : "Fill holes <".concat(holeFill, "% area of primary region.");
      var strayRemoveLabel = strayRemove === 0 ? 'Paint all non-primary regions.' : "Don't paint regions <".concat(strayRemove, "% area of primary region.");
      var customGates = null;

      if (activeGate === 'custom') {
        var customRange = brushModule.getters.customGateRange();
        customGates = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "brush-settings-horizontal-box"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
          htmlFor: "customGateMin"
        }, "Min:"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
          className: "form-themed form-control",
          type: "range",
          id: "start",
          name: "customGateMin",
          min: -1024,
          max: 3072,
          defaultValue: customRange[0],
          onChange: this.onCustomGateMinChange
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "brush-settings-horizontal-box"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
          htmlFor: "customGateMax"
        }, "Max:"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
          className: "form-themed form-control",
          type: "range",
          id: "start",
          name: "customGateMax",
          min: -1024,
          max: 3072,
          defaultValue: customRange[1],
          onChange: this.onCustomGateMaxChange
        })));
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "segmentation-menu-footer"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, " Smart CT Gate Selection"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("select", {
        className: "form-themed form-control",
        onChange: this.onGateChange,
        value: activeGate
      }, gates.map(function (gate) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("option", {
          key: gate.name,
          value: gate.name
        }, "".concat(gate.name, " [").concat(gate.range[0], ", ").concat(gate.range[1], "]"));
      })), customGates, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, " Smart/Auto Gate Settings "), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
        htmlFor: "holeFill"
      }, holeFillLabel), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        className: "form-themed form-control",
        type: "range",
        id: "start",
        name: "holeFill",
        min: holeFillRange[0],
        defaultValue: holeFill,
        max: holeFillRange[1],
        onChange: this.onHoleFillChange
      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("label", {
        htmlFor: "strayRemove"
      }, strayRemoveLabel), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        className: "form-themed form-control",
        type: "range",
        id: "start",
        name: "strayRemove",
        min: strayRemoveRange[0],
        defaultValue: strayRemove,
        max: strayRemoveRange[1],
        onChange: this.onStrayRemoveChange
      }));
    }
  }]);

  return BrushSettings;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenu.js":
/*!*************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenu.js ***!
  \*************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenu; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../common/MenuIOButtons.js */ "./src/components/common/MenuIOButtons.js");
/* harmony import */ var _SegmentationMenuDeleteConfirmation_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SegmentationMenuDeleteConfirmation.js */ "./src/components/segmentationMenu/SegmentationMenuDeleteConfirmation.js");
/* harmony import */ var _SegmentationMenuListBody_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SegmentationMenuListBody.js */ "./src/components/segmentationMenu/SegmentationMenuListBody.js");
/* harmony import */ var _SegmentationMenuListHeader_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SegmentationMenuListHeader.js */ "./src/components/segmentationMenu/SegmentationMenuListHeader.js");
/* harmony import */ var _BrushSettings_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./BrushSettings.js */ "./src/components/segmentationMenu/BrushSettings.js");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../util/brushMetadataIO.js */ "./src/util/brushMetadataIO.js");
/* harmony import */ var _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../common/helpers/onIOCancel.js */ "./src/components/common/helpers/onIOCancel.js");
/* harmony import */ var _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../common/helpers/onImportButtonClick.js */ "./src/components/common/helpers/onImportButtonClick.js");
/* harmony import */ var _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../common/helpers/onExportButtonClick.js */ "./src/components/common/helpers/onExportButtonClick.js");
/* harmony import */ var _util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/getActiveViewportEnabledElement.js */ "./src/util/getActiveViewportEnabledElement.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }













var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } "
document.head.appendChild(_css)


var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_6___default.a.store.modules.brush;
/**
 * @class SegmentationMenu - Renders a menu for importing, exporting, creating
 * and renaming Segments. As well as setting configuration settings for
 * the Brush tools.
 */

var SegmentationMenu =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenu, _React$Component);

  function SegmentationMenu() {
    var _this;

    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenu);

    _this = _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenu).call(this, props));
    _this.getSegmentList = _this.getSegmentList.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    var enabledElement = Object(_util_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_11__["default"])(props.viewports, props.activeIndex);
    var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_12__["default"])(enabledElement);
    var segments = [];
    var activeSegmentIndex = 1;

    var importMetadata = _this.constructor._importMetadata(seriesInstanceUid);

    if (enabledElement) {
      var segmentList = _this.getSegmentList(enabledElement, seriesInstanceUid);

      segments = segmentList.segments;
      activeSegmentIndex = segmentList.segments;
    }

    _this.state = {
      importMetadata: importMetadata,
      segments: segments,
      seriesInstanceUid: seriesInstanceUid,
      enabledElement: enabledElement,
      deleteConfirmationOpen: false,
      segmentToDelete: 1,
      activeSegmentIndex: activeSegmentIndex,
      importing: false,
      exporting: false
    };
    _this.onSegmentChange = _this.onSegmentChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onEditClick = _this.onEditClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.confirmDeleteOnDeleteClick = _this.confirmDeleteOnDeleteClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDeleteCancelClick = _this.onDeleteCancelClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onDeleteConfirmClick = _this.onDeleteConfirmClick.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onImportButtonClick = _common_helpers_onImportButtonClick_js__WEBPACK_IMPORTED_MODULE_9__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onExportButtonClick = _common_helpers_onExportButtonClick_js__WEBPACK_IMPORTED_MODULE_10__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOComplete = _this.onIOComplete.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this.onIOCancel = _common_helpers_onIOCancel_js__WEBPACK_IMPORTED_MODULE_8__["default"].bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * getSegmentList - Grabs the segments from the brushStore and
   * populates state.
   *
   * @returns {null}
   */


  _createClass(SegmentationMenu, [{
    key: "getSegmentList",
    value: function getSegmentList(enabledElement, seriesInstanceUid) {
      enabledElement = enabledElement || this.state.enabledElement;
      seriesInstanceUid = seriesInstanceUid || this.state.seriesInstanceUid;

      if (!enabledElement || !seriesInstanceUid) {
        return [];
      }

      var segments = this.constructor._segments(enabledElement);

      var activeSegmentIndex = brushModule.getters.activeSegmentIndex(enabledElement);
      return {
        segments: segments,
        activeSegmentIndex: activeSegmentIndex
      };
    }
    /**
     * onIOComplete - A callback executed on succesful completion of an
     * IO opperation. Recalculates the Segmentation state.
     *
     * @returns {type}  description
     */

  }, {
    key: "onIOComplete",
    value: function onIOComplete() {
      var _this$state$seriesIns = this.state.seriesInstanceUid,
          seriesInstanceUid = _this$state$seriesIns.seriesInstanceUid,
          enabledElement = _this$state$seriesIns.enabledElement;

      var importMetadata = this.constructor._importMetadata(seriesInstanceUid);

      var segments = this.constructor._segments(enabledElement);

      var activeSegmentIndex = brushModule.getters.activeSegmentIndex(enabledElement);
      this.setState({
        importMetadata: importMetadata,
        segments: segments,
        activeSegmentIndex: activeSegmentIndex,
        importing: false,
        exporting: false
      });
    }
    /**
     * onSegmentChange - Callback that changes the active segment being drawn.
     *
     * @param  {Number} segmentIndex The index of the segment to set active.
     * @returns {null}
     */

  }, {
    key: "onSegmentChange",
    value: function onSegmentChange(segmentIndex) {
      var enabledElement = this.state.element;
      brushModule.setters.activeSegmentIndex(enabledElement, segmentIndex);
      this.setState({
        activeSegmentIndex: segmentIndex
      });
    }
    /**
     * onEditClick - A callback that triggers metadata input for a segment.
     *
     * @param  {Number} segmentIndex The index of the segment metadata to edit.
     * @param  {object}   metadata     The current metadata of the segment.
     * @returns {null}
     */

  }, {
    key: "onEditClick",
    value: function onEditClick(segmentIndex, metadata) {
      Object(_util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_7__["editSegmentInput"])(segmentIndex, metadata);
    }
    /**
     * confirmDeleteOnDeleteClick - A callback that triggers confirmation of segment deletion.
     *
     * @param  {Number} segmentIndex The index of the segment being deleted.
     * @returns {null}
     */

  }, {
    key: "confirmDeleteOnDeleteClick",
    value: function confirmDeleteOnDeleteClick(segmentIndex) {
      this.setState({
        deleteConfirmationOpen: true,
        segmentToDelete: segmentIndex
      });
    }
    /**
     * onDeleteConfirmClick - A callback that deletes a segment form the series.
     *
     * @returns {null}
     */

  }, {
    key: "onDeleteConfirmClick",
    value: function onDeleteConfirmClick() {
      var _this$state = this.state,
          segmentToDelete = _this$state.segmentToDelete,
          enabledElement = _this$state.enabledElement;
      brushModule.setters.deleteSegment(enabledElement, segmentToDelete);

      var segments = this.constructor._segments(enabledElement);

      this.setState({
        deleteConfirmationOpen: false,
        segments: segments
      });
    }
    /**
     * onDeleteCancelClick - A callback that closes the delete confirmation window
     * and aborts deletion.
     *
     * @returns {null}
     */

  }, {
    key: "onDeleteCancelClick",
    value: function onDeleteCancelClick() {
      this.setState({
        deleteConfirmationOpen: false
      });
    }
    /**
     * _importMetadata - Returns the import metadata for the active series.
     *
     * @returns {object} The importMetadata.
     */

  }, {
    key: "render",
    value: function render() {
      var _this$state2 = this.state,
          importMetadata = _this$state2.importMetadata,
          segments = _this$state2.segments,
          deleteConfirmationOpen = _this$state2.deleteConfirmationOpen,
          segmentToDelete = _this$state2.segmentToDelete,
          activeSegmentIndex = _this$state2.activeSegmentIndex,
          enabledElement = _this$state2.enabledElement,
          importing = _this$state2.importing,
          exporting = _this$state2.exporting;
      var _this$props = this.props,
          ImportCallbackOrComponent = _this$props.ImportCallbackOrComponent,
          ExportCallbackOrComponent = _this$props.ExportCallbackOrComponent;
      var component;

      if (importing) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ImportCallbackOrComponent, {
          onImportComplete: this.onIOComplete,
          onImportCancel: this.onIOCancel
        });
      } else if (exporting) {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(ExportCallbackOrComponent, {
          onExportComplete: this.onIOComplete,
          onExportCancel: this.onIOCancel
        });
      } else if (deleteConfirmationOpen) {
        var segmentLabel = segments.find(function (segment) {
          return segment.index === segmentToDelete;
        }).metadata.SegmentLabel;
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuDeleteConfirmation_js__WEBPACK_IMPORTED_MODULE_2__["default"], {
          segmentLabel: segmentLabel,
          onDeleteConfirmClick: this.onDeleteConfirmClick,
          onDeleteCancelClick: this.onDeleteCancelClick
        });
      } else {
        component = react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "segmentation-menu-component"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "segmentation-menu-list"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
          className: "segmentation-menu-header"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h3", null, "Segments"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_common_MenuIOButtons_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          ImportCallbackOrComponent: ImportCallbackOrComponent,
          ExportCallbackOrComponent: ExportCallbackOrComponent,
          onImportButtonClick: this.onImportButtonClick,
          onExportButtonClick: this.onExportButtonClick
        })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("table", {
          className: "peppermint-table"
        }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tbody", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuListHeader_js__WEBPACK_IMPORTED_MODULE_4__["default"], {
          importMetadata: importMetadata
        }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuListBody_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
          segments: segments,
          activeSegmentIndex: activeSegmentIndex,
          onSegmentChange: this.onSegmentChange,
          onEditClick: this.onEditClick,
          onDeleteClick: this.confirmDeleteOnDeleteClick,
          enabledElement: enabledElement
        })))), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_BrushSettings_js__WEBPACK_IMPORTED_MODULE_5__["default"], null));
      }

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, component);
    }
  }], [{
    key: "_importMetadata",
    value: function _importMetadata(seriesInstanceUid) {
      var importMetadata = brushModule.getters.importMetadata(seriesInstanceUid);

      if (importMetadata) {
        return {
          label: importMetadata.label,
          type: importMetadata.type,
          name: importMetadata.name,
          modified: importMetadata.modified ? 'true' : ' false'
        };
      }

      return {
        name: 'New Segmentation Collection',
        label: ''
      };
    }
    /**
     * _segments - Returns an array of segment metadata for the active series.
     *
     * @returns {object[]} An array of segment metadata.
     */

  }, {
    key: "_segments",
    value: function _segments(element) {
      // TODO -> support for multiple labelmaps.
      var segmentMetadata = brushModule.getters.metadata(element);

      if (!segmentMetadata) {
        return [];
      }

      var segments = [];

      for (var i = 0; i < segmentMetadata.length; i++) {
        if (segmentMetadata[i]) {
          segments.push({
            index: i,
            metadata: segmentMetadata[i]
          });
        }
      }

      return segments;
    }
  }]);

  return SegmentationMenu;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuDeleteConfirmation.js":
/*!*******************************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuDeleteConfirmation.js ***!
  \*******************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuDeleteConfirmation; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } "
document.head.appendChild(_css)
/**
 * @class SegmentationMenuDeleteConfirmation - Renders a confirmation dialog for
 * confirmation of segment deletion.
 */

var SegmentationMenuDeleteConfirmation =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuDeleteConfirmation, _React$Component);

  function SegmentationMenuDeleteConfirmation() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuDeleteConfirmation);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuDeleteConfirmation).call(this, props));
  }

  _createClass(SegmentationMenuDeleteConfirmation, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          segmentLabel = _this$props.segmentLabel,
          onDeleteConfirmClick = _this$props.onDeleteConfirmClick,
          onDeleteCancelClick = _this$props.onDeleteCancelClick;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("h5", null, "Warning!"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("p", null, "Are you sure you want to delete ", segmentLabel, "? This cannot be undone.")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("div", {
        className: "seg-delete-horizontal-box"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onDeleteConfirmClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa fa-check-circle fa-2x"
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-primary",
        onClick: onDeleteCancelClick
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa fa-times-circle fa-2x"
      }))));
    }
  }]);

  return SegmentationMenuDeleteConfirmation;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuListBody.js":
/*!*********************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuListBody.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuListBody; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _SegmentationMenuListItem_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SegmentationMenuListItem.js */ "./src/components/segmentationMenu/SegmentationMenuListItem.js");
/* harmony import */ var _util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../util/brushMetadataIO.js */ "./src/util/brushMetadataIO.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } "
document.head.appendChild(_css)
/**
 * @class SegmentationMenuListBody - Renders a list of SegmentationMenuListItems,
 * displaying the metadata of segments.
 */

var SegmentationMenuListBody =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuListBody, _React$Component);

  function SegmentationMenuListBody() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuListBody);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuListBody).call(this, props));
  }

  _createClass(SegmentationMenuListBody, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          segments = _this$props.segments,
          activeSegmentIndex = _this$props.activeSegmentIndex,
          onSegmentChange = _this$props.onSegmentChange,
          onEditClick = _this$props.onEditClick,
          onDeleteClick = _this$props.onDeleteClick,
          enabledElement = _this$props.enabledElement;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, segments.map(function (segment) {
        return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_SegmentationMenuListItem_js__WEBPACK_IMPORTED_MODULE_1__["default"], {
          key: "".concat(segment.metadata.SegmentLabel, "_").concat(segment.index),
          segmentIndex: segment.index,
          metadata: segment.metadata,
          onSegmentChange: onSegmentChange,
          onEditClick: onEditClick,
          onDeleteClick: onDeleteClick,
          checked: segment.index === activeSegmentIndex,
          enabledElement: enabledElement
        });
      }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "segmentation-menu-new-button btn btn-sm btn-primary",
        onClick: _util_brushMetadataIO_js__WEBPACK_IMPORTED_MODULE_2__["newSegment"]
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-plus-circle"
      }), " Segment"))));
    }
  }]);

  return SegmentationMenuListBody;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuListHeader.js":
/*!***********************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuListHeader.js ***!
  \***********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuListHeader; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } "
document.head.appendChild(_css)
/**
 * @class SegmentationMenuListHeader - Renders the header for the
 * SegmentationMenuList table.
 */

var SegmentationMenuListHeader =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuListHeader, _React$Component);

  function SegmentationMenuListHeader() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuListHeader);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuListHeader).call(this, props));
  }

  _createClass(SegmentationMenuListHeader, [{
    key: "render",
    value: function render() {
      var importMetadata = this.props.importMetadata;
      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(react__WEBPACK_IMPORTED_MODULE_0___default.a.Fragment, null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "left-aligned-cell segmentation-menu-list-bordered"
      }, importMetadata.name), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "right-aligned-cell segmentation-menu-list-bordered"
      }, importMetadata.label)), importMetadata.type && react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "left-aligned-cell segmentation-menu-list-bordered"
      }, "Type: ", importMetadata.type), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        colSpan: "2",
        className: "right-aligned-cell segmentation-menu-list-bordered"
      }, "Modified: ", importMetadata.modified)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", {
        className: "segmentation-menu-list-bordered"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Paint"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", null, "Label"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Type"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("th", {
        className: "centered-cell"
      }, "Delete")));
    }
  }]);

  return SegmentationMenuListHeader;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/components/segmentationMenu/SegmentationMenuListItem.js":
/*!*********************************************************************!*\
  !*** ./src/components/segmentationMenu/SegmentationMenuListItem.js ***!
  \*********************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return SegmentationMenuListItem; });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "react");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_1__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




var _css = document.createElement("style");

_css.innerHTML = ".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } "
document.head.appendChild(_css)
var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_1___default.a.store.modules.brush;
/**
 * @class SegmentationMenuListItem - Renders metadata for a single segment.
 */

var SegmentationMenuListItem =
/*#__PURE__*/
function (_React$Component) {
  _inherits(SegmentationMenuListItem, _React$Component);

  function SegmentationMenuListItem() {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, SegmentationMenuListItem);

    return _possibleConstructorReturn(this, _getPrototypeOf(SegmentationMenuListItem).call(this, props));
  }
  /**
   * _getTypeWithModifier - Returns the segment type with its modifier as a string.
   *
   * @returns {string}
   */


  _createClass(SegmentationMenuListItem, [{
    key: "_getTypeWithModifier",
    value: function _getTypeWithModifier() {
      var metadata = this.props.metadata;
      var typeWithModifier = metadata.SegmentedPropertyTypeCodeSequence.CodeMeaning;
      var modifier = metadata.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence;

      if (modifier) {
        typeWithModifier += " (".concat(modifier.CodeMeaning, ")");
      }

      return typeWithModifier;
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          metadata = _this$props.metadata,
          segmentIndex = _this$props.segmentIndex,
          onSegmentChange = _this$props.onSegmentChange,
          onEditClick = _this$props.onEditClick,
          onDeleteClick = _this$props.onDeleteClick,
          checked = _this$props.checked,
          enabledElement = _this$props.enabledElement;
      var segmentLabel = metadata.SegmentLabel;
      var colormap = brushModule.getters.activeCornerstoneColorMap(enabledElement);
      var color = colormap.getColor(segmentIndex);
      var segmentColor = "rgba(".concat(color[0], ", ").concat(color[1], ", ").concat(color[2], ", 1.0 )");
      var segmentCategory = metadata.SegmentedPropertyCategoryCodeSequence.CodeMeaning;

      var typeWithModifier = this._getTypeWithModifier();

      return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("tr", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-square",
        style: {
          color: segmentColor
        }
      }), ' ', react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("input", {
        type: "radio",
        checked: checked,
        onChange: function onChange() {
          onSegmentChange(segmentIndex);
        }
      })), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "left-aligned-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "segmentation-menu-name-link",
        onClick: function onClick() {
          onEditClick(segmentIndex, metadata);
        }
      }, segmentLabel)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "segmentation-menu-name-link",
        onClick: function onClick() {
          onEditClick(segmentIndex, metadata);
        }
      }, typeWithModifier, ' - ', segmentCategory)), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("td", {
        className: "centered-cell"
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("a", {
        className: "btn btn-sm btn-secondary",
        onClick: function onClick() {
          onDeleteClick(segmentIndex);
        }
      }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement("i", {
        className: "fa fa-times"
      }))));
    }
  }]);

  return SegmentationMenuListItem;
}(react__WEBPACK_IMPORTED_MODULE_0___default.a.Component);



/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _init_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./init.js */ "./src/init.js");
/* harmony import */ var _commandsModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./commandsModule.js */ "./src/commandsModule.js");
/* harmony import */ var _components_segmentationMenu_SegmentationMenu_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/segmentationMenu/SegmentationMenu.js */ "./src/components/segmentationMenu/SegmentationMenu.js");
/* harmony import */ var _components_roiContourMenu_RoiContourMenu_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./components/roiContourMenu/RoiContourMenu.js */ "./src/components/roiContourMenu/RoiContourMenu.js");




var TOOLBAR_BUTTON_TYPES = {
  COMMAND: 'command',
  SET_TOOL_ACTIVE: 'setToolActive'
};
/* harmony default export */ __webpack_exports__["default"] = ({
  /**
   * Only required property. Should be a unique value across all extensions.
   */
  id: 'ohif-segmentation-extension',
  preRegistration: function preRegistration() {
    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    Object(_init_js__WEBPACK_IMPORTED_MODULE_0__["default"])(configuration);
  },

  /**
   * Registers one or more named commands scoped to a context. Commands are
   * the primary means for...
   */
  getCommandsModule: function getCommandsModule() {
    return _commandsModule_js__WEBPACK_IMPORTED_MODULE_1__["default"];
  },

  /**
   * Allows you to provide toolbar definitions that will be merged with any
   * existing application toolbar configuration. Used to determine which
   * buttons should be visible when, their order, what happens when they're
   * clicked, etc.
   */
  getToolbarModule: function getToolbarModule() {
    return {
      definitions: [{
        id: 'freehandRoiTools',
        label: 'ROI',
        icon: 'level',
        buttons: [{
          id: 'FreehandRoi',
          label: 'Draw',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].FREEHAND_ROI_3D_TOOL
          }
        }, {
          id: 'FreehandRoiSculptor',
          label: 'Sculpt',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].FREEHAND_ROI_3D_SCULPTOR_TOOL
          }
        }]
      }, {
        id: 'brushTools',
        label: 'Segment',
        icon: 'level',
        buttons: [{
          id: 'Brush',
          label: 'Manual',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].BRUSH_3D_TOOL
          }
        }, {
          id: 'Brush3DHUGatedTool',
          label: 'Smart CT',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].BRUSH_3D_HU_GATED_TOOL
          }
        }, {
          id: 'Brush3DAutoGatedTool',
          label: 'Auto',
          icon: 'level',
          type: TOOLBAR_BUTTON_TYPES.SET_TOOL_ACTIVE,
          commandName: 'setToolActive',
          commandOptions: {
            toolName: _init_js__WEBPACK_IMPORTED_MODULE_0__["TOOL_NAMES"].BRUSH_3D_AUTO_GATED_TOOL
          }
        }]
      }],
      defaultContext: 'ACTIVE_VIEWPORT::CORNERSTONE'
    };
  },
  getPanelModule: function getPanelModule() {
    return {
      menuOptions: [{
        icon: 'th-list',
        label: 'Segments',
        target: 'segment-panel'
      }, {
        icon: 'th',
        label: 'Contours',
        target: 'contour-panel'
      }],
      components: [{
        id: 'segment-panel',
        from: 'right',
        width: '500px',
        component: _components_segmentationMenu_SegmentationMenu_js__WEBPACK_IMPORTED_MODULE_2__["default"]
      }, {
        id: 'contour-panel',
        from: 'right',
        width: '500px',
        component: _components_roiContourMenu_RoiContourMenu_js__WEBPACK_IMPORTED_MODULE_3__["default"]
      }],
      defaultContext: ['VIEWER']
    };
  }
});

/***/ }),

/***/ "./src/init.js":
/*!*********************!*\
  !*** ./src/init.js ***!
  \*********************/
/*! exports provided: TOOL_NAMES, default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TOOL_NAMES", function() { return TOOL_NAMES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return init; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _modules_freehand3DModule_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/freehand3DModule.js */ "./src/modules/freehand3DModule.js");
/* harmony import */ var _modules_extendBrushModule_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/extendBrushModule.js */ "./src/modules/extendBrushModule.js");
/* harmony import */ var _tools_Brush3DTool_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tools/Brush3DTool.js */ "./src/tools/Brush3DTool.js");
/* harmony import */ var _tools_Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./tools/Brush3DHUGatedTool.js */ "./src/tools/Brush3DHUGatedTool.js");
/* harmony import */ var _tools_Brush3DAutoGatedTool_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./tools/Brush3DAutoGatedTool.js */ "./src/tools/Brush3DAutoGatedTool.js");
/* harmony import */ var _tools_FreehandRoi3DTool_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./tools/FreehandRoi3DTool.js */ "./src/tools/FreehandRoi3DTool.js");
/* harmony import */ var _tools_FreehandRoi3DSculptorTool_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./tools/FreehandRoi3DSculptorTool.js */ "./src/tools/FreehandRoi3DSculptorTool.js");








var TOOL_NAMES = {};

var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
var defaultConfig = {
  maxRadius: 64,
  holeFill: 2,
  holeFillRange: [0, 20],
  strayRemove: 5,
  strayRemoveRange: [0, 99],
  interpolate: false,
  showFreehandStats: false,
  brush3dToolName: 'Brush3DTool',
  brush3DHUGatedToolName: 'Brush3DHUGatedTool',
  brush3DAutoGatedTool: 'Brush3DAutoGatedTool',
  freehandRoi3DTool: 'FreehandRoi3DTool',
  freehandRoi3DSculptorTool: 'FreehandRoi3DSculptorTool',
  gates: [{
    // https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4309522/
    name: 'adipose',
    range: [-190, -30]
  }, {
    // https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4309522/
    name: 'muscle',
    range: [-29, 150]
  }, {
    name: 'custom',
    range: [0, 100]
  }]
};
function init() {
  var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var brushModule = modules.brush;
  var config = Object.assign({}, defaultConfig, configuration);
  Object(_modules_extendBrushModule_js__WEBPACK_IMPORTED_MODULE_2__["default"])(brushModule, config);
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["register"])('module', 'freehand3D', _modules_freehand3DModule_js__WEBPACK_IMPORTED_MODULE_1__["default"]);
  var freehand3DStore = modules.freehand3D;
  freehand3DStore.state.interpolate = config.interpolate;
  freehand3DStore.state.displayStats = config.showFreehandStats;
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_Brush3DTool_js__WEBPACK_IMPORTED_MODULE_3__["default"], {
    name: config.brush3dToolName
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_4__["default"], {
    name: config.brush3DHUGatedToolName
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_Brush3DAutoGatedTool_js__WEBPACK_IMPORTED_MODULE_5__["default"], {
    name: config.brush3DAutoGatedTool
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_FreehandRoi3DTool_js__WEBPACK_IMPORTED_MODULE_6__["default"], {
    name: config.freehandRoi3DTool
  });
  Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["addTool"])(_tools_FreehandRoi3DSculptorTool_js__WEBPACK_IMPORTED_MODULE_7__["default"], {
    name: config.freehandRoi3DSculptorTool,
    referencedToolName: config.freehandRoi3DTool
  }); // TODO -> Clean this up a bit after PW.

  TOOL_NAMES.FREEHAND_ROI_3D_TOOL = config.freehandRoi3DTool;
  TOOL_NAMES.FREEHAND_ROI_3D_SCULPTOR_TOOL = config.freehandRoi3DSculptorTool;
  TOOL_NAMES.BRUSH_3D_TOOL = config.brush3dToolName;
  TOOL_NAMES.BRUSH_3D_AUTO_GATED_TOOL = config.brush3DAutoGatedTool;
  TOOL_NAMES.BRUSH_3D_HU_GATED_TOOL = config.brush3DHUGatedToolName;
  console.log(config);
  console.log(TOOL_NAMES);
}

/***/ }),

/***/ "./src/modules/extendBrushModule.js":
/*!******************************************!*\
  !*** ./src/modules/extendBrushModule.js ***!
  \******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return extendBrushModule; });
function extendBrushModule(brushModule, config) {
  var brushState = brushModule.state;
  var getters = brushModule.getters;
  var setters = brushModule.setters;
  brushState.holeFill = config.holeFill;
  brushState.holeFillRange = config.holeFillRange;
  brushState.strayRemove = config.strayRemove;
  brushState.strayRemoveRange = config.strayRemoveRange;
  brushState.gates = config.gates;
  brushState.activeGate = brushState.gates[0].name;
  brushState.maxRadius = config.maxRadius;

  getters.activeGateRange = function () {
    var activeGate = brushState.activeGate;
    var gates = brushState.gates;
    var gateIndex = gates.findIndex(function (element) {
      return element.name === activeGate;
    });
    return brushState.gates[gateIndex].range;
  };

  getters.customGateRange = function () {
    var gates = brushState.gates;
    var gateIndex = gates.findIndex(function (element) {
      return element.name === 'custom';
    });
    return brushState.gates[gateIndex].range;
  };

  setters.customGateRange = function (min, max) {
    var gates = brushState.gates;
    var gateIndex = gates.findIndex(function (element) {
      return element.name === 'custom';
    });
    var customGateRange = brushState.gates[gateIndex].range;

    if (min !== null) {
      customGateRange[0] = min;
    }

    if (max !== null) {
      customGateRange[1] = max;
    }
  };

  getters.importMetadata = function (seriesInstanceUid) {
    if (brushModule.state.import && brushModule.state.import[seriesInstanceUid]) {
      return brushModule.state.import[seriesInstanceUid];
    }

    return;
  };

  setters.importMetadata = function (seriesInstanceUid, metadata) {
    // Store that we've imported a collection for this series.
    if (!brushModule.state.import) {
      brushModule.state.import = {};
    }

    brushModule.state.import[seriesInstanceUid] = metadata;
  };

  setters.importModified = function (seriesInstanceUid) {
    var importMetadata = brushModule.state.import[seriesInstanceUid];

    if (importMetadata.modified) {
      return;
    }

    importMetadata.modified = true; // JamesAPetts
    // TODO: Force update of component.
  };
}

/***/ }),

/***/ "./src/modules/freehand3DModule.js":
/*!*****************************************!*\
  !*** ./src/modules/freehand3DModule.js ***!
  \*****************************************/
/*! exports provided: default, getNextColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getNextColor", function() { return getNextColor; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_generateUID_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/generateUID.js */ "./src/util/generateUID.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");



/**
 * @typedef {series[]} seriesCollection
 *
 * @example
 * [
 *   series1,
 *   series2
 * ];
 */

/**
 * @typedef {object} series
 * @property {string} uid The seriesInstanceUid
 * @property {number} activeStructureSetIndex The activeStructureSet within the series.
 * @property {structureSet[]} structureSetCollection An array of structureSets.
 *
 * @example
 * {
 *  uid: 'mySeriesInstanceUid',
 *  activeStructureSetIndex: 0,
 *  structureSetCollection,
 * };
 */

/**
 * @typedef {object} structureSet
 * @property {string} uid The structureSetUid
 * @property {string} name A human readable descriptor of the structureSet.
 * @property {boolean} isLocked Whether the structureSet is immutable.
 * @property {boolean} visible Whether the structureSet should be rendered.
 * @property {number} activeROIContourIndex The index of the active ROIContour.
 * @property {ROIContour[]} ROIContourCollection An array of ROIContours.
 *
 * @example
 * {
 *   uid: 'myStructureSetUid',
 *   name: `myLovelyStructureSet`,
 *   isLocked: false,
 *   visible: true,
 *   activeROIContourIndex: 7,
 *   ROIContourCollection
 * };
 */

/**
 * @typedef {object} ROIContour
 * @property {string} uid The ROIContourUid.
 * @property {string} name A human readable descriptor of the biological object the contour encloses.
 * @property {string} color A css color to render the volume with.
 * @property {number} polygonCount The number of polygons that comprise the ROIContour.
 *
 * @example
 * {
 *  uid: 'myROIContourUid',
 *  name: 'myLovelyROIContour',
 *  color: 'cornflowerblue',
 *  polygonCount: '34'
 * };
 */
// Each contour references a seriesInstanceUid, structureSetUid, ROIContourUid.

var state = {
  seriesCollection: [],
  interpolate: false,
  displayStats: false
};

function check(object, name) {
  if (!object) {
    throw new Error("Insufficient information provided, must provide ".concat(name, "."));
  }
}

function getSeries(seriesInstanceUid) {
  check(seriesInstanceUid, 'seriesInstanceUid');
  return state.seriesCollection.find(function (series) {
    return series.uid === seriesInstanceUid;
  });
}

function getStructureSet(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  check(structureSetUid, 'structureSetUid');
  var series = getSeries(seriesInstanceUid);

  if (!series) {
    return;
  }

  return series.structureSetCollection.find(function (structureSet) {
    return structureSet.uid === structureSetUid;
  });
}

function getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid) {
  check(ROIContourUid, 'ROIContourUid');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);

  if (!structureSet) {
    return;
  }

  return structureSet.ROIContourCollection.find(function (ROIContour) {
    return ROIContour && ROIContour.uid === ROIContourUid;
  });
}

function getROIContourIndex(seriesInstanceUid, structureSetUid, ROIContourUid) {
  check(ROIContourUid, 'ROIContourUid');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);

  if (!structureSet) {
    return;
  }

  return structureSet.ROIContourCollection.findIndex(function (ROIContour) {
    return ROIContour.uid === ROIContourUid;
  });
}

function getActiveStructureSetIndex(seriesInstanceUid) {
  var series = getSeries(seriesInstanceUid);
  return series.activeStructureSetIndex;
}

function getActiveROIContourIndex(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  return structureSet.activeROIContourIndex;
}

function getActiveROIContour(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var activeROIContourIndex = structureSet.activeROIContourIndex;

  if (activeROIContourIndex === null || activeROIContourIndex === undefined) {
    return;
  }

  return structureSet.ROIContourCollection[activeROIContourIndex];
}

function setSeries(seriesInstanceUid) {
  check(seriesInstanceUid);
  var series = {
    uid: seriesInstanceUid,
    activeStructureSetIndex: null,
    structureSetCollection: []
  };
  state.seriesCollection.push(series); // Add a default structureSet for the series.

  setStructureSet(seriesInstanceUid, 'default', {
    uid: 'DEFAULT'
  });
}

function setStructureSet(seriesInstanceUid, name) {
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  check(name, 'name');
  var series = getSeries(seriesInstanceUid);

  if (!series) {
    // Generate the series.
    setSeries(seriesInstanceUid);
    series = getSeries(seriesInstanceUid);
  }

  var structureSet = {
    uid: options.uid ? options.uid : Object(_util_generateUID_js__WEBPACK_IMPORTED_MODULE_1__["default"])(),
    name: name,
    isLocked: options.isLocked ? options.isLocked : false,
    visible: options.visible ? options.visible : true,
    activeROIContourIndex: options.activeROIContourIndex !== undefined ? options.activeROIContourIndex : null,
    ROIContourCollection: []
  };
  series.structureSetCollection.push(structureSet);
}

function setROIContour(seriesInstanceUid, structureSetUid, name) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  check(name, 'name');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);

  if (!structureSet) {
    // Can't generate the structureSet as not enough info (no name).
    throw new Error("Cannot generate ROIContour, as the structureSet with ".concat(structureSetUid, " does not exist."));
  }

  var ROIContour = {
    uid: options.uid ? options.uid : Object(_util_generateUID_js__WEBPACK_IMPORTED_MODULE_1__["default"])(),
    name: name,
    color: options.color ? options.color : getNextColor(),
    polygonCount: options.polygonCount ? options.polygonCount : 0
  };
  structureSet.ROIContourCollection.push(ROIContour);
  return ROIContour.uid;
}

function setROIContourAndSetIndexActive(seriesInstanceUid, structureSetUid, name) {
  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
  setROIContour(seriesInstanceUid, structureSetUid, name, options);
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var index = structureSet.ROIContourCollection.length - 1;
  structureSet.activeROIContourIndex = index;
  return index;
}

function setDeleteROIFromStructureSet(seriesInstanceUid, structureSetUid, ROIContourUid) {
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var ROIContourCollection = structureSet.ROIContourCollection;
  var ROIContourIndex = ROIContourCollection.findIndex(function (ROIContour) {
    return ROIContour.uid === ROIContourUid;
  });
  ROIContourCollection.splice(ROIContourIndex, 1);
}

function setStructureSetName(name, seriesInstanceUid, structureSetUid) {
  check(name, 'name');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  structureSet.name = name;
}

function setDeleteStructureSet(seriesInstanceUid, structureSetUid) {
  var series = getSeries(seriesInstanceUid);
  var structureSetCollection = series.structureSetCollection;
  var structureSetIndex = structureSetCollection.findIndex(function (structureSet) {
    return structureSet.uid === structureSetUid;
  });
  structureSetCollection.splice(structureSetIndex, 1);
}

function setROIContourName(name, seriesInstanceUid, structureSetUid, ROIContourUid) {
  check(name, 'name');
  var ROIContour = getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
  ROIContour.name = name;
}

function setActiveStructureSetIndex(index, seriesInstanceUid) {
  check(index, 'index');
  var series = getSeries(seriesInstanceUid);
  series.activeStructureSetIndex = index;
}

function setActiveStructureSet(seriesInstanceUid, structureSetUid) {
  check(structureSetUid, 'structureSetUid');
  var series = getSeries(seriesInstanceUid);
  var structureSetCollection = series.structureSetCollection;
  var structureSetIndex = structureSetCollection.findIndex(function (structureSet) {
    return structureSet.uid === structureSetUid;
  });
  series.activeStructureSetIndex = structureSetIndex;
}

function setActiveROIContourIndex(index, seriesInstanceUid) {
  var structureSetUid = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'DEFAULT';
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  structureSet.activeROIContourIndex = index;
}

function setActiveROIContour(seriesInstanceUid) {
  var structureSetUid = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'DEFAULT';
  var ROIContourUid = arguments.length > 2 ? arguments[2] : undefined;
  check(ROIContourUid, 'ROIContourUid');
  var structureSet = getStructureSet(seriesInstanceUid, structureSetUid);
  var ROIContourCollection = structureSet.ROIContourCollection;
  var ROIContourIndex = ROIContourCollection.findIndex(function (ROIContour) {
    return ROIContour.uid === ROIContourUid;
  });
  structureSet.activeROIContourIndex = ROIContourIndex;
}

function incrementPolygonCount(seriesInstanceUid, structureSetUid, ROIContourUid) {
  var ROIContour = getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
  ROIContour.polygonCount++;
}

function decrementPolygonCount(seriesInstanceUid, structureSetUid, ROIContourUid) {
  var ROIContour = getROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
  ROIContour.polygonCount--;
}

var getters = {
  series: getSeries,
  structureSet: getStructureSet,
  ROIContour: getROIContour,
  ROIContourIndex: getROIContourIndex,
  activeStructureSetIndex: getActiveStructureSetIndex,
  activeROIContourIndex: getActiveROIContourIndex,
  activeROIContour: getActiveROIContour
};
var setters = {
  series: setSeries,
  structureSet: setStructureSet,
  ROIContour: setROIContour,
  ROIContourAndSetIndexActive: setROIContourAndSetIndexActive,
  deleteROIFromStructureSet: setDeleteROIFromStructureSet,
  deleteStructureSet: setDeleteStructureSet,
  structureSetName: setStructureSetName,
  ROIContourName: setROIContourName,
  activeStructureSetIndex: setActiveStructureSetIndex,
  activeStructureSet: setActiveStructureSet,
  activeROIContourIndex: setActiveROIContourIndex,
  activeROIContour: setActiveROIContour,
  incrementPolygonCount: incrementPolygonCount,
  decrementPolygonCount: decrementPolygonCount,
  toggleInterpolate: function toggleInterpolate() {
    state.interpolate = !state.interpolate;
  },
  toggleDisplayStats: function toggleDisplayStats() {
    state.displayStats = !state.displayStats;
  }
};
/**
 * enabledElementCallback - Element specific initilisation.
 * @public
 * @param  {Object} enabledElement  The element on which the module is
 *                                  being initialised.
 */

function enabledElementCallback(element) {
  var enabledElement = cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default.a.getEnabledElement(element);

  if (!enabledElement.image) {
    return;
  }

  var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_2__["default"])(enabledElement);

  if (!getSeries(seriesInstanceUid)) {
    // Generate series store.
    setSeries(seriesInstanceUid);
  }
}

/* harmony default export */ __webpack_exports__["default"] = ({
  state: state,
  enabledElementCallback: enabledElementCallback,
  getters: getters,
  setters: setters
});
var importColors = ['cornflowerblue', 'firebrick', 'goldenrod', 'blueviolet', 'indianred', 'orange', 'mediumturquoise', 'lightcoral', 'khaki', 'darkmagenta', 'lightseagreen', 'tomato', 'aquamarine', 'darksalmon', 'moccasin', 'orchid', 'skyblue', 'peru']; // Such that first color will be the first in roiColors

var currentColorIndex = importColors.length;
/**
 * getNextColor
 *
 * @return {string} A CSS recognised color with which to render the ROI contour.
 */

function getNextColor() {
  currentColorIndex++;

  if (currentColorIndex >= importColors.length) {
    currentColorIndex = 0;
  }

  return importColors[currentColorIndex];
}

/***/ }),

/***/ "./src/tools/Brush3DAutoGatedTool.js":
/*!*******************************************!*\
  !*** ./src/tools/Brush3DAutoGatedTool.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Brush3DAutoGatedTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./Brush3DHUGatedTool.js */ "./src/tools/Brush3DHUGatedTool.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }




var _cornerstoneTools$imp = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default.a.importInternalModule('util/brushUtils'),
    getCircle = _cornerstoneTools$imp.getCircle;

var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default.a.store.modules.brush;

var Brush3DAutoGatedTool =
/*#__PURE__*/
function (_Brush3DHUGatedTool) {
  _inherits(Brush3DAutoGatedTool, _Brush3DHUGatedTool);

  function Brush3DAutoGatedTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Brush3DAutoGatedTool);

    var defaultConfig = {};
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Brush3DAutoGatedTool).call(this, initialConfiguration));
    _this.initialConfiguration = initialConfiguration;
    return _this;
  }
  /**
   * Event handler for MOUSE_DOWN event.
   *
   * @override
   * @event
   * @param {Object} evt - The event.
   */


  _createClass(Brush3DAutoGatedTool, [{
    key: "preMouseDownCallback",
    value: function preMouseDownCallback(evt) {
      this._setCustomGate(evt);

      this._startPainting(evt);

      return true;
    }
    /**
     * _setCustomGate - Gets the minimum and maximum brush values within the image
     * and sets the gate mode to "custom" with these values.
     *
     * @param  {object} evt The cornerstone event.
     * @returns {null}
     */

  }, {
    key: "_setCustomGate",
    value: function _setCustomGate(evt) {
      var eventData = evt.detail;
      var image = eventData.image;
      var rows = image.rows,
          columns = image.columns;
      var _eventData$currentPoi = eventData.currentPoints.image,
          x = _eventData$currentPoi.x,
          y = _eventData$currentPoi.y;
      var radius = brushModule.state.radius;
      var imagePixelData = image.getPixelData();
      var rescaleSlope = image.slope || 1;
      var rescaleIntercept = image.intercept || 0;
      var circle = getCircle(radius, rows, columns, x, y); // Initialise hi and lo as the first pixelValue in the circle.

      var lo = imagePixelData[circle[0][0] + circle[0][1] * rows];
      var hi = lo; // Find the highest and lowest value.

      for (var i = 0; i < circle.length; i++) {
        var pixelValue = imagePixelData[circle[i][0] + circle[i][1] * rows];

        if (pixelValue < lo) {
          lo = pixelValue;
        }

        if (pixelValue > hi) {
          hi = pixelValue;
        }
      }

      lo = lo * rescaleSlope + rescaleIntercept;
      hi = hi * rescaleSlope + rescaleIntercept;
      this.gate = [lo, hi];
    }
    /**
     * _gateCircle - Given an image and a brush circle, gate the circle between
     * the set gate values, and then cleanup the resulting mask using the
     * holeFill and strayRemove properties of the brush module.
     *
     * @param  {object} image   The cornerstone image.
     * @param  {Number[][]} circle  An array of image pixels contained within the brush
     *                        circle.
     * @returns {Number[][]}  An array containing the gated/cleaned pixels to fill.
     */

  }, {
    key: "_gateCircle",
    value: function _gateCircle(image, circle) {
      var rows = image.image;
      var imagePixelData = image.getPixelData();
      var gateValues = this.gate;
      var rescaleSlope = image.slope || 1;
      var rescaleIntercept = image.intercept || 0;
      var gatedCircleArray = [];

      for (var i = 0; i < circle.length; i++) {
        var pixelValue = imagePixelData[circle[i][0] + circle[i][1] * rows];
        pixelValue = pixelValue * rescaleSlope + rescaleIntercept;

        if (pixelValue >= gateValues[0] && pixelValue <= gateValues[1]) {
          gatedCircleArray.push(circle[i]);
        }
      }

      return this._cleanGatedCircle(circle, gatedCircleArray);
    }
  }]);

  return Brush3DAutoGatedTool;
}(_Brush3DHUGatedTool_js__WEBPACK_IMPORTED_MODULE_1__["default"]);



/***/ }),

/***/ "./src/tools/Brush3DHUGatedTool.js":
/*!*****************************************!*\
  !*** ./src/tools/Brush3DHUGatedTool.js ***!
  \*****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Brush3DHUGatedTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _Brush3DTool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Brush3DTool.js */ "./src/tools/Brush3DTool.js");
/* harmony import */ var _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./n-dimensional-flood-fill.js */ "./src/tools/n-dimensional-flood-fill.js");
/* harmony import */ var _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(_n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3__);
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }





var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules.brush;

var _importInternalModule = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["importInternalModule"])('util/brushUtils'),
    getCircle = _importInternalModule.getCircle,
    drawBrushPixels = _importInternalModule.drawBrushPixels;

var Brush3DHUGatedTool =
/*#__PURE__*/
function (_Brush3DTool) {
  _inherits(Brush3DHUGatedTool, _Brush3DTool);

  function Brush3DHUGatedTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Brush3DHUGatedTool);

    var defaultConfig = {};
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Brush3DHUGatedTool).call(this, initialConfiguration));
    _this.initialConfiguration = initialConfiguration;
    return _this;
  }
  /**
   * Event handler for MOUSE_DOWN event.
   *
   * @override
   * @event
   * @param {Object} evt - The event.
   */


  _createClass(Brush3DHUGatedTool, [{
    key: "preMouseDownCallback",
    value: function preMouseDownCallback(evt) {
      this.activeGateRange = brushModule.getters.activeGateRange();

      this._startPainting(evt);

      return true;
    }
    /**
     * Paints the data to the canvas.
     *
     * @protected
     * @param  {Object} evt The data object associated with the event.
     * @returns {void}
     */

  }, {
    key: "_paint",
    value: function _paint(evt) {
      var eventData = evt.detail;
      var element = eventData.element,
          image = eventData.image;
      var rows = image.rows,
          columns = image.columns;
      var _eventData$currentPoi = eventData.currentPoints.image,
          x = _eventData$currentPoi.x,
          y = _eventData$currentPoi.y;

      if (x < 0 || x > columns || y < 0 || y > rows) {
        return;
      }

      var radius = brushModule.state.radius;

      var pointerArray = this._gateCircle(image, getCircle(radius, rows, columns, x, y));

      var _this$paintEventData = this.paintEventData,
          labelmap3D = _this$paintEventData.labelmap3D,
          currentImageIdIndex = _this$paintEventData.currentImageIdIndex,
          activeLabelmapIndex = _this$paintEventData.activeLabelmapIndex,
          shouldErase = _this$paintEventData.shouldErase; // Draw / Erase the active color.

      drawBrushPixels(pointerArray, labelmap3D, currentImageIdIndex, columns, shouldErase);
      cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default.a.triggerEvent(element, cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["EVENTS"].LABELMAP_MODIFIED, {
        activeLabelmapIndex: activeLabelmapIndex
      });
      cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default.a.updateImage(evt.detail.element);
    }
    /**
     * _gateCircle - Given an image and a brush circle, gate the circle between
     * the set gate values, and then cleanup the resulting mask using the
     * holeFill and strayRemove properties of the brush module.
     *
     * @param  {object} image   The cornerstone image.
     * @param  {Number[][]} circle  An array of image pixels contained within the brush
     *                        circle.
     * @returns {Number[][]}  An array containing the gated/cleaned pixels to fill.
     */

  }, {
    key: "_gateCircle",
    value: function _gateCircle(image, circle) {
      var rows = image.rows;
      var imagePixelData = image.getPixelData();
      var gateRange = this.activeGateRange;
      var rescaleSlope = image.slope || 1;
      var rescaleIntercept = image.intercept || 0;
      var gatedCircleArray = [];

      for (var i = 0; i < circle.length; i++) {
        var pixelValue = imagePixelData[circle[i][0] + circle[i][1] * rows];
        pixelValue = pixelValue * rescaleSlope + rescaleIntercept;

        if (pixelValue >= gateRange[0] && pixelValue <= gateRange[1]) {
          gatedCircleArray.push(circle[i]);
        }
      }

      return this._cleanGatedCircle(circle, gatedCircleArray);
    }
    /**
     * _getEdgePixels - Returns the indicies of the edge pixels for the circular
     * brush data.
     *
     * @param  {Number[][]} data The squared-circle data where all circle members are
     *                     0, and values outside the circle are -1
     * @returns {Number[][]} An array of positions of the circle edge pixels.
     */

  }, {
    key: "_getEdgePixels",
    value: function _getEdgePixels(data) {
      var edgePixels = [];
      var xSize = data.length;
      var ySize = data[0].length; // first and last row add all of top and bottom which are circle members.

      for (var i = 0; i < data.length; i++) {
        if (data[i][0]) {
          edgePixels.push([i, 0]);
          edgePixels.push([i, ySize - 1]);
        }
      } // all other rows - Find first circle member, and use its position to add
      // The first and last circle member of that row.


      for (var j = 1; j < ySize - 1; j++) {
        for (var _i = 0; _i < data.length; _i++) {
          if (data[_i][j]) {
            edgePixels.push([_i, j]);
            edgePixels.push([xSize - 1 - _i, j]);
            break;
          }
        }
      }

      return edgePixels;
    }
    /**
     * _cleanGatedCircle - Clean the HU gated circle using the holeFill and
     * strayRemove properties of the brush module.
     *
     * @param  {Number[][]} circle     An array of the pixel indicies within the
     *                                 brush circle.
     * @param  {Number[][]} gatedCircleArray An array of the pixel indicies within
     *                                       the gate range.
     * @returns {Number[][]}                  The cleaned array of pixel indicies.
     */

  }, {
    key: "_cleanGatedCircle",
    value: function _cleanGatedCircle(circle, gatedCircleArray) {
      var _this$_getBoundingBox = this._getBoundingBoxOfCircle(circle),
          max = _this$_getBoundingBox.max,
          min = _this$_getBoundingBox.min;

      var xSize = max[0] - min[0] + 1;
      var ySize = max[1] - min[1] + 1;

      var data = this._boxGatedCircle(circle, gatedCircleArray, min, xSize, ySize); // Define our getter for accessing the data structure.


      function getter(x, y) {
        return data[x][y];
      }

      this._floodFillEmptyRegionsFromEdges(data, getter);

      var _this$_findHolesAndRe = this._findHolesAndRegions(circle, data, getter, min),
          holes = _this$_findHolesAndRe.holes,
          regions = _this$_findHolesAndRe.regions;

      var largestRegionArea = this._getAreaOfLargestRegion(regions); // Delete any region outside the `strayRemove` threshold.


      for (var r = 0; r < regions.length; r++) {
        var region = regions[r];

        if (region.length <= brushModule.state.strayRemove / 100.0 * largestRegionArea) {
          for (var p = 0; p < region.length; p++) {
            data[region[p][0]][region[p][1]] = 3;
          }
        }
      } // Fill in any holes smaller than the `holeFill` threshold.


      for (var _r = 0; _r < holes.length; _r++) {
        var hole = holes[_r];

        if (hole.length <= brushModule.state.holeFill / 100.0 * largestRegionArea) {
          for (var _p = 0; _p < hole.length; _p++) {
            data[hole[_p][0]][hole[_p][1]] = 5;
          }
        }
      }

      var filledGatedCircleArray = [];

      for (var i = 0; i < xSize; i++) {
        for (var j = 0; j < ySize; j++) {
          if (data[i][j] === 5) {
            filledGatedCircleArray.push([i + min[0], j + min[1]]);
          }
        }
      }

      return filledGatedCircleArray;
    }
    /**
     * _getBoundingBoxOfCircle - Returns two points defining the extent of the circle.
     *
     * @param  {number[][]} circle  An array of the pixel indicies within the brush circle.
     * @returns {object}        The minimum and maximum of the extent.
     */

  }, {
    key: "_getBoundingBoxOfCircle",
    value: function _getBoundingBoxOfCircle(circle) {
      var max = [circle[0][0], circle[0][1]];
      var min = [circle[0][0], circle[0][1]];

      for (var p = 0; p < circle.length; p++) {
        var _circle$p = _slicedToArray(circle[p], 2),
            i = _circle$p[0],
            j = _circle$p[1];

        if (i > max[0]) {
          max[0] = i;
        } else if (i < min[0]) {
          min[0] = i;
        }

        if (j > max[1]) {
          max[1] = j;
        } else if (j < min[1]) {
          min[1] = j;
        }
      }

      return {
        max: max,
        min: min
      };
    }
    /**
     * _boxGatedCircle - Generates a rectangular dataset from the brush circle
     *                   for efficient flood fill/cleaning.
     *
     * @param  {type} circle           An array of the pixel indicies within the brush circle.
     * @param  {type} gatedCircleArray The circle array with the gate applied.
     * @param  {type} min              The location of the top left pixel of the
     *                                 generated dataset with respect to the
     *                                 underlying image data.
     * @param  {type} xSize            The x size of the generated box.
     * @param  {type} ySize            The y size of the generated box.
     * @returns {number[][]}           The data with pixel [0,0] centered on min,
     *                                 the circle marked with 1 for unoccupied, 2
     *                                 for occupied and 0 for outside of the circle bounds.
     */

  }, {
    key: "_boxGatedCircle",
    value: function _boxGatedCircle(circle, gatedCircleArray, min, xSize, ySize) {
      var data = []; // Fill in square as 0 (out of bounds/ignore).

      for (var i = 0; i < xSize; i++) {
        data[i] = new Uint8ClampedArray(ySize);
      } // fill circle in as 1.


      for (var p = 0; p < circle.length; p++) {
        var _i2 = circle[p][0] - min[0];

        var j = circle[p][1] - min[1];
        data[_i2][j] = 1;
      } // fill gated region as 2.


      for (var _p2 = 0; _p2 < gatedCircleArray.length; _p2++) {
        var _i3 = gatedCircleArray[_p2][0] - min[0];

        var _j = gatedCircleArray[_p2][1] - min[1];

        data[_i3][_j] = 2;
      }

      return data;
    }
    /**
     * _floodFillEmptyRegionsFromEdges - Flood fills empty regions which touch the
     *                                   edge of the circle with the value 3.
     *
     * @param  {number[][]} data The data to flood fill.
     * @param {function} getter The getter function floodFill uses to access array
     *                          elements.
     * @modifies data
     * @returns {null}
     */

  }, {
    key: "_floodFillEmptyRegionsFromEdges",
    value: function _floodFillEmptyRegionsFromEdges(data, getter) {
      var edgePixels = this._getEdgePixels(data);

      for (var p = 0; p < edgePixels.length; p++) {
        var i = edgePixels[p][0];
        var j = edgePixels[p][1];

        if (data[i][j] === 1) {
          var result = _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default()({
            getter: getter,
            seed: [i, j]
          });
          var flooded = result.flooded;

          for (var k = 0; k < flooded.length; k++) {
            data[flooded[k][0]][flooded[k][1]] = 3;
          }
        }
      }
    }
    /**
     * _findHolesAndRegions - Finds all the holes and regions and returns their
     *                        positions within the 2D data set. Sets the value of
     *                        holes and regions to 4 and 5, respectively.
     *
     * @param  {number[][]} circle An array of the pixel indicies within the brush circle.
     * @param  {number[][]} data   The data set.
     * @param  {function}   getter The getter function floodFill uses to access array
     *                       elements.
     * @param  {number[]}   min    The location of the top left pixel of the dataset
     *                       with respect to the underlying image data.
     * @returns {object}    An object containing arrays of the occupation of all
     *                      regions and holes in the dataset.
     */

  }, {
    key: "_findHolesAndRegions",
    value: function _findHolesAndRegions(circle, data, getter, min) {
      var holes = [];
      var regions = []; // Find each hole and paint them 3.
      // Find contiguous regions and paint them 4.

      for (var p = 0; p < circle.length; p++) {
        var i = circle[p][0] - min[0];
        var j = circle[p][1] - min[1];

        if (data[i][j] === 1) {
          var result = _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default()({
            getter: getter,
            seed: [i, j]
          });
          var flooded = result.flooded;

          for (var k = 0; k < flooded.length; k++) {
            data[flooded[k][0]][flooded[k][1]] = 4;
          }

          holes.push(flooded);
        } else if (data[i][j] === 2) {
          var _result = _n_dimensional_flood_fill_js__WEBPACK_IMPORTED_MODULE_3___default()({
            getter: getter,
            seed: [i, j]
          });

          var _flooded = _result.flooded;

          for (var _k = 0; _k < _flooded.length; _k++) {
            data[_flooded[_k][0]][_flooded[_k][1]] = 5;
          }

          regions.push(_flooded);
        }
      }

      return {
        holes: holes,
        regions: regions
      };
    }
    /**
     * _getAreaOfLargestRegion - Returns the number of pixels in the largest
     *                           region of a list of regions.
     *
     * @param  {number[][][]} regions An array of regions of 2D points.
     * @returns {number}        The area of the largest region in pixels.
     */

  }, {
    key: "_getAreaOfLargestRegion",
    value: function _getAreaOfLargestRegion(regions) {
      var largestRegionArea = 0;

      for (var i = 0; i < regions.length; i++) {
        if (regions[i].length > largestRegionArea) {
          largestRegionArea = regions[i].length;
        }
      }

      return largestRegionArea;
    }
  }]);

  return Brush3DHUGatedTool;
}(_Brush3DTool_js__WEBPACK_IMPORTED_MODULE_2__["default"]);



/***/ }),

/***/ "./src/tools/Brush3DTool.js":
/*!**********************************!*\
  !*** ./src/tools/Brush3DTool.js ***!
  \**********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Brush3DTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/generateBrushMetadata.js */ "./src/util/generateBrushMetadata.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }



var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules.brush;

var Brush3DTool =
/*#__PURE__*/
function (_BrushTool) {
  _inherits(Brush3DTool, _BrushTool);

  function Brush3DTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Brush3DTool);

    var defaultConfig = {};
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(Brush3DTool).call(this, initialConfiguration));
    _this.initialConfiguration = initialConfiguration;
    return _this;
  }
  /**
   * Initialise painting with baseBrushTool
   *
   * @override @protected
   * @event
   * @param {Object} evt - The event.
   */


  _createClass(Brush3DTool, [{
    key: "_startPainting",
    value: function _startPainting(evt) {
      var eventData = evt.detail;
      var element = eventData.element;

      var _brushModule$getters$ = brushModule.getters.getAndCacheLabelmap2D(element),
          labelmap3D = _brushModule$getters$.labelmap3D,
          currentImageIdIndex = _brushModule$getters$.currentImageIdIndex,
          activeLabelmapIndex = _brushModule$getters$.activeLabelmapIndex;

      var shouldErase = this._isCtrlDown(eventData) || this.configuration.alwaysEraseOnClick;
      this.paintEventData = {
        labelmap3D: labelmap3D,
        currentImageIdIndex: currentImageIdIndex,
        activeLabelmapIndex: activeLabelmapIndex,
        shouldErase: shouldErase
      };
      var segmentIndex = labelmap3D.activeSegmentIndex;
      var metadata = labelmap3D.metadata[segmentIndex];

      if (!metadata) {
        metadata = Object(_util_generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__["default"])('Unnamed Segment');
        brushModule.setters.metadata(element, activeLabelmapIndex, segmentIndex, metadata);
      } // Metadata assigned, start drawing.


      if (eventData.currentPoints) {
        this._paint(evt);
      }

      this._drawing = true;

      this._startListeningForMouseUp(element);
    }
  }]);

  return Brush3DTool;
}(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["BrushTool"]);



/***/ }),

/***/ "./src/tools/FreehandRoi3DSculptorTool.js":
/*!************************************************!*\
  !*** ./src/tools/FreehandRoi3DSculptorTool.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FreehandRoi3DSculptorTool; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/freehandInterpolate/interpolate.js */ "./src/util/freehandInterpolate/interpolate.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }




var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules,
    state = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].state;

var FreehandRoi3DSculptorTool =
/*#__PURE__*/
function (_FreehandRoiSculptorT) {
  _inherits(FreehandRoi3DSculptorTool, _FreehandRoiSculptorT);

  function FreehandRoi3DSculptorTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FreehandRoi3DSculptorTool);

    var defaultConfig = {
      configuration: getDefaultFreehandSculpterMouseToolConfiguration()
    };
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(FreehandRoi3DSculptorTool).call(this, initialConfiguration)); // Create bound functions for private event loop.

    _this.activeMouseUpCallback = _this.activeMouseUpCallback.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Select the freehand tool to be edited. Don't allow selecting of locked
   * ROIContours.
   *
   * @private
   * @param {Object} eventData - Data object associated with the event.
   */


  _createClass(FreehandRoi3DSculptorTool, [{
    key: "_selectFreehandTool",
    value: function _selectFreehandTool(eventData) {
      var config = this.configuration;
      var element = eventData.element;

      var closestToolIndex = this._getClosestFreehandToolOnElement(element, eventData);

      if (closestToolIndex === undefined) {
        return;
      }

      var toolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, this.referencedToolName);
      var toolData = toolState.data[closestToolIndex];
      var isLocked = toolData.referencedStructureSet.isLocked;

      if (isLocked) {
        return;
      }

      config.hoverColor = toolData.referencedROIContour.color;
      config.currentTool = closestToolIndex;
    }
    /**
     * Event handler for MOUSE_UP during the active loop.
     *
     * @param {Object} evt - The event.
     */

  }, {
    key: "_activeEnd",
    value: function _activeEnd(evt) {
      var eventData = evt.detail;
      var element = eventData.element;
      var config = this.configuration;
      this._active = false;
      state.isMultiPartToolActive = false;

      this._getMouseLocation(eventData);

      this._invalidateToolData(eventData);

      config.mouseUpRender = true;

      this._deactivateSculpt(element);

      var toolData = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, this.referencedToolName);
      var data = toolData.data[config.currentTool];

      if (modules.freehand3D.getters.interpolate()) {
        Object(_util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_2__["default"])(data);
      } // Update the image


      Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_1__["updateImage"])(eventData.element);
      preventPropagation(evt);
    }
    /**
     * Invalidate the freehand tool data, tirggering re-calculation of statistics.
     *
     * @private @override
     * @param {Object} eventData - Data object associated with the event.
     */

  }, {
    key: "_invalidateToolData",
    value: function _invalidateToolData(eventData) {
      var config = this.configuration;
      var element = eventData.element;
      var toolData = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, this.referencedToolName);
      var data = toolData.data[config.currentTool];
      data.invalidated = true;
      data.interpolated = false;
    }
  }]);

  return FreehandRoi3DSculptorTool;
}(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["FreehandRoiSculptorTool"]);
/**
 * Returns the default freehandSculpterMouseTool configuration.
 *
 * @return {Object} The default configuration object.
 */




function getDefaultFreehandSculpterMouseToolConfiguration() {
  return {
    mouseLocation: {
      handles: {
        start: {
          highlight: true,
          active: true
        }
      }
    },
    minSpacing: 1,
    currentTool: null,
    dragColor: cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["toolColors"].getActiveColor(),
    hoverColor: cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["toolColors"].getToolColor(),

    /* --- Hover options ---
    showCursorOnHover:        Shows a preview of the sculpting radius on hover.
    limitRadiusOutsideRegion: Limit max toolsize outside the subject ROI based
                              on subject ROI area.
    hoverCursorFadeAlpha:     Alpha to fade to when tool very distant from
                              subject ROI.
    hoverCursorFadeDistance:  Distance from ROI in which to fade the hoverCursor
                              (in units of radii).
    */
    showCursorOnHover: true,
    limitRadiusOutsideRegion: true,
    hoverCursorFadeAlpha: 0.5,
    hoverCursorFadeDistance: 1.2
  };
}

function preventPropagation(evt) {
  evt.stopImmediatePropagation();
  evt.stopPropagation();
  evt.preventDefault();
}

/***/ }),

/***/ "./src/tools/FreehandRoi3DTool.js":
/*!****************************************!*\
  !*** ./src/tools/FreehandRoi3DTool.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FreehandRoi3DTool; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var cornerstone_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! cornerstone-math */ "cornerstone-math");
/* harmony import */ var cornerstone_math__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(cornerstone_math__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _util_generateUID_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/generateUID.js */ "./src/util/generateUID.js");
/* harmony import */ var _util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../util/freehandInterpolate/interpolate.js */ "./src/util/freehandInterpolate/interpolate.js");
/* harmony import */ var _util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util/getSeriesInstanceUidFromEnabledElement.js */ "./src/util/getSeriesInstanceUidFromEnabledElement.js");
function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }






 // Cornerstone 3rd party dev kit imports

var _importInternalModule = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/freehandUtils'),
    insertOrDelete = _importInternalModule.insertOrDelete,
    freehandArea = _importInternalModule.freehandArea,
    calculateFreehandStatistics = _importInternalModule.calculateFreehandStatistics;

var draw = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/draw');
var drawJoinedLines = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/drawJoinedLines');
var drawHandles = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/drawHandles');
var drawLinkedTextBox = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/drawLinkedTextBox');
var moveHandleNearImagePoint = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('manipulators/moveHandleNearImagePoint');
var getNewContext = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('drawing/getNewContext');
var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["store"].modules;
var numbersWithCommas = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/numbersWithCommas');
var pointInsideBoundingBox = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/pointInsideBoundingBox');
var calculateSUV = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["importInternalModule"])('util/calculateSUV');

var FreehandRoi3DTool =
/*#__PURE__*/
function (_FreehandRoiTool) {
  _inherits(FreehandRoi3DTool, _FreehandRoiTool);

  function FreehandRoi3DTool() {
    var _this;

    var configuration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, FreehandRoi3DTool);

    var defaultConfig = {
      configuration: defaultFreehandConfiguration()
    };
    var initialConfiguration = Object.assign(defaultConfig, configuration);
    _this = _possibleConstructorReturn(this, _getPrototypeOf(FreehandRoi3DTool).call(this, initialConfiguration));
    _this.configuration.alwaysShowHandles = false;
    _this._freehand3DStore = modules.freehand3D;
    _this._onMeasurementRemoved = _this._onMeasurementRemoved.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    _this._drawingMouseUpCallback = _this._drawingMouseUpCallback.bind(_assertThisInitialized(_assertThisInitialized(_this)));
    return _this;
  }
  /**
   * Create the measurement data for this tool.
   * @override @public @method
   *
   * @param {object} eventData
   * @returns {object} measurementData
   */


  _createClass(FreehandRoi3DTool, [{
    key: "createNewMeasurement",
    value: function createNewMeasurement(eventData) {
      var freehand3DStore = this._freehand3DStore;
      var goodEventData = eventData && eventData.currentPoints && eventData.currentPoints.image;

      if (!goodEventData) {
        console.error("required eventData not supplied to tool ".concat(this.name, "'s createNewMeasurement"));
        return;
      }

      var enabledElement = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["getEnabledElement"])(this.element);
      var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enabledElement);
      var referencedStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, 'DEFAULT');
      var referencedROIContour = freehand3DStore.getters.activeROIContour(seriesInstanceUid);
      var measurementData = {
        uid: Object(_util_generateUID_js__WEBPACK_IMPORTED_MODULE_3__["default"])(),
        seriesInstanceUid: seriesInstanceUid,
        structureSetUid: 'DEFAULT',
        ROIContourUid: referencedROIContour.uid,
        referencedROIContour: referencedROIContour,
        referencedStructureSet: referencedStructureSet,
        visible: true,
        active: true,
        invalidated: true,
        handles: {
          points: []
        }
      };
      measurementData.handles.textBox = {
        active: false,
        hasMoved: false,
        movesIndependently: false,
        drawnIndependently: true,
        allowedOutsideImage: true,
        hasBoundingBox: true
      };
      freehand3DStore.setters.incrementPolygonCount(seriesInstanceUid, 'DEFAULT', referencedROIContour.uid);
      return measurementData;
    }
    /**
     * Event handler for called by the mouseDownActivate event, if tool is active and
     * the event is not caught by mouseDownCallback.
     * @override
     *
     * @event
     * @param {Object} evt - The event.
     */

  }, {
    key: "addNewMeasurement",
    value: function addNewMeasurement(evt, interactionType) {
      var eventData = evt.detail; // Create metadata if it doesn't exist.

      this._addAndSetVolumeIfNoVolumes();

      this._drawing = true;

      this._startDrawing(evt);

      this._addPoint(eventData);

      preventPropagation(evt);
    }
  }, {
    key: "_addAndSetVolumeIfNoVolumes",
    value: function _addAndSetVolumeIfNoVolumes() {
      var enabledElement = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["getEnabledElement"])(this.element);
      var seriesInstanceUid = Object(_util_getSeriesInstanceUidFromEnabledElement_js__WEBPACK_IMPORTED_MODULE_5__["default"])(enabledElement);
      var freehand3DStore = modules.freehand3D;
      var series = freehand3DStore.getters.series(seriesInstanceUid);

      if (!series) {
        freehand3DStore.setters.series(seriesInstanceUid);
        series = freehand3DStore.getters.series(seriesInstanceUid);
      }

      var activeROIContour = freehand3DStore.getters.activeROIContour(seriesInstanceUid);

      if (!activeROIContour) {
        freehand3DStore.setters.ROIContourAndSetIndexActive(seriesInstanceUid, 'DEFAULT', 'Unnamed Lesion');
      }
    }
    /**
     * Returns a handle of a particular tool if it is close to the mouse cursor
     *
     * @private
     * @param {Object} element - The element on which the roi is being drawn.
     * @param {Object} data      Data object associated with the tool.
     * @param {*} coords
     * @returns {Number|Object|Boolean}
     */

  }, {
    key: "_pointNearHandle",
    value: function _pointNearHandle(element, data, coords) {
      var freehand3DStore = this._freehand3DStore;

      if (!data.handles || data.handles.points === undefined) {
        return;
      }

      if (data.visible === false) {
        return;
      }

      var points = data.handles.points;

      for (var i = 0; i < points.length; i++) {
        var handleCanvas = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["pixelToCanvas"])(element, points[i]);

        if (cornerstone_math__WEBPACK_IMPORTED_MODULE_1__["point"].distance(handleCanvas, coords) < 6) {
          return i;
        }
      } // Check to see if mouse in bounding box of textbox


      if (freehand3DStore.state.displayStats && data.handles.textBox) {
        if (pointInsideBoundingBox(data.handles.textBox, coords)) {
          return data.handles.textBox;
        }
      }
    }
    /**
     * Active mouse down callback that takes priority if the user is attempting
     * to insert or delete a handle with ctrl + click.
     *
     * @param {Object} evt - The event.
     */

  }, {
    key: "preMouseDownCallback",
    value: function preMouseDownCallback(evt) {
      var eventData = evt.detail;
      var toolData = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["getToolState"])(evt.currentTarget, this.name);

      if (!toolData) {
        return false;
      }

      var nearby = this._pointNearHandleAllTools(eventData);

      var freehand3DStore = this._freehand3DStore;

      if (eventData.event.ctrlKey) {
        if (nearby !== undefined && nearby.handleNearby.hasBoundingBox) {// Ctrl + clicked textBox, do nothing but still consume event.
        } else {
          insertOrDelete.call(this, evt, nearby);
        }

        preventPropagation(evt);
        return true;
      }

      if (!nearby) {
        return;
      }

      var data = toolData.data[nearby.toolIndex]; // Check if locked and return

      var structureSet = freehand3DStore.getters.structureSet(data.seriesInstanceUid, data.structureSetUid);

      if (structureSet.isLocked) {
        return false;
      }

      return false;
    }
    /**
     * Custom callback for when a handle is selected.
     *
     * @param  {Object} evt
     * @param  {Object} handle The selected handle.
     */

  }, {
    key: "handleSelectedCallback",
    value: function handleSelectedCallback(evt, data, handle) {
      var interactionType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'mouse';
      var freehand3DStore = this._freehand3DStore;
      var eventData = evt.detail;
      var element = eventData.element;

      if (eventData.event.metaKey) {
        this._switchROIContour(evt, data);

        preventPropagation(evt);
        return;
      }

      if (handle.hasBoundingBox && freehand3DStore.state.displayStats) {
        // Use default move handler - Can move textbox of locked ROIContours.
        moveHandleNearImagePoint(evt, this, data, handle, interactionType);
        return;
      } // Check if locked and return


      var structureSet = freehand3DStore.getters.structureSet(data.seriesInstanceUid, data.structureSetUid);

      if (structureSet.isLocked) {
        return false;
      }

      var config = this.configuration;
      config.dragOrigin = {
        x: handle.x,
        y: handle.y
      }; // Have to do this to get tool index.

      var nearby = this._pointNearHandleAllTools(eventData);

      if (!nearby) {
        return;
      }

      var handleNearby = nearby.handleNearby;
      var toolIndex = nearby.toolIndex;
      this._modifying = true;
      config.currentHandle = handleNearby;
      config.currentTool = toolIndex;

      this._activateModify(element);

      preventPropagation(evt);
    }
  }, {
    key: "_switchROIContour",
    value: function _switchROIContour(evt, data) {
      var freehand3DStore = this._freehand3DStore;
      freehand3DStore.setters.activeROIContour(data.seriesInstanceUid, data.structureSetUid, data.ROIContourUid);
      Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["updateImage"])(evt.detail.element);
    }
    /**
     *
     *
     * @param {*} evt
     * @returns
     */

  }, {
    key: "renderToolData",
    value: function renderToolData(evt) {
      var _this2 = this;

      var eventData = evt.detail;
      var freehand3DStore = this._freehand3DStore; // If we have no toolState for this element, return immediately as there is nothing to do

      var toolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["getToolState"])(evt.currentTarget, this.name);

      if (!toolState) {
        return;
      }

      var image = eventData.image;
      var element = eventData.element;
      var config = this.configuration;
      var seriesModule = cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["metaData"].get('generalSeriesModule', image.imageId);
      var modality;

      if (seriesModule) {
        modality = seriesModule.modality;
      } // We have tool data for this element - iterate over each one and draw it


      var context = getNewContext(eventData.canvasContext.canvas);
      var lineWidth = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolStyle"].getToolWidth();

      var _loop = function _loop(i) {
        var data = toolState.data[i];
        var structureSet = data.referencedStructureSet;
        var ROIContour = data.referencedROIContour;

        if (data.visible === false || !structureSet.visible) {
          return "continue";
        }

        var isROIActive = freehand3DStore.getters.ROIContourIndex(data.seriesInstanceUid, data.structureSetUid, data.ROIContourUid) === freehand3DStore.getters.activeROIContourIndex(data.seriesInstanceUid);
        draw(context, function (context) {
          var color = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolColors"].getColorIfActive(data);
          var fillColor;
          var points = data.handles.points;

          if (data.active && !structureSet.isLocked) {
            if (data.handles.invalidHandlePlacement) {
              color = config.invalidColor;
              fillColor = config.invalidColor;
            } else {
              color = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolColors"].getColorIfActive(data);
              fillColor = cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["toolColors"].getFillColor();
            }
          } else {
            color = ROIContour.color;
            fillColor = ROIContour.color;
          }

          if (isROIActive && data.interpolated) {
            context.globalAlpha = config.interpolatedAlpha;
          }

          if (data.handles.points.length) {
            for (var j = 0; j < points.length; j++) {
              var lines = _toConsumableArray(points[j].lines);

              if (j === points.length - 1 && !data.polyBoundingBox) {
                // If it's still being actively drawn, keep the last line to
                // The mouse location
                lines.push(config.mouseLocation.handles.start);
              }

              drawJoinedLines(context, eventData.element, data.handles.points[j], lines, {
                color: color
              });
            }
          }

          context.globalAlpha = 1.0; // Draw handles

          var options = {
            color: color,
            fill: fillColor
          };

          if (isROIActive && data.interpolated) {
            // Render dotted line
            options.handleRadius = config.interpolatedHandleRadius;
            drawHandles(context, eventData, points, options);
          } else if (config.alwaysShowHandles || data.active && data.polyBoundingBox) {
            // Render all handles
            options.handleRadius = config.activeHandleRadius;
            drawHandles(context, eventData, points, options);
          }

          if (data.canComplete) {
            // Draw large handle at the origin if can complete drawing
            options.handleRadius = config.completeHandleRadius;
            drawHandles(context, eventData, [points[0]], options);
          }

          if (data.active && !data.polyBoundingBox) {
            // Draw handle at origin and at mouse if actively drawing
            options.handleRadius = config.activeHandleRadius;
            drawHandles(context, eventData, config.mouseLocation.handles, options);
            drawHandles(context, eventData, [points[0]], options);
          } // Define variables for the area and mean/standard deviation


          var area, meanStdDev, meanStdDevSUV; // Perform a check to see if the tool has been invalidated. This is to prevent
          // Unnecessary re-calculation of the area, mean, and standard deviation if the
          // Image is re-rendered but the tool has not moved (e.g. during a zoom)

          if (data.invalidated === false) {
            // If the data is not invalidated, retrieve it from the toolState
            meanStdDev = data.meanStdDev;
            meanStdDevSUV = data.meanStdDevSUV;
            area = data.area;
          } else if (!data.active) {
            // If the data has been invalidated, and the tool is not currently active,
            // We need to calculate it again.
            // Retrieve the bounds of the ROI in image coordinates
            var bounds = {
              left: points[0].x,
              right: points[0].x,
              bottom: points[0].y,
              top: points[0].x
            };

            for (var _i = 0; _i < points.length; _i++) {
              bounds.left = Math.min(bounds.left, points[_i].x);
              bounds.right = Math.max(bounds.right, points[_i].x);
              bounds.bottom = Math.min(bounds.bottom, points[_i].y);
              bounds.top = Math.max(bounds.top, points[_i].y);
            }

            var polyBoundingBox = {
              left: bounds.left,
              top: bounds.bottom,
              width: Math.abs(bounds.right - bounds.left),
              height: Math.abs(bounds.top - bounds.bottom)
            }; // Store the bounding box information for the text box

            data.polyBoundingBox = polyBoundingBox; // First, make sure this is not a color image, since no mean / standard
            // Deviation will be calculated for color images.

            if (!image.color) {
              // Retrieve the array of pixels that the ROI bounds cover
              var pixels = Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["getPixels"])(element, polyBoundingBox.left, polyBoundingBox.top, polyBoundingBox.width, polyBoundingBox.height); // Calculate the mean & standard deviation from the pixels and the object shape

              meanStdDev = calculateFreehandStatistics.call(_this2, pixels, polyBoundingBox, points);

              if (modality === 'PT') {
                // If the image is from a PET scan, use the DICOM tags to
                // Calculate the SUV from the mean and standard deviation.
                // Note that because we are using modality pixel values from getPixels, and
                // The calculateSUV routine also rescales to modality pixel values, we are first
                // Returning the values to storedPixel values before calcuating SUV with them.
                // TODO: Clean this up? Should we add an option to not scale in calculateSUV?
                meanStdDevSUV = {
                  mean: calculateSUV(image, (meanStdDev.mean - image.intercept) / image.slope),
                  stdDev: calculateSUV(image, (meanStdDev.stdDev - image.intercept) / image.slope)
                };
              } // If the mean and standard deviation values are sane, store them for later retrieval


              if (meanStdDev && !isNaN(meanStdDev.mean)) {
                data.meanStdDev = meanStdDev;
                data.meanStdDevSUV = meanStdDevSUV;
              }
            } // Retrieve the pixel spacing values, and if they are not
            // Real non-zero values, set them to 1


            var columnPixelSpacing = image.columnPixelSpacing || 1;
            var rowPixelSpacing = image.rowPixelSpacing || 1;
            var scaling = columnPixelSpacing * rowPixelSpacing;
            area = freehandArea(points, scaling); // If the area value is sane, store it for later retrieval

            if (!isNaN(area)) {
              data.area = area;
            } // Set the invalidated flag to false so that this data won't automatically be recalculated


            data.invalidated = false;
          } // Only render text if polygon ROI has been completed, and is active,
          // Or config is set to show the textBox all the time


          if (data.polyBoundingBox && (freehand3DStore.state.displayStats || data.active)) {
            // If the textbox has not been moved by the user, it should be displayed on the right-most
            // Side of the tool.
            if (!data.handles.textBox.hasMoved) {
              // Find the rightmost side of the polyBoundingBox at its vertical center, and place the textbox here
              // Note that this calculates it in image coordinates
              data.handles.textBox.x = data.polyBoundingBox.left + data.polyBoundingBox.width;
              data.handles.textBox.y = data.polyBoundingBox.top + data.polyBoundingBox.height / 2;
            }

            var text = textBoxText.call(_this2, data);
            drawLinkedTextBox(context, element, data.handles.textBox, text, points, textBoxAnchorPoints, color, lineWidth, 0, true);
          }
        });
      };

      for (var i = 0; i < toolState.data.length; i++) {
        var _ret = _loop(i);

        if (_ret === "continue") continue;
      }

      function textBoxText(data) {
        var ROIContour = data.referencedROIContour;
        var structureSet = data.referencedStructureSet;
        var meanStdDev = data.meanStdDev,
            meanStdDevSUV = data.meanStdDevSUV,
            area = data.area; // Define an array to store the rows of text for the textbox

        var textLines = [];
        textLines.push(ROIContour.name);

        if (structureSet.name === 'DEFAULT') {
          textLines.push('Working ROI Collection');
        } else {
          textLines.push(structureSet.name);
        } // If the mean and standard deviation values are present, display them


        if (meanStdDev && meanStdDev.mean !== undefined) {
          // If the modality is CT, add HU to denote Hounsfield Units
          var moSuffix = '';

          if (modality === 'CT') {
            moSuffix = ' HU';
          } // Create a line of text to display the mean and any units that were specified (i.e. HU)


          var meanText = "Mean: ".concat(numbersWithCommas(meanStdDev.mean.toFixed(2))).concat(moSuffix); // Create a line of text to display the standard deviation and any units that were specified (i.e. HU)

          var stdDevText = "StdDev: ".concat(numbersWithCommas(meanStdDev.stdDev.toFixed(2))).concat(moSuffix); // If this image has SUV values to display, concatenate them to the text line

          if (meanStdDevSUV && meanStdDevSUV.mean !== undefined) {
            var SUVtext = ' SUV: ';
            meanText += SUVtext + numbersWithCommas(meanStdDevSUV.mean.toFixed(2));
            stdDevText += SUVtext + numbersWithCommas(meanStdDevSUV.stdDev.toFixed(2));
          } // Add these text lines to the array to be displayed in the textbox


          textLines.push(meanText);
          textLines.push(stdDevText);
        } // If the area is a sane value, display it


        if (area) {
          // Determine the area suffix based on the pixel spacing in the image.
          // If pixel spacing is present, use millimeters. Otherwise, use pixels.
          // This uses Char code 178 for a superscript 2
          var suffix = " mm".concat(String.fromCharCode(178));

          if (!image.rowPixelSpacing || !image.columnPixelSpacing) {
            suffix = " pixels".concat(String.fromCharCode(178));
          } // Create a line of text to display the area and its units


          var areaText = "Area: ".concat(numbersWithCommas(area.toFixed(2))).concat(suffix); // Add this text line to the array to be displayed in the textbox

          textLines.push(areaText);
        }

        textLines.push("".concat(ROIContour.polygonCount, " contours"));
        return textLines;
      }

      function textBoxAnchorPoints(points) {
        return points;
      }
    }
    /**
     * Ends the active drawing loop and completes the polygon.
     *
     * @private
     * @param {Object} element - The element on which the roi is being drawn.
     * @param {Object} handleNearby - the handle nearest to the mouse cursor.
     */

  }, {
    key: "_endDrawing",
    value: function _endDrawing(element, handleNearby) {
      var toolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["getToolState"])(element, this.name);
      var config = this.configuration;
      var data = toolState.data[config.currentTool];
      var points = data.handles.points;
      data.active = false;
      data.highlight = false;
      data.handles.invalidHandlePlacement = false; // Connect the end handle to the origin handle

      if (handleNearby !== undefined) {
        points[config.currentHandle - 1].lines.push(points[0]);
      }

      if (this._modifying) {
        this._modifying = false;
        data.invalidated = true;
        data.interpolated = false;
      } // Reset the current handle


      config.currentHandle = 0;
      config.currentTool = -1;
      data.canComplete = false;

      if (this._drawing) {
        this._drawing = false;

        this._deactivateDraw(element);
      }

      if (modules.freehand3D.state.interpolate) {
        Object(_util_freehandInterpolate_interpolate_js__WEBPACK_IMPORTED_MODULE_4__["default"])(data, element);
      }

      Object(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__["updateImage"])(element);
    }
    /**
     * Custom callback for when toolData is deleted.
     *
     * @param  {Object} evt
     */

  }, {
    key: "_onMeasurementRemoved",
    value: function _onMeasurementRemoved(evt) {
      var eventData = evt.detail;

      if (eventData.toolType !== this.name) {
        return;
      }

      var measurementData = eventData.measurementData;

      this._freehand3DStore.setters.decrementPolygonCount(measurementData.seriesInstanceUid, measurementData.structureSetUid, measurementData.ROIContourUid);
    }
  }, {
    key: "passiveCallback",
    value: function passiveCallback(element) {
      this._closeToolIfDrawing(element);

      this._addMeasurementRemovedListener(element);
    }
  }, {
    key: "enabledCallback",
    value: function enabledCallback(element) {
      this._closeToolIfDrawing(element);

      this._addMeasurementRemovedListener(element);
    }
  }, {
    key: "activeCallback",
    value: function activeCallback(element) {
      this._addMeasurementRemovedListener(element);
    }
  }, {
    key: "disabledCallback",
    value: function disabledCallback(element) {
      this._closeToolIfDrawing(element);

      element.removeEventListener(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].MEASUREMENT_REMOVED, this._onMeasurementRemoved);
    }
  }, {
    key: "_addMeasurementRemovedListener",
    value: function _addMeasurementRemovedListener(element) {
      element.removeEventListener(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].MEASUREMENT_REMOVED, this._onMeasurementRemoved);
      element.addEventListener(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["EVENTS"].MEASUREMENT_REMOVED, this._onMeasurementRemoved);
    }
  }]);

  return FreehandRoi3DTool;
}(cornerstone_tools__WEBPACK_IMPORTED_MODULE_2__["FreehandRoiTool"]);



function defaultFreehandConfiguration() {
  return {
    mouseLocation: {
      handles: {
        start: {
          highlight: true,
          active: true
        }
      }
    },
    spacing: 1,
    interpolatedHandleRadius: 0.5,
    interpolatedAlpha: 0.5,
    activeHandleRadius: 3,
    completeHandleRadius: 6,
    completeHandleRadiusTouch: 28,
    alwaysShowHandles: false,
    invalidColor: 'crimson',
    currentHandle: 0,
    currentTool: -1
  };
}

function preventPropagation(evt) {
  evt.stopImmediatePropagation();
  evt.stopPropagation();
  evt.preventDefault();
}

/***/ }),

/***/ "./src/tools/n-dimensional-flood-fill.js":
/*!***********************************************!*\
  !*** ./src/tools/n-dimensional-flood-fill.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
 // https://github.com/tuzz/n-dimensional-flood-fill

module.exports = function (options) {
  var getter, seed, onFlood, onBoundary, equals, diagonals, startNode, permutations, stack, flooded, visits, bounds;

  var initialize = function initialize() {
    getter = options.getter;
    seed = options.seed;
    onFlood = options.onFlood || noop;
    onBoundary = options.onBoundary || noop;
    equals = options.equals || defaultEquals;
    diagonals = options.diagonals || false;
    startNode = get(seed);
    permutations = prunedPermutations();
    stack = [];
    flooded = [];
    visits = {};
    bounds = {};
  };

  var main = function main() {
    stack.push({
      currentArgs: seed
    });

    while (stack.length > 0) {
      flood(stack.pop());
    }

    return {
      flooded: flooded,
      boundaries: boundaries()
    };
  };

  var flood = function flood(job) {
    var getArgs = job.currentArgs;
    var preletgs = job.previousArgs;

    if (visited(getArgs)) {
      return;
    }

    markAsVisited(getArgs);

    if (member(getArgs)) {
      markAsFlooded(getArgs);
      pushAdjacent(getArgs);
    } else {
      markAsBoundary(preletgs);
    }
  };

  var visited = function visited(key) {
    return visits[key] === true;
  };

  var markAsVisited = function markAsVisited(key) {
    visits[key] = true;
  };

  var member = function member(getArgs) {
    var node = safely(get, [getArgs]);
    return safely(equals, [node, startNode]);
  };

  var markAsFlooded = function markAsFlooded(getArgs) {
    flooded.push(getArgs);
    onFlood.apply(undefined, getArgs);
  };

  var markAsBoundary = function markAsBoundary(preletgs) {
    bounds[preletgs] = preletgs;
    onBoundary.apply(undefined, preletgs);
  };

  var pushAdjacent = function pushAdjacent(getArgs) {
    for (var i = 0; i < permutations.length; i += 1) {
      var perm = permutations[i];
      var nextArgs = getArgs.slice(0);

      for (var j = 0; j < getArgs.length; j += 1) {
        nextArgs[j] += perm[j];
      }

      stack.push({
        currentArgs: nextArgs,
        previousArgs: getArgs
      });
    }
  };

  var get = function get(getArgs) {
    return getter.apply(undefined, getArgs);
  };

  var safely = function safely(f, args) {
    try {
      return f.apply(undefined, args);
    } catch (error) {}
  };

  var noop = function noop() {};

  var defaultEquals = function defaultEquals(a, b) {
    return a === b;
  };

  var prunedPermutations = function prunedPermutations() {
    var permutations = permute(seed.length);
    return permutations.filter(function (perm) {
      var count = countNonZeroes(perm);
      return count !== 0 && (count === 1 || diagonals);
    });
  };

  var permute = function permute(length) {
    var perms = [];

    var permutation = function permutation(string) {
      return string.split('').map(function (c) {
        return parseInt(c, 10) - 1;
      });
    };

    for (var i = 0; i < Math.pow(3, length); i += 1) {
      var string = lpad(i.toString(3), '0', length);
      perms.push(permutation(string));
    }

    return perms;
  };

  var lpad = function lpad(string, character, length) {
    var array = new Array(length + 1);
    var pad = array.join(character);
    return (pad + string).slice(-length);
  };

  var countNonZeroes = function countNonZeroes(array) {
    var count = 0;

    for (var i = 0; i < array.length; i += 1) {
      if (array[i] !== 0) {
        count += 1;
      }
    }

    return count;
  };

  var boundaries = function boundaries() {
    var array = [];

    for (var key in bounds) {
      if (bounds.hasOwnProperty(key)) {
        array.unshift(bounds[key]);
      }
    }

    return array;
  };

  initialize();
  return main();
};

/***/ }),

/***/ "./src/util/brushMetadataIO.js":
/*!*************************************!*\
  !*** ./src/util/brushMetadataIO.js ***!
  \*************************************/
/*! exports provided: newSegmentInput, editSegmentInput, newSegment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newSegmentInput", function() { return newSegmentInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "editSegmentInput", function() { return editSegmentInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "newSegment", function() { return newSegment; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./generateBrushMetadata.js */ "./src/util/generateBrushMetadata.js");


var brushModule = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules.brush;
function newSegmentInput(segIndex, metadata) {
  brushMetdataInput(segIndex, metadata, segmentInputCallback);
}
function editSegmentInput(segIndex, metadata) {
  brushMetdataInput(segIndex, metadata, segmentInputCallback);
}
function newSegment(enabledElement) {
  if (!enabledElement) {
    return [];
  }

  var activeElement = enabledElement.element;
  var segmentMetadata = brushModule.getters.metadata(activeElement);

  if (!Array.isArray(segmentMetadata)) {
    var _brushModule$getters$ = brushModule.getters.getAndCacheLabelmap2D(activeElement),
        labelmap3D = _brushModule$getters$.labelmap3D;

    segmentMetadata = labelmap3D.metadata;
  }

  var colormap = brushModule.getters.activeCornerstoneColorMap(activeElement);
  var numberOfColors = colormap.getNumberOfColors();

  for (var i = 1; i < numberOfColors; i++) {
    if (!segmentMetadata[i]) {
      newSegmentInput(i);
      break;
    }
  }
}

function segmentInputCallback(data) {
  if (!data) {
    return;
  }

  var label = data.label,
      categoryUID = data.categoryUID,
      typeUID = data.typeUID,
      modifierUID = data.modifierUID,
      segIndex = data.segIndex,
      element = data.element;
  var metadata = Object(_generateBrushMetadata_js__WEBPACK_IMPORTED_MODULE_1__["default"])(label, categoryUID, typeUID, modifierUID); // TODO -> support for multiple labelmaps.

  brushModule.setters.metadata(element, 0, segIndex, metadata);
  brushModule.setters.activeSegmentIndex(element, segIndex);
}
/**
 * Opens the brushMetadata dialog.
 *
 */
// TODO -> Need to make this into a react-modal?


function brushMetdataInput(segIndex, metadata, callback) {
  console.log('TODO: Remake brushMetadata input menu!');
  /*
  const brushMetadataDialog = document.getElementById('brushMetadataDialog');
  const dialogData = Blaze.getData(brushMetadataDialog);
   dialogData.brushMetadataDialogSegIndex.set(segIndex);
  dialogData.brushMetadataDialogMetadata.set(metadata);
  dialogData.brushMetadataDialogCallback.set(callback);
   brushMetadataDialog.showModal();
  */
}

/***/ }),

/***/ "./src/util/classes/Polygon.js":
/*!*************************************!*\
  !*** ./src/util/classes/Polygon.js ***!
  \*************************************/
/*! exports provided: Polygon */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Polygon", function() { return Polygon; });
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
var Polygon =
/*#__PURE__*/
function () {
  function Polygon(points, sopInstanceUid, seriesInstanceUid, structureSetUid, ROIContourUid, polygonUid, frameNumber, interpolated) {
    _classCallCheck(this, Polygon);

    this._polyPoints = this._deepCopyPoints(points);
    this._sopInstanceUid = sopInstanceUid;
    this._seriesInstanceUid = seriesInstanceUid;
    this._structureSetUid = structureSetUid;
    this._ROIContourUid = ROIContourUid;
    this._polygonUid = polygonUid;
    this._frameNumber = frameNumber;
    this._interpolated = interpolated;
  }

  _createClass(Polygon, [{
    key: "_deepCopyPoints",
    value: function _deepCopyPoints(points) {
      // Creates a deep copy of the points array
      var polyPoints = [];
      var isZ = points[0].z !== undefined;

      for (var i = 0; i < points.length; i++) {
        polyPoints.push({
          x: points[i].x,
          y: points[i].y
        });

        if (isZ) {
          polyPoints[i].z = points[i].z;
        }
      }

      return polyPoints;
    }
  }, {
    key: "getFreehandToolData",
    value: function getFreehandToolData(importType) {
      var seriesInstanceUid = this._seriesInstanceUid;
      var structureSetUid = this._structureSetUid;
      var ROIContourUid = this._ROIContourUid;
      var freehand3DStore = modules.freehand3D;
      var referencedROIContour = freehand3DStore.getters.ROIContour(seriesInstanceUid, structureSetUid, ROIContourUid);
      var referencedStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, structureSetUid);
      var data = {
        uid: this._polygonUid,
        seriesInstanceUid: seriesInstanceUid,
        structureSetUid: structureSetUid,
        ROIContourUid: ROIContourUid,
        referencedROIContour: referencedROIContour,
        referencedStructureSet: referencedStructureSet,
        visible: true,
        active: false,
        invalidated: true,
        handles: {
          points: []
        }
      };

      if (this._sopInstanceUid) {
        data.sopInstanceUID = this._sopInstanceUid;
      }

      if (this._interpolated) {
        data.interpolated = true;
      }

      this._generatePoints(data.handles.points);

      data.handles.textBox = {
        active: false,
        hasMoved: false,
        movesIndependently: false,
        drawnIndependently: true,
        allowedOutsideImage: true,
        hasBoundingBox: true
      };
      data.polyBoundingBox = {};
      data.toBeScaled = importType;
      return data;
    }
  }, {
    key: "_generatePoints",
    value: function _generatePoints(points) {
      // Construct data.handles.points array
      for (var i = 0; i < this._polyPoints.length; i++) {
        points.push(this._deepCopyOnePoint(i));
      } // Generate lines to be drawn


      for (var _i = 0; _i < points.length; _i++) {
        if (_i === points.length - 1) {
          points[_i].lines.push(points[0]);
        } else {
          points[_i].lines.push(points[_i + 1]);
        }
      }
    }
  }, {
    key: "_deepCopyOnePoint",
    value: function _deepCopyOnePoint(i) {
      var point = {
        x: this._polyPoints[i].x,
        y: this._polyPoints[i].y,
        lines: []
      };

      if (this._polyPoints[i].z !== undefined) {
        point.z = this._polyPoints[i].z;
      }

      return point;
    }
  }, {
    key: "polyPoints",
    get: function get() {
      return this._polyPoints;
    }
  }, {
    key: "sopInstanceUid",
    get: function get() {
      return this._sopInstanceUid;
    }
  }, {
    key: "uid",
    get: function get() {
      return this._polygonUid;
    }
  }, {
    key: "frameNumber",
    get: function get() {
      return this._frameNumber;
    }
  }]);

  return Polygon;
}();

/***/ }),

/***/ "./src/util/freehandInterpolate/generateInterpolationData.js":
/*!*******************************************************************!*\
  !*** ./src/util/freehandInterpolate/generateInterpolationData.js ***!
  \*******************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);

var globalToolStateManager = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["globalImageIdSpecificToolStateManager"];
/**
 * generateInterpolationList - Generate the list of contours to interpolate,
 * including whether they are new contours, or interpolated contours that need
 * to be updated.
 *
 * @param  {object} toolData The tool data of the freehand3D contour.
 * @return {object} An object containing the ROIContourData and the
 * interpolationList.
 */

/* harmony default export */ __webpack_exports__["default"] = (function (toolData, element) {
  var ROIContourUid = toolData.ROIContourUid;

  var imageIds = _getImageIdsOfActiveSeries(element);

  var ROIContourData = _getROIContourData(imageIds, ROIContourUid);

  var extent = _getExtentOfRegion(ROIContourData);

  var sliceEdited = _getSlicePositionOfToolData(ROIContourData, toolData.uid);

  var interpolationList = []; // Check if contours between the extent can be interpolated.

  for (var i = extent[0] + 1; i <= extent[1] - 1; i++) {
    if (_sliceNeedsInterpolating(ROIContourData, i)) {
      var contourPair = _getBoundingPair(i, extent, ROIContourData);

      if (contourPair && (contourPair[0] === sliceEdited || contourPair[1] === sliceEdited)) {
        _appendinterpolationList(contourPair, interpolationList);
      }
    }
  }

  return {
    ROIContourData: ROIContourData,
    interpolationList: interpolationList
  };
});
/**
 * _getSlicePositionOfToolData - Finds the slice that was edited.
 *
 * @param  {type} ROIContourData description
 * @param  {type} polygonUid     description
 * @return {type}                description
 */

function _getSlicePositionOfToolData(ROIContourData, polygonUid) {
  for (var i = 0; i < ROIContourData.length; i++) {
    if (ROIContourData[i].contours) {
      var contours = ROIContourData[i].contours;

      for (var j = 0; j < contours.length; j++) {
        if (contours[j].uid === polygonUid) {
          return i;
        }
      }
    }
  }

  return;
}
/**
 * _getImageIdsOfActiveSeries - returns an array of the imageIds for the current
 * active series.
 *
 * @return {String[]} An array of imageIds.
 */


function _getImageIdsOfActiveSeries(element) {
  var stackToolState = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["getToolState"])(element, 'stack');
  return stackToolState.data[0].imageIds;
}
/**
 * _getROIContourData - Generates a list of the slice locations of the 2D
 * polygons that make up the ROIContour.
 *
 * @param  {String[]} imageIds  An array of Image Ids.
 * @param  {type} ROIContourUid The UID of the ROIContour.
 * @return {object[]}           The list of contour locations in the stack.
 */


function _getROIContourData(imageIds, ROIContourUid) {
  var ROIContourData = [];
  var toolStateManager = globalToolStateManager.saveToolState();

  for (var i = 0; i < imageIds.length; i++) {
    var imageId = imageIds[i];
    var imageToolState = toolStateManager[imageId];

    if (!imageToolState || !imageToolState.freehandRoi) {
      ROIContourData.push({
        imageId: imageId
      });
    } else {
      var contours = imageToolState.freehandRoi.data.filter(function (contour) {
        return contour.ROIContourUid === ROIContourUid;
      });
      var contoursOnSlice = {
        imageId: imageId
      };

      if (contours.length) {
        contoursOnSlice.contours = contours;
      }

      ROIContourData.push(contoursOnSlice);
    }
  }

  return ROIContourData;
}
/**
 * _getExtentOfRegion - Returns a 2 element array with the slice locations of
 * top and bottom polygon of the ROIContour.
 *
 * @param  {object} ROIContourData  Data on the slice location of contours
 *                                  for the ROIContour.
 * @return {Number[]}               The slice locations of the top and bottom
 *                                  polygon of the ROIContour.
 */


function _getExtentOfRegion(ROIContourData) {
  var extent = [];

  for (var i = 0; i < ROIContourData.length; i++) {
    if (ROIContourData[i].contours) {
      extent.push(i);
      break;
    }
  }

  for (var _i = ROIContourData.length - 1; _i >= 0; _i--) {
    if (ROIContourData[_i].contours) {
      extent.push(_i);
      break;
    }
  }

  return extent;
}
/**
 * _sliceNeedsInterpolating - Check whether there are no contours on this
 * slice, or one which is an interpolated contour.
 *
 * @param  {object} ROIContourData  Data on the slice location of contours
 *                                  for the ROIContour.
 * @param  {Number} sliceIndex      The slice index.
 * @return {boolean}                Whether or not the slice needs interpolating.
 */


function _sliceNeedsInterpolating(ROIContourData, sliceIndex) {
  return !ROIContourData[sliceIndex].contours || ROIContourData[sliceIndex].contours.length === 1 && ROIContourData[sliceIndex].contours[0].interpolated;
}
/**
 * _appendinterpolationList - If the contour on slice i can be updated, add it to the
 * interpolationList.
 *
 * @param  {Number} sliceIndex      The slice index.
 * @param  {Number[]} extent        The extent of slice occupancy of the
 *                                  ROIContour.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                  for the ROIContour.
 * @param  {object[]} interpolationList The list of contours to be interpolated.
 * @return {null}
 */


function _appendinterpolationList(contourPair, interpolationList) {
  if (!interpolationList[contourPair[0]]) {
    interpolationList[contourPair[0]] = {
      pair: contourPair,
      list: []
    };
  }
}
/**
 * _getBoundingPair - Given the slice index and extent of the ROIContour,
 * get the pair of polygons to use for interpolation of the slice. Returns
 * undefined if there is an ambiguity and interpolation can't take place.
 *
 * @param  {Number} sliceIndex   The slice index.
 * @param  {Number[]} extent        The extent of slice occupancy of the
 *                                  ROIContour.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                  for the ROIContour.
 * @return {Number[] || undefined}  The pair of slice indicies, or undefined if
 * the contours to use for interpolation is ambiguous.
 */


function _getBoundingPair(sliceIndex, extent, ROIContourData) {
  var contourPair = [];
  var canInterpolate = true; // Check for nearest lowest sliceIndex containing contours.

  for (var i = sliceIndex - 1; i >= extent[0]; i--) {
    if (ROIContourData[i].contours) {
      var contours = ROIContourData[i].contours;

      if (contours[0].interpolated) {
        // This contour is interpolated. We need to
        // Find a solid contour to interpolate from.
        continue;
      }

      if (contours.length > 1) {
        canInterpolate = false;
      } // Found single, non interpolated contour to interpolate from.


      contourPair.push(i);
      break;
    }
  }

  if (!canInterpolate) {
    return;
  } // Check for nearest upper sliceIndex containing contours.


  for (var _i2 = sliceIndex + 1; _i2 <= extent[1]; _i2++) {
    if (ROIContourData[_i2].contours) {
      var _contours = ROIContourData[_i2].contours;

      if (_contours[0].interpolated) {
        // This contour is interpolated. We need to
        // Find a solid contour to interpolate from.
        continue;
      }

      if (_contours.length > 1) {
        canInterpolate = false;
      }

      contourPair.push(_i2);
      break;
    }
  }

  if (!canInterpolate) {
    return;
  }

  return contourPair;
}

/***/ }),

/***/ "./src/util/freehandInterpolate/interpolate.js":
/*!*****************************************************!*\
  !*** ./src/util/freehandInterpolate/interpolate.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _classes_Polygon_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../classes/Polygon.js */ "./src/util/classes/Polygon.js");
/* harmony import */ var _generateUID_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../generateUID.js */ "./src/util/generateUID.js");
/* harmony import */ var _generateInterpolationData_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./generateInterpolationData.js */ "./src/util/freehandInterpolate/generateInterpolationData.js");




var globalToolStateManager = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["globalImageIdSpecificToolStateManager"];
var dP = 0.2; // Aim for < 0.2mm between interpolated nodes when super-sampling.

var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
/**
 * interpolate - Interpolate missing contours in the ROIContour.
 *
 * @param  {object} toolData The tool data of the freehand3D contour.
 * @return {null}
 */

/* harmony default export */ __webpack_exports__["default"] = (function (toolData, element) {
  var _generateInterpolatio = Object(_generateInterpolationData_js__WEBPACK_IMPORTED_MODULE_3__["default"])(toolData, element),
      ROIContourData = _generateInterpolatio.ROIContourData,
      interpolationList = _generateInterpolatio.interpolationList;

  for (var i = 0; i < interpolationList.length; i++) {
    if (interpolationList[i]) {
      _linearlyInterpolateBetween(interpolationList[i].list, interpolationList[i].pair, ROIContourData);
    }
  }
});
/**
 * _linearlyInterpolateBetween - Linearly interpolate all the slices in the
 * indicies array between the contourPair.
 *
 * @param  {Number[]} indicies     An array of slice indicies to interpolate.
 * @param  {Number[]} contourPair  The pair of contours to interpolate between.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                    for the ROIContour.
 * @return {null}
 */

function _linearlyInterpolateBetween(indicies, contourPair, ROIContourData) {
  var c1 = _generateClosedContour(ROIContourData[contourPair[0]].contours[0].handles.points);

  var c2 = _generateClosedContour(ROIContourData[contourPair[1]].contours[0].handles.points);

  var _generateInterpolatio2 = _generateInterpolationContourPair(c1, c2),
      c1Interp = _generateInterpolatio2.c1Interp,
      c2Interp = _generateInterpolatio2.c2Interp; // Using the newly constructed contours, interpolate each ROI.


  indicies.forEach(function (index) {
    _linearlyInterpolateContour(c1Interp, c2Interp, index, contourPair, ROIContourData, c1.x.length > c2.x.length);
  });
}
/**
 * _linearlyInterpolateContour - Inserts a linearly interpolated contour at
 * specified slice index.
 *
 * @param  {object} c1Interp       The first reference contour.
 * @param  {object} c2Interp       The second reference contour.
 * @param  {Number} sliceIndex       The slice index to interpolate.
 * @param  {Number{}} contourPair    The slice indicies of the reference contours.
 * @param  {object[]} ROIContourData  Data for the slice location of contours
 *                                  for the ROIContour.
 * @param  {boolean} c1HasMoreNodes True if c1 has more nodes than c2.
 * @return {null}
 */


function _linearlyInterpolateContour(c1Interp, c2Interp, sliceIndex, contourPair, ROIContourData, c1HasMoreNodes) {
  var zInterp = (sliceIndex - contourPair[0]) / (contourPair[1] - contourPair[0]);

  var interpolated2DContour = _generateInterpolatedOpenContour(c1Interp, c2Interp, zInterp, c1HasMoreNodes);

  var c1Metadata = ROIContourData[contourPair[0]].contours[0];

  if (ROIContourData[sliceIndex].contours) {
    _editInterpolatedContour(interpolated2DContour, ROIContourData[sliceIndex].imageId, c1Metadata);
  } else {
    _addInterpolatedContour(interpolated2DContour, ROIContourData[sliceIndex].imageId, c1Metadata);
  }
}
/**
 * _generateInterpolationContourPair - generates two aligned contours with an
 * equal number of nodes from which an intermediate contour may be interpolated.
 *
 * @param  {object} c1 The first contour.
 * @param  {object} c2 The second contour.
 * @return {object}  An object containing the two contours.
 */


function _generateInterpolationContourPair(c1, c2) {
  var cumPerim1 = _getCumulativePerimeter(c1);

  var cumPerim2 = _getCumulativePerimeter(c2);

  var interpNodes = Math.max(Math.ceil(cumPerim1[cumPerim1.length - 1] / dP), Math.ceil(cumPerim2[cumPerim2.length - 1] / dP));

  var cumPerim1Norm = _normalisedCumulativePerimeter(cumPerim1);

  var cumPerim2Norm = _normalisedCumulativePerimeter(cumPerim2);

  var numNodes1 = interpNodes + c2.x.length;
  var numNodes2 = interpNodes + c1.x.length; // concatinate p && cumPerimNorm

  var perim1Interp = _getInterpolatedPerim(numNodes1, cumPerim1Norm);

  var perim2Interp = _getInterpolatedPerim(numNodes2, cumPerim2Norm);

  var perim1Ind = _getIndicatorArray(c1, numNodes1);

  var perim2Ind = _getIndicatorArray(c2, numNodes2);

  var nodesPerSegment1 = _getNodesPerSegment(perim1Interp, perim1Ind);

  var nodesPerSegment2 = _getNodesPerSegment(perim2Interp, perim2Ind);

  var c1i = _getSuperSampledContour(c1, nodesPerSegment1);

  var c2i = _getSuperSampledContour(c2, nodesPerSegment2); // Keep c2i fixed and shift the starting node of c1i to minimise the total length of segments.


  _shiftSuperSampledContourInPlace(c1i, c2i);

  return _reduceContoursToOriginNodes(c1i, c2i);
}
/**
 * _addInterpolatedContour - Adds a new contour to the imageId.
 *
 * @param  {object} interpolated2DContour The polygon to add to the ROIContour.
 * @param  {String} imageId               The imageId to add the polygon to.
 * @param  {type} referencedToolData    The toolData of another polygon in the
 * ROIContour, to assign appropriate metadata to the new polygon.
 * @return {null}
 */


function _addInterpolatedContour(interpolated2DContour, imageId, referencedToolData) {
  var points = [];

  for (var i = 0; i < interpolated2DContour.x.length; i++) {
    points.push({
      x: interpolated2DContour.x[i],
      y: interpolated2DContour.y[i]
    });
  }

  var polygon = new _classes_Polygon_js__WEBPACK_IMPORTED_MODULE_1__["Polygon"](points, null, referencedToolData.seriesInstanceUid, referencedToolData.structureSetUid, referencedToolData.ROIContourUid, Object(_generateUID_js__WEBPACK_IMPORTED_MODULE_2__["default"])(), null, true);
  var toolStateManager = globalToolStateManager.saveToolState();

  if (!toolStateManager[imageId]) {
    toolStateManager[imageId] = {};
  }

  var imageToolState = toolStateManager[imageId];

  if (!imageToolState.freehandRoi) {
    imageToolState.freehandRoi = {};
    imageToolState.freehandRoi.data = [];
  } else if (!imageToolState.freehandRoi.data) {
    imageToolState.freehandRoi.data = [];
  }

  imageToolState.freehandRoi.data.push(polygon.getFreehandToolData(false));
  modules.freehand3D.setters.incrementPolygonCount(referencedToolData.seriesInstanceUid, referencedToolData.structureSetUid, referencedToolData.ROIContourUid);
}
/**
 * _editInterpolatedContour - Edits an interpolated polygon on the imageId
 * that corresponds to the specified ROIContour.
 *
 * @param  {object} interpolated2DContour The polygon to add to the ROIContour.
 * @param  {String} imageId               The imageId to add the polygon to.
 * @param  {type} referencedToolData    The toolData of another polygon in the
 * ROIContour, to assign appropriate metadata to the new polygon.
 * @return {null}
 */


function _editInterpolatedContour(interpolated2DContour, imageId, referencedToolData) {
  var toolStateManager = globalToolStateManager.saveToolState();
  var imageToolState = toolStateManager[imageId];

  if (!imageToolState) {
    throw new Error('Image toolstate does not exist. This should not be reached in this case!');
  } // Find the index of the polygon on this slice corresponding to
  // The ROIContour.


  var toolDataIndex;

  for (var i = 0; i < imageToolState.freehandRoi.data.length; i++) {
    if (imageToolState.freehandRoi.data[i].ROIContourUid === referencedToolData.ROIContourUid) {
      toolDataIndex = i;
      break;
    }
  }

  var oldPolygon = imageToolState.freehandRoi.data[toolDataIndex];
  var points = [];

  for (var _i = 0; _i < interpolated2DContour.x.length; _i++) {
    points.push({
      x: interpolated2DContour.x[_i],
      y: interpolated2DContour.y[_i]
    });
  }

  var updatedPolygon = new _classes_Polygon_js__WEBPACK_IMPORTED_MODULE_1__["Polygon"](points, null, oldPolygon.seriesInstanceUid, oldPolygon.structureSetUid, oldPolygon.ROIContourUid, oldPolygon.uid, null, true);
  imageToolState.freehandRoi.data[toolDataIndex] = updatedPolygon.getFreehandToolData(false);
}
/**
 * _generateInterpolatedOpenContour - Interpolate an open contour between c1ir
 * and c2ir at the zInterp position.
 *
 * @param  {object} c1ir            The interpolated c1 contour with
 *                                  superfluous nodes removed.
 * @param  {object} c2ir            The interpolated c2 contour with
 *                                  superfluous nodes removed.
 * @param  {Number} zInterp         The z- coordinate of the desired
 *                                  interpolation.
 * @param  {boolean} c1HasMoreNodes True if c1 has more original nodes
 *                                  than c2.
 * @return {object}                 The interpolated contour at z=zInterp.
 */


function _generateInterpolatedOpenContour(c1ir, c2ir, zInterp, c1HasMoreNodes) {
  var cInterp = {
    x: [],
    y: []
  };
  var indicies = c1HasMoreNodes ? c1ir.I : c2ir.I;

  for (var i = 0; i < c1ir.x.length; i++) {
    if (indicies[i]) {
      cInterp.x.push((1 - zInterp) * c1ir.x[i] + zInterp * c2ir.x[i]);
      cInterp.y.push((1 - zInterp) * c1ir.y[i] + zInterp * c2ir.y[i]);
    }
  }

  return cInterp;
}
/**
 * _reduceContoursToOriginNodes - Removes any nodes from the contours that don't
 * correspond to an original contour node.
 *
 * @param  {object} c1i The first super-sampled contour.
 * @param  {object} c2i The second super-sampled contour.
 * @return {object}     An object containing the two reduced contours.
 */


function _reduceContoursToOriginNodes(c1i, c2i) {
  var c1Interp = {
    x: [],
    y: [],
    I: []
  };
  var c2Interp = {
    x: [],
    y: [],
    I: []
  };

  for (var i = 0; i < c1i.x.length; i++) {
    if (c1i.I[i] || c2i.I[i]) {
      c1Interp.x.push(c1i.x[i]);
      c1Interp.y.push(c1i.y[i]);
      c1Interp.I.push(c1i.I[i]);
      c2Interp.x.push(c2i.x[i]);
      c2Interp.y.push(c2i.y[i]);
      c2Interp.I.push(c2i.I[i]);
    }
  }

  return {
    c1Interp: c1Interp,
    c2Interp: c2Interp
  };
}
/**
 * _shiftSuperSampledContourInPlace - Shifts the indicies of c1i around to
 * minimise: SUM (|c1i[i]-c2i[i]|) from 0 to N.
 *
 * @param  {object} c1i The contour to shift.
 * @param  {object} c2i The reference contour.
 * @modifies c1i
 */


function _shiftSuperSampledContourInPlace(c1i, c2i) {
  var c1iLength = c1i.x.length;
  var optimal = {
    startingNode: 0,
    totalSquaredXYLengths: Infinity
  };

  for (var startingNode = 0; startingNode < c1iLength; startingNode++) {
    var _node = startingNode; // NOTE: 1) Ignore calculating Z, as the sum of all squared Z distances will always be a constant.
    // NOTE: 2) Don't need actual length, so don't worry about square rooting.

    var totalSquaredXYLengths = 0;

    for (var itteration = 0; itteration < c1iLength; itteration++) {
      totalSquaredXYLengths += Math.pow(c1i.x[_node] - c2i.x[itteration], 2) + Math.pow(c1i.y[_node] - c2i.y[itteration], 2);
      _node++;
      if (_node === c1iLength) _node = 0;
    }

    if (totalSquaredXYLengths < optimal.totalSquaredXYLengths) {
      optimal.totalSquaredXYLengths = totalSquaredXYLengths;
      optimal.startingNode = startingNode;
    }
  }

  var node = optimal.startingNode;

  _shiftCircularArray(c1i.x, node);

  _shiftCircularArray(c1i.y, node);

  _shiftCircularArray(c1i.I, node);
}
/**
 * _shiftCircularArray - Shift the circular array by the count.
 *
 * @param  {*[]} arr   The array.
 * @param  {Number} count The shift.
 * @return {*[]}       The shifted array.
 */


function _shiftCircularArray(arr, count) {
  count -= arr.length * Math.floor(count / arr.length);
  arr.push.apply(arr, arr.splice(0, count));
  return arr;
}
/**
 * _getSuperSampledContour - Generates a super sampled contour with additional
 * nodes added per segment.
 *
 * @param  {object} c                 The original contour.
 * @param  {Number[]} nodesPerSegment An array of the number of nodes to add
 *                                    per line segment.
 * @return {object}                   The super sampled contour.
 */


function _getSuperSampledContour(c, nodesPerSegment) {
  var ci = {
    x: [],
    y: [],
    I: []
  }; // Length - 1, produces 'open' polygon.

  for (var n = 0; n < c.x.length - 1; n++) {
    // Add original node.
    ci.x.push(c.x[n]);
    ci.y.push(c.y[n]);
    ci.I.push(true); // Add linerally interpolated nodes.

    var xSpacing = (c.x[n + 1] - c.x[n]) / (nodesPerSegment[n] + 1);
    var ySpacing = (c.y[n + 1] - c.y[n]) / (nodesPerSegment[n] + 1); // Add other nodesPerSegment - 1 other nodes (as already put in original node).

    for (var i = 0; i < nodesPerSegment[n] - 1; i++) {
      ci.x.push(ci.x[ci.x.length - 1] + xSpacing);
      ci.y.push(ci.y[ci.y.length - 1] + ySpacing);
      ci.I.push(false);
    }
  }

  return ci;
}
/**
 * _getNodesPerSegment - Returns an array of the number of interpolated nodes
 * to be added along each line segment of a polygon.
 *
 * @param  {Number[]} perimInterp Normalised array of original and added nodes.
 * @param  {boolean[]} perimInd    The indicator array describing the location of
 *                            the original contour's nodes.
 * @return {Number[]}         An array containging the number of nodes to be
 *                            added per original line segment.
 */


function _getNodesPerSegment(perimInterp, perimInd) {
  var idx = [];

  for (var i = 0; i < perimInterp.length; ++i) {
    idx[i] = i;
  }

  idx.sort(function (a, b) {
    return perimInterp[a] < perimInterp[b] ? -1 : perimInterp[a] > perimInterp[b];
  });
  var perimIndSorted = [];

  for (var _i2 = 0; _i2 < perimInd.length; _i2++) {
    perimIndSorted.push(perimInd[idx[_i2]]);
  }

  var indiciesOfOriginNodes = perimIndSorted.reduce(function (arr, elementValue, i) {
    if (elementValue) arr.push(i);
    return arr;
  }, []);
  var nodesPerSegment = [];

  for (var _i3 = 0; _i3 < indiciesOfOriginNodes.length - 1; _i3++) {
    nodesPerSegment.push(indiciesOfOriginNodes[_i3 + 1] - indiciesOfOriginNodes[_i3]);
  }

  return nodesPerSegment;
}
/**
 * _getIndicatorArray - Produces an array of the location of the original nodes
 * in a super sampled contour.
 *
 * @param  {object} contour   The original contour.
 * @param  {Number} numNodes The number of nodes added.
 * @return {boolean[]}           The indicator array of original node locations.
 */


function _getIndicatorArray(contour, numNodes) {
  var perimInd = [];

  for (var i = 0; i < numNodes - 2; i++) {
    perimInd.push(false);
  }

  for (var _i4 = 0; _i4 < contour.x.length; _i4++) {
    perimInd.push(true);
  }

  return perimInd;
}
/**
 * _getInterpolatedPerim - Adds additional interpolated nodes to the
 * normalised perimeter array.
 *
 * @param  {Number} numNodes    The number of nodes to add.
 * @param  {Number[]} cumPerimNorm The cumulative perimeter array.
 * @return {Number[]}              The array of nodes.
 */


function _getInterpolatedPerim(numNodes, cumPerimNorm) {
  var diff = 1 / (numNodes - 1);
  var linspace = [diff]; // Length - 2 as we are discarding 0 an 1 for efficiency (no need to calculate them).

  for (var i = 1; i < numNodes - 2; i++) {
    linspace.push(linspace[linspace.length - 1] + diff);
  }

  return linspace.concat(cumPerimNorm);
}
/**
 * _getCumulativePerimeter - Returns an array of the the cumulative perimeter at
 * each node of the contour.
 *
 * @param  {object} contour The contour.
 * @return {Number[]}         An array of the cumulative perimeter at each node.
 */


function _getCumulativePerimeter(contour) {
  var cumulativePerimeter = [0];

  for (var i = 1; i < contour.x.length; i++) {
    var lengthOfSegment = Math.sqrt(Math.pow(contour.x[i] - contour.x[i - 1], 2) + Math.pow(contour.y[i] - contour.y[i - 1], 2));
    cumulativePerimeter.push(cumulativePerimeter[i - 1] + lengthOfSegment);
  }

  return cumulativePerimeter;
}
/**
 * _normalisedCumulativePerimeter - Normalises the cumulative perimeter array.
 *
 * @param  {type} cumPerim An array of the cumulative perimeter at each of a
 * contour.
 * @return {type}          The normalised array.
 */


function _normalisedCumulativePerimeter(cumPerim) {
  var cumPerimNorm = [];

  for (var i = 0; i < cumPerim.length; i++) {
    cumPerimNorm.push(cumPerim[i] / cumPerim[cumPerim.length - 1]);
  }

  return cumPerimNorm;
}
/**
 * _generateClosedContour - Generate a clockwise contour object from the points
 * of a clockwise or anti-clockwise polygon.
 *
 * @param  {object[]} points The points to generate the contour from.
 * @return {object}           The generated contour object.
 */


function _generateClosedContour(points) {
  var c = {
    x: [],
    y: []
  }; // NOTE: For z positions we only need the relative difference for interpolation, thus use frame index as Z.

  for (var i = 0; i < points.length; i++) {
    c.x[i] = points[i].x;
    c.y[i] = points[i].y;
  } // Push last node to create closed contour.


  c.x.push(c.x[0]);
  c.y.push(c.y[0]);

  _reverseIfAntiClockwise(c);

  return c;
}
/**
 * _reverseIfAntiClockwise - If the contour's nodes run anti-clockwise,
 * reverse them.
 *
 * @param  {object} contour The contour.
 * @return {object}         The contour, corrected to be clockwise if appropriate.
 */


function _reverseIfAntiClockwise(contour) {
  var length = contour.x.length;
  var contourXMean = contour.x.reduce(getSumReducer) / length;
  var checkSum = 0;

  for (var k = 0, i = 1, j = 2; k < length; k++) {
    checkSum += (contour.x[i] - contourXMean) * (contour.y[j] - contour.y[k]);
    i++;
    j++;
    if (i >= length) i = 0;
    if (j >= length) j = 0;
  }

  if (checkSum > 0) {
    contour.x.reverse();
    contour.y.reverse();
  }
}
/**
 * getSumReducer - A reducer function that calculates the sum of an array.
 *
 * @param  {Number} total The running total.
 * @param  {Number} num   The numerical value of the array element.
 * @return {Number}       The updated running total.
 */


function getSumReducer(total, num) {
  return total + num;
}

/***/ }),

/***/ "./src/util/generateBrushMetadata.js":
/*!*******************************************!*\
  !*** ./src/util/generateBrushMetadata.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return generateMetadata; });
/* harmony import */ var _GeneralAnatomylist_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../GeneralAnatomylist.js */ "./src/GeneralAnatomylist.js");

var categories = _GeneralAnatomylist_js__WEBPACK_IMPORTED_MODULE_0__["default"].SegmentationCodes.Category;
function generateMetadata(label) {
  var categoryUID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'T-D0050';
  var typeUID = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'T-D0050';
  var modifierUID = arguments.length > 3 ? arguments[3] : undefined;
  var category = categories.find(function (categoriesI) {
    return categoriesI.CodeValue === categoryUID;
  });
  var type = category.Type.find(function (typesI) {
    return typesI.CodeValue === typeUID;
  });
  var metadata = {
    SegmentedPropertyCategoryCodeSequence: {
      CodeValue: category.CodeValue,
      CodingSchemeDesignator: category.CodingSchemeDesignator,
      CodeMeaning: category.CodeMeaning
    },
    SegmentLabel: label,
    SegmentAlgorithmType: 'MANUAL',
    SegmentedPropertyTypeCodeSequence: {
      CodeValue: type.CodeValue,
      CodingSchemeDesignator: type.CodingSchemeDesignator,
      CodeMeaning: type.CodeMeaning
    }
  };

  if (modifierUID) {
    var modfier = type.Modifier.find(function (modifierI) {
      return modifierI.CodeValue === modifierUID;
    });
    metadata.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence = {
      CodeValue: modfier.CodeValue,
      CodingSchemeDesignator: modfier.CodingSchemeDesignator,
      CodeMeaning: modfier.CodeMeaning
    };
    metadata.RecommendedDisplayCIELabValue = modfier.recommendedDisplayRGBValue;
  } else {
    metadata.RecommendedDisplayCIELabValue = type.recommendedDisplayRGBValue;
  }

  return metadata;
}

/***/ }),

/***/ "./src/util/generateUID.js":
/*!*********************************!*\
  !*** ./src/util/generateUID.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/**
 * Generates a UUID for the enabledElement.
 * @export @public @method
 * @name generateUID
 *
 * @return {String} the UUID.
 */
/* harmony default export */ __webpack_exports__["default"] = (function () {
  // https://stackoverflow.com/a/8809472/9208320 Public Domain/MIT

  /* eslint no-bitwise: ["error", { "allow": ["&","|"] }] */
  var d = new Date().getTime();

  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {
    d += performance.now(); // Use high-precision timer if available
  }

  return 'x.x.x.x.x.x.xxxx.xxx.x.x.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
    var r = (d + Math.random() * 16) % 16 | 0;
    d = Math.floor(d / 16);
    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);
  });
});

/***/ }),

/***/ "./src/util/getActiveBrushToolsForElement.js":
/*!***************************************************!*\
  !*** ./src/util/getActiveBrushToolsForElement.js ***!
  \***************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getActiveViewportEnabledElement.js */ "./src/util/getActiveViewportEnabledElement.js");


var BaseBrushTool = Object(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["importInternalModule"])('base/BaseBrushTool');
/* harmony default export */ __webpack_exports__["default"] = (function (viewports) {
  var enabledElement = Object(_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(viewports.viewportSpecificData, viewports.activeViewportIndex);
  var element = enabledElement.element;
  var tools = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].state.tools;
  tools = tools.filter(function (tool) {
    return tool.element === element && tool.mode === 'active';
  });
  return tools.filter(function (tool) {
    return tool instanceof BaseBrushTool;
  });
});

/***/ }),

/***/ "./src/util/getActiveFreehandToolsForElement.js":
/*!******************************************************!*\
  !*** ./src/util/getActiveFreehandToolsForElement.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getActiveViewportEnabledElement.js */ "./src/util/getActiveViewportEnabledElement.js");
/* harmony import */ var _tools_FreehandRoi3DTool_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../tools/FreehandRoi3DTool.js */ "./src/tools/FreehandRoi3DTool.js");



/* harmony default export */ __webpack_exports__["default"] = (function (viewports) {
  var enabledElement = Object(_getActiveViewportEnabledElement_js__WEBPACK_IMPORTED_MODULE_1__["default"])(viewports.viewportSpecificData, viewports.activeViewportIndex);
  var element = enabledElement.element;
  var tools = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].state.tools;
  tools = tools.filter(function (tool) {
    return tool.element === element && tool.mode === 'active';
  });
  return tools.filter(function (tool) {
    return tool instanceof _tools_FreehandRoi3DTool_js__WEBPACK_IMPORTED_MODULE_2__["default"];
  });
});

/***/ }),

/***/ "./src/util/getActiveViewportEnabledElement.js":
/*!*****************************************************!*\
  !*** ./src/util/getActiveViewportEnabledElement.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getActiveViewportEnabledElement; });
/**
 * Grabs `dom` reference for the enabledElement of
 * the active viewport
 */
function getActiveViewportEnabledElement(viewports, activeIndex) {
  var activeViewport = viewports[activeIndex] || {};
  return activeViewport.dom;
}

/***/ }),

/***/ "./src/util/getSeriesInstanceUidFromEnabledElement.js":
/*!************************************************************!*\
  !*** ./src/util/getSeriesInstanceUidFromEnabledElement.js ***!
  \************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getSeriesInstanceUidFromEnabledElement; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);

function getSeriesInstanceUidFromEnabledElement(enabledElement) {
  if (!enabledElement) {
    return;
  }

  var imageId = enabledElement.image.imageId;
  var generalSeriesModule = cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default.a.metaData.get('generalSeriesModule', imageId);
  return generalSeriesModule.seriesInstanceUID;
}

/***/ }),

/***/ "./src/util/getSeriesInstanceUidFromImageId.js":
/*!*****************************************************!*\
  !*** ./src/util/getSeriesInstanceUidFromImageId.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return getSeriesInstanceUidFromImageId; });
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-core */ "cornerstone-core");
/* harmony import */ var cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_core__WEBPACK_IMPORTED_MODULE_0__);

/**
 * Extracts the seriesInstanceUid from an image, given the imageId.
 *
 * @param {String} imageId The ID of the image being queried.
 */

function getSeriesInstanceUidFromImageId(imageId) {
  var generalSeriesModule = cornerstone_core__WEBPACK_IMPORTED_MODULE_0___default.a.metaData.get('generalSeriesModule', imageId);
  return generalSeriesModule.seriesInstanceUID;
}

/***/ }),

/***/ "./src/util/unlockStructureSet.js":
/*!****************************************!*\
  !*** ./src/util/unlockStructureSet.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! cornerstone-tools */ "cornerstone-tools");
/* harmony import */ var cornerstone_tools__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _getSeriesInstanceUidFromImageId_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./getSeriesInstanceUidFromImageId.js */ "./src/util/getSeriesInstanceUidFromImageId.js");


var modules = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["store"].modules;
var globalToolStateManager = cornerstone_tools__WEBPACK_IMPORTED_MODULE_0__["globalImageIdSpecificToolStateManager"];
/**
 * Unlock a structureSet, moving them to the working directory
 * so that they may be edited
 *
 * @param {string} seriesInstanceUid  The UID of the series on which the ROIs
 *                                    reside.
 * @param {string} structureSetUid    The uid of the newly created structureSet.
 */

/* harmony default export */ __webpack_exports__["default"] = (function (seriesInstanceUid, structureSetUid) {
  var freehand3DStore = modules.freehand3D;
  var structureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, structureSetUid);
  var ROIContourCollection = structureSet.ROIContourCollection;
  var workingStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid); // Create new ROIContours in the working directory.

  for (var i = 0; i < ROIContourCollection.length; i++) {
    var ROIContour = ROIContourCollection[i];
    freehand3DStore.setters.ROIContour(seriesInstanceUid, 'DEFAULT', ROIContour.name, {
      uid: ROIContour.uid,
      polygonCount: ROIContour.polygonCount,
      color: ROIContour.color
    });
  }

  var toolStateManager = globalToolStateManager.saveToolState();
  Object.keys(toolStateManager).forEach(function (elementId) {
    // Only get polygons from this series
    if (Object(_getSeriesInstanceUidFromImageId_js__WEBPACK_IMPORTED_MODULE_1__["default"])(elementId) === seriesInstanceUid) {
      // grab the freehand tool for this DICOM instance
      if (toolStateManager && toolStateManager[elementId] && toolStateManager[elementId].freehandRoi) {
        var toolState = toolStateManager[elementId].freehandRoi;
        var toolData = toolState.data;
        movePolygonsInInstance(workingStructureSet, toolData, seriesInstanceUid);
      }
    }
  }); // Remove named structureSet.

  freehand3DStore.setters.deleteStructureSet(seriesInstanceUid, structureSetUid);

  if (workingStructureSet.activeROIContourIndex === null) {
    workingStructureSet.activeROIContourIndex = 0;
  }
});
/**
 * Moves the ROIs defined by the seriesInstanceUid, roiCollectionName
 * and exportMask from the working directory to a new named roiCollection.
 *
 * @param  {Object} exportData  An object containing the required information
 *                              to execute the move opperation.
 */

function movePolygonsInInstance(workingStructureSet, toolData, seriesInstanceUid) {
  var freehand3DStore = modules.freehand3D;

  for (var i = 0; i < toolData.length; i++) {
    var data = toolData[i];
    var referencedROIContour = freehand3DStore.getters.ROIContour(seriesInstanceUid, 'DEFAULT', data.ROIContourUid);
    var referencedStructureSet = freehand3DStore.getters.structureSet(seriesInstanceUid, 'DEFAULT');
    data.structureSetUid = 'DEFAULT';
    data.referencedROIContour = referencedROIContour;
    data.referencedStructureSet = referencedStructureSet;
  }
}

/***/ }),

/***/ "cornerstone-core":
/*!***********************************!*\
  !*** external "cornerstone-core" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cornerstone_core__;

/***/ }),

/***/ "cornerstone-math":
/*!***********************************!*\
  !*** external "cornerstone-math" ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cornerstone_math__;

/***/ }),

/***/ "cornerstone-tools":
/*!************************************!*\
  !*** external "cornerstone-tools" ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_cornerstone_tools__;

/***/ }),

/***/ "react":
/*!************************!*\
  !*** external "react" ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = __WEBPACK_EXTERNAL_MODULE_react__;

/***/ })

/******/ });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvR2VuZXJhbEFuYXRvbXlsaXN0LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21tYW5kc01vZHVsZS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9jb21tb24vTWVudUlPQnV0dG9ucy5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9jb21tb24vaGVscGVycy9vbkV4cG9ydEJ1dHRvbkNsaWNrLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL2NvbW1vbi9oZWxwZXJzL29uSU9DYW5jZWwuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvY29tbW9uL2hlbHBlcnMvb25JbXBvcnRCdXR0b25DbGljay5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9yb2lDb250b3VyTWVudS9Mb2NrZWRDb2xsZWN0aW9uc0xpc3QuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvcm9pQ29udG91ck1lbnUvTG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9yb2lDb250b3VyTWVudS9Sb2lDb250b3VyTWVudS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9yb2lDb250b3VyTWVudS9Sb2lDb250b3VyU2V0dGluZ3MuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvcm9pQ29udG91ck1lbnUvV29ya2luZ0NvbGxlY3Rpb25MaXN0LmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL3JvaUNvbnRvdXJNZW51L1dvcmtpbmdDb2xsZWN0aW9uTGlzdEl0ZW0uanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvc2VnbWVudGF0aW9uTWVudS9CcnVzaFNldHRpbmdzLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy9jb21wb25lbnRzL3NlZ21lbnRhdGlvbk1lbnUvU2VnbWVudGF0aW9uTWVudS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9zZWdtZW50YXRpb25NZW51L1NlZ21lbnRhdGlvbk1lbnVEZWxldGVDb25maXJtYXRpb24uanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvc2VnbWVudGF0aW9uTWVudS9TZWdtZW50YXRpb25NZW51TGlzdEJvZHkuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2NvbXBvbmVudHMvc2VnbWVudGF0aW9uTWVudS9TZWdtZW50YXRpb25NZW51TGlzdEhlYWRlci5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvY29tcG9uZW50cy9zZWdtZW50YXRpb25NZW51L1NlZ21lbnRhdGlvbk1lbnVMaXN0SXRlbS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL2luaXQuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL21vZHVsZXMvZXh0ZW5kQnJ1c2hNb2R1bGUuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL21vZHVsZXMvZnJlZWhhbmQzRE1vZHVsZS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdG9vbHMvQnJ1c2gzREF1dG9HYXRlZFRvb2wuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3Rvb2xzL0JydXNoM0RIVUdhdGVkVG9vbC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdG9vbHMvQnJ1c2gzRFRvb2wuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3Rvb2xzL0ZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3Rvb2xzL0ZyZWVoYW5kUm9pM0RUb29sLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy90b29scy9uLWRpbWVuc2lvbmFsLWZsb29kLWZpbGwuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvYnJ1c2hNZXRhZGF0YUlPLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy91dGlsL2NsYXNzZXMvUG9seWdvbi5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9mcmVlaGFuZEludGVycG9sYXRlL2dlbmVyYXRlSW50ZXJwb2xhdGlvbkRhdGEuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvZnJlZWhhbmRJbnRlcnBvbGF0ZS9pbnRlcnBvbGF0ZS5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9nZW5lcmF0ZUJydXNoTWV0YWRhdGEuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvZ2VuZXJhdGVVSUQuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvZ2V0QWN0aXZlQnJ1c2hUb29sc0ZvckVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvZ2V0QWN0aXZlRnJlZWhhbmRUb29sc0ZvckVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luLy4vc3JjL3V0aWwvZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vLi9zcmMvdXRpbC9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21JbWFnZUlkLmpzIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi8uL3NyYy91dGlsL3VubG9ja1N0cnVjdHVyZVNldC5qcyIsIndlYnBhY2s6Ly9vaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4vZXh0ZXJuYWwgXCJjb3JuZXJzdG9uZS1jb3JlXCIiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luL2V4dGVybmFsIFwiY29ybmVyc3RvbmUtbWF0aFwiIiwid2VicGFjazovL29oaWYtc2VnbWVudGF0aW9uLXBsdWdpbi9leHRlcm5hbCBcImNvcm5lcnN0b25lLXRvb2xzXCIiLCJ3ZWJwYWNrOi8vb2hpZi1zZWdtZW50YXRpb24tcGx1Z2luL2V4dGVybmFsIFwicmVhY3RcIiJdLCJuYW1lcyI6WyJqc29uIiwicGFyc2VkSnNvbiIsIkpTT04iLCJwYXJzZSIsImJydXNoTW9kdWxlIiwic3RvcmUiLCJtb2R1bGVzIiwiYnJ1c2giLCJhY3Rpb25zIiwibmV4dFNlZ21lbnRGb3JBY3RpdmVWaWV3cG9ydCIsInZpZXdwb3J0cyIsImFjdGl2ZUJydXNoVG9vbHMiLCJnZXRBY3RpdmVCcnVzaFRvb2xzRm9yRWxlbWVudCIsImxlbmd0aCIsImJydXNoVG9vbCIsIm5leHRTZWdtZW50IiwicHJldmlvdXNTZWdtZW50Rm9yQWN0aXZlVmlld3BvcnQiLCJwcmV2aW91c1NlZ21lbnQiLCJpbmNyZWFzZUJydXNoU2l6ZSIsIm9sZFJhZGl1cyIsInN0YXRlIiwicmFkaXVzIiwibmV3UmFkaXVzIiwiTWF0aCIsImZsb29yIiwic2V0dGVycyIsImRlY3JlYXNlQnJ1c2hTaXplIiwiY2FuY2VsRnJlZWhhbmREcmF3aW5nIiwiZW5hYmxlZEVsZW1lbnQiLCJnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50Iiwidmlld3BvcnRTcGVjaWZpY0RhdGEiLCJhY3RpdmVWaWV3cG9ydEluZGV4IiwiYWN0aXZlRnJlZWhhbmRUb29scyIsImdldEFjdGl2ZUZyZWVoYW5kVG9vbHNGb3JFbGVtZW50IiwiY2FuY2VsRHJhd2luZyIsImVsZW1lbnQiLCJkZWZpbml0aW9ucyIsImNvbW1hbmRGbiIsInN0b3JlQ29udGV4dHMiLCJkZWZhdWx0Q29udGV4dCIsIk1lbnVJT0J1dHRvbnMiLCJwcm9wcyIsIkltcG9ydENhbGxiYWNrT3JDb21wb25lbnQiLCJFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50Iiwib25JbXBvcnRCdXR0b25DbGljayIsIm9uRXhwb3J0QnV0dG9uQ2xpY2siLCJSZWFjdCIsIkNvbXBvbmVudCIsInByb3RvdHlwZSIsImlzUmVhY3RDb21wb25lbnQiLCJzZXRTdGF0ZSIsImV4cG9ydGluZyIsIm9uSU9DYW5jZWwiLCJpbXBvcnRpbmciLCJjb25zb2xlIiwibG9nIiwiTG9ja2VkQ29sbGVjdGlvbnNMaXN0IiwibG9ja2VkQ29sbGVjdGlvbnMiLCJvblVubG9ja0NsaWNrIiwic2VyaWVzSW5zdGFuY2VVaWQiLCJtYXAiLCJjb2xsZWN0aW9uIiwibWV0YWRhdGEiLCJ1aWQiLCJjb3JuZXJzdG9uZVRvb2xzIiwiTG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbSIsInZpc2libGUiLCJleHBhbmRlZCIsIm9uVG9nZ2xlVmlzaWJpbGl0eUNsaWNrIiwiYmluZCIsIm9uU2hvd0hpZGVDbGljayIsInN0cnVjdHVyZVNldCIsImZyZWVoYW5kM0QiLCJnZXR0ZXJzIiwiUk9JQ29udG91ckFycmF5IiwidmlzaWJsZUJ1dHRvbiIsInNob3dIaWRlSWNvbiIsIm5hbWUiLCJyb2lDb250b3VyIiwiY29sb3IiLCJwb2x5Z29uQ291bnQiLCJSb2lDb250b3VyTWVudSIsImFjdGl2ZUluZGV4IiwiZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQiLCJnZXRSb2lDb250b3VyTGlzdCIsIndvcmtpbmdDb2xsZWN0aW9uIiwiYWN0aXZlUk9JQ29udG91ckluZGV4Iiwicm9pQ29udG91ckxpc3QiLCJ1bmxvY2tDb25maXJtYXRpb25PcGVuIiwicm9pQ29sbGVjdGlvblRvVW5sb2NrIiwib25OZXdSb2lCdXR0b25DbGljayIsIm9uUm9pQ2hhbmdlIiwib25SZW5hbWVCdXR0b25DbGljayIsImNvbmZpcm1VbmxvY2tPblVubG9ja0NsaWNrIiwib25VbmxvY2tDYW5jZWxDbGljayIsIm9uVW5sb2NrQ29uZmlybUNsaWNrIiwib25JT0NvbXBsZXRlIiwiZnJlZWhhbmQzRE1vZHVsZSIsInNlcmllcyIsImNvbnN0cnVjdG9yIiwiX3dvcmtpbmdDb2xsZWN0aW9uIiwiX2xvY2tlZENvbGxlY3Rpb25zIiwiZnJlZWhhbmQzRFN0b3JlIiwiUk9JQ29udG91ckFuZFNldEluZGV4QWN0aXZlIiwicm9pQ29udG91ckluZGV4Iiwic3RydWN0dXJlU2V0VWlkIiwidW5sb2NrU3RydWN0dXJlU2V0IiwiY29tcG9uZW50IiwiY29sbGVjdGlvbk5hbWUiLCJwYWRkaW5nIiwiUk9JQ29udG91ckNvbGxlY3Rpb24iLCJpIiwicHVzaCIsImluZGV4Iiwic3RydWN0dXJlU2V0Q29sbGVjdGlvbiIsImoiLCJSb2lDb250b3VyU2V0dGluZ3MiLCJpbnRlcnBvbGF0ZSIsIm9uSW50ZXJwb2xhdGVUb2dnbGVDbGljayIsInRvZ2dsZUludGVycG9sYXRlIiwiYmFja2dyb3VuZENvbG9yIiwib3V0bGluZSIsImJvcmRlclJhZGl1cyIsImN1cnNvciIsIldvcmtpbmdSb2lDb2xsZWN0aW9uTGlzdCIsIldvcmtpbmdDb2xsZWN0aW9uTGlzdEl0ZW0iLCJvblRleHRJbnB1dENoYW5nZSIsImV2dCIsInRhcmdldCIsInZhbHVlIiwicmVwbGFjZSIsIlJPSUNvbnRvdXJOYW1lIiwiY2hlY2tlZCIsInJvaUNvbnRvdXJDb2xvciIsImJydXNoU3RhdGUiLCJtaW5HYXRlU2VwZXJhdGlvbiIsIkJydXNoU2V0dGluZ3MiLCJjdXN0b21HYXRlUmFuZ2UiLCJob2xlRmlsbCIsInN0cmF5UmVtb3ZlIiwiYWN0aXZlR2F0ZSIsImN1c3RvbUdhdGVSYW5nZU1pbiIsImN1c3RvbUdhdGVSYW5nZU1heCIsIm9uR2F0ZUNoYW5nZSIsIm9uQ3VzdG9tR2F0ZU1pbkNoYW5nZSIsIm9uQ3VzdG9tR2F0ZU1heENoYW5nZSIsIm9uSG9sZUZpbGxDaGFuZ2UiLCJvblN0cmF5UmVtb3ZlQ2hhbmdlIiwidmFsIiwiTnVtYmVyIiwiY3VzdG9tUmFuZ2VNYXgiLCJjdXN0b21SYW5nZU1pbiIsImhvbGVGaWxsUmFuZ2UiLCJzdHJheVJlbW92ZVJhbmdlIiwiZ2F0ZXMiLCJob2xlRmlsbExhYmVsIiwic3RyYXlSZW1vdmVMYWJlbCIsImN1c3RvbUdhdGVzIiwiY3VzdG9tUmFuZ2UiLCJnYXRlIiwicmFuZ2UiLCJTZWdtZW50YXRpb25NZW51IiwiZ2V0U2VnbWVudExpc3QiLCJzZWdtZW50cyIsImFjdGl2ZVNlZ21lbnRJbmRleCIsImltcG9ydE1ldGFkYXRhIiwiX2ltcG9ydE1ldGFkYXRhIiwic2VnbWVudExpc3QiLCJkZWxldGVDb25maXJtYXRpb25PcGVuIiwic2VnbWVudFRvRGVsZXRlIiwib25TZWdtZW50Q2hhbmdlIiwib25FZGl0Q2xpY2siLCJjb25maXJtRGVsZXRlT25EZWxldGVDbGljayIsIm9uRGVsZXRlQ2FuY2VsQ2xpY2siLCJvbkRlbGV0ZUNvbmZpcm1DbGljayIsIl9zZWdtZW50cyIsInNlZ21lbnRJbmRleCIsImVkaXRTZWdtZW50SW5wdXQiLCJkZWxldGVTZWdtZW50Iiwic2VnbWVudExhYmVsIiwiZmluZCIsInNlZ21lbnQiLCJTZWdtZW50TGFiZWwiLCJsYWJlbCIsInR5cGUiLCJtb2RpZmllZCIsInNlZ21lbnRNZXRhZGF0YSIsIlNlZ21lbnRhdGlvbk1lbnVEZWxldGVDb25maXJtYXRpb24iLCJTZWdtZW50YXRpb25NZW51TGlzdEJvZHkiLCJvbkRlbGV0ZUNsaWNrIiwibmV3U2VnbWVudCIsIlNlZ21lbnRhdGlvbk1lbnVMaXN0SGVhZGVyIiwiU2VnbWVudGF0aW9uTWVudUxpc3RJdGVtIiwidHlwZVdpdGhNb2RpZmllciIsIlNlZ21lbnRlZFByb3BlcnR5VHlwZUNvZGVTZXF1ZW5jZSIsIkNvZGVNZWFuaW5nIiwibW9kaWZpZXIiLCJTZWdtZW50ZWRQcm9wZXJ0eVR5cGVNb2RpZmllckNvZGVTZXF1ZW5jZSIsImNvbG9ybWFwIiwiYWN0aXZlQ29ybmVyc3RvbmVDb2xvck1hcCIsImdldENvbG9yIiwic2VnbWVudENvbG9yIiwic2VnbWVudENhdGVnb3J5IiwiU2VnbWVudGVkUHJvcGVydHlDYXRlZ29yeUNvZGVTZXF1ZW5jZSIsIl9nZXRUeXBlV2l0aE1vZGlmaWVyIiwiVE9PTEJBUl9CVVRUT05fVFlQRVMiLCJDT01NQU5EIiwiU0VUX1RPT0xfQUNUSVZFIiwiaWQiLCJwcmVSZWdpc3RyYXRpb24iLCJjb25maWd1cmF0aW9uIiwiaW5pdCIsImdldENvbW1hbmRzTW9kdWxlIiwiY29tbWFuZHNNb2R1bGUiLCJnZXRUb29sYmFyTW9kdWxlIiwiaWNvbiIsImJ1dHRvbnMiLCJjb21tYW5kTmFtZSIsImNvbW1hbmRPcHRpb25zIiwidG9vbE5hbWUiLCJUT09MX05BTUVTIiwiRlJFRUhBTkRfUk9JXzNEX1RPT0wiLCJGUkVFSEFORF9ST0lfM0RfU0NVTFBUT1JfVE9PTCIsIkJSVVNIXzNEX1RPT0wiLCJCUlVTSF8zRF9IVV9HQVRFRF9UT09MIiwiQlJVU0hfM0RfQVVUT19HQVRFRF9UT09MIiwiZ2V0UGFuZWxNb2R1bGUiLCJtZW51T3B0aW9ucyIsImNvbXBvbmVudHMiLCJmcm9tIiwid2lkdGgiLCJkZWZhdWx0Q29uZmlnIiwibWF4UmFkaXVzIiwic2hvd0ZyZWVoYW5kU3RhdHMiLCJicnVzaDNkVG9vbE5hbWUiLCJicnVzaDNESFVHYXRlZFRvb2xOYW1lIiwiYnJ1c2gzREF1dG9HYXRlZFRvb2wiLCJmcmVlaGFuZFJvaTNEVG9vbCIsImZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wiLCJjb25maWciLCJPYmplY3QiLCJhc3NpZ24iLCJleHRlbmRCcnVzaE1vZHVsZSIsInJlZ2lzdGVyIiwiZGlzcGxheVN0YXRzIiwiYWRkVG9vbCIsIkJydXNoM0RUb29sIiwiQnJ1c2gzREhVR2F0ZWRUb29sIiwiQnJ1c2gzREF1dG9HYXRlZFRvb2wiLCJGcmVlaGFuZFJvaTNEVG9vbCIsIkZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wiLCJyZWZlcmVuY2VkVG9vbE5hbWUiLCJhY3RpdmVHYXRlUmFuZ2UiLCJnYXRlSW5kZXgiLCJmaW5kSW5kZXgiLCJtaW4iLCJtYXgiLCJpbXBvcnQiLCJpbXBvcnRNb2RpZmllZCIsInNlcmllc0NvbGxlY3Rpb24iLCJjaGVjayIsIm9iamVjdCIsIkVycm9yIiwiZ2V0U2VyaWVzIiwiZ2V0U3RydWN0dXJlU2V0IiwiZ2V0Uk9JQ29udG91ciIsIlJPSUNvbnRvdXJVaWQiLCJST0lDb250b3VyIiwiZ2V0Uk9JQ29udG91ckluZGV4IiwiZ2V0QWN0aXZlU3RydWN0dXJlU2V0SW5kZXgiLCJhY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleCIsImdldEFjdGl2ZVJPSUNvbnRvdXJJbmRleCIsImdldEFjdGl2ZVJPSUNvbnRvdXIiLCJ1bmRlZmluZWQiLCJzZXRTZXJpZXMiLCJzZXRTdHJ1Y3R1cmVTZXQiLCJvcHRpb25zIiwiZ2VuZXJhdGVVSUQiLCJpc0xvY2tlZCIsInNldFJPSUNvbnRvdXIiLCJnZXROZXh0Q29sb3IiLCJzZXRST0lDb250b3VyQW5kU2V0SW5kZXhBY3RpdmUiLCJzZXREZWxldGVST0lGcm9tU3RydWN0dXJlU2V0IiwiUk9JQ29udG91ckluZGV4Iiwic3BsaWNlIiwic2V0U3RydWN0dXJlU2V0TmFtZSIsInNldERlbGV0ZVN0cnVjdHVyZVNldCIsInN0cnVjdHVyZVNldEluZGV4Iiwic2V0Uk9JQ29udG91ck5hbWUiLCJzZXRBY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleCIsInNldEFjdGl2ZVN0cnVjdHVyZVNldCIsInNldEFjdGl2ZVJPSUNvbnRvdXJJbmRleCIsInNldEFjdGl2ZVJPSUNvbnRvdXIiLCJpbmNyZW1lbnRQb2x5Z29uQ291bnQiLCJkZWNyZW1lbnRQb2x5Z29uQ291bnQiLCJhY3RpdmVST0lDb250b3VyIiwiZGVsZXRlUk9JRnJvbVN0cnVjdHVyZVNldCIsImRlbGV0ZVN0cnVjdHVyZVNldCIsInN0cnVjdHVyZVNldE5hbWUiLCJhY3RpdmVTdHJ1Y3R1cmVTZXQiLCJ0b2dnbGVEaXNwbGF5U3RhdHMiLCJlbmFibGVkRWxlbWVudENhbGxiYWNrIiwiY29ybmVyc3RvbmUiLCJnZXRFbmFibGVkRWxlbWVudCIsImltYWdlIiwiaW1wb3J0Q29sb3JzIiwiY3VycmVudENvbG9ySW5kZXgiLCJpbXBvcnRJbnRlcm5hbE1vZHVsZSIsImdldENpcmNsZSIsImluaXRpYWxDb25maWd1cmF0aW9uIiwiX3NldEN1c3RvbUdhdGUiLCJfc3RhcnRQYWludGluZyIsImV2ZW50RGF0YSIsImRldGFpbCIsInJvd3MiLCJjb2x1bW5zIiwiY3VycmVudFBvaW50cyIsIngiLCJ5IiwiaW1hZ2VQaXhlbERhdGEiLCJnZXRQaXhlbERhdGEiLCJyZXNjYWxlU2xvcGUiLCJzbG9wZSIsInJlc2NhbGVJbnRlcmNlcHQiLCJpbnRlcmNlcHQiLCJjaXJjbGUiLCJsbyIsImhpIiwicGl4ZWxWYWx1ZSIsImdhdGVWYWx1ZXMiLCJnYXRlZENpcmNsZUFycmF5IiwiX2NsZWFuR2F0ZWRDaXJjbGUiLCJkcmF3QnJ1c2hQaXhlbHMiLCJwb2ludGVyQXJyYXkiLCJfZ2F0ZUNpcmNsZSIsInBhaW50RXZlbnREYXRhIiwibGFiZWxtYXAzRCIsImN1cnJlbnRJbWFnZUlkSW5kZXgiLCJhY3RpdmVMYWJlbG1hcEluZGV4Iiwic2hvdWxkRXJhc2UiLCJ0cmlnZ2VyRXZlbnQiLCJFVkVOVFMiLCJMQUJFTE1BUF9NT0RJRklFRCIsInVwZGF0ZUltYWdlIiwiZ2F0ZVJhbmdlIiwiZGF0YSIsImVkZ2VQaXhlbHMiLCJ4U2l6ZSIsInlTaXplIiwiX2dldEJvdW5kaW5nQm94T2ZDaXJjbGUiLCJfYm94R2F0ZWRDaXJjbGUiLCJnZXR0ZXIiLCJfZmxvb2RGaWxsRW1wdHlSZWdpb25zRnJvbUVkZ2VzIiwiX2ZpbmRIb2xlc0FuZFJlZ2lvbnMiLCJob2xlcyIsInJlZ2lvbnMiLCJsYXJnZXN0UmVnaW9uQXJlYSIsIl9nZXRBcmVhT2ZMYXJnZXN0UmVnaW9uIiwiciIsInJlZ2lvbiIsInAiLCJob2xlIiwiZmlsbGVkR2F0ZWRDaXJjbGVBcnJheSIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiX2dldEVkZ2VQaXhlbHMiLCJyZXN1bHQiLCJmbG9vZEZpbGwiLCJzZWVkIiwiZmxvb2RlZCIsImsiLCJnZXRBbmRDYWNoZUxhYmVsbWFwMkQiLCJfaXNDdHJsRG93biIsImFsd2F5c0VyYXNlT25DbGljayIsImdlbmVyYXRlQnJ1c2hNZXRhZGF0YSIsIl9wYWludCIsIl9kcmF3aW5nIiwiX3N0YXJ0TGlzdGVuaW5nRm9yTW91c2VVcCIsIkJydXNoVG9vbCIsImdldERlZmF1bHRGcmVlaGFuZFNjdWxwdGVyTW91c2VUb29sQ29uZmlndXJhdGlvbiIsImFjdGl2ZU1vdXNlVXBDYWxsYmFjayIsImNsb3Nlc3RUb29sSW5kZXgiLCJfZ2V0Q2xvc2VzdEZyZWVoYW5kVG9vbE9uRWxlbWVudCIsInRvb2xTdGF0ZSIsImdldFRvb2xTdGF0ZSIsInRvb2xEYXRhIiwicmVmZXJlbmNlZFN0cnVjdHVyZVNldCIsImhvdmVyQ29sb3IiLCJyZWZlcmVuY2VkUk9JQ29udG91ciIsImN1cnJlbnRUb29sIiwiX2FjdGl2ZSIsImlzTXVsdGlQYXJ0VG9vbEFjdGl2ZSIsIl9nZXRNb3VzZUxvY2F0aW9uIiwiX2ludmFsaWRhdGVUb29sRGF0YSIsIm1vdXNlVXBSZW5kZXIiLCJfZGVhY3RpdmF0ZVNjdWxwdCIsInByZXZlbnRQcm9wYWdhdGlvbiIsImludmFsaWRhdGVkIiwiaW50ZXJwb2xhdGVkIiwiRnJlZWhhbmRSb2lTY3VscHRvclRvb2wiLCJtb3VzZUxvY2F0aW9uIiwiaGFuZGxlcyIsInN0YXJ0IiwiaGlnaGxpZ2h0IiwiYWN0aXZlIiwibWluU3BhY2luZyIsImRyYWdDb2xvciIsInRvb2xDb2xvcnMiLCJnZXRBY3RpdmVDb2xvciIsImdldFRvb2xDb2xvciIsInNob3dDdXJzb3JPbkhvdmVyIiwibGltaXRSYWRpdXNPdXRzaWRlUmVnaW9uIiwiaG92ZXJDdXJzb3JGYWRlQWxwaGEiLCJob3ZlckN1cnNvckZhZGVEaXN0YW5jZSIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInN0b3BQcm9wYWdhdGlvbiIsInByZXZlbnREZWZhdWx0IiwiaW5zZXJ0T3JEZWxldGUiLCJmcmVlaGFuZEFyZWEiLCJjYWxjdWxhdGVGcmVlaGFuZFN0YXRpc3RpY3MiLCJkcmF3IiwiZHJhd0pvaW5lZExpbmVzIiwiZHJhd0hhbmRsZXMiLCJkcmF3TGlua2VkVGV4dEJveCIsIm1vdmVIYW5kbGVOZWFySW1hZ2VQb2ludCIsImdldE5ld0NvbnRleHQiLCJudW1iZXJzV2l0aENvbW1hcyIsInBvaW50SW5zaWRlQm91bmRpbmdCb3giLCJjYWxjdWxhdGVTVVYiLCJkZWZhdWx0RnJlZWhhbmRDb25maWd1cmF0aW9uIiwiYWx3YXlzU2hvd0hhbmRsZXMiLCJfZnJlZWhhbmQzRFN0b3JlIiwiX29uTWVhc3VyZW1lbnRSZW1vdmVkIiwiX2RyYXdpbmdNb3VzZVVwQ2FsbGJhY2siLCJnb29kRXZlbnREYXRhIiwiZXJyb3IiLCJtZWFzdXJlbWVudERhdGEiLCJwb2ludHMiLCJ0ZXh0Qm94IiwiaGFzTW92ZWQiLCJtb3Zlc0luZGVwZW5kZW50bHkiLCJkcmF3bkluZGVwZW5kZW50bHkiLCJhbGxvd2VkT3V0c2lkZUltYWdlIiwiaGFzQm91bmRpbmdCb3giLCJpbnRlcmFjdGlvblR5cGUiLCJfYWRkQW5kU2V0Vm9sdW1lSWZOb1ZvbHVtZXMiLCJfc3RhcnREcmF3aW5nIiwiX2FkZFBvaW50IiwiY29vcmRzIiwiaGFuZGxlQ2FudmFzIiwicGl4ZWxUb0NhbnZhcyIsInBvaW50IiwiZGlzdGFuY2UiLCJjdXJyZW50VGFyZ2V0IiwibmVhcmJ5IiwiX3BvaW50TmVhckhhbmRsZUFsbFRvb2xzIiwiZXZlbnQiLCJjdHJsS2V5IiwiaGFuZGxlTmVhcmJ5IiwiY2FsbCIsInRvb2xJbmRleCIsImhhbmRsZSIsIm1ldGFLZXkiLCJfc3dpdGNoUk9JQ29udG91ciIsImRyYWdPcmlnaW4iLCJfbW9kaWZ5aW5nIiwiY3VycmVudEhhbmRsZSIsIl9hY3RpdmF0ZU1vZGlmeSIsInNlcmllc01vZHVsZSIsIm1ldGFEYXRhIiwiZ2V0IiwiaW1hZ2VJZCIsIm1vZGFsaXR5IiwiY29udGV4dCIsImNhbnZhc0NvbnRleHQiLCJjYW52YXMiLCJsaW5lV2lkdGgiLCJ0b29sU3R5bGUiLCJnZXRUb29sV2lkdGgiLCJpc1JPSUFjdGl2ZSIsImdldENvbG9ySWZBY3RpdmUiLCJmaWxsQ29sb3IiLCJpbnZhbGlkSGFuZGxlUGxhY2VtZW50IiwiaW52YWxpZENvbG9yIiwiZ2V0RmlsbENvbG9yIiwiZ2xvYmFsQWxwaGEiLCJpbnRlcnBvbGF0ZWRBbHBoYSIsImxpbmVzIiwicG9seUJvdW5kaW5nQm94IiwiZmlsbCIsImhhbmRsZVJhZGl1cyIsImludGVycG9sYXRlZEhhbmRsZVJhZGl1cyIsImFjdGl2ZUhhbmRsZVJhZGl1cyIsImNhbkNvbXBsZXRlIiwiY29tcGxldGVIYW5kbGVSYWRpdXMiLCJhcmVhIiwibWVhblN0ZERldiIsIm1lYW5TdGREZXZTVVYiLCJib3VuZHMiLCJsZWZ0IiwicmlnaHQiLCJib3R0b20iLCJ0b3AiLCJhYnMiLCJoZWlnaHQiLCJwaXhlbHMiLCJnZXRQaXhlbHMiLCJtZWFuIiwic3RkRGV2IiwiaXNOYU4iLCJjb2x1bW5QaXhlbFNwYWNpbmciLCJyb3dQaXhlbFNwYWNpbmciLCJzY2FsaW5nIiwidGV4dCIsInRleHRCb3hUZXh0IiwidGV4dEJveEFuY2hvclBvaW50cyIsInRleHRMaW5lcyIsIm1vU3VmZml4IiwibWVhblRleHQiLCJ0b0ZpeGVkIiwic3RkRGV2VGV4dCIsIlNVVnRleHQiLCJzdWZmaXgiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJhcmVhVGV4dCIsIl9kZWFjdGl2YXRlRHJhdyIsInRvb2xUeXBlIiwiX2Nsb3NlVG9vbElmRHJhd2luZyIsIl9hZGRNZWFzdXJlbWVudFJlbW92ZWRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJNRUFTVVJFTUVOVF9SRU1PVkVEIiwiYWRkRXZlbnRMaXN0ZW5lciIsIkZyZWVoYW5kUm9pVG9vbCIsInNwYWNpbmciLCJjb21wbGV0ZUhhbmRsZVJhZGl1c1RvdWNoIiwibW9kdWxlIiwiZXhwb3J0cyIsIm9uRmxvb2QiLCJvbkJvdW5kYXJ5IiwiZXF1YWxzIiwiZGlhZ29uYWxzIiwic3RhcnROb2RlIiwicGVybXV0YXRpb25zIiwic3RhY2siLCJ2aXNpdHMiLCJpbml0aWFsaXplIiwibm9vcCIsImRlZmF1bHRFcXVhbHMiLCJwcnVuZWRQZXJtdXRhdGlvbnMiLCJtYWluIiwiY3VycmVudEFyZ3MiLCJmbG9vZCIsInBvcCIsImJvdW5kYXJpZXMiLCJqb2IiLCJnZXRBcmdzIiwicHJlbGV0Z3MiLCJwcmV2aW91c0FyZ3MiLCJ2aXNpdGVkIiwibWFya0FzVmlzaXRlZCIsIm1lbWJlciIsIm1hcmtBc0Zsb29kZWQiLCJwdXNoQWRqYWNlbnQiLCJtYXJrQXNCb3VuZGFyeSIsImtleSIsIm5vZGUiLCJzYWZlbHkiLCJhcHBseSIsInBlcm0iLCJuZXh0QXJncyIsInNsaWNlIiwiZiIsImFyZ3MiLCJhIiwiYiIsInBlcm11dGUiLCJmaWx0ZXIiLCJjb3VudCIsImNvdW50Tm9uWmVyb2VzIiwicGVybXMiLCJwZXJtdXRhdGlvbiIsInN0cmluZyIsInNwbGl0IiwiYyIsInBhcnNlSW50IiwicG93IiwibHBhZCIsInRvU3RyaW5nIiwiY2hhcmFjdGVyIiwiYXJyYXkiLCJBcnJheSIsInBhZCIsImpvaW4iLCJoYXNPd25Qcm9wZXJ0eSIsInVuc2hpZnQiLCJuZXdTZWdtZW50SW5wdXQiLCJzZWdJbmRleCIsImJydXNoTWV0ZGF0YUlucHV0Iiwic2VnbWVudElucHV0Q2FsbGJhY2siLCJhY3RpdmVFbGVtZW50IiwiaXNBcnJheSIsIm51bWJlck9mQ29sb3JzIiwiZ2V0TnVtYmVyT2ZDb2xvcnMiLCJjYXRlZ29yeVVJRCIsInR5cGVVSUQiLCJtb2RpZmllclVJRCIsImNhbGxiYWNrIiwiUG9seWdvbiIsInNvcEluc3RhbmNlVWlkIiwicG9seWdvblVpZCIsImZyYW1lTnVtYmVyIiwiX3BvbHlQb2ludHMiLCJfZGVlcENvcHlQb2ludHMiLCJfc29wSW5zdGFuY2VVaWQiLCJfc2VyaWVzSW5zdGFuY2VVaWQiLCJfc3RydWN0dXJlU2V0VWlkIiwiX1JPSUNvbnRvdXJVaWQiLCJfcG9seWdvblVpZCIsIl9mcmFtZU51bWJlciIsIl9pbnRlcnBvbGF0ZWQiLCJwb2x5UG9pbnRzIiwiaXNaIiwieiIsImltcG9ydFR5cGUiLCJzb3BJbnN0YW5jZVVJRCIsIl9nZW5lcmF0ZVBvaW50cyIsInRvQmVTY2FsZWQiLCJfZGVlcENvcHlPbmVQb2ludCIsImdsb2JhbFRvb2xTdGF0ZU1hbmFnZXIiLCJnbG9iYWxJbWFnZUlkU3BlY2lmaWNUb29sU3RhdGVNYW5hZ2VyIiwiaW1hZ2VJZHMiLCJfZ2V0SW1hZ2VJZHNPZkFjdGl2ZVNlcmllcyIsIlJPSUNvbnRvdXJEYXRhIiwiX2dldFJPSUNvbnRvdXJEYXRhIiwiZXh0ZW50IiwiX2dldEV4dGVudE9mUmVnaW9uIiwic2xpY2VFZGl0ZWQiLCJfZ2V0U2xpY2VQb3NpdGlvbk9mVG9vbERhdGEiLCJpbnRlcnBvbGF0aW9uTGlzdCIsIl9zbGljZU5lZWRzSW50ZXJwb2xhdGluZyIsImNvbnRvdXJQYWlyIiwiX2dldEJvdW5kaW5nUGFpciIsIl9hcHBlbmRpbnRlcnBvbGF0aW9uTGlzdCIsImNvbnRvdXJzIiwic3RhY2tUb29sU3RhdGUiLCJ0b29sU3RhdGVNYW5hZ2VyIiwic2F2ZVRvb2xTdGF0ZSIsImltYWdlVG9vbFN0YXRlIiwiZnJlZWhhbmRSb2kiLCJjb250b3VyIiwiY29udG91cnNPblNsaWNlIiwic2xpY2VJbmRleCIsInBhaXIiLCJsaXN0IiwiY2FuSW50ZXJwb2xhdGUiLCJkUCIsImdlbmVyYXRlSW50ZXJwb2xhdGlvbkRhdGEiLCJfbGluZWFybHlJbnRlcnBvbGF0ZUJldHdlZW4iLCJpbmRpY2llcyIsImMxIiwiX2dlbmVyYXRlQ2xvc2VkQ29udG91ciIsImMyIiwiX2dlbmVyYXRlSW50ZXJwb2xhdGlvbkNvbnRvdXJQYWlyIiwiYzFJbnRlcnAiLCJjMkludGVycCIsImZvckVhY2giLCJfbGluZWFybHlJbnRlcnBvbGF0ZUNvbnRvdXIiLCJjMUhhc01vcmVOb2RlcyIsInpJbnRlcnAiLCJpbnRlcnBvbGF0ZWQyRENvbnRvdXIiLCJfZ2VuZXJhdGVJbnRlcnBvbGF0ZWRPcGVuQ29udG91ciIsImMxTWV0YWRhdGEiLCJfZWRpdEludGVycG9sYXRlZENvbnRvdXIiLCJfYWRkSW50ZXJwb2xhdGVkQ29udG91ciIsImN1bVBlcmltMSIsIl9nZXRDdW11bGF0aXZlUGVyaW1ldGVyIiwiY3VtUGVyaW0yIiwiaW50ZXJwTm9kZXMiLCJjZWlsIiwiY3VtUGVyaW0xTm9ybSIsIl9ub3JtYWxpc2VkQ3VtdWxhdGl2ZVBlcmltZXRlciIsImN1bVBlcmltMk5vcm0iLCJudW1Ob2RlczEiLCJudW1Ob2RlczIiLCJwZXJpbTFJbnRlcnAiLCJfZ2V0SW50ZXJwb2xhdGVkUGVyaW0iLCJwZXJpbTJJbnRlcnAiLCJwZXJpbTFJbmQiLCJfZ2V0SW5kaWNhdG9yQXJyYXkiLCJwZXJpbTJJbmQiLCJub2Rlc1BlclNlZ21lbnQxIiwiX2dldE5vZGVzUGVyU2VnbWVudCIsIm5vZGVzUGVyU2VnbWVudDIiLCJjMWkiLCJfZ2V0U3VwZXJTYW1wbGVkQ29udG91ciIsImMyaSIsIl9zaGlmdFN1cGVyU2FtcGxlZENvbnRvdXJJblBsYWNlIiwiX3JlZHVjZUNvbnRvdXJzVG9PcmlnaW5Ob2RlcyIsInJlZmVyZW5jZWRUb29sRGF0YSIsInBvbHlnb24iLCJnZXRGcmVlaGFuZFRvb2xEYXRhIiwidG9vbERhdGFJbmRleCIsIm9sZFBvbHlnb24iLCJ1cGRhdGVkUG9seWdvbiIsImMxaXIiLCJjMmlyIiwiY0ludGVycCIsIkkiLCJjMWlMZW5ndGgiLCJvcHRpbWFsIiwic3RhcnRpbmdOb2RlIiwidG90YWxTcXVhcmVkWFlMZW5ndGhzIiwiSW5maW5pdHkiLCJpdHRlcmF0aW9uIiwiX3NoaWZ0Q2lyY3VsYXJBcnJheSIsImFyciIsIm5vZGVzUGVyU2VnbWVudCIsImNpIiwibiIsInhTcGFjaW5nIiwieVNwYWNpbmciLCJwZXJpbUludGVycCIsInBlcmltSW5kIiwiaWR4Iiwic29ydCIsInBlcmltSW5kU29ydGVkIiwiaW5kaWNpZXNPZk9yaWdpbk5vZGVzIiwicmVkdWNlIiwiZWxlbWVudFZhbHVlIiwibnVtTm9kZXMiLCJjdW1QZXJpbU5vcm0iLCJkaWZmIiwibGluc3BhY2UiLCJjb25jYXQiLCJjdW11bGF0aXZlUGVyaW1ldGVyIiwibGVuZ3RoT2ZTZWdtZW50Iiwic3FydCIsImN1bVBlcmltIiwiX3JldmVyc2VJZkFudGlDbG9ja3dpc2UiLCJjb250b3VyWE1lYW4iLCJnZXRTdW1SZWR1Y2VyIiwiY2hlY2tTdW0iLCJyZXZlcnNlIiwidG90YWwiLCJudW0iLCJjYXRlZ29yaWVzIiwiR2VuZXJhbEFuYXRvbXlMaXN0IiwiU2VnbWVudGF0aW9uQ29kZXMiLCJDYXRlZ29yeSIsImdlbmVyYXRlTWV0YWRhdGEiLCJjYXRlZ29yeSIsImNhdGVnb3JpZXNJIiwiQ29kZVZhbHVlIiwiVHlwZSIsInR5cGVzSSIsIkNvZGluZ1NjaGVtZURlc2lnbmF0b3IiLCJTZWdtZW50QWxnb3JpdGhtVHlwZSIsIm1vZGZpZXIiLCJNb2RpZmllciIsIm1vZGlmaWVySSIsIlJlY29tbWVuZGVkRGlzcGxheUNJRUxhYlZhbHVlIiwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWUiLCJkIiwiRGF0ZSIsImdldFRpbWUiLCJwZXJmb3JtYW5jZSIsIm5vdyIsInJhbmRvbSIsIkJhc2VCcnVzaFRvb2wiLCJ0b29scyIsInRvb2wiLCJtb2RlIiwiRnJlZWhhbmQzRFJvaVRvb2wiLCJhY3RpdmVWaWV3cG9ydCIsImRvbSIsImdlbmVyYWxTZXJpZXNNb2R1bGUiLCJzZXJpZXNJbnN0YW5jZVVJRCIsImdldFNlcmllc0luc3RhbmNlVWlkRnJvbUltYWdlSWQiLCJ3b3JraW5nU3RydWN0dXJlU2V0Iiwia2V5cyIsImVsZW1lbnRJZCIsIm1vdmVQb2x5Z29uc0luSW5zdGFuY2UiXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRCxPO0FDVkE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxrREFBMEMsZ0NBQWdDO0FBQzFFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsZ0VBQXdELGtCQUFrQjtBQUMxRTtBQUNBLHlEQUFpRCxjQUFjO0FBQy9EOztBQUVBO0FBQ0E7QUFD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QUEwQztBQUN4QyxRQUFNME8sSUFBSSxHQUFHdUMsUUFBUSxDQUFDalIsQ0FBRCxDQUFyQjtBQUVBLFFBQU1vUixvQkFBb0IsR0FBRzdSLGVBQWUsQ0FBQzdCLE9BQWhCLENBQXdCa00sVUFBeEIsQ0FBbUNoTixpQkFBbkMsRUFBc0QsU0FBdEQsRUFBaUU4UixJQUFJLENBQUMvRSxhQUF0RSxDQUE3QjtBQUVBLFFBQU11SCxzQkFBc0IsR0FBRzNSLGVBQWUsQ0FBQzdCLE9BQWhCLENBQXdCRixZQUF4QixDQUFxQ1osaUJBQXJDLEVBQXdELFNBQXhELENBQS9CO0FBRUE4UixRQUFJLENBQUNoUCxlQUFMLEdBQXVCLFNBQXZCO0FBQ0FnUCxRQUFJLENBQUMwQyxvQkFBTCxHQUE0QkEsb0JBQTVCO0FBQ0ExQyxRQUFJLENBQUN3QyxzQkFBTCxHQUE4QkEsc0JBQTlCO0FBQ0Q7QUFDRixDOzs7Ozs7Ozs7OztBQy9FRCw4RDs7Ozs7Ozs7Ozs7QUNBQSw4RDs7Ozs7Ozs7Ozs7QUNBQSwrRDs7Ozs7Ozs7Ozs7QUNBQSxtRCIsImZpbGUiOiJvaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KHJlcXVpcmUoXCJjb3JuZXJzdG9uZS1jb3JlXCIpLCByZXF1aXJlKFwiY29ybmVyc3RvbmUtbWF0aFwiKSwgcmVxdWlyZShcImNvcm5lcnN0b25lLXRvb2xzXCIpLCByZXF1aXJlKFwicmVhY3RcIikpO1xuXHRlbHNlIGlmKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZClcblx0XHRkZWZpbmUoXCJvaGlmLXNlZ21lbnRhdGlvbi1wbHVnaW5cIiwgW1wiY29ybmVyc3RvbmUtY29yZVwiLCBcImNvcm5lcnN0b25lLW1hdGhcIiwgXCJjb3JuZXJzdG9uZS10b29sc1wiLCBcInJlYWN0XCJdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcIm9oaWYtc2VnbWVudGF0aW9uLXBsdWdpblwiXSA9IGZhY3RvcnkocmVxdWlyZShcImNvcm5lcnN0b25lLWNvcmVcIiksIHJlcXVpcmUoXCJjb3JuZXJzdG9uZS1tYXRoXCIpLCByZXF1aXJlKFwiY29ybmVyc3RvbmUtdG9vbHNcIiksIHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cdGVsc2Vcblx0XHRyb290W1wib2hpZi1zZWdtZW50YXRpb24tcGx1Z2luXCJdID0gZmFjdG9yeShyb290W1wiY29ybmVyc3RvbmUtY29yZVwiXSwgcm9vdFtcImNvcm5lcnN0b25lLW1hdGhcIl0sIHJvb3RbXCJjb3JuZXJzdG9uZS10b29sc1wiXSwgcm9vdFtcInJlYWN0XCJdKTtcbn0pKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB0aGlzLCBmdW5jdGlvbihfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Nvcm5lcnN0b25lX2NvcmVfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9jb3JuZXJzdG9uZV9tYXRoX18sIF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfY29ybmVyc3RvbmVfdG9vbHNfXywgX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9yZWFjdF9fKSB7XG5yZXR1cm4gIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IFwiLi9zcmMvaW5kZXguanNcIik7XG4iLCJjb25zdCBqc29uID0gYHtcbiAgXCJTZWdtZW50YXRpb25DYXRlZ29yeVR5cGVDb250ZXh0TmFtZVwiOiBcIlNlZ21lbnRhdGlvbiBjYXRlZ29yeSBhbmQgdHlwZSAtIDNEIFNsaWNlciBHZW5lcmFsIEFuYXRvbXkgbGlzdFwiLFxuICBcIkBzY2hlbWFcIjogXCJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcWlpY3IvZGNtcWkvbWFzdGVyL2RvYy9zY2hlbWFzL3NlZ21lbnQtY29udGV4dC1zY2hlbWEuanNvbiNcIixcbiAgXCJTZWdtZW50YXRpb25Db2Rlc1wiOiB7XG4gICAgXCJDYXRlZ29yeVwiOiBbXG4gICAgICB7XG4gICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUaXNzdWVcIixcbiAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4NTc1NjAwN1wiLFxuICAgICAgICBcImNpZFwiOiBcIjcwNTFcIixcbiAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQwMzAwXCIsXG4gICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDA1MFwiLFxuICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJTZWdtZW50YXRpb24gUHJvcGVydHkgQ2F0ZWdvcmllc1wiLFxuICAgICAgICBcIlR5cGVcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxMjgsXG4gICAgICAgICAgICAgIDE3NCxcbiAgICAgICAgICAgICAgMTI4XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRpc3N1ZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0aXNzdWVcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQwMzAwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDAwNTBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODU3NTYwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIxNixcbiAgICAgICAgICAgICAgMTAxLFxuICAgICAgICAgICAgICA3OVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBcnRlcnlcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYXJ0ZXJ5XCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDU1NTgwNlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTQxMDY2XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3NTk4OTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjMwLFxuICAgICAgICAgICAgICAyMjAsXG4gICAgICAgICAgICAgIDcwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJvZHkgZmF0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImZhdFwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAzNDQzMzVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRi0wM0QzOFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDgzMDAwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI0MSxcbiAgICAgICAgICAgICAgMjE0LFxuICAgICAgICAgICAgICAxNDVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQm9uZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJib25lXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDI2Mjk1MFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQwMTZFXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3MjY3MzAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTgzLFxuICAgICAgICAgICAgICAxNTYsXG4gICAgICAgICAgICAgIDIyMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDYXBpbGxhcnlcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2FwaWxsYXJ5XCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwNjkwMVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTQwMDUwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIwOTgyMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxMTEsXG4gICAgICAgICAgICAgIDE4NCxcbiAgICAgICAgICAgICAgMjEwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNhcnRpbGFnZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjYXJ0aWxhZ2VcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA3MzAxXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDAyMUJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzA5MzEyMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxMTEsXG4gICAgICAgICAgICAgIDE4NCxcbiAgICAgICAgICAgICAgMjEwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNvbm5lY3RpdmUgdGlzc3VlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImNvbm5lY3RpdmUgdGlzc3VlXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwOTc4MFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTFBMjAwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIxNzkzMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODMsXG4gICAgICAgICAgICAgIDIxNCxcbiAgICAgICAgICAgICAgMjExXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxpZ2FtZW50XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxpZ2FtZW50XCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMzY4NVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTE4MDEwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjUyMDgyMDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA2OCxcbiAgICAgICAgICAgICAgMTcyLFxuICAgICAgICAgICAgICAxMDBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTHltcGggbm9kZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJseW1waCBub2RlXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyNDIwNFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUM0MDAwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjU5NDQxMDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxMTEsXG4gICAgICAgICAgICAgIDE5NyxcbiAgICAgICAgICAgICAgMTMxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkx5bXBoYXRpYyB2ZXNzZWxcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibHltcGhhdGljIHZlc3NlbFwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjk4ODlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1DNjAxMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4MzU1NTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTc4LFxuICAgICAgICAgICAgICAyMTIsXG4gICAgICAgICAgICAgIDI0MlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNZW5pc2N1c1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtZW5pc2N1c1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjQ0OThcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xNTAwOVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NDEzNTAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTkyLFxuICAgICAgICAgICAgICAxMDQsXG4gICAgICAgICAgICAgIDg4XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk11c2NsZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtdXNjbGVcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI2ODQ1XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTMwMDFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzE2MTYwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI0NCxcbiAgICAgICAgICAgICAgMjE0LFxuICAgICAgICAgICAgICA0OVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJOZXJ2ZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJuZXJ2ZVwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzEyNjgxNjlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDU5OFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMTk0MTAwMDJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIyMSxcbiAgICAgICAgICAgICAgMTMwLFxuICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiT3JnYW5cIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwib3JnYW5cIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMxMjg1MDkyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMUEzMTBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjg2MTAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTa2luXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNraW5cIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMxMTIzMDIzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMDEwMDBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzk5MzcwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE1MixcbiAgICAgICAgICAgICAgMTg5LFxuICAgICAgICAgICAgICAyMDdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVGVuZG9uXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInRlbmRvblwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzk1MDhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xNzAxMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMzAyNDAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgMTUxLFxuICAgICAgICAgICAgICAyMDZcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVmVpblwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ2ZWluXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDQ0NzE0NlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTQ4MDZFXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE4MTM3ODAwOVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInNob3dBbmF0b215XCI6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBbmF0b21pY2FsIFN0cnVjdHVyZVwiLFxuICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjEyMzAzNzAwNFwiLFxuICAgICAgICBcImNpZFwiOiBcIjcwNTFcIixcbiAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMxMjY4MDg2XCIsXG4gICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDAwQVwiLFxuICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJTZWdtZW50YXRpb24gUHJvcGVydHkgQ2F0ZWdvcmllc1wiLFxuICAgICAgICBcIlR5cGVcIjogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImFiZG9tZW5cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1ENDAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDAwNzI2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQWJkb21lblwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjExMzM0NTAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAxMjQsXG4gICAgICAgICAgICAgIDE2MVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJhYmRvbWluYWwgY2F2aXR5XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDQwMTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIzMDE2OFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFiZG9taW5hbCBjYXZpdHlcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MjczMTAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTcxLFxuICAgICAgICAgICAgICA4NSxcbiAgICAgICAgICAgICAgNjhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibXVzY2xlcyBvZiBhYmRvbWluYWwgd2FsbFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTE0MDAxXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzEyNzkzODVcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBYmRvbWluYWwgd2FsbCBtdXNjbGVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxOTU4NzkwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDYwLFxuICAgICAgICAgICAgICAxNDMsXG4gICAgICAgICAgICAgIDgzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImFkZW5vaHlwb3BoeXNpc1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUIxMTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzIwMDhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBZGVub2h5cG9waHlzaXNcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjI4MTgwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQWRyZW5hbCBnbGFuZFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDE2MjVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1CMzAwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDI0OSxcbiAgICAgICAgICAgICAgICAgIDE4NixcbiAgICAgICAgICAgICAgICAgIDE1MFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBhZHJlbmFsIGdsYW5kXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjQ5LFxuICAgICAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAgICAgMTUwXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgYWRyZW5hbCBnbGFuZFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIzNDUxMDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBbXlnZGFsYVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDI3MDhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMzIzMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDk4LFxuICAgICAgICAgICAgICAgICAgMTUzLFxuICAgICAgICAgICAgICAgICAgMTEyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGFteWdkYWxvaWQgY29tcGxleFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDk4LFxuICAgICAgICAgICAgICAgICAgMTUzLFxuICAgICAgICAgICAgICAgICAgMTEyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgYW15Z2RhbG9pZCBjb21wbGV4XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNDk1ODAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyMjQsXG4gICAgICAgICAgICAgIDE5OVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJhbnVzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTk5MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwMzQ2MVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFudXNcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTM1MDUwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIyNCxcbiAgICAgICAgICAgICAgOTcsXG4gICAgICAgICAgICAgIDc2XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImFvcnRhXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNDIwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwMzQ4M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFvcnRhXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDYXJkaWFjIFN0cnVjdHVyZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxNTgyNTAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjE4LFxuICAgICAgICAgICAgICAxMjMsXG4gICAgICAgICAgICAgIDk3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI2MTEzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImFvcnRpYyB2YWx2ZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTM1NDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDM1MDFcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJBb3J0aWMgVmFsdmVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIk1lZGlhc3RpbnVtIEFuYXRvbXkgRmluZGluZyBvciBGZWF0dXJlXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzQyMDIwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYXJhY2hub2lkXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTEyMjBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwMzcwN1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkFyYWNobm9pZFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NTA0MjAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQXJjdWF0ZSBGYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJGTUFcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMjMyOTYzM1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCIyNzY2NTBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxMjUsXG4gICAgICAgICAgICAgICAgICAxMDIsXG4gICAgICAgICAgICAgICAgICAxNTRcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgYXJjdWF0ZSBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTI1LFxuICAgICAgICAgICAgICAgICAgMTAyLFxuICAgICAgICAgICAgICAgICAgMTU0XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgYXJjdWF0ZSBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDIyNixcbiAgICAgICAgICAgICAgNzdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjdcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYXV0b25vbWljIG5lcnZlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTk2MDVcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNjI1MFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkF1dG9ub21pYyBuZXJ2ZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVyaXBoZXJhbCBOZXJ2b3VzIFN5c3RlbSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MzUyMDAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgMTQ1LFxuICAgICAgICAgICAgICAzMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJiaWxpYXJ5IHRyZWVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC02MDYxMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA1NDAwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQmlsZSBEdWN0XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjgyNzMwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIyMixcbiAgICAgICAgICAgICAgMTU0LFxuICAgICAgICAgICAgICAxMzJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidXJpbmFyeSBibGFkZGVyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNzQwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwNTY4MlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJsYWRkZXJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4OTgzNzAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyMzksXG4gICAgICAgICAgICAgIDE3MlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJza2VsZXRvbiBvZiB0aG9yYXhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMDE3MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNDQ4MTU3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQm9uZSBvZiB0aG9yYXhcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNzI3MTAwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI0MixcbiAgICAgICAgICAgICAgMjA2LFxuICAgICAgICAgICAgICAxNDJcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwic2tlbGV0b24gb2YgbmVja1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQwMDZEXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA3MzAxMzBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCb25lIHN0cnVjdHVyZSBvZiBoZWFkIGFuZC9vciBuZWNrXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjMxMjc3OTAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjUwLFxuICAgICAgICAgICAgICAyNTAsXG4gICAgICAgICAgICAgIDIyNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJicmFpblwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEwMTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDYxMDRcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCcmFpblwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMjczODAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgODUsXG4gICAgICAgICAgICAgIDE4OCxcbiAgICAgICAgICAgICAgMjU1XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIkNTRiBzcGFjZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEwMTA5XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA0NTkzODdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCcmFpbiBjZXJlYnJvc3BpbmFsIGZsdWlkIHBhdGh3YXlcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjgwMzcxMDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA4OCxcbiAgICAgICAgICAgICAgMTA2LFxuICAgICAgICAgICAgICAyMTVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidmVudHJpY2xlcyBvZiBicmFpblwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUExNjAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDc3OTlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCcmFpbiB2ZW50cmljbGVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzU3NjQwMDJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNhdWRhdGUgbnVjbGV1c1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDc0NjFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMzIwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDMwLFxuICAgICAgICAgICAgICAgICAgMTExLFxuICAgICAgICAgICAgICAgICAgODVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgY2F1ZGF0ZSBudWNsZXVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMzAsXG4gICAgICAgICAgICAgICAgICAxMTEsXG4gICAgICAgICAgICAgICAgICA4NVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGNhdWRhdGUgbnVjbGV1c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjExMDAwMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNDQsXG4gICAgICAgICAgICAgIDIxNCxcbiAgICAgICAgICAgICAgNDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2VudHJhbCBuZXJ2b3VzIHN5c3RlbVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEwMDkwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA5MjcyMzJcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDZW50cmFsIG5lcnZvdXMgc3lzdGVtXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjIxNDgzMDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxOTQsXG4gICAgICAgICAgICAgIDE5NSxcbiAgICAgICAgICAgICAgMTY0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImNlcmViZWxsYXIgd2hpdGUgbWF0dGVyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTYwODBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjM4MVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNlcmViZWxsYXIgd2hpdGUgbWF0dGVyXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjMzMDYwMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA4OCxcbiAgICAgICAgICAgICAgMTA2LFxuICAgICAgICAgICAgICAyMTVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2VyZWJyYWwgYXF1ZWR1Y3RcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMTgwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA3NzY5XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2VyZWJyYWwgYXF1ZWR1Y3RcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODA0NDcwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNlcmVicmFsIGZvcm5peFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAxNTIzMzRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjk3MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDY0LFxuICAgICAgICAgICAgICAgICAgMTIzLFxuICAgICAgICAgICAgICAgICAgMTQ3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGZvcm5peFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDY0LFxuICAgICAgICAgICAgICAgICAgMTIzLFxuICAgICAgICAgICAgICAgICAgMTQ3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgZm9ybml4XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODc0NjMwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDEyOCxcbiAgICAgICAgICAgICAgMTc0LFxuICAgICAgICAgICAgICAxMjhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2VyZWJyYWwgY29ydGV4XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTIwMjBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwNzc3NlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNlcmVicmFsIEdyZXkgTWF0dGVyXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQwMTQ2MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTAsXG4gICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgMjI1XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImNlcmVicmFsIHdoaXRlIG1hdHRlclwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyMDMwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAxNTIyOTVcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDZXJlYnJhbCBXaGl0ZSBNYXR0ZXJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjg1MjMwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyMDdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2VydmljYWwgdmVydGVicmFsIGNvbHVtblwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExNTAxXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA3Mjg5ODVcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDZXJ2aWNhbCBzcGluZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxMjI0OTQwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE4OCxcbiAgICAgICAgICAgICAgOTUsXG4gICAgICAgICAgICAgIDc2XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm11c2NsZXMgb2YgdGhvcmFjaWMgd2FsbFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTE0MTIyXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzEyNjk4MjVcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDaGVzdCB3YWxsIG11c2NsZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM3MjA3NDAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQ2luZ3VsdW1cIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI4MjcyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTI4NDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNTQsXG4gICAgICAgICAgICAgICAgICAxNDYsXG4gICAgICAgICAgICAgICAgICA4M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBjaW5ndWx1bSBidW5kbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNTQsXG4gICAgICAgICAgICAgICAgICAxNDYsXG4gICAgICAgICAgICAgICAgICA4M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGNpbmd1bHVtIGJ1bmRsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM3MDM1MDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNsYXZpY2xlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwODkxM1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTEyMzEwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjA1LFxuICAgICAgICAgICAgICAgICAgMTc5LFxuICAgICAgICAgICAgICAgICAgMTA4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGNsYXZpY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjA1LFxuICAgICAgICAgICAgICAgICAgMTc5LFxuICAgICAgICAgICAgICAgICAgMTA4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgY2xhdmljbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MTI5OTAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjA0LFxuICAgICAgICAgICAgICAxNjgsXG4gICAgICAgICAgICAgIDE0M1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjb2xvblwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTU5MzAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMDkzNjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDb2xvblwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3MTg1NDAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgOTcsXG4gICAgICAgICAgICAgIDExMyxcbiAgICAgICAgICAgICAgMTU4XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImNvcnB1cyBjYWxsb3N1bVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyNzAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTAwOTBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDb3JwdXMgY2FsbG9zdW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODg0NDIwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkNvcnB1cyBzdHJpYXR1bVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTAwOTdcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMzEwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDE0MCxcbiAgICAgICAgICAgICAgICAgIDE5MFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBzdHJpYXR1bVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDE0MCxcbiAgICAgICAgICAgICAgICAgIDE5MFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHN0cmlhdHVtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzE0MjgwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjM0LFxuICAgICAgICAgICAgICA5MlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2N1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJjcmFuaWFsIG5lcnZlc1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUE4MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTAyNjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJDcmFuaWFsIG5lcnZlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZXJpcGhlcmFsIE5lcnZvdXMgU3lzdGVtIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI1MjM4MDAzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJEaWVuY2VwaGFsb25cIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDEyMTQ0XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTAxMDJcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICA2OSxcbiAgICAgICAgICAgICAgICAgIDExMCxcbiAgICAgICAgICAgICAgICAgIDUzXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImRpZW5jZXBoYWxvblwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODc1NjMwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjUzLFxuICAgICAgICAgICAgICAyMjlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZHVvZGVudW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC01ODIwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDEzMzAzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiRHVvZGVudW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzg4NDgwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZHVyYSBtYXRlclwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUExMTIwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTMzMTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJEdXJhIG1hdGVyXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE4NTQ1MDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTEsXG4gICAgICAgICAgICAgIDE3MSxcbiAgICAgICAgICAgICAgMTQzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU1XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImVzb3BoYWd1c1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTU2MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTQ4NzZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJFc29waGFndXNcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMjg0OTAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiRXh0ZXJuYWwgZWFyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxMzQ1M1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUFCMTAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc0LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgOTBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgZXh0ZXJuYWwgZWFyXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc0LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgOTBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBleHRlcm5hbCBlYXJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyODM0NzAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiRXllYmFsbFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjkyNDJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BQTc3MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE5NCxcbiAgICAgICAgICAgICAgICAgIDE0MixcbiAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgZXllYmFsbFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE5NCxcbiAgICAgICAgICAgICAgICAgIDE0MixcbiAgICAgICAgICAgICAgICAgIDBcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBleWViYWxsXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzk2NTIwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE4NSxcbiAgICAgICAgICAgICAgMTM1LFxuICAgICAgICAgICAgICAxMzRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZmVtYWxlIGV4dGVybmFsIGdlbml0YWxpYVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTgwMDEwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjc3NDdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJGZW1hbGUgZXh0ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODY5NjkwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI0NCxcbiAgICAgICAgICAgICAgMTcwLFxuICAgICAgICAgICAgICAxNDdcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZmVtYWxlIGludGVybmFsIGdlbml0YWxpYVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTgwMDIwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjc3NDhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJGZW1hbGUgaW50ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODc3NTkwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkZvb3RcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE2NTA0XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDk3MDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgZm9vdFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGZvb3RcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1NjQ1OTAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiRm9yZWFybVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTY1MzZcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EODUwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBmb3JlYXJtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgZm9yZWFybVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE0OTc1MDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA4OCxcbiAgICAgICAgICAgICAgMTA2LFxuICAgICAgICAgICAgICAyMTVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZm91cnRoIHZlbnRyaWNsZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUExODIwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAxNDk1NTZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJGb3VydGggdmVudHJpY2xlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM1OTE4MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJGcm9udGFsIGJvbmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE2NzMyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTExMTBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMDMsXG4gICAgICAgICAgICAgICAgICAxNzksXG4gICAgICAgICAgICAgICAgICA3N1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBmcm9udGFsIGJvbmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMDMsXG4gICAgICAgICAgICAgICAgICAxNzksXG4gICAgICAgICAgICAgICAgICA3N1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGZyb250YWwgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc0ODcyMDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJGcm9udGFsIGxvYmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE2NzMzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTIyMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICA4MyxcbiAgICAgICAgICAgICAgICAgIDE0NixcbiAgICAgICAgICAgICAgICAgIDE2NFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBmcm9udGFsIGxvYmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICA4MyxcbiAgICAgICAgICAgICAgICAgIDE0NixcbiAgICAgICAgICAgICAgICAgIDE2NFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGZyb250YWwgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjgzMjUxMDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxMzksXG4gICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgOThcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwNDBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZ2FsbGJsYWRkZXJcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC02MzAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE2OTc2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiR2FsbGJsYWRkZXJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkVuZG9zY29weSBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjgyMzEwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkdsb2J1cyBwYWxsaWR1c1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTc2NTFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMzUwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDQ4LFxuICAgICAgICAgICAgICAgICAgMTI5LFxuICAgICAgICAgICAgICAgICAgMTI2XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHBhbGxpZHVtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgNDgsXG4gICAgICAgICAgICAgICAgICAxMjksXG4gICAgICAgICAgICAgICAgICAxMjZcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBwYWxsaWR1bVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE0NzM4MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJIYW5kXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxODU2M1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQ4NzAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGhhbmRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBoYW5kXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODU1NjIwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiaGVhZFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQxMTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTg2NzBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJIZWFkXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjY5NTM2MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMDYsXG4gICAgICAgICAgICAgIDExMCxcbiAgICAgICAgICAgICAgODRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiaGVhcnRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zMjAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE4Nzg3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSGVhcnRcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNhcmRpYWMgU3RydWN0dXJlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjgwODkxMDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTAsXG4gICAgICAgICAgICAgIDIxMCxcbiAgICAgICAgICAgICAgMTM5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImh5b2lkIGJvbmVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTE5MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDIwNDE3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSHlvaWQgYm9uZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyMTM4NzAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSW5mZXJpb3IgY2VyZWJlbGxhciBwZWR1bmNsZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAxNTIzOTNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BNjY0MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE4NixcbiAgICAgICAgICAgICAgICAgIDEzNSxcbiAgICAgICAgICAgICAgICAgIDEzNVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBpbmZlcmlvciBjZXJlYmVsbGFyIHBlZHVuY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAgICAgMTM1LFxuICAgICAgICAgICAgICAgICAgMTM1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgaW5mZXJpb3IgY2VyZWJlbGxhciBwZWR1bmNsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjY3NzAxMDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJJbmZlcmlvciBsb25naXR1ZGluYWwgZmFzY2ljdWx1c1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjgyNzNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjg1MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE1OSxcbiAgICAgICAgICAgICAgICAgIDExNixcbiAgICAgICAgICAgICAgICAgIDE2M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBpbmZlcmlvciBsb25naXR1ZGluYWwgZmFzY2ljdWx1c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE1OSxcbiAgICAgICAgICAgICAgICAgIDExNixcbiAgICAgICAgICAgICAgICAgIDE2M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGluZmVyaW9yIGxvbmdpdHVkaW5hbCBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTUyMzMwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIklubmVyIGVhclwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjI4ODlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BQjcwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIyOSxcbiAgICAgICAgICAgICAgICAgIDE0NyxcbiAgICAgICAgICAgICAgICAgIDExOFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBpbm5lciBlYXJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMjksXG4gICAgICAgICAgICAgICAgICAxNDcsXG4gICAgICAgICAgICAgICAgICAxMThcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBpbm5lciBlYXJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyMjk0NTAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSW5zdWxhXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMTY0MFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyNjEwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTg4LFxuICAgICAgICAgICAgICAgICAgMTM1LFxuICAgICAgICAgICAgICAgICAgMTY2XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGluc3VsYXIgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE4OCxcbiAgICAgICAgICAgICAgICAgIDEzNSxcbiAgICAgICAgICAgICAgICAgIDE2NlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGluc3VsYXIgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM2MTY5MDA4XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMzMsXG4gICAgICAgICAgICAgIDEzOCxcbiAgICAgICAgICAgICAgMTEyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI2MTE2XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImF0cmlhbCBzZXB0dW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zMjE1MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI1ODM2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSW50ZXJhdHJpYWwgc2VwdHVtXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJNdXNjdWxhciBBbmF0b215XCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTgwOTUwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE5NSxcbiAgICAgICAgICAgICAgMTAwLFxuICAgICAgICAgICAgICA3M1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNjExNlwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ2ZW50cmljdWxhciBzZXB0dW1cIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zMjQxMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI1ODcwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiSW50ZXJ2ZW50cmljdWxhciBzZXB0dW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIk11c2N1bGFyIEFuYXRvbXlcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1ODkwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiS2lkbmV5XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMjY0NlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTcxMDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTg1LFxuICAgICAgICAgICAgICAgICAgMTAyLFxuICAgICAgICAgICAgICAgICAgODNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQga2lkbmV5XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTg1LFxuICAgICAgICAgICAgICAgICAgMTAyLFxuICAgICAgICAgICAgICAgICAgODNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBraWRuZXlcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2NDAzMzAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJFbmRvc2NvcHkgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDQwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiS25lZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzE0NTY3OThcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EOTIwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBrbmVlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQga25lZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjcyNjk2MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMYWNyaW1hbCBib25lXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyMjczM1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExMTVBXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAgICAgMjUwLFxuICAgICAgICAgICAgICAgICAgMTYwXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGxhY3JpbWFsIGJvbmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjYyMjkwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgMjA4LFxuICAgICAgICAgICAgICAyNDNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwNDBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGFyeW54XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMjQxMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyMzA3OFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxhcnlueFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiRW5kb3Njb3B5IEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0NTk2MDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMYXRlcmFsIGNvcnRpY29zcGluYWwgdHJhY3RcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMTUyNDAyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTcwOTNcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMDEsXG4gICAgICAgICAgICAgICAgICAxNjAsXG4gICAgICAgICAgICAgICAgICAxMzNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgY29ydGljb3NwaW5hbCB0cmFjdFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIwMSxcbiAgICAgICAgICAgICAgICAgIDE2MCxcbiAgICAgICAgICAgICAgICAgIDEzM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGNvcnRpY29zcGluYWwgdHJhY3RcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0NjEwMDJcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxhdGVyYWwgdmVudHJpY2xlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjI3OVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUExNjUwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgODgsXG4gICAgICAgICAgICAgICAgICAxMDYsXG4gICAgICAgICAgICAgICAgICAyMTVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgbGF0ZXJhbCB2ZW50cmljbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICA4OCxcbiAgICAgICAgICAgICAgICAgIDEwNixcbiAgICAgICAgICAgICAgICAgIDIxNVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGxhdGVyYWwgdmVudHJpY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjY3MjAwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE1MixcbiAgICAgICAgICAgICAgNTUsXG4gICAgICAgICAgICAgIDEzXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgdmVudHJpY2xlIG9mIGhlYXJ0XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMzI2MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNTg5N1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnQgVmVudHJpY2xlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDYXJkaWFjIFN0cnVjdHVyZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4Nzg3ODAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGltYmljIGxvYmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNDU4MzM3XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTAwMzZcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNTQsXG4gICAgICAgICAgICAgICAgICAxNTAsXG4gICAgICAgICAgICAgICAgICAyMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgbGltYmljIGxvYmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNTQsXG4gICAgICAgICAgICAgICAgICAxNTAsXG4gICAgICAgICAgICAgICAgICAyMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBsaW1iaWMgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3OTIxNTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTg4LFxuICAgICAgICAgICAgICA5MSxcbiAgICAgICAgICAgICAgOTVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGlwc1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTUyMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjM3NTlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMaXBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNDg0NzcwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxvd2VyIGxlZ1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzExNDA2MjFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EOTQwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBsZWdcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBsZWdcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMDAyMTAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTG93ZXIgbGltYlwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjMyMTZcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EOTAwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBsb3dlciBsaW1iXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgbG93ZXIgbGltYlwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjYxNjg1MDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxvd2VyIGxvYmUgb2YgbHVuZ1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjU3NThcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0yODgzMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIyNCxcbiAgICAgICAgICAgICAgICAgIDE4NixcbiAgICAgICAgICAgICAgICAgIDE2MlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJpbmZlcmlvciBsb2JlIG9mIHJpZ2h0IGx1bmdcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMjQsXG4gICAgICAgICAgICAgICAgICAxODYsXG4gICAgICAgICAgICAgICAgICAxNjJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiaW5mZXJpb3IgbG9iZSBvZiBsZWZ0IGx1bmdcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI5MDU3MjAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjEyLFxuICAgICAgICAgICAgICAxODgsXG4gICAgICAgICAgICAgIDEwMlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsdW1iYXIgdmVydGVicmFsIGNvbHVtblwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExNTAzXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjQwOTFcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMdW1iYXIgc3BpbmVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTIyNDk2MDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkx1bmdcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI0MTA5XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMjgwMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxOTcsXG4gICAgICAgICAgICAgICAgICAxNjUsXG4gICAgICAgICAgICAgICAgICAxNDVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgbHVuZ1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE5NyxcbiAgICAgICAgICAgICAgICAgIDE2NSxcbiAgICAgICAgICAgICAgICAgIDE0NVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IGx1bmdcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzOTYwNzAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTg1LFxuICAgICAgICAgICAgICAxMzUsXG4gICAgICAgICAgICAgIDEzNFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtYWxlIGV4dGVybmFsIGdlbml0YWxpYVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTkwMDEwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjc5MjJcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNYWxlIGV4dGVybmFsIGdlbml0YWxpYVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVsdmljIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjkwNDE4MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTYsXG4gICAgICAgICAgICAgIDE0NixcbiAgICAgICAgICAgICAgMTI3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTYwXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm1hbGUgaW50ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtOTAwMjBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyNzkyM1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1hbGUgaW50ZXJuYWwgZ2VuaXRhbGlhXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzgyNDIwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIyMixcbiAgICAgICAgICAgICAgMTk4LFxuICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibWFuZGlibGVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTE4MFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI0Njg3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTWFuZGlibGVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiOTE2MDkwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1lZGlhbCBMZW1uaXNjdXNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI4NDIwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTUyNzFcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzQsXG4gICAgICAgICAgICAgICAgICAxNDAsXG4gICAgICAgICAgICAgICAgICAxMDNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgbWVkaWFsIGxlbW5pc2N1c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NCxcbiAgICAgICAgICAgICAgICAgIDE0MCxcbiAgICAgICAgICAgICAgICAgIDEwM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IG1lZGlhbCBsZW1uaXNjdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMDExNDAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNDQsXG4gICAgICAgICAgICAgIDIwOVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtZWRpYXN0aW51bVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQzMzAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjUwNjZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNZWRpYXN0aW51bVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjcyNDEwMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDI0NCxcbiAgICAgICAgICAgICAgMjA5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm1lbmluZ2VzXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTExMTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyNTI4NVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1lbmluZ2VzXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjEyMzEwMDRcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1pZGRsZSBjZXJlYmVsbGFyIHBlZHVuY2xlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjM5MlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUE2NjMwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTQ4LFxuICAgICAgICAgICAgICAgICAgMTIwLFxuICAgICAgICAgICAgICAgICAgNzJcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgbWlkZGxlIGNlcmViZWxsYXIgcGVkdW5jbGVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNDgsXG4gICAgICAgICAgICAgICAgICAxMjAsXG4gICAgICAgICAgICAgICAgICA3MlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IG1pZGRsZSBjZXJlYmVsbGFyIHBlZHVuY2xlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzM3MjMwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1pZGRsZSBlYXJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDEzNDU1XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQUIzMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMDEsXG4gICAgICAgICAgICAgICAgICAxMTIsXG4gICAgICAgICAgICAgICAgICA3M1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBtaWRkbGUgZWFyXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjAxLFxuICAgICAgICAgICAgICAgICAgMTEyLFxuICAgICAgICAgICAgICAgICAgNzNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBtaWRkbGUgZWFyXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjUzNDIwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIwMixcbiAgICAgICAgICAgICAgMTY0LFxuICAgICAgICAgICAgICAxNDBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibWlkZGxlIGxvYmUgb2YgcmlnaHQgbHVuZ1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTI4MzAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjU3NTdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNaWRkbGUgbG9iZSBvZiByaWdodCBsdW5nXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJUaG9yYWNpYyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzI0ODEwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE1OSxcbiAgICAgICAgICAgICAgNjMsXG4gICAgICAgICAgICAgIDI3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI2MTEzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm1pdHJhbCB2YWx2ZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTM1MzAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjYyNjRcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNaXRyYWwgVmFsdmVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIk1lZGlhc3RpbnVtIEFuYXRvbXkgRmluZGluZyBvciBGZWF0dXJlXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiOTExMzQwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIwMSxcbiAgICAgICAgICAgICAgMTIxLFxuICAgICAgICAgICAgICA3N1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJtdXNjbGVzIG9mIGhlYWRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMzEwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI0MDk3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTXVzY2xlIG9mIGhlYWRcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNyYW5pb2ZhY2lhbCBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjI2ODgwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIxMyxcbiAgICAgICAgICAgICAgMTI0LFxuICAgICAgICAgICAgICAxMDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibXVzY2xlcyBvZiBuZWNrXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTMzMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyNzUzMlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk11c2NsZSBvZiBuZWNrXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjgxNzI3MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDMxXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm5lY2tcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMTYwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDI3NTMwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTmVja1wiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0NTA0ODAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgOTIsXG4gICAgICAgICAgICAgIDE2MixcbiAgICAgICAgICAgICAgMTA5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm5ldXJvaHlwb3BoeXNpc1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUIxMjAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzIwMDlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJOZXVyb2h5cG9waHlzaXNcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzc1MTIwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk9jY2lwaXRhbCBsb2JlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyODc4NVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyNDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTgyLFxuICAgICAgICAgICAgICAgICAgMTY2LFxuICAgICAgICAgICAgICAgICAgMTEwXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IG9jY2lwaXRhbCBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTgyLFxuICAgICAgICAgICAgICAgICAgMTY2LFxuICAgICAgICAgICAgICAgICAgMTEwXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgb2NjaXBpdGFsIGxvYmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMTA2NTAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjM0LFxuICAgICAgICAgICAgICAyMzQsXG4gICAgICAgICAgICAgIDE5NFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJvbWVudHVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDQ2MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyODk3N1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk9tZW50dW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNzM5ODAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgOTksXG4gICAgICAgICAgICAgIDEwNixcbiAgICAgICAgICAgICAgMjRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwib3B0aWMgY2hpYXNtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTgwMEJcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyOTEyNlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk9wdGljIGNoaWFzbVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDQ0NTMwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk9wdGljIHJhZGlhdGlvblwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjgyNzdcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjg4MFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDc4LFxuICAgICAgICAgICAgICAgICAgMTUyLFxuICAgICAgICAgICAgICAgICAgMTQxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IG9wdGljIHJhZGlhdGlvblwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDc4LFxuICAgICAgICAgICAgICAgICAgMTUyLFxuICAgICAgICAgICAgICAgICAgMTQxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgb3B0aWMgcmFkaWF0aW9uXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzAxMDUwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk9wdGljIHRyYWN0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDE1MjQwNVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUE4MDYwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTU2LFxuICAgICAgICAgICAgICAgICAgMTcxLFxuICAgICAgICAgICAgICAgICAgMTA4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IG9wdGljIHRyYWN0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTU2LFxuICAgICAgICAgICAgICAgICAgMTcxLFxuICAgICAgICAgICAgICAgICAgMTA4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgb3B0aWMgdHJhY3RcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MzIzODAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJPdmFyeVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjk5MzlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC04NzAwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIxMyxcbiAgICAgICAgICAgICAgICAgIDE0MSxcbiAgICAgICAgICAgICAgICAgIDExM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBvdmFyeVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIxMyxcbiAgICAgICAgICAgICAgICAgIDE0MSxcbiAgICAgICAgICAgICAgICAgIDExM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IG92YXJ5XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTU0OTcwMDZcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBhbGF0aW5lIGJvbmVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjIyNzM0XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTExNjBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyNDIsXG4gICAgICAgICAgICAgICAgICAyMTcsXG4gICAgICAgICAgICAgICAgICAxMjNcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgcGFsYXRpbmUgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDI0MixcbiAgICAgICAgICAgICAgICAgIDIxNyxcbiAgICAgICAgICAgICAgICAgIDEyM1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHBhbGF0aW5lIGJvbmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MTI4MzAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQ5LFxuICAgICAgICAgICAgICAxODAsXG4gICAgICAgICAgICAgIDExMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwYW5jcmVhc1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTY1MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzAyNzRcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQYW5jcmVhc1wiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ1QsIE1SIGFuZCBQRVQgQW5hdG9teSBJbWFnZWRcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIxNTc3NjAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGFyaWV0YWwgYm9uZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzA1NThcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTEyMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDIyOSxcbiAgICAgICAgICAgICAgICAgIDIwNCxcbiAgICAgICAgICAgICAgICAgIDEwOVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBwYXJpZXRhbCBib25lXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjI5LFxuICAgICAgICAgICAgICAgICAgMjA0LFxuICAgICAgICAgICAgICAgICAgMTA5XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgcGFyaWV0YWwgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0OTI0MDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQYXJpZXRhbCBsb2JlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMDU2MFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyMzAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTQxLFxuICAgICAgICAgICAgICAgICAgOTMsXG4gICAgICAgICAgICAgICAgICAxMzdcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgcGFyaWV0YWwgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE0MSxcbiAgICAgICAgICAgICAgICAgIDkzLFxuICAgICAgICAgICAgICAgICAgMTM3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgcGFyaWV0YWwgbG9iZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjE2NjMwMDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODQsXG4gICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgMTU0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBlcmljYXJkaWFsIGNhdml0eVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTM5MDUwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjU5NzJcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQZXJpY2FyZGlhbCBjYXZpdHlcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNhcmRpYWMgU3RydWN0dXJlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI1NDg5MDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDI0NCxcbiAgICAgICAgICAgICAgMjA5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUyXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInBlcmljYXJkaXVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMzkwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMTA1MFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBlcmljYXJkaXVtXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDYXJkaWFjIFN0cnVjdHVyZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3Njg0ODAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjI0LFxuICAgICAgICAgICAgICAxOTQsXG4gICAgICAgICAgICAgIDBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjdcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicGVyaXBoZXJhbCBuZXJ2ZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEwNTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzExMTlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQZXJpcGhlcmFsIG5lcnZlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZXJpcGhlcmFsIE5lcnZvdXMgU3lzdGVtIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjg0NzgyMDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTYsXG4gICAgICAgICAgICAgIDE4NixcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2N1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwZXJpcGhlcmFsIG5lcnZvdXMgc3lzdGVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTAxNDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNjQxN1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBlcmlwaGVyYWwgbmVydm91cyBzeXN0ZW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlcmlwaGVyYWwgTmVydm91cyBTeXN0ZW0gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzA1ODAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDIyMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwZXJpdG9uZXVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDQ0MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMTE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBlcml0aW9uZXVtXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTU0MjUwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIwNCxcbiAgICAgICAgICAgICAgMTQyLFxuICAgICAgICAgICAgICAxNzhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicGVyaXRvbmVhbCBjYXZpdHlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1ENDQyNVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMxNzA0MjQ3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGVyaXRvbmVhbCBjYXZpdHlcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4MzY3MDAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTg0LFxuICAgICAgICAgICAgICAxMDUsXG4gICAgICAgICAgICAgIDEwOFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDA0MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwaGFyeW54XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTUwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMTM1NFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBoYXJ5bnhcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkVuZG9zY29weSBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTQwNjYwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMDlcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicGlhIG1hdGVyXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTEyODBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMTg2OVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBpYSBtYXRlclwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyMzE4MDAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjUzLFxuICAgICAgICAgICAgICAxMzUsXG4gICAgICAgICAgICAgIDE5MlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwaW5lYWwgZ2xhbmRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1CMjAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMxOTM5XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUGluZWFsIEdsYW5kXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ1NzkzMDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICA1NyxcbiAgICAgICAgICAgICAgMTU3LFxuICAgICAgICAgICAgICAxMTBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicGl0dWl0YXJ5IGdsYW5kXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQjEwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzMjAwNVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlBpdHVpdGFyeVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1NjMyOTAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTI2LFxuICAgICAgICAgICAgICAxNjEsXG4gICAgICAgICAgICAgIDE5N1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwb3N0ZXJpb3IgY29tbWlzc3VyZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUE0OTA0XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAxNTIzMjdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQb3N0ZXJpb3IgY2VyZWJyYWwgY29tbWlzc3VyZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNzkzMzYwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIzMCxcbiAgICAgICAgICAgICAgMTU4LFxuICAgICAgICAgICAgICAxNDBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjBcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicHJvc3RhdGVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC05MjAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDMzNTcyXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUHJvc3RhdGVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0MTIxNjAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjI1LFxuICAgICAgICAgICAgICAxMzAsXG4gICAgICAgICAgICAgIDEwNFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNjExM1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJwdWxtb25hcnkgdmFsdmVcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zNTIwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM0MDg2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUHVsbW9uYXJ5IHZhbHZlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJNZWRpYXN0aW51bSBBbmF0b215IEZpbmRpbmcgb3IgRmVhdHVyZVwiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM5MDU3MDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJQdXRhbWVuXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzNDE2OVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEzNDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjEwLFxuICAgICAgICAgICAgICAgICAgMTU3LFxuICAgICAgICAgICAgICAgICAgMTY2XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHB1dGFtZW5cIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyMTAsXG4gICAgICAgICAgICAgICAgICAxNTcsXG4gICAgICAgICAgICAgICAgICAxNjZcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBwdXRhbWVuXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiODkyNzgwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE4MCxcbiAgICAgICAgICAgICAgMTE5LFxuICAgICAgICAgICAgICAxNTNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmV0cm9wZXJpdG9uZWFsIHNwYWNlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDQ5MDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzNTM1OVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJldHJvcGVyaXRvbmVhbCBzcGFjZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjgyODQ5MDAxXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxODEsXG4gICAgICAgICAgICAgIDg1LFxuICAgICAgICAgICAgICA1N1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1MlwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCB2ZW50cmljbGUgb2YgaGVhcnRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0zMjUwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI1ODgzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHQgVmVudHJpY2xlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDYXJkaWFjIFN0cnVjdHVyZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MzA4NTAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgNzAsXG4gICAgICAgICAgICAgIDE2MyxcbiAgICAgICAgICAgICAgMTE3XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNhbGl2YXJ5IGdsYW5kc1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTYxMDA3XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzYwOThcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTYWxpdmFyeSBnbGFuZFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzODUyOTQwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVsdmljIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTYwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU2VtaW5hbCBWZXNpY2xlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzNjYyOFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTkzMDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjQ1LFxuICAgICAgICAgICAgICAgICAgMTcyLFxuICAgICAgICAgICAgICAgICAgMTQ3XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHNlbWluYWwgdmVzaWNsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDI0NSxcbiAgICAgICAgICAgICAgICAgIDE3MixcbiAgICAgICAgICAgICAgICAgIDE0N1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHNlbWluYWwgdmVzaWNsZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjY0NzM5MDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkVuZG9zY29weSBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwNDBcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTaG91bGRlclwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzcwMDRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMjIyMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBzaG91bGRlclwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHNob3VsZGVyXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTY5ODIwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgMTI0LFxuICAgICAgICAgICAgICA5MlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJza2luIG9mIGFiZG9taW5hbCB3YWxsXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMDI0ODBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyMjE2NlwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNraW4gb2YgYWJkb21lblwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQWJkb21pbmFsIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc1MDkzMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzMsXG4gICAgICAgICAgICAgIDEyMSxcbiAgICAgICAgICAgICAgODhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwic2tpbiBvZiB0aG9yYWNpYyB3YWxsXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMDI0MjRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIyMjE0OVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNraW4gb2YgY2hlc3RcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NDE2MDAwNFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQxLFxuICAgICAgICAgICAgICAyMTMsXG4gICAgICAgICAgICAgIDE0NFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJza3VsbFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExMTAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzczMDNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTa3VsbFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4OTU0NjAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjA1LFxuICAgICAgICAgICAgICAxNjcsXG4gICAgICAgICAgICAgIDE0MlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJzbWFsbCBib3dlbFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTU4MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMjE4NTJcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTbWFsbCBJbnRlc3RpbmVcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkFiZG9taW5hbCBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzMDMxNTAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTgyLFxuICAgICAgICAgICAgICAxMDUsXG4gICAgICAgICAgICAgIDEwN1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJzb2Z0IHBhbGF0ZVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTUxMTIwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzAyMTlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTb2Z0IHBhbGF0ZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0OTQ2MDAwMFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMTQsXG4gICAgICAgICAgICAgIDQ5XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInNwaW5hbCBjb3JkXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTcwMTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzNzkyNVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNwaW5hbCBjb3JkXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI3NDgwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIwMCxcbiAgICAgICAgICAgICAgMjAwLFxuICAgICAgICAgICAgICAyMTVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZ3JheSBtYXR0ZXIgb2Ygc3BpbmFsIGNvcmRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BNzAyMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNDc1ODUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU3BpbmFsIGNvcmQgZ3JheSBtYXR0ZXJcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTI5NTgwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgMjUwLFxuICAgICAgICAgICAgICAyMjVcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwid2hpdGUgbWF0dGVyIG9mIHNwaW5hbCBjb3JkXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTcwNzBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDQ1ODQ1N1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlNwaW5hbCBjb3JkIHdoaXRlIG1hdHRlclwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNzA4ODAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjQ0LFxuICAgICAgICAgICAgICAyMTcsXG4gICAgICAgICAgICAgIDE1NFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJzdGVybnVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMTEyMTBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzODI5M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlN0ZXJudW1cIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1Njg3MzAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjE2LFxuICAgICAgICAgICAgICAxMzIsXG4gICAgICAgICAgICAgIDEwNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJzdG9tYWNoXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTcwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzODM1MVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlN0b21hY2hcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjk2OTUwMDNcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDg4LFxuICAgICAgICAgICAgICAxMDYsXG4gICAgICAgICAgICAgIDIxNVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJzdWJhcmFjaG5vaWQgc3BhY2VcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMTUwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDM4NTI3XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU3ViYXJhY2hub2lkIHNwYWNlXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM1OTUxMDA2XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJTdWJzdGFudGlhIG5pZ3JhXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzODU5MFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUE1MTYwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgIDEwOCxcbiAgICAgICAgICAgICAgICAgIDExMlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBzdWJzdGFudGlhIG5pZ3JhXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgIDEwOCxcbiAgICAgICAgICAgICAgICAgIDExMlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHN1YnN0YW50aWEgbmlncmFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3MDAwNzAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiU3VwZXJpb3IgbG9uZ2l0dWRpbmFsIGZhc2NpY3VsdXNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI4MjcwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtQTI4MjBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxMjcsXG4gICAgICAgICAgICAgICAgICAxNTAsXG4gICAgICAgICAgICAgICAgICA4OFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCBzdXBlcmlvciBsb25naXR1ZGluYWwgZmFzY2ljdWx1c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDEyNyxcbiAgICAgICAgICAgICAgICAgIDE1MCxcbiAgICAgICAgICAgICAgICAgIDg4XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgc3VwZXJpb3IgbG9uZ2l0dWRpbmFsIGZhc2NpY3VsdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI4OTIwMjAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDcmFuaW9mYWNpYWwgQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI0MDI4XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVGVtcG9yYWwgYm9uZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzk0ODRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTEzMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgICAgIDI0MyxcbiAgICAgICAgICAgICAgICAgIDE1MlxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCB0ZW1wb3JhbCBib25lXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAgICAgMjQzLFxuICAgICAgICAgICAgICAgICAgMTUyXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgdGVtcG9yYWwgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjYwOTExMDAzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNOUyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTNcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUZW1wb3JhbCBsb2JlXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAzOTQ4NVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUEyNTAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTYyLFxuICAgICAgICAgICAgICAgICAgMTE1LFxuICAgICAgICAgICAgICAgICAgMTA1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IHRlbXBvcmFsIGxvYmVcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNjIsXG4gICAgICAgICAgICAgICAgICAxMTUsXG4gICAgICAgICAgICAgICAgICAxMDVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCB0ZW1wb3JhbCBsb2JlXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzgyNzcwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ05TIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRoYWxhbXVzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDQ1ODI3MVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULUQwNTkzXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxLFxuICAgICAgICAgICAgICAgICAgMzhcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgdGhhbGFtdXNcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDEsXG4gICAgICAgICAgICAgICAgICAzOFxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHRoYWxhbXVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTE5NDA2MDAwXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUaGlnaFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMzk4NjZcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EOTEwMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCB0aGlnaFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHRoaWdoXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjgzNjcwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDIyNixcbiAgICAgICAgICAgICAgMjAyLFxuICAgICAgICAgICAgICAxMzRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTVcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidGhvcmFjaWMgdmVydGVicmFsIGNvbHVtblwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTExNTAyXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzA1ODEyNjlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUaG9yYWNpYyBzcGluZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiVGhvcmFjaWMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjEyMjQ5NTAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0aG9yYXhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1EMzAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwODE3MDk2XCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVGhvcmF4XCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJUaG9yYWNpYyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTExODUwMDhcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDQ3LFxuICAgICAgICAgICAgICAxNTAsXG4gICAgICAgICAgICAgIDEwM1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0aHltdXNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1DODAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQwMTEzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVGh5bXVzXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJUaG9yYWNpYyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiOTg3NTAwOVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgNjIsXG4gICAgICAgICAgICAgIDE2MixcbiAgICAgICAgICAgICAgMTE0XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI2MTEzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInRoeXJvaWQgZ2xhbmRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1CNjAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQwMTMyXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVGh5cm9pZFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTWVkaWFzdGludW0gQW5hdG9teSBGaW5kaW5nIG9yIEZlYXR1cmVcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI2OTc0ODAwNlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTY2LFxuICAgICAgICAgICAgICA4NCxcbiAgICAgICAgICAgICAgOTRcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMjhcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidG9uZ3VlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNTMwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MDQwOFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRvbmd1ZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyMTk3NDAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgICAyNTAsXG4gICAgICAgICAgICAgIDIyMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAyOFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0ZWV0aFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTU0MDEwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDA0MjZcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJUb290aFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ3JhbmlvZmFjaWFsIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzODE5OTAwOFwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTgyLFxuICAgICAgICAgICAgICAyMjgsXG4gICAgICAgICAgICAgIDI1NVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1NVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ0cmFjaGVhXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMjUwMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MDU3OFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRyYWNoZWFcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlRob3JhY2ljIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0NDU2NzAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTY2LFxuICAgICAgICAgICAgICA3MCxcbiAgICAgICAgICAgICAgMzhcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjYxMTNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidHJpY3VzcGlkIHZhbHZlXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMzUxMDBcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MDk2MFwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlRyaWN1c3BpZCBWYWx2ZVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTWVkaWFzdGludW0gQW5hdG9teSBGaW5kaW5nIG9yIEZlYXR1cmVcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0NjAzMDAwM1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDTlMgVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTUzXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVW5jaW5hdGUgZmFzY2ljdWx1c1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjgyNzFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC1BMjgzMFwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDEwNixcbiAgICAgICAgICAgICAgICAgIDE3NCxcbiAgICAgICAgICAgICAgICAgIDE1NVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCB1bmNpbmF0ZSBmYXNjaWN1bHVzXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTA2LFxuICAgICAgICAgICAgICAgICAgMTc0LFxuICAgICAgICAgICAgICAgICAgMTU1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgdW5jaW5hdGUgZmFzY2ljdWx1c1wiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAxXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkxXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkxlZnRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc3NzEwMDBcIlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI2MjMwMDAzXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBBbmF0b21pYyBSZWdpb25zXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJVcHBlciBhcm1cIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNDQ2NTE2XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDgyMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgYXJtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTc3LFxuICAgICAgICAgICAgICAgICAgMTIyLFxuICAgICAgICAgICAgICAgICAgMTAxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImxlZnQgYXJtXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNDA5ODMwMDBcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlVwcGVyIGxpbWJcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE2NTU1XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDgwMDBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzcsXG4gICAgICAgICAgICAgICAgICAxMjIsXG4gICAgICAgICAgICAgICAgICAxMDFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwicmlnaHQgdXBwZXIgbGltYlwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDE3NyxcbiAgICAgICAgICAgICAgICAgIDEyMixcbiAgICAgICAgICAgICAgICAgIDEwMVxuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJsZWZ0IHVwcGVyIGxpbWJcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMVwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJMZWZ0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI3NzcxMDAwXCJcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MzEyMDAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJUaG9yYWNpYyBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTVcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJVcHBlciBsb2JlIG9mIGx1bmdcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjI1NzU2XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtMjg4MjBcIixcbiAgICAgICAgICAgIFwiTW9kaWZpZXJcIjogW1xuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAxNzIsXG4gICAgICAgICAgICAgICAgICAxMzgsXG4gICAgICAgICAgICAgICAgICAxMTVcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwic3VwZXJpb3IgbG9iZSBvZiByaWdodCBsdW5nXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDBcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTBcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiUmlnaHRcIixcbiAgICAgICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMYXRlcmFsaXR5XCIsXG4gICAgICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjI0MDI4MDA3XCJcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMTcyLFxuICAgICAgICAgICAgICAgICAgMTM4LFxuICAgICAgICAgICAgICAgICAgMTE1XG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInN1cGVyaW9yIGxvYmUgb2YgbGVmdCBsdW5nXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNDU2NTMwMDlcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDEyNCxcbiAgICAgICAgICAgICAgMTg2LFxuICAgICAgICAgICAgICAyMjNcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcImNpZFwiOiBcIjQwMzFcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwidXJldGhyYVwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTc1MDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDE5NjdcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJVcmV0aHJhXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gQW5hdG9taWMgUmVnaW9uc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjEzNjQ4MDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMDMsXG4gICAgICAgICAgICAgIDEzNixcbiAgICAgICAgICAgICAgMTE2XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU0XCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInVyaW5hcnkgc3lzdGVtXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtNzAwMDFcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMTUwODc1M1wiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlVyaW5hcnkgc3lzdGVtXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJBYmRvbWluYWwgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTIyNDg5MDA1XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDE4MSxcbiAgICAgICAgICAgICAgMTU4XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTYwXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInV0ZXJ1c1wiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTgzMDAwXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDIxNDlcIixcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJVdGVydXNcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlBlbHZpYyBPcmdhbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzNTAzOTAwN1wiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTkzLFxuICAgICAgICAgICAgICAxMjMsXG4gICAgICAgICAgICAgIDEwM1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2MFwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJ2YWdpbmFcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC04MjAwMFwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDQyMjMyXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVmFnaW5hXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJQZWx2aWMgT3JnYW4gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzY3ODQwMDFcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiUGVsdmljIE9yZ2FuIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTYwXCIsXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiVmFzIGRlZmVyZW5zXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MjM2MFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTk2MDAwXCIsXG4gICAgICAgICAgICBcIk1vZGlmaWVyXCI6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAgICAgMjQxLFxuICAgICAgICAgICAgICAgICAgMTcyLFxuICAgICAgICAgICAgICAgICAgMTUxXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICBcImNpZFwiOiBcIjI0NFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInJpZ2h0IGRlZmVyZW50IGR1Y3RcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIkctQTEwMFwiLFxuICAgICAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDIwNTA5MFwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJSaWdodFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMjQwMjgwMDdcIlxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgICAgICAyNDEsXG4gICAgICAgICAgICAgICAgICAxNzIsXG4gICAgICAgICAgICAgICAgICAxNTFcbiAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgIFwiY2lkXCI6IFwiMjQ0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwibGVmdCBkZWZlcmVudCBkdWN0XCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJHLUExMDFcIixcbiAgICAgICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMDUwOTFcIixcbiAgICAgICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiTGVmdFwiLFxuICAgICAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxhdGVyYWxpdHlcIixcbiAgICAgICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNzc3MTAwMFwiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTc2NzEwMDdcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIEFuYXRvbWljIFJlZ2lvbnNcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNDAzMVwiLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlp5Z29tYVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwNDM1MzlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC0xMTE2NlwiLFxuICAgICAgICAgICAgXCJNb2RpZmllclwiOiBbXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgICAgIDI1NSxcbiAgICAgICAgICAgICAgICAgIDE2N1xuICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgXCJjaWRcIjogXCIyNDRcIixcbiAgICAgICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJyaWdodCB6eWdvbWF0aWMgYm9uZVwiLFxuICAgICAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiRy1BMTAwXCIsXG4gICAgICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMjA1MDkwXCIsXG4gICAgICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlJpZ2h0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGF0ZXJhbGl0eVwiLFxuICAgICAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIyNDAyODAwN1wiXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMTM4ODEwMDZcIlxuICAgICAgICAgIH1cbiAgICAgICAgXSxcbiAgICAgICAgXCJzaG93QW5hdG9teVwiOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk1vcnBob2xvZ2ljYWxseSBBbHRlcmVkIFN0cnVjdHVyZVwiLFxuICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjQ5NzU1MDAzXCIsXG4gICAgICAgIFwiY2lkXCI6IFwiNzA1MVwiLFxuICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAyMjExOThcIixcbiAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJNLTAxMDAwXCIsXG4gICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIlNlZ21lbnRhdGlvbiBQcm9wZXJ0eSBDYXRlZ29yaWVzXCIsXG4gICAgICAgIFwiVHlwZVwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE0NSxcbiAgICAgICAgICAgICAgNjAsXG4gICAgICAgICAgICAgIDY2XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJsb29kIGNsb3RcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY2xvdFwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU5XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAzMDIxNDhcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiTS0zNTAwMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGVzaW9uIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc1NzUzMDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMDUsXG4gICAgICAgICAgICAgIDIwNSxcbiAgICAgICAgICAgICAgMTAwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkN5c3RcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiY3lzdFwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU5XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTA3MDlcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiTS0zMzQwQVwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGVzaW9uIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjM2NzY0MzAwMVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTQwLFxuICAgICAgICAgICAgICAyMjQsXG4gICAgICAgICAgICAgIDIyOFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJFZGVtYVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJlZGVtYVwiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTU5XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTM2MDRcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiTS0zNjMwMFwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiTGVzaW9uIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc5NjU0MDAyXCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNTAsXG4gICAgICAgICAgICAgIDk4LFxuICAgICAgICAgICAgICA4M1xuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJFbWJvbHVzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcImVtYm9saXNtXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTlcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMTcwNDIxMlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJNLTM1MzAwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMZXNpb24gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNTU1ODQwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDE4OCxcbiAgICAgICAgICAgICAgNjUsXG4gICAgICAgICAgICAgIDI4XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkhlbW9ycmhhZ2VcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiYmxlZWRpbmdcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1OVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDE5MDgwXCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIk0tMzcwMDBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxlc2lvbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI1MDk2MDAwNVwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMTQ0LFxuICAgICAgICAgICAgICAyMzgsXG4gICAgICAgICAgICAgIDE0NFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJNYXNzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm1hc3NcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE1OVwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwNTc3NTU5XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIk0tMDMwMDBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkxlc2lvbiBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCI0MTQ3MDA3XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTYsXG4gICAgICAgICAgICAgIDE5MSxcbiAgICAgICAgICAgICAgMjE2XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIk5lY3Jvc2lzXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcIm5lY3Jvc2lzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNTlcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAyNzU0MFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJNLTU0MDAwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJMZXNpb24gU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiNjU3NDAwMVwiXG4gICAgICAgICAgfVxuICAgICAgICBdLFxuICAgICAgICBcInNob3dBbmF0b215XCI6IHRydWVcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJCb2R5IFN1YnN0YW5jZVwiLFxuICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjkxNzIwMDAyXCIsXG4gICAgICAgIFwiY2lkXCI6IFwiXCIsXG4gICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDUwNDA4MlwiLFxuICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDAwODBcIixcbiAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiXCIsXG4gICAgICAgIFwiVHlwZVwiOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDAsXG4gICAgICAgICAgICAgIDE0NSxcbiAgICAgICAgICAgICAgMzBcbiAgICAgICAgICAgIF0sXG4gICAgICAgICAgICBcIkNvZGVNZWFuaW5nXCI6IFwiQmlsZVwiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJiaWxlXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAwNTM4OFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTYwNjUwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjcwMTUwMDA0XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAxNzAsXG4gICAgICAgICAgICAgIDI1MCxcbiAgICAgICAgICAgICAgMjUwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIkJvZHkgZmx1aWRcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZmx1aWRcIixcbiAgICAgICAgICAgIFwiY2lkXCI6IFwiNzE2NlwiLFxuICAgICAgICAgICAgXCJVTUxTQ29uY2VwdFVJRFwiOiBcIkMwMDA1ODg5XCIsXG4gICAgICAgICAgICBcIkNvZGVWYWx1ZVwiOiBcIlQtRDAwNzBcIixcbiAgICAgICAgICAgIFwiY29udGV4dEdyb3VwTmFtZVwiOiBcIkNvbW1vbiBUaXNzdWUgU2VnbWVudGF0aW9uIFR5cGVzXCIsXG4gICAgICAgICAgICBcIlNOT01FRENUQ29uY2VwdElEXCI6IFwiMzI0NTcwMDVcIlxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgXCJyZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZVwiOiBbXG4gICAgICAgICAgICAgIDc4LFxuICAgICAgICAgICAgICA2MyxcbiAgICAgICAgICAgICAgMFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJGZWNlc1wiLFxuICAgICAgICAgICAgXCJDb2RpbmdTY2hlbWVEZXNpZ25hdG9yXCI6IFwiU1JUXCIsXG4gICAgICAgICAgICBcIjNkU2xpY2VyTGFiZWxcIjogXCJmZWNlc1wiLFxuICAgICAgICAgICAgXCJjaWRcIjogXCI3MTY2XCIsXG4gICAgICAgICAgICBcIlVNTFNDb25jZXB0VUlEXCI6IFwiQzAwMTU3MzNcIixcbiAgICAgICAgICAgIFwiQ29kZVZhbHVlXCI6IFwiVC01OTY2NlwiLFxuICAgICAgICAgICAgXCJjb250ZXh0R3JvdXBOYW1lXCI6IFwiQ29tbW9uIFRpc3N1ZSBTZWdtZW50YXRpb24gVHlwZXNcIixcbiAgICAgICAgICAgIFwiU05PTUVEQ1RDb25jZXB0SURcIjogXCIzOTQ3NzAwMlwiXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBcInJlY29tbWVuZGVkRGlzcGxheVJHQlZhbHVlXCI6IFtcbiAgICAgICAgICAgICAgMjE4LFxuICAgICAgICAgICAgICAyNTUsXG4gICAgICAgICAgICAgIDI1NVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiQ29kZU1lYW5pbmdcIjogXCJHYXNcIixcbiAgICAgICAgICAgIFwiQ29kaW5nU2NoZW1lRGVzaWduYXRvclwiOiBcIlNSVFwiLFxuICAgICAgICAgICAgXCIzZFNsaWNlckxhYmVsXCI6IFwiZ2FzXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDAxNzExMFwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJDLTEwMDgwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc0OTQ3MDA5XCJcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIFwicmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWVcIjogW1xuICAgICAgICAgICAgICAyMTQsXG4gICAgICAgICAgICAgIDIzMCxcbiAgICAgICAgICAgICAgMTMwXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJDb2RlTWVhbmluZ1wiOiBcIlVyaW5lXCIsXG4gICAgICAgICAgICBcIkNvZGluZ1NjaGVtZURlc2lnbmF0b3JcIjogXCJTUlRcIixcbiAgICAgICAgICAgIFwiM2RTbGljZXJMYWJlbFwiOiBcInVyaW5lXCIsXG4gICAgICAgICAgICBcImNpZFwiOiBcIjcxNjZcIixcbiAgICAgICAgICAgIFwiVU1MU0NvbmNlcHRVSURcIjogXCJDMDA0MjAzNlwiLFxuICAgICAgICAgICAgXCJDb2RlVmFsdWVcIjogXCJULTcwMDYwXCIsXG4gICAgICAgICAgICBcImNvbnRleHRHcm91cE5hbWVcIjogXCJDb21tb24gVGlzc3VlIFNlZ21lbnRhdGlvbiBUeXBlc1wiLFxuICAgICAgICAgICAgXCJTTk9NRURDVENvbmNlcHRJRFwiOiBcIjc4MDE0MDA1XCJcbiAgICAgICAgICB9XG4gICAgICAgIF0sXG4gICAgICAgIFwic2hvd0FuYXRvbXlcIjogZmFsc2VcbiAgICAgIH1cbiAgICBdXG4gIH1cbn1gO1xuXG5jb25zdCBwYXJzZWRKc29uID0gSlNPTi5wYXJzZShqc29uKTtcblxuZXhwb3J0IGRlZmF1bHQgcGFyc2VkSnNvbjtcbiIsImltcG9ydCBnZXRBY3RpdmVCcnVzaFRvb2xzRm9yRWxlbWVudCBmcm9tICcuL3V0aWwvZ2V0QWN0aXZlQnJ1c2hUb29sc0ZvckVsZW1lbnQuanMnO1xuaW1wb3J0IGdldEFjdGl2ZVZpZXdwb3J0RW5hYmxlZEVsZW1lbnQgZnJvbSAnLi91dGlsL2dldEFjdGl2ZVZpZXdwb3J0RW5hYmxlZEVsZW1lbnQuanMnO1xuaW1wb3J0IGdldEFjdGl2ZUZyZWVoYW5kVG9vbHNGb3JFbGVtZW50IGZyb20gJy4vdXRpbC9nZXRBY3RpdmVGcmVlaGFuZFRvb2xzRm9yRWxlbWVudC5qcyc7XG5pbXBvcnQgeyBzdG9yZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcblxuY29uc3QgYnJ1c2hNb2R1bGUgPSBzdG9yZS5tb2R1bGVzLmJydXNoO1xuXG5jb25zdCBhY3Rpb25zID0ge1xuICBuZXh0U2VnbWVudEZvckFjdGl2ZVZpZXdwb3J0OiAoeyB2aWV3cG9ydHMgfSkgPT4ge1xuICAgIGNvbnN0IGFjdGl2ZUJydXNoVG9vbHMgPSBnZXRBY3RpdmVCcnVzaFRvb2xzRm9yRWxlbWVudCh2aWV3cG9ydHMpO1xuXG4gICAgaWYgKCFhY3RpdmVCcnVzaFRvb2xzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGJydXNoVG9vbCA9IGFjdGl2ZUJydXNoVG9vbHNbMF07XG5cbiAgICBicnVzaFRvb2wubmV4dFNlZ21lbnQoKTtcbiAgfSxcbiAgcHJldmlvdXNTZWdtZW50Rm9yQWN0aXZlVmlld3BvcnQ6ICh7IHZpZXdwb3J0cyB9KSA9PiB7XG4gICAgY29uc3QgYWN0aXZlQnJ1c2hUb29scyA9IGdldEFjdGl2ZUJydXNoVG9vbHNGb3JFbGVtZW50KHZpZXdwb3J0cyk7XG5cbiAgICBpZiAoIWFjdGl2ZUJydXNoVG9vbHMubGVuZ3RoKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgYnJ1c2hUb29sID0gYWN0aXZlQnJ1c2hUb29sc1swXTtcblxuICAgIGJydXNoVG9vbC5wcmV2aW91c1NlZ21lbnQoKTtcbiAgfSxcbiAgaW5jcmVhc2VCcnVzaFNpemU6ICgpID0+IHtcbiAgICBjb25zdCBvbGRSYWRpdXMgPSBicnVzaE1vZHVsZS5zdGF0ZS5yYWRpdXM7XG4gICAgbGV0IG5ld1JhZGl1cyA9IE1hdGguZmxvb3Iob2xkUmFkaXVzICogMS4yKTtcblxuICAgIC8vIElmIGUuZy4gb25seSAyIHBpeGVscyBiaWcuIE1hdGguZmxvb3IoMioxLjIpID0gMi5cbiAgICAvLyBIZW5jZSwgaGF2ZSBtaW5pbXVtIGluY3JlbWVudCBvZiAxIHBpeGVsLlxuICAgIGlmIChuZXdSYWRpdXMgPT09IG9sZFJhZGl1cykge1xuICAgICAgbmV3UmFkaXVzICs9IDE7XG4gICAgfVxuXG4gICAgYnJ1c2hNb2R1bGUuc2V0dGVycy5yYWRpdXMobmV3UmFkaXVzKTtcbiAgfSxcbiAgZGVjcmVhc2VCcnVzaFNpemU6ICgpID0+IHtcbiAgICBjb25zdCBvbGRSYWRpdXMgPSBicnVzaE1vZHVsZS5zdGF0ZS5yYWRpdXM7XG4gICAgY29uc3QgbmV3UmFkaXVzID0gTWF0aC5mbG9vcihvbGRSYWRpdXMgKiAwLjgpO1xuXG4gICAgYnJ1c2hNb2R1bGUuc2V0dGVycy5yYWRpdXMobmV3UmFkaXVzKTtcbiAgfSxcbiAgY2FuY2VsRnJlZWhhbmREcmF3aW5nOiAoeyB2aWV3cG9ydHMgfSkgPT4ge1xuICAgIGNvbnN0IGVuYWJsZWRFbGVtZW50ID0gZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudChcbiAgICAgIHZpZXdwb3J0cy52aWV3cG9ydFNwZWNpZmljRGF0YSxcbiAgICAgIHZpZXdwb3J0cy5hY3RpdmVWaWV3cG9ydEluZGV4XG4gICAgKTtcblxuICAgIGNvbnN0IGFjdGl2ZUZyZWVoYW5kVG9vbHMgPSBnZXRBY3RpdmVGcmVlaGFuZFRvb2xzRm9yRWxlbWVudCh2aWV3cG9ydHMpO1xuXG4gICAgaWYgKCFhY3RpdmVGcmVlaGFuZFRvb2xzLmxlbmd0aCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGFjdGl2ZUZyZWVoYW5kVG9vbHNbMF0uY2FuY2VsRHJhd2luZyhlbmFibGVkRWxlbWVudC5lbGVtZW50KTtcbiAgfVxufTtcblxuY29uc3QgZGVmaW5pdGlvbnMgPSB7XG4gIG5leHRTZWdtZW50Rm9yQWN0aXZlVmlld3BvcnQ6IHtcbiAgICBjb21tYW5kRm46IGFjdGlvbnMubmV4dFNlZ21lbnRGb3JBY3RpdmVWaWV3cG9ydCxcbiAgICBzdG9yZUNvbnRleHRzOiBbJ3ZpZXdwb3J0cyddXG4gIH0sXG4gIHByZXZpb3VzU2VnbWVudEZvckFjdGl2ZVZpZXdwb3J0OiB7XG4gICAgY29tbWFuZEZuOiBhY3Rpb25zLnByZXZpb3VzU2VnbWVudEZvckFjdGl2ZVZpZXdwb3J0LFxuICAgIHN0b3JlQ29udGV4dHM6IFsndmlld3BvcnRzJ11cbiAgfSxcbiAgaW5jcmVhc2VCcnVzaFNpemU6IHtcbiAgICBjb21tYW5kRm46IGFjdGlvbnMuaW5jcmVhc2VCcnVzaFNpemVcbiAgfSxcbiAgZGVjcmVhc2VCcnVzaFNpemU6IHtcbiAgICBjb21tYW5kRm46IGFjdGlvbnMuZGVjcmVhc2VCcnVzaFNpemVcbiAgfSxcbiAgY2FuY2VsRnJlZWhhbmREcmF3aW5nOiB7XG4gICAgY29tbWFuZEZuOiBhY3Rpb25zLmNhbmNlbEZyZWVoYW5kRHJhd2luZyxcbiAgICBzdG9yZUNvbnRleHRzOiBbJ3ZpZXdwb3J0cyddXG4gIH1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgYWN0aW9ucyxcbiAgZGVmaW5pdGlvbnMsXG4gIGRlZmF1bHRDb250ZXh0OiAnQUNUSVZFX1ZJRVdQT1JUOjpDT1JORVJTVE9ORSdcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vKipcbiAqIEBjbGFzcyBNZW51SU9CdXR0b25zIC0gUmVuZGVycyBJbXBvcnQgYW5kL29yIEV4cG9ydCBidXR0b25zIGlmXG4gKiB0aGlzLnByb3BzLkltcG9ydENhbGxiYWNrT3JDb21wb25lbnQgYW5kL29yXG4gKiB0aGlzLnByb3BzLkV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQgYXJlIGRlZmluZWQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lbnVJT0J1dHRvbnMgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQsXG4gICAgICBFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50LFxuICAgICAgb25JbXBvcnRCdXR0b25DbGljayxcbiAgICAgIG9uRXhwb3J0QnV0dG9uQ2xpY2tcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCAmJiAhRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXY+XG4gICAgICAgIHtJbXBvcnRDYWxsYmFja09yQ29tcG9uZW50ICYmIChcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17b25JbXBvcnRCdXR0b25DbGlja30+XG4gICAgICAgICAgICBJbXBvcnRcbiAgICAgICAgICA8L2E+XG4gICAgICAgICl9XG4gICAgICAgIHtFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50ICYmIChcbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17b25FeHBvcnRCdXR0b25DbGlja30+XG4gICAgICAgICAgICBFeHBvcnRcbiAgICAgICAgICA8L2E+XG4gICAgICAgICl9XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCIvKipcbiAqIG9uRXhwb3J0QnV0dG9uQ2xpY2sgLSBIZWxwZXIgZnVuY3Rpb24gZm9yIGFubm90YXRpb24gbWVudSBjb21wb25lbnRzLlxuICogQ2FsbHMgRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudCBpZiBpdCBpcyBhIGZ1bmNpdG9uLCBvciBzZXRzXG4gKiB0aGlzLnN0YXRlLmV4cG9ydGluZyB0byB0cnVlIGlmIGl0IGlzIGEgY29tcG9uZW50LlxuICpcbiAqIEByZXR1cm5zIHtudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkV4cG9ydEJ1dHRvbkNsaWNrKCkge1xuICBjb25zdCB7IEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgaWYgKEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgZXhwb3J0aW5nOiB0cnVlIH0pO1xuICB9IGVsc2Uge1xuICAgIEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQoKTtcbiAgfVxufVxuIiwiLyoqXG4gKiBvbklPQ2FuY2VsIC0gSGVscGVyIGZ1bmN0aW9uIGZvciBhbm5vdGF0aW9uIG1lbnUgY29tcG9uZW50cy4gU2V0c1xuICogdGhpcy5zdGF0ZS5pbXBvcnRpbmcgYW5kIHRoaXMuc3RhdGUuZXhwb3J0aW5nIHRvIGZhbHNlLlxuICpcbiAqIEByZXR1cm5zIHtudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbklPQ2FuY2VsKCkge1xuICB0aGlzLnNldFN0YXRlKHtcbiAgICBpbXBvcnRpbmc6IGZhbHNlLFxuICAgIGV4cG9ydGluZzogZmFsc2VcbiAgfSk7XG59XG4iLCIvKipcbiAqIG9uSW1wb3J0QnV0dG9uQ2xpY2sgLSBIZWxwZXIgZnVuY3Rpb24gZm9yIGFubm90YXRpb24gbWVudSBjb21wb25lbnRzLlxuICogQ2FsbHMgSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCBpZiBpdCBpcyBhIGZ1bmNpdG9uLCBvciBzZXRzXG4gKiB0aGlzLnN0YXRlLmltcG9ydGluZyB0byB0cnVlIGlmIGl0IGlzIGEgY29tcG9uZW50LlxuICpcbiAqIEByZXR1cm5zIHtudWxsfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBvbkltcG9ydEJ1dHRvbkNsaWNrKCkge1xuICBjb25zb2xlLmxvZyh0aGlzKTtcblxuICBjb25zdCB7IEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgaWYgKEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgaW1wb3J0aW5nOiB0cnVlIH0pO1xuICB9IGVsc2Uge1xuICAgIEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQoKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBMb2NrZWRDb2xsZWN0aW9uc0xpc3RJdGVtIGZyb20gJy4vTG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbS5qcyc7XG5cbi8vIGltcG9ydCAnLi9yb2lDb250b3VyTWVudS5zdHlsJztcblxuLyoqXG4gKiBAY2xhc3MgTG9ja2VkQ29sbGVjdGlvbnNMaXN0IC0gUmVuZGVycyBhIGxpc3Qgb2YgTG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbXMsXG4gKiBkaXNwbGF5aW5nIG1ldGFkYXRhIG9mIGxvY2tlZCBST0lDb250b3VyIENvbGxlY3Rpb25zLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NrZWRDb2xsZWN0aW9uc0xpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbG9ja2VkQ29sbGVjdGlvbnMsIG9uVW5sb2NrQ2xpY2ssIHNlcmllc0luc3RhbmNlVWlkIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxSZWFjdC5GcmFnbWVudD5cbiAgICAgICAge2xvY2tlZENvbGxlY3Rpb25zLm1hcChjb2xsZWN0aW9uID0+IChcbiAgICAgICAgICA8TG9ja2VkQ29sbGVjdGlvbnNMaXN0SXRlbVxuICAgICAgICAgICAga2V5PXtjb2xsZWN0aW9uLm1ldGFkYXRhLnVpZH1cbiAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICBvblVubG9ja0NsaWNrPXtvblVubG9ja0NsaWNrfVxuICAgICAgICAgICAgc2VyaWVzSW5zdGFuY2VVaWQ9e3Nlcmllc0luc3RhbmNlVWlkfVxuICAgICAgICAgIC8+XG4gICAgICAgICkpfVxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvcm5lcnN0b25lVG9vbHMgZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG4vLyBpbXBvcnQgJy4vcm9pQ29udG91ck1lbnUuc3R5bCc7XG5cbmNvbnN0IG1vZHVsZXMgPSBjb3JuZXJzdG9uZVRvb2xzLnN0b3JlLm1vZHVsZXM7XG5cbi8qKlxuICogQGNsYXNzIExvY2tlZENvbGxlY3Rpb25zTGlzdEl0ZW0gLSBSZW5kZXJzIG1ldGFkYXRhIGZvciBhbiBpbmRpdmlkdWFsIGxvY2tlZFxuICogUk9JQ29udG91ciBDb2xsZWN0aW9uLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NrZWRDb2xsZWN0aW9uc0xpc3RJdGVtIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGNvbnN0IHZpc2libGUgPSB0aGlzLnByb3BzLmNvbGxlY3Rpb24ubWV0YWRhdGEudmlzaWJsZTtcblxuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBleHBhbmRlZDogZmFsc2UsXG4gICAgICB2aXNpYmxlXG4gICAgfTtcblxuICAgIHRoaXMub25Ub2dnbGVWaXNpYmlsaXR5Q2xpY2sgPSB0aGlzLm9uVG9nZ2xlVmlzaWJpbGl0eUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblNob3dIaWRlQ2xpY2sgPSB0aGlzLm9uU2hvd0hpZGVDbGljay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uVG9nZ2xlVmlzaWJpbGl0eUNsaWNrIC0gQ2FsbGJhY2sgdGhhdCB0b2dnbGVzIHRoZSBleHBhbmRzL2NvbGxhcHNlcyB0aGVcbiAgICogbGlzdCBvZiBjb2xsZWN0aW9uIG1ldGFkYXRhLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uVG9nZ2xlVmlzaWJpbGl0eUNsaWNrKCkge1xuICAgIGNvbnN0IHsgZXhwYW5kZWQgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgZXhwYW5kZWQ6ICFleHBhbmRlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvblNob3dIaWRlQ2xpY2sgLSBUb2dnbGVzIHRoZSB2aXNpYmlsaXR5IG9mIHRoZSBjb2xsZWN0aW9ucyBST0kgQ29udG91cnMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25TaG93SGlkZUNsaWNrKCkge1xuICAgIGNvbnN0IHsgY29sbGVjdGlvbiwgc2VyaWVzSW5zdGFuY2VVaWQgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyB2aXNpYmxlIH0gPSB0aGlzLnN0YXRlO1xuICAgIGNvbnN0IHN0cnVjdHVyZVNldCA9IG1vZHVsZXMuZnJlZWhhbmQzRC5nZXR0ZXJzLnN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgY29sbGVjdGlvbi5tZXRhZGF0YS51aWQpO1xuXG4gICAgc3RydWN0dXJlU2V0LnZpc2libGUgPSAhdmlzaWJsZTtcbiAgICB0aGlzLnNldFN0YXRlKHsgdmlzaWJsZTogIXZpc2libGUgfSk7XG5cbiAgICAvLyBVcGRhdGUgdmlld3BvcnQuXG4gICAgLy8gY29uc3QgZWxlbWVudCA9IE9ISUYudmlld2VyYmFzZS52aWV3cG9ydFV0aWxzLmdldEFjdGl2ZVZpZXdwb3J0RWxlbWVudCgpO1xuICAgIC8vIFRPRE9cbiAgICAvLyBjb3JuZXJzdG9uZS51cGRhdGVJbWFnZShlbGVtZW50KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IGNvbGxlY3Rpb24sIG9uVW5sb2NrQ2xpY2sgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgeyBleHBhbmRlZCwgdmlzaWJsZSB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IG1ldGFkYXRhID0gY29sbGVjdGlvbi5tZXRhZGF0YTtcbiAgICBjb25zdCBST0lDb250b3VyQXJyYXkgPSBjb2xsZWN0aW9uLlJPSUNvbnRvdXJBcnJheTtcblxuICAgIGNvbnN0IHZpc2libGVCdXR0b24gPSBleHBhbmRlZCA/ICdmYSBmYS1taW51cy1zcXVhcmUnIDogJ2ZhIGZhLXBsdXMtc3F1YXJlJztcbiAgICBjb25zdCBzaG93SGlkZUljb24gPSB2aXNpYmxlID8gJ2ZhIGZhLWV5ZScgOiAnZmEgZmEtZXllLXNsYXNoJztcblxuICAgIHJldHVybiAoXG4gICAgICA8UmVhY3QuRnJhZ21lbnQ+XG4gICAgICAgIDx0ciBjbGFzc05hbWU9XCJyb2ktbGlzdC1oZWFkZXJcIj5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPlxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCIgb25DbGljaz17dGhpcy5vblRvZ2dsZVZpc2liaWxpdHlDbGlja30+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT17dmlzaWJsZUJ1dHRvbn0gLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICAgIDx0aCBjb2xTcGFuPVwiMlwiPnttZXRhZGF0YS5uYW1lfTwvdGg+XG4gICAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbnRlcmVkLWNlbGxcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0biBidG4tc20gYnRuLXNlY29uZGFyeVwiIG9uQ2xpY2s9e3RoaXMub25TaG93SGlkZUNsaWNrfT5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPXtzaG93SGlkZUljb259IC8+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC90ZD5cbiAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPlxuICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIG9uVW5sb2NrQ2xpY2sobWV0YWRhdGEudWlkKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtdW5sb2NrXCIgLz5cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8L3RkPlxuICAgICAgICA8L3RyPlxuXG4gICAgICAgIHtleHBhbmRlZCAmJiAoXG4gICAgICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICAgICAgPHRyPlxuICAgICAgICAgICAgICA8dGggLz5cbiAgICAgICAgICAgICAgPHRoPk5hbWU8L3RoPlxuICAgICAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPkNvbnRvdXJzPC90aD5cbiAgICAgICAgICAgIDwvdHI+XG4gICAgICAgICAgICB7Uk9JQ29udG91ckFycmF5Lm1hcChyb2lDb250b3VyID0+IChcbiAgICAgICAgICAgICAgPHRyIGtleT17cm9pQ29udG91ci5tZXRhZGF0YS51aWR9PlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJsZWZ0LWFsaWduZWQtY2VsbFwiPlxuICAgICAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtc3F1YXJlXCIgc3R5bGU9e3sgY29sb3I6IHJvaUNvbnRvdXIubWV0YWRhdGEuY29sb3IgfX0gLz5cbiAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDx0ZCBjbGFzc05hbWU9XCJsZWZ0LWFsaWduZWQtY2VsbFwiPntyb2lDb250b3VyLm1ldGFkYXRhLm5hbWV9PC90ZD5cbiAgICAgICAgICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPntyb2lDb250b3VyLm1ldGFkYXRhLnBvbHlnb25Db3VudH08L3RkPlxuICAgICAgICAgICAgICA8L3RyPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICAgICAgKX1cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNZW51SU9CdXR0b25zIGZyb20gJy4uL2NvbW1vbi9NZW51SU9CdXR0b25zLmpzJztcbmltcG9ydCBXb3JraW5nQ29sbGVjdGlvbkxpc3QgZnJvbSAnLi9Xb3JraW5nQ29sbGVjdGlvbkxpc3QuanMnO1xuaW1wb3J0IExvY2tlZENvbGxlY3Rpb25zTGlzdCBmcm9tICcuL0xvY2tlZENvbGxlY3Rpb25zTGlzdC5qcyc7XG5pbXBvcnQgUm9pQ29udG91clNldHRpbmdzIGZyb20gJy4vUm9pQ29udG91clNldHRpbmdzLmpzJztcbmltcG9ydCBjb3JuZXJzdG9uZVRvb2xzIGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCB1bmxvY2tTdHJ1Y3R1cmVTZXQgZnJvbSAnLi4vLi4vdXRpbC91bmxvY2tTdHJ1Y3R1cmVTZXQuanMnO1xuaW1wb3J0IG9uSU9DYW5jZWwgZnJvbSAnLi4vY29tbW9uL2hlbHBlcnMvb25JT0NhbmNlbC5qcyc7XG5pbXBvcnQgb25JbXBvcnRCdXR0b25DbGljayBmcm9tICcuLi9jb21tb24vaGVscGVycy9vbkltcG9ydEJ1dHRvbkNsaWNrLmpzJztcbmltcG9ydCBvbkV4cG9ydEJ1dHRvbkNsaWNrIGZyb20gJy4uL2NvbW1vbi9oZWxwZXJzL29uRXhwb3J0QnV0dG9uQ2xpY2suanMnO1xuLy8gaW1wb3J0IHN0eWxlIGZyb20gJy4vcm9pQ29udG91ck1lbnUuc3R5bCc7XG5cbmltcG9ydCBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50IGZyb20gJy4uLy4uL3V0aWwvZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudC5qcyc7XG5pbXBvcnQgZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQgZnJvbSAnLi4vLi4vdXRpbC9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudC5qcyc7XG5cbmNvbnN0IG1vZHVsZXMgPSBjb3JuZXJzdG9uZVRvb2xzLnN0b3JlLm1vZHVsZXM7XG5cbi8qKlxuICogQGNsYXNzIFJvaUNvbnRvdXJNZW51IC0gUmVuZGVycyBhIG1lbnUgZm9yIGltcG9ydGluZywgZXhwb3J0aW5nLCBjcmVhdGluZ1xuICogYW5kIHJlbmFtaW5nIFJPSSBDb250b3Vycy4gQXMgd2VsbCBhcyBzZXR0aW5nIGNvbmZpZ3VyYXRpb24gc2V0dGluZ3MgZm9yXG4gKiB0aGUgRnJlZWhhbmQzRHRvb2wuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvaUNvbnRvdXJNZW51IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIC8vIGFkZCBldmVudCBsaXN0bmVycyB0byBjb3JuZXJzdG9uZS5cblxuICAgIGNvbnN0IGVuYWJsZWRFbGVtZW50ID0gZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudChwcm9wcy52aWV3cG9ydHMsIHByb3BzLmFjdGl2ZUluZGV4KTtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50KGVuYWJsZWRFbGVtZW50KTtcblxuICAgIHRoaXMuZ2V0Um9pQ29udG91ckxpc3QgPSB0aGlzLmdldFJvaUNvbnRvdXJMaXN0LmJpbmQodGhpcyk7XG5cbiAgICBsZXQgd29ya2luZ0NvbGxlY3Rpb24gPSBbXTtcbiAgICBsZXQgbG9ja2VkQ29sbGVjdGlvbnMgPSBbXTtcbiAgICBsZXQgYWN0aXZlUk9JQ29udG91ckluZGV4ID0gMTtcblxuICAgIGlmIChzZXJpZXNJbnN0YW5jZVVpZCkge1xuICAgICAgY29uc3Qgcm9pQ29udG91ckxpc3QgPSB0aGlzLmdldFJvaUNvbnRvdXJMaXN0KHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgICAgd29ya2luZ0NvbGxlY3Rpb24gPSByb2lDb250b3VyTGlzdC53b3JraW5nQ29sbGVjdGlvbjtcbiAgICAgIGxvY2tlZENvbGxlY3Rpb25zID0gcm9pQ29udG91ckxpc3QubG9ja2VkQ29sbGVjdGlvbnM7XG4gICAgICBhY3RpdmVST0lDb250b3VySW5kZXggPSByb2lDb250b3VyTGlzdC5hY3RpdmVST0lDb250b3VySW5kZXg7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIHdvcmtpbmdDb2xsZWN0aW9uLFxuICAgICAgbG9ja2VkQ29sbGVjdGlvbnMsXG4gICAgICB1bmxvY2tDb25maXJtYXRpb25PcGVuOiBmYWxzZSxcbiAgICAgIHJvaUNvbGxlY3Rpb25Ub1VubG9jazogJycsXG4gICAgICBhY3RpdmVST0lDb250b3VySW5kZXgsXG4gICAgICBpbXBvcnRpbmc6IGZhbHNlLFxuICAgICAgZXhwb3J0aW5nOiBmYWxzZSxcbiAgICAgIHNlcmllc0luc3RhbmNlVWlkXG4gICAgfTtcblxuICAgIHRoaXMub25OZXdSb2lCdXR0b25DbGljayA9IHRoaXMub25OZXdSb2lCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Sb2lDaGFuZ2UgPSB0aGlzLm9uUm9pQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblJlbmFtZUJ1dHRvbkNsaWNrID0gdGhpcy5vblJlbmFtZUJ1dHRvbkNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5jb25maXJtVW5sb2NrT25VbmxvY2tDbGljayA9IHRoaXMuY29uZmlybVVubG9ja09uVW5sb2NrQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVW5sb2NrQ2FuY2VsQ2xpY2sgPSB0aGlzLm9uVW5sb2NrQ2FuY2VsQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uVW5sb2NrQ29uZmlybUNsaWNrID0gdGhpcy5vblVubG9ja0NvbmZpcm1DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25JT0NvbXBsZXRlID0gdGhpcy5vbklPQ29tcGxldGUuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSU9DYW5jZWwgPSBvbklPQ2FuY2VsLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkltcG9ydEJ1dHRvbkNsaWNrID0gb25JbXBvcnRCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25FeHBvcnRCdXR0b25DbGljayA9IG9uRXhwb3J0QnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBnZXRSb2lDb250b3VyTGlzdCAtIHJldHVybnMgdGhlIHdvcmtpbmdDb2xsZWN0aW9uLCBsb2NrZWRDb2xsZWN0aW9uc1xuICAgKiBhbmQgdGggYWN0aXZlUk9JQ29udG91ckluZGV4LlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIGdldFJvaUNvbnRvdXJMaXN0KHNlcmllc0luc3RhbmNlVWlkKSB7XG4gICAgc2VyaWVzSW5zdGFuY2VVaWQgPSBzZXJpZXNJbnN0YW5jZVVpZCB8fCB0aGlzLnN0YXRlLnNlcmllc0luc3RhbmNlVWlkO1xuXG4gICAgbGV0IHdvcmtpbmdDb2xsZWN0aW9uID0gW107XG4gICAgbGV0IGxvY2tlZENvbGxlY3Rpb25zID0gW107XG4gICAgbGV0IGFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9IDA7XG5cbiAgICBpZiAoc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICAgIGNvbnN0IGZyZWVoYW5kM0RNb2R1bGUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG5cbiAgICAgIGlmIChmcmVlaGFuZDNETW9kdWxlLmdldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKSkge1xuICAgICAgICBhY3RpdmVST0lDb250b3VySW5kZXggPSBmcmVlaGFuZDNETW9kdWxlLmdldHRlcnMuYWN0aXZlUk9JQ29udG91ckluZGV4KHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICAgIH1cblxuICAgICAgd29ya2luZ0NvbGxlY3Rpb24gPSB0aGlzLmNvbnN0cnVjdG9yLl93b3JraW5nQ29sbGVjdGlvbihzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgICBsb2NrZWRDb2xsZWN0aW9ucyA9IHRoaXMuY29uc3RydWN0b3IuX2xvY2tlZENvbGxlY3Rpb25zKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgd29ya2luZ0NvbGxlY3Rpb24sXG4gICAgICBsb2NrZWRDb2xsZWN0aW9ucyxcbiAgICAgIGFjdGl2ZVJPSUNvbnRvdXJJbmRleFxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogcmVmcmVzaFJvaUNvbnRvdXJMaXN0IC0gR3JhYnMgdGhlIFJPSSBDb250b3VycyBmcm9tIHRoZSBmcmVlaGFuZDNEIHN0b3JlIGFuZFxuICAgKiBwb3B1bGF0ZXMgc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgcmVmcmVzaFJvaUNvbnRvdXJMaXN0KCkge1xuICAgIGNvbnN0IHNlcmllc0luc3RhbmNlVWlkID0gdGhpcy5zdGF0ZS5zZXJpZXNJbnN0YW5jZVVpZDtcblxuICAgIGNvbnN0IHsgd29ya2luZ0NvbGxlY3Rpb24sIGxvY2tlZENvbGxlY3Rpb25zLCBhY3RpdmVST0lDb250b3VySW5kZXggfSA9IHRoaXMuZ2V0Um9pQ29udG91ckxpc3Qoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICB3b3JraW5nQ29sbGVjdGlvbixcbiAgICAgIGxvY2tlZENvbGxlY3Rpb25zLFxuICAgICAgYWN0aXZlUk9JQ29udG91ckluZGV4XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25JT0NvbXBsZXRlIC0gQSBjYWxsYmFjayBleGVjdXRlZCBvbiBzdWNjZXNmdWwgY29tcGxldGlvbiBvZiBhblxuICAgKiBJTyBvcHBlcmF0aW9uLiBSZWNhbGN1bGF0ZXMgdGhlIFJPSSBDb250b3VyIENvbGxlY3Rpb24gc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHt0eXBlfSAgZGVzY3JpcHRpb25cbiAgICovXG4gIG9uSU9Db21wbGV0ZSgpIHtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IHRoaXMuc3RhdGUuc2VyaWVzSW5zdGFuY2VVaWQ7XG4gICAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gbW9kdWxlcy5mcmVlaGFuZDNEO1xuICAgIGxldCBhY3RpdmVST0lDb250b3VySW5kZXggPSAwO1xuXG4gICAgaWYgKG1vZHVsZXMuZnJlZWhhbmQzRC5nZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCkpIHtcbiAgICAgIGFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLmFjdGl2ZVJPSUNvbnRvdXJJbmRleChzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd29ya2luZ0NvbGxlY3Rpb24gPSB0aGlzLmNvbnN0cnVjdG9yLl93b3JraW5nQ29sbGVjdGlvbihzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgY29uc3QgbG9ja2VkQ29sbGVjdGlvbnMgPSB0aGlzLmNvbnN0cnVjdG9yLl9sb2NrZWRDb2xsZWN0aW9ucyhzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHdvcmtpbmdDb2xsZWN0aW9uLFxuICAgICAgbG9ja2VkQ29sbGVjdGlvbnMsXG4gICAgICBhY3RpdmVST0lDb250b3VySW5kZXgsXG4gICAgICBpbXBvcnRpbmc6IGZhbHNlLFxuICAgICAgZXhwb3J0aW5nOiBmYWxzZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uTmV3Um9pQnV0dG9uQ2xpY2sgLSBDYWxsYmFjayB0aGF0IGFkZHMgYSBuZXcgUk9JQ29udG91ciB0byB0aGVcbiAgICogYWN0aXZlIHNlcmllcy5cbiAgICpcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBvbk5ld1JvaUJ1dHRvbkNsaWNrKCkge1xuICAgIGNvbnN0IHNlcmllc0luc3RhbmNlVWlkID0gdGhpcy5zdGF0ZS5zZXJpZXNJbnN0YW5jZVVpZDtcblxuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcbiAgICBsZXQgc2VyaWVzID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIGlmICghc2VyaWVzKSB7XG4gICAgICBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgICAgc2VyaWVzID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVST0lDb250b3VySW5kZXggPSBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5ST0lDb250b3VyQW5kU2V0SW5kZXhBY3RpdmUoXG4gICAgICBzZXJpZXNJbnN0YW5jZVVpZCxcbiAgICAgICdERUZBVUxUJyxcbiAgICAgICdVbm5hbWVkIExlc2lvbidcbiAgICApO1xuXG4gICAgY29uc3Qgd29ya2luZ0NvbGxlY3Rpb24gPSB0aGlzLmNvbnN0cnVjdG9yLl93b3JraW5nQ29sbGVjdGlvbihzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgd29ya2luZ0NvbGxlY3Rpb24sIGFjdGl2ZVJPSUNvbnRvdXJJbmRleCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvblJvaUNoYW5nZSAtIENhbGxiYWNrIHRoYXQgY2hhbmdlcyB0aGUgYWN0aXZlIFJPSSBDb250b3VyIGJlaW5nIGRyYXduLlxuICAgKlxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHJvaUNvbnRvdXJJbmRleCBUaGUgaW5kZXggb2YgdGhlIFJPSSBDb250b3VyLlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uUm9pQ2hhbmdlKHJvaUNvbnRvdXJJbmRleCkge1xuICAgIGNvbnN0IHNlcmllc0luc3RhbmNlVWlkID0gdGhpcy5zdGF0ZS5zZXJpZXNJbnN0YW5jZVVpZDtcblxuICAgIG1vZHVsZXMuZnJlZWhhbmQzRC5zZXR0ZXJzLmFjdGl2ZVJPSUNvbnRvdXJJbmRleChyb2lDb250b3VySW5kZXgsIHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVST0lDb250b3VySW5kZXg6IHJvaUNvbnRvdXJJbmRleCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvblJlbmFtZUJ1dHRvbkNsaWNrIC0gQSBjYWxsYmFjayB0aGF0IHRyaWdnZXJzIG5hbWUgaW5wdXQgZm9yIGFuIFJPSUNvbnRvdXIuXG4gICAqXG4gICAqIEBwYXJhbSAge29iamVjdH0gbWV0YWRhdGEgVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNvbnRvdXIncyBtZXRhZGF0YS5cbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBvblJlbmFtZUJ1dHRvbkNsaWNrKG1ldGFkYXRhKSB7XG4gICAgLy8gY29uc3Qgc2VyaWVzSW5zdGFuY2VVaWQgPSB0aGlzLnN0YXRlLnNlcmllc0luc3RhbmNlVWlkO1xuICAgIC8vIFRPRE8gLT4gc3dpdGNoIHRoZSBlbGVtZW50IHRvIGEgdGV4dCBib3ggYW5kIGFsbG93IGlucHV0LlxuICB9XG5cbiAgLyoqXG4gICAqIGNvbmZpcm1VbmxvY2tPblVubG9ja0NsaWNrIC0gQSBjYWxsYmFjayB0aGF0IHRyaWdnZXJzIGNvbmZpcm1hdGlvbiBvZiB0aGVcbiAgICogdW5sb2NraW5nIG9mIGFuIFJPSSBDb250b3VyIENvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSAge1N0cmluZ30gc3RydWN0dXJlU2V0VWlkIFRoZSBVSUQgb2YgdGhlIHN0cnVjdHVyZVNldC5cbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBjb25maXJtVW5sb2NrT25VbmxvY2tDbGljayhzdHJ1Y3R1cmVTZXRVaWQpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIHVubG9ja0NvbmZpcm1hdGlvbk9wZW46IHRydWUsXG4gICAgICByb2lDb2xsZWN0aW9uVG9VbmxvY2s6IHN0cnVjdHVyZVNldFVpZFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uVW5sb2NrQ29uZmlybUNsaWNrIC0gQSBjYWxsYmFjayB0aGF0IHVubG9ja3MgYW4gUk9JIENvbnRvdXIgQ29sbGVjdGlvbiBhbmRcbiAgICogbW92ZXMgdGhlIFJPSSBDb250b3VycyB0byB0aGUgd29ya2luZyBjb2xsZWN0aW9uLlxuICAgKlxuICAgKiBAcmV0dXJucyB7dHlwZX0gIGRlc2NyaXB0aW9uXG4gICAqL1xuICBvblVubG9ja0NvbmZpcm1DbGljaygpIHtcbiAgICBjb25zdCB7IHNlcmllc0luc3RhbmNlVWlkLCByb2lDb2xsZWN0aW9uVG9VbmxvY2sgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICB1bmxvY2tTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHJvaUNvbGxlY3Rpb25Ub1VubG9jayk7XG5cbiAgICBjb25zdCB3b3JraW5nQ29sbGVjdGlvbiA9IHRoaXMuY29uc3RydWN0b3IuX3dvcmtpbmdDb2xsZWN0aW9uKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICBjb25zdCBsb2NrZWRDb2xsZWN0aW9ucyA9IHRoaXMuY29uc3RydWN0b3IuX2xvY2tlZENvbGxlY3Rpb25zKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgdW5sb2NrQ29uZmlybWF0aW9uT3BlbjogZmFsc2UsXG4gICAgICB3b3JraW5nQ29sbGVjdGlvbixcbiAgICAgIGxvY2tlZENvbGxlY3Rpb25zXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25VbmxvY2tDYW5jZWxDbGljayAtIEEgY2FsbGJhY2sgdGhhdCBjbG9zZXMgdGhlIHVubG9jayBjb25maXJtYXRpb24gd2luZG93XG4gICAqIGFuZCBhYm9ydHMgdW5sb2NraW5nLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uVW5sb2NrQ2FuY2VsQ2xpY2soKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHVubG9ja0NvbmZpcm1hdGlvbk9wZW46IGZhbHNlIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIF93b3JraW5nQ29sbGVjdGlvbiAtIFJldHVybnMgYSBsaXN0IG9mIHRoZSBST0kgQ29udG91cnNcbiAgICogaW4gdGhlIHdvcmtpbmcgY29sbGVjdGlvbi5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdFtdfSBBbiBhcnJheSBvZiBST0kgQ29udG91cnMuXG4gICAqL1xuICBzdGF0aWMgX3dvcmtpbmdDb2xsZWN0aW9uKHNlcmllc0luc3RhbmNlVWlkKSB7XG4gICAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gbW9kdWxlcy5mcmVlaGFuZDNEO1xuXG4gICAgbGV0IHNlcmllcyA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICBpZiAoIXNlcmllcykge1xuICAgICAgZnJlZWhhbmQzRFN0b3JlLnNldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICAgIHNlcmllcyA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgfVxuXG4gICAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIGNvbnN0IFJPSUNvbnRvdXJDb2xsZWN0aW9uID0gc3RydWN0dXJlU2V0LlJPSUNvbnRvdXJDb2xsZWN0aW9uO1xuXG4gICAgY29uc3Qgd29ya2luZ0NvbGxlY3Rpb24gPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgUk9JQ29udG91ckNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChST0lDb250b3VyQ29sbGVjdGlvbltpXSkge1xuICAgICAgICB3b3JraW5nQ29sbGVjdGlvbi5wdXNoKHtcbiAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICBtZXRhZGF0YTogUk9JQ29udG91ckNvbGxlY3Rpb25baV1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHdvcmtpbmdDb2xsZWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIF9sb2NrZWRDb2xsZWN0aW9ucyAtIFJldHVybnMgYSBsaXN0IG9mIGxvY2tlZCBST0kgQ29udG91ciBDb2xsZWN0aW9ucy5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gQW4gYXJyYXkgb2YgbG9ja2VkIFJPSSBDb250b3VyIENvbGxlY3Rpb25zLlxuICAgKi9cbiAgc3RhdGljIF9sb2NrZWRDb2xsZWN0aW9ucyhzZXJpZXNJbnN0YW5jZVVpZCkge1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcblxuICAgIGxldCBzZXJpZXMgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgaWYgKCFzZXJpZXMpIHtcbiAgICAgIGZyZWVoYW5kM0RTdG9yZS5zZXR0ZXJzLnNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gICAgICBzZXJpZXMgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgIH1cblxuICAgIGNvbnN0IHN0cnVjdHVyZVNldENvbGxlY3Rpb24gPSBzZXJpZXMuc3RydWN0dXJlU2V0Q29sbGVjdGlvbjtcbiAgICBjb25zdCBsb2NrZWRDb2xsZWN0aW9ucyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uW2ldO1xuXG4gICAgICBpZiAoc3RydWN0dXJlU2V0LnVpZCA9PT0gJ0RFRkFVTFQnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBST0lDb250b3VyQ29sbGVjdGlvbiA9IHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvbjtcbiAgICAgIGNvbnN0IFJPSUNvbnRvdXJBcnJheSA9IFtdO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IFJPSUNvbnRvdXJDb2xsZWN0aW9uLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChST0lDb250b3VyQ29sbGVjdGlvbltqXSkge1xuICAgICAgICAgIFJPSUNvbnRvdXJBcnJheS5wdXNoKHtcbiAgICAgICAgICAgIGluZGV4OiBqLFxuICAgICAgICAgICAgbWV0YWRhdGE6IFJPSUNvbnRvdXJDb2xsZWN0aW9uW2pdXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbG9ja2VkQ29sbGVjdGlvbnMucHVzaCh7XG4gICAgICAgIG1ldGFkYXRhOiBzdHJ1Y3R1cmVTZXQsXG4gICAgICAgIFJPSUNvbnRvdXJBcnJheVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxvY2tlZENvbGxlY3Rpb25zO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIHdvcmtpbmdDb2xsZWN0aW9uLFxuICAgICAgbG9ja2VkQ29sbGVjdGlvbnMsXG4gICAgICB1bmxvY2tDb25maXJtYXRpb25PcGVuLFxuICAgICAgcm9pQ29sbGVjdGlvblRvVW5sb2NrLFxuICAgICAgYWN0aXZlUk9JQ29udG91ckluZGV4LFxuICAgICAgaW1wb3J0aW5nLFxuICAgICAgZXhwb3J0aW5nLFxuICAgICAgc2VyaWVzSW5zdGFuY2VVaWRcbiAgICB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IHsgSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudCwgRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG5cbiAgICBsZXQgY29tcG9uZW50O1xuXG4gICAgaWYgKGltcG9ydGluZykge1xuICAgICAgY29tcG9uZW50ID0gPEltcG9ydENhbGxiYWNrT3JDb21wb25lbnQgb25JbXBvcnRDb21wbGV0ZT17dGhpcy5vbklPQ29tcGxldGV9IG9uSW1wb3J0Q2FuY2VsPXt0aGlzLm9uSU9DYW5jZWx9IC8+O1xuICAgIH0gZWxzZSBpZiAoZXhwb3J0aW5nKSB7XG4gICAgICBjb21wb25lbnQgPSA8RXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudCBvbkV4cG9ydENvbXBsZXRlPXt0aGlzLm9uSU9Db21wbGV0ZX0gb25FeHBvcnRDYW5jZWw9e3RoaXMub25JT0NhbmNlbH0gLz47XG4gICAgfSBlbHNlIGlmICh1bmxvY2tDb25maXJtYXRpb25PcGVuKSB7XG4gICAgICBjb25zdCBjb2xsZWN0aW9uID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCByb2lDb2xsZWN0aW9uVG9VbmxvY2spO1xuXG4gICAgICBjb25zdCBjb2xsZWN0aW9uTmFtZSA9IGNvbGxlY3Rpb24ubmFtZTtcblxuICAgICAgY29tcG9uZW50ID0gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aDU+VW5sb2NrPC9oNT5cbiAgICAgICAgICAgIDxwPlVubG9jayB7Y29sbGVjdGlvbk5hbWV9IGZvciBlZGl0aW5nPyBUaGUgUk9JcyB3aWxsIGJlIG1vdmVkIHRvIHRoZSBXb3JraW5nIFJPSSBDb2xsZWN0aW9uLjwvcD5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMub25VbmxvY2tDb25maXJtQ2xpY2t9PlxuICAgICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYSBmYS1jaGVjay1jaXJjbGUgZmEtMnhcIiAvPlxuICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPGEgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tcHJpbWFyeVwiIG9uQ2xpY2s9e3RoaXMub25VbmxvY2tDYW5jZWxDbGlja30+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhIGZhLXRpbWVzLWNpcmNsZSBmYS0yeFwiIC8+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcG9uZW50ID0gKFxuICAgICAgICA8ZGl2IHN0eWxlPXt7IHBhZGRpbmc6ICcxNXB4JywgY29sb3I6ICd3aGl0ZScgfX0gY2xhc3NOYW1lPVwicm9pLWNvbnRvdXItbWVudS1jb21wb25lbnRcIj5cbiAgICAgICAgICB7LyogICovfVxuICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8aDM+Uk9JIENvbnRvdXIgQ29sbGVjdGlvbnM8L2gzPlxuICAgICAgICAgICAgPE1lbnVJT0J1dHRvbnNcbiAgICAgICAgICAgICAgSW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudD17SW1wb3J0Q2FsbGJhY2tPckNvbXBvbmVudH1cbiAgICAgICAgICAgICAgRXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudD17RXhwb3J0Q2FsbGJhY2tPckNvbXBvbmVudH1cbiAgICAgICAgICAgICAgb25JbXBvcnRCdXR0b25DbGljaz17dGhpcy5vbkltcG9ydEJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgICBvbkV4cG9ydEJ1dHRvbkNsaWNrPXt0aGlzLm9uRXhwb3J0QnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgey8qIENPTlRPVVIgTElTVCAqL31cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvaS1jb250b3VyLW1lbnUtY29sbGVjdGlvbi1saXN0LWJvZHlcIj5cbiAgICAgICAgICAgIDx0YWJsZSBjbGFzc05hbWU9XCJwZXBwZXJtaW50LXRhYmxlXCI+XG4gICAgICAgICAgICAgIDx0Ym9keT5cbiAgICAgICAgICAgICAgICB7c2VyaWVzSW5zdGFuY2VVaWQgJiYgKFxuICAgICAgICAgICAgICAgICAgPFdvcmtpbmdDb2xsZWN0aW9uTGlzdFxuICAgICAgICAgICAgICAgICAgICB3b3JraW5nQ29sbGVjdGlvbj17d29ya2luZ0NvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVJPSUNvbnRvdXJJbmRleD17YWN0aXZlUk9JQ29udG91ckluZGV4fVxuICAgICAgICAgICAgICAgICAgICBvblJvaUNoYW5nZT17dGhpcy5vblJvaUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgb25SZW5hbWVCdXR0b25DbGljaz17dGhpcy5vblJlbmFtZUJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgICAgICAgICBvbk5ld1JvaUJ1dHRvbkNsaWNrPXt0aGlzLm9uTmV3Um9pQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICl9XG4gICAgICAgICAgICAgICAge2xvY2tlZENvbGxlY3Rpb25zLmxlbmd0aCAhPT0gMCAmJiAoXG4gICAgICAgICAgICAgICAgICA8TG9ja2VkQ29sbGVjdGlvbnNMaXN0XG4gICAgICAgICAgICAgICAgICAgIGxvY2tlZENvbGxlY3Rpb25zPXtsb2NrZWRDb2xsZWN0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgb25VbmxvY2tDbGljaz17dGhpcy5jb25maXJtVW5sb2NrT25VbmxvY2tDbGlja31cbiAgICAgICAgICAgICAgICAgICAgc2VyaWVzSW5zdGFuY2VVaWQ9e3Nlcmllc0luc3RhbmNlVWlkfVxuICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICA8L3Rib2R5PlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgIDxSb2lDb250b3VyU2V0dGluZ3MgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiA8UmVhY3QuRnJhZ21lbnQ+e2NvbXBvbmVudH08L1JlYWN0LkZyYWdtZW50PjtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBjb3JuZXJzdG9uZVRvb2xzIGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCB7IEljb24gfSBmcm9tICdyZWFjdC12aWV3ZXJiYXNlJztcbmltcG9ydCAnLi9yb2lDb250b3VyTWVudS5zdHlsJztcblxuY29uc3QgbW9kdWxlcyA9IGNvcm5lcnN0b25lVG9vbHMuc3RvcmUubW9kdWxlcztcblxuLyoqXG4gKiBAY2xhc3MgUm9pQ29udG91clNldHRpbmdzIC0gQSBjb21wb25lbnQgdGhhdCBhbGxvd3MgdGhlIHVzZXIgdG8gY2hhbmdlXG4gKiBjb25maWd1cmF0aW9uIG9mIHRoZSBmcmVlaGFuZDNEIHRvb2xzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2lDb250b3VyU2V0dGluZ3MgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuXG4gICAgY29uc3QgeyBpbnRlcnBvbGF0ZSB9ID0gbW9kdWxlcy5mcmVlaGFuZDNELnN0YXRlO1xuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGludGVycG9sYXRlXG4gICAgfTtcblxuICAgIHRoaXMub25JbnRlcnBvbGF0ZVRvZ2dsZUNsaWNrID0gdGhpcy5vbkludGVycG9sYXRlVG9nZ2xlQ2xpY2suYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbkludGVycG9sYXRlVG9nZ2xlQ2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgdG9nZ2xlcyBpbnRlcnBvbGF0aW9uIG1vZGUgZm9yXG4gICAqIHRoZSBGcmVlaGFuZDNEVG9vbC5cbiAgICpcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBvbkludGVycG9sYXRlVG9nZ2xlQ2xpY2soKSB7XG4gICAgbW9kdWxlcy5mcmVlaGFuZDNELnNldHRlcnMudG9nZ2xlSW50ZXJwb2xhdGUoKTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBpbnRlcnBvbGF0ZTogbW9kdWxlcy5mcmVlaGFuZDNELnN0YXRlLmludGVycG9sYXRlIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW50ZXJwb2xhdGUgfSA9IHRoaXMuc3RhdGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPGRpdlxuICAgICAgICBzdHlsZT17e1xuICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3ZhcigtLXVpLWdyYXktZGFyayknLFxuICAgICAgICAgIG91dGxpbmU6ICcxcHggc29saWQgdmFyKC0tdWktYm9yZGVyLWNvbG9yKScsXG4gICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNHB4J1xuICAgICAgICB9fVxuICAgICAgICBjbGFzc05hbWU9XCJyb2ktY29udG91ci1tZW51LWZvb3RlclwiXG4gICAgICA+XG4gICAgICAgIDxoMz5TZXR0aW5nczwvaDM+XG4gICAgICAgIDxkaXYgc3R5bGU9e3sgY3Vyc29yOiAnc2VsZWN0JyB9fSBvbkNsaWNrPXt0aGlzLm9uSW50ZXJwb2xhdGVUb2dnbGVDbGlja30+XG4gICAgICAgICAgPGxhYmVsPlxuICAgICAgICAgICAge2ludGVycG9sYXRlID8gPEljb24gbmFtZT1cImNoZWNrXCIgLz4gOiA8SWNvbiBuYW1lPVwidGltZXNcIiAvPn1cbiAgICAgICAgICAgIEludGVycG9sYXRpb25cbiAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgV29ya2luZ0NvbGxlY3Rpb25MaXN0SXRlbSBmcm9tICcuL1dvcmtpbmdDb2xsZWN0aW9uTGlzdEl0ZW0uanMnO1xuXG5pbXBvcnQgJy4vcm9pQ29udG91ck1lbnUuc3R5bCc7XG5cbi8qKlxuICogQGNsYXNzIFdvcmtpbmdSb2lDb2xsZWN0aW9uTGlzdCAtIFJlbmRlcnMgYSBsaXN0IG9mXG4gKiBXb3JraW5nQ29sbGVjdGlvbkxpc3RJdGVtLCBkaXNwbGF5aW5nIG1ldGFkYXRhIG9mIHRoZSB3b3JraW5nIFJPSUNvbnRvdXJcbiAqIENvbGxlY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdvcmtpbmdSb2lDb2xsZWN0aW9uTGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzID0ge30pIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgd29ya2luZ0NvbGxlY3Rpb24sXG4gICAgICBhY3RpdmVST0lDb250b3VySW5kZXgsXG4gICAgICBvblJvaUNoYW5nZSxcbiAgICAgIG9uUmVuYW1lQnV0dG9uQ2xpY2ssXG4gICAgICBvbk5ld1JvaUJ1dHRvbkNsaWNrXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8dHIgY2xhc3NOYW1lPVwicm9pLWxpc3QtaGVhZGVyXCI+XG4gICAgICAgICAgPHRoIC8+XG4gICAgICAgICAgPHRoIGNvbFNwYW49XCI0XCI+IE5ldyBST0kgQ29udG91ciBDb2xsZWN0aW9uPC90aD5cbiAgICAgICAgPC90cj5cblxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoPkRyYXc8L3RoPlxuICAgICAgICAgIDx0aD5OYW1lPC90aD5cbiAgICAgICAgICA8dGggY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPkNvbnRvdXJzPC90aD5cbiAgICAgICAgPC90cj5cblxuICAgICAgICB7d29ya2luZ0NvbGxlY3Rpb24ubWFwKHJvaUNvbnRvdXIgPT4gKFxuICAgICAgICAgIDxXb3JraW5nQ29sbGVjdGlvbkxpc3RJdGVtXG4gICAgICAgICAgICBrZXk9e3JvaUNvbnRvdXIubWV0YWRhdGEudWlkfVxuICAgICAgICAgICAgcm9pQ29udG91ckluZGV4PXtyb2lDb250b3VyLmluZGV4fVxuICAgICAgICAgICAgbWV0YWRhdGE9e3JvaUNvbnRvdXIubWV0YWRhdGF9XG4gICAgICAgICAgICBhY3RpdmVST0lDb250b3VySW5kZXg9e2FjdGl2ZVJPSUNvbnRvdXJJbmRleH1cbiAgICAgICAgICAgIG9uUm9pQ2hhbmdlPXtvblJvaUNoYW5nZX1cbiAgICAgICAgICAgIG9uUmVuYW1lQnV0dG9uQ2xpY2s9e29uUmVuYW1lQnV0dG9uQ2xpY2t9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG5cbiAgICAgICAgPHRyPlxuICAgICAgICAgIDx0aCAvPlxuICAgICAgICAgIDx0aD5cbiAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cInJvaS1jb250b3VyLW1lbnUtbmV3LWJ1dHRvbiBidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17b25OZXdSb2lCdXR0b25DbGlja30+XG4gICAgICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXBsdXMtY2lyY2xlXCIgLz4gUk9JXG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHN0b3JlIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG5pbXBvcnQgJy4vcm9pQ29udG91ck1lbnUuc3R5bCc7XG5cbmNvbnN0IG1vZHVsZXMgPSBzdG9yZS5tb2R1bGVzO1xuXG4vKipcbiAqIEBjbGFzcyBXb3JraW5nQ29sbGVjdGlvbkxpc3RJdGVtIC0gUmVuZGVycyBtZXRhZGF0YSBmb3IgdGhlIHdvcmtpbmdcbiAqIFJPSUNvbnRvdXIgQ29sbGVjdGlvbi5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ya2luZ0NvbGxlY3Rpb25MaXN0SXRlbSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzID0ge30pIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLm9uVGV4dElucHV0Q2hhbmdlID0gdGhpcy5vblRleHRJbnB1dENoYW5nZS5iaW5kKHRoaXMpO1xuICB9XG5cbiAgb25UZXh0SW5wdXRDaGFuZ2UoZXZ0KSB7XG4gICAgY29uc3QgbmFtZSA9IGV2dC50YXJnZXQudmFsdWU7XG5cbiAgICBpZiAobmFtZS5yZXBsYWNlKCcgJywgJycpLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IG1ldGFkYXRhID0gdGhpcy5wcm9wcy5tZXRhZGF0YTtcbiAgICAgIGNvbnN0IGZyZWVoYW5kM0RNb2R1bGUgPSBtb2R1bGVzLmZyZWVoYW5kM0Q7XG5cbiAgICAgIGZyZWVoYW5kM0RNb2R1bGUuc2V0dGVycy5ST0lDb250b3VyTmFtZShuYW1lLCBtZXRhZGF0YS5zZXJpZXNJbnN0YW5jZVVpZCwgbWV0YWRhdGEuc3RydWN0dXJlU2V0VWlkLCBtZXRhZGF0YS51aWQpO1xuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7IHJvaUNvbnRvdXJJbmRleCwgbWV0YWRhdGEsIG9uUm9pQ2hhbmdlLCBvblJlbmFtZUJ1dHRvbkNsaWNrLCBhY3RpdmVST0lDb250b3VySW5kZXggfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBjaGVja2VkID0gYWN0aXZlUk9JQ29udG91ckluZGV4ID09PSByb2lDb250b3VySW5kZXg7XG4gICAgY29uc3QgbmFtZSA9IG1ldGFkYXRhLm5hbWU7XG4gICAgY29uc3QgcG9seWdvbkNvdW50ID0gbWV0YWRhdGEucG9seWdvbkNvdW50O1xuICAgIGNvbnN0IHJvaUNvbnRvdXJDb2xvciA9IG1ldGFkYXRhLmNvbG9yO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDx0cj5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cImxlZnQtYWxpZ25lZC1jZWxsXCI+XG4gICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtc3F1YXJlXCIgc3R5bGU9e3sgY29sb3I6IHJvaUNvbnRvdXJDb2xvciB9fSAvPnsnICd9XG4gICAgICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIGNoZWNrZWQ9e2NoZWNrZWR9IG9uQ2hhbmdlPXsoKSA9PiBvblJvaUNoYW5nZShyb2lDb250b3VySW5kZXgpfSAvPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwibGVmdC1hbGlnbmVkLWNlbGxcIj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwicm9pLWNvbnRvdXItbWVudS1uYW1lLWxpbmtcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBvblJlbmFtZUJ1dHRvbkNsaWNrKG1ldGFkYXRhKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIG5hbWU9XCJyb2lDb250b3VyTmFtZVwiXG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tdGhlbWVkIGZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgIG9uQ2hhbmdlPXt0aGlzLm9uVGV4dElucHV0Q2hhbmdlfVxuICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cIm9mZlwiXG4gICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZT17bmFtZX1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJFbnRlciBST0kgTmFtZS4uLlwiXG4gICAgICAgICAgICAgIHRhYkluZGV4PVwiMVwiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAge25hbWV9XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3RkPlxuICAgICAgICA8dGQ+e3BvbHlnb25Db3VudH08L3RkPlxuICAgICAgPC90cj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvcm5lcnN0b25lVG9vbHMgZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG5pbXBvcnQgJy4vc2VnbWVudGF0aW9uTWVudS5zdHlsJztcblxuY29uc3QgYnJ1c2hNb2R1bGUgPSBjb3JuZXJzdG9uZVRvb2xzLnN0b3JlLm1vZHVsZXMuYnJ1c2g7XG5jb25zdCBicnVzaFN0YXRlID0gYnJ1c2hNb2R1bGUuc3RhdGU7XG5cbmNvbnN0IG1pbkdhdGVTZXBlcmF0aW9uID0gMTA7XG5cbi8qKlxuICogQGNsYXNzIEJydXNoU2V0dGluZ3MgLSBBIGNvbXBvbmVudCB0aGF0IGFsbG93cyB0aGUgdXNlciB0byBjaGFuZ2VcbiAqIGNvbmZpZ3VyYXRpb24gb2YgdGhlIEJydXNoIHRvb2xzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcnVzaFNldHRpbmdzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMgPSB7fSkge1xuICAgIHN1cGVyKHByb3BzKTtcblxuICAgIGNvbnN0IGN1c3RvbUdhdGVSYW5nZSA9IGJydXNoTW9kdWxlLmdldHRlcnMuY3VzdG9tR2F0ZVJhbmdlKCk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaG9sZUZpbGw6IGJydXNoU3RhdGUuaG9sZUZpbGwsXG4gICAgICBzdHJheVJlbW92ZTogYnJ1c2hTdGF0ZS5zdHJheVJlbW92ZSxcbiAgICAgIGFjdGl2ZUdhdGU6IGJydXNoU3RhdGUuYWN0aXZlR2F0ZSxcbiAgICAgIGN1c3RvbUdhdGVSYW5nZU1pbjogY3VzdG9tR2F0ZVJhbmdlWzBdLFxuICAgICAgY3VzdG9tR2F0ZVJhbmdlTWF4OiBjdXN0b21HYXRlUmFuZ2VbMV1cbiAgICB9O1xuXG4gICAgdGhpcy5vbkdhdGVDaGFuZ2UgPSB0aGlzLm9uR2F0ZUNoYW5nZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25DdXN0b21HYXRlTWluQ2hhbmdlID0gdGhpcy5vbkN1c3RvbUdhdGVNaW5DaGFuZ2UuYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uQ3VzdG9tR2F0ZU1heENoYW5nZSA9IHRoaXMub25DdXN0b21HYXRlTWF4Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkhvbGVGaWxsQ2hhbmdlID0gdGhpcy5vbkhvbGVGaWxsQ2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vblN0cmF5UmVtb3ZlQ2hhbmdlID0gdGhpcy5vblN0cmF5UmVtb3ZlQ2hhbmdlLmJpbmQodGhpcyk7XG4gIH1cblxuICAvKipcbiAgICogb25HYXRlQ2hhbmdlIC0gQ2FsbGJhY2sgdGhhdCBjaGFuZ2VzIHRoZSBhY3RpdmUgZ2F0ZSBvZiB0aGUgU21hcnQgQ1QgQnJ1c2guXG4gICAqXG4gICAqIEBwYXJhbSAge3R5cGV9IGV2dCBkZXNjcmlwdGlvblxuICAgKiBAcmV0dXJucyB7dHlwZX0gICAgIGRlc2NyaXB0aW9uXG4gICAqL1xuICBvbkdhdGVDaGFuZ2UoZXZ0KSB7XG4gICAgY29uc3QgdmFsID0gZXZ0LnRhcmdldC52YWx1ZTtcblxuICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVHYXRlOiB2YWwgfSk7XG4gICAgYnJ1c2hTdGF0ZS5hY3RpdmVHYXRlID0gdmFsO1xuICB9XG5cbiAgLyoqXG4gICAqIG9uQ3VzdG9tR2F0ZU1pbkNoYW5nZSAtIENoYW5nZXMgdGhlIG1pbmltdW0gdmFsdWUgb2YgYVxuICAgKiBjdXN0b20gU21hcnQgQ1QgR2F0ZS5cbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBldnQgVGhlIGV2ZW50LlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uQ3VzdG9tR2F0ZU1pbkNoYW5nZShldnQpIHtcbiAgICBsZXQgdmFsID0gTnVtYmVyKGV2dC50YXJnZXQudmFsdWUpO1xuXG4gICAgY29uc3QgY3VzdG9tUmFuZ2VNYXggPSB0aGlzLnN0YXRlLmN1c3RvbUdhdGVSYW5nZU1heDtcblxuICAgIGlmICh2YWwgPiBjdXN0b21SYW5nZU1heCAtIG1pbkdhdGVTZXBlcmF0aW9uKSB7XG4gICAgICB2YWwgPSBjdXN0b21SYW5nZU1heCAtIG1pbkdhdGVTZXBlcmF0aW9uO1xuICAgICAgZXZ0LnRhcmdldC52YWx1ZSA9IHZhbDtcbiAgICB9XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgY3VzdG9tR2F0ZVJhbmdlTWluOiB2YWwgfSk7XG4gICAgYnJ1c2hNb2R1bGUuc2V0dGVycy5jdXN0b21HYXRlUmFuZ2UodmFsLCBudWxsKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBvbkN1c3RvbUdhdGVNYXhDaGFuZ2UgLSBDaGFuZ2VzIHRoZSBtYXhpbXVtIHZhbHVlIG9mIGFcbiAgICogY3VzdG9tIFNtYXJ0IENUIEdhdGUuXG4gICAqXG4gICAqIEBwYXJhbSAge29iamVjdH0gZXZ0IFRoZSBldmVudC5cbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBvbkN1c3RvbUdhdGVNYXhDaGFuZ2UoZXZ0KSB7XG4gICAgbGV0IHZhbCA9IE51bWJlcihldnQudGFyZ2V0LnZhbHVlKTtcblxuICAgIGNvbnN0IGN1c3RvbVJhbmdlTWluID0gdGhpcy5zdGF0ZS5jdXN0b21HYXRlUmFuZ2VNaW47XG5cbiAgICBpZiAodmFsIDwgY3VzdG9tUmFuZ2VNaW4gKyBtaW5HYXRlU2VwZXJhdGlvbikge1xuICAgICAgdmFsID0gY3VzdG9tUmFuZ2VNaW4gKyBtaW5HYXRlU2VwZXJhdGlvbjtcbiAgICAgIGV2dC50YXJnZXQudmFsdWUgPSB2YWw7XG4gICAgfVxuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGN1c3RvbUdhdGVSYW5nZU1heDogdmFsIH0pO1xuICAgIGJydXNoTW9kdWxlLnNldHRlcnMuY3VzdG9tR2F0ZVJhbmdlKG51bGwsIHZhbCk7XG4gIH1cblxuICAvKipcbiAgICogb25Ib2xlRmlsbENoYW5nZSAtIENoYW5nZXMgdGhlIHZhbHVlIG9mIHRoZSBob2xlIGZpbGwgcGFyYW1ldGVyIGZvciB0aGVcbiAgICogU21hcnQgQ1QgYW5kIEF1dG8gYnJ1c2hlcy5cbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBldnQgVGhlIGV2ZW50LlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uSG9sZUZpbGxDaGFuZ2UoZXZ0KSB7XG4gICAgY29uc3QgdmFsID0gTnVtYmVyKGV2dC50YXJnZXQudmFsdWUpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7IGhvbGVGaWxsOiB2YWwgfSk7XG4gICAgYnJ1c2hTdGF0ZS5ob2xlRmlsbCA9IHZhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBvblN0cmF5UmVtb3ZlQ2hhbmdlIC0gQ2hhbmdlcyB0aGUgYmFsdWUgb2YgdGhlIHN0cmF5IHJlbW92ZSBwYXJhbWV0ZXIgZm9yXG4gICAqIHRoZSBTbWFydCBDVCBhbmQgQXV0byBicnVzaGVzLlxuICAgKlxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGV2dCBUaGUgZXZlbnQuXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25TdHJheVJlbW92ZUNoYW5nZShldnQpIHtcbiAgICBjb25zdCB2YWwgPSBOdW1iZXIoZXZ0LnRhcmdldC52YWx1ZSk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgc3RyYXlSZW1vdmU6IHZhbCB9KTtcbiAgICBicnVzaFN0YXRlLnN0cmF5UmVtb3ZlID0gdmFsO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGhvbGVGaWxsUmFuZ2UgPSBicnVzaFN0YXRlLmhvbGVGaWxsUmFuZ2U7XG4gICAgY29uc3Qgc3RyYXlSZW1vdmVSYW5nZSA9IGJydXNoU3RhdGUuc3RyYXlSZW1vdmVSYW5nZTtcblxuICAgIGNvbnN0IHsgaG9sZUZpbGwsIHN0cmF5UmVtb3ZlLCBhY3RpdmVHYXRlIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgZ2F0ZXMgPSBicnVzaFN0YXRlLmdhdGVzO1xuXG4gICAgY29uc3QgaG9sZUZpbGxMYWJlbCA9IGhvbGVGaWxsID09PSAwID8gXCJEb24ndCBmaWxsIGhvbGVzLlwiIDogYEZpbGwgaG9sZXMgPCR7aG9sZUZpbGx9JSBhcmVhIG9mIHByaW1hcnkgcmVnaW9uLmA7XG5cbiAgICBjb25zdCBzdHJheVJlbW92ZUxhYmVsID1cbiAgICAgIHN0cmF5UmVtb3ZlID09PSAwID9cbiAgICAgICAgJ1BhaW50IGFsbCBub24tcHJpbWFyeSByZWdpb25zLicgOlxuICAgICAgICBgRG9uJ3QgcGFpbnQgcmVnaW9ucyA8JHtzdHJheVJlbW92ZX0lIGFyZWEgb2YgcHJpbWFyeSByZWdpb24uYDtcblxuICAgIGxldCBjdXN0b21HYXRlcyA9IG51bGw7XG5cbiAgICBpZiAoYWN0aXZlR2F0ZSA9PT0gJ2N1c3RvbScpIHtcbiAgICAgIGNvbnN0IGN1c3RvbVJhbmdlID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5jdXN0b21HYXRlUmFuZ2UoKTtcblxuICAgICAgY3VzdG9tR2F0ZXMgPSAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJicnVzaC1zZXR0aW5ncy1ob3Jpem9udGFsLWJveFwiPlxuICAgICAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJjdXN0b21HYXRlTWluXCI+TWluOjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZm9ybS10aGVtZWQgZm9ybS1jb250cm9sXCJcbiAgICAgICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICAgICAgaWQ9XCJzdGFydFwiXG4gICAgICAgICAgICAgIG5hbWU9XCJjdXN0b21HYXRlTWluXCJcbiAgICAgICAgICAgICAgbWluPXstMTAyNH1cbiAgICAgICAgICAgICAgbWF4PXszMDcyfVxuICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU9e2N1c3RvbVJhbmdlWzBdfVxuICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vbkN1c3RvbUdhdGVNaW5DaGFuZ2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiYnJ1c2gtc2V0dGluZ3MtaG9yaXpvbnRhbC1ib3hcIj5cbiAgICAgICAgICAgIDxsYWJlbCBodG1sRm9yPVwiY3VzdG9tR2F0ZU1heFwiPk1heDo8L2xhYmVsPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tdGhlbWVkIGZvcm0tY29udHJvbFwiXG4gICAgICAgICAgICAgIHR5cGU9XCJyYW5nZVwiXG4gICAgICAgICAgICAgIGlkPVwic3RhcnRcIlxuICAgICAgICAgICAgICBuYW1lPVwiY3VzdG9tR2F0ZU1heFwiXG4gICAgICAgICAgICAgIG1pbj17LTEwMjR9XG4gICAgICAgICAgICAgIG1heD17MzA3Mn1cbiAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlPXtjdXN0b21SYW5nZVsxXX1cbiAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25DdXN0b21HYXRlTWF4Q2hhbmdlfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlZ21lbnRhdGlvbi1tZW51LWZvb3RlclwiPlxuICAgICAgICA8aDM+IFNtYXJ0IENUIEdhdGUgU2VsZWN0aW9uPC9oMz5cbiAgICAgICAgPHNlbGVjdCBjbGFzc05hbWU9XCJmb3JtLXRoZW1lZCBmb3JtLWNvbnRyb2xcIiBvbkNoYW5nZT17dGhpcy5vbkdhdGVDaGFuZ2V9IHZhbHVlPXthY3RpdmVHYXRlfT5cbiAgICAgICAgICB7Z2F0ZXMubWFwKGdhdGUgPT4gKFxuICAgICAgICAgICAgPG9wdGlvbiBrZXk9e2dhdGUubmFtZX0gdmFsdWU9e2dhdGUubmFtZX0+e2Ake2dhdGUubmFtZX0gWyR7Z2F0ZS5yYW5nZVswXX0sICR7Z2F0ZS5yYW5nZVsxXX1dYH08L29wdGlvbj5cbiAgICAgICAgICApKX1cbiAgICAgICAgPC9zZWxlY3Q+XG5cbiAgICAgICAge2N1c3RvbUdhdGVzfVxuXG4gICAgICAgIDxoMz4gU21hcnQvQXV0byBHYXRlIFNldHRpbmdzIDwvaDM+XG4gICAgICAgIDxsYWJlbCBodG1sRm9yPVwiaG9sZUZpbGxcIj57aG9sZUZpbGxMYWJlbH08L2xhYmVsPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICBjbGFzc05hbWU9XCJmb3JtLXRoZW1lZCBmb3JtLWNvbnRyb2xcIlxuICAgICAgICAgIHR5cGU9XCJyYW5nZVwiXG4gICAgICAgICAgaWQ9XCJzdGFydFwiXG4gICAgICAgICAgbmFtZT1cImhvbGVGaWxsXCJcbiAgICAgICAgICBtaW49e2hvbGVGaWxsUmFuZ2VbMF19XG4gICAgICAgICAgZGVmYXVsdFZhbHVlPXtob2xlRmlsbH1cbiAgICAgICAgICBtYXg9e2hvbGVGaWxsUmFuZ2VbMV19XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMub25Ib2xlRmlsbENoYW5nZX1cbiAgICAgICAgLz5cbiAgICAgICAgPGxhYmVsIGh0bWxGb3I9XCJzdHJheVJlbW92ZVwiPntzdHJheVJlbW92ZUxhYmVsfTwvbGFiZWw+XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgIGNsYXNzTmFtZT1cImZvcm0tdGhlbWVkIGZvcm0tY29udHJvbFwiXG4gICAgICAgICAgdHlwZT1cInJhbmdlXCJcbiAgICAgICAgICBpZD1cInN0YXJ0XCJcbiAgICAgICAgICBuYW1lPVwic3RyYXlSZW1vdmVcIlxuICAgICAgICAgIG1pbj17c3RyYXlSZW1vdmVSYW5nZVswXX1cbiAgICAgICAgICBkZWZhdWx0VmFsdWU9e3N0cmF5UmVtb3ZlfVxuICAgICAgICAgIG1heD17c3RyYXlSZW1vdmVSYW5nZVsxXX1cbiAgICAgICAgICBvbkNoYW5nZT17dGhpcy5vblN0cmF5UmVtb3ZlQ2hhbmdlfVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBNZW51SU9CdXR0b25zIGZyb20gJy4uL2NvbW1vbi9NZW51SU9CdXR0b25zLmpzJztcbmltcG9ydCBTZWdtZW50YXRpb25NZW51RGVsZXRlQ29uZmlybWF0aW9uIGZyb20gJy4vU2VnbWVudGF0aW9uTWVudURlbGV0ZUNvbmZpcm1hdGlvbi5qcyc7XG5pbXBvcnQgU2VnbWVudGF0aW9uTWVudUxpc3RCb2R5IGZyb20gJy4vU2VnbWVudGF0aW9uTWVudUxpc3RCb2R5LmpzJztcbmltcG9ydCBTZWdtZW50YXRpb25NZW51TGlzdEhlYWRlciBmcm9tICcuL1NlZ21lbnRhdGlvbk1lbnVMaXN0SGVhZGVyLmpzJztcbmltcG9ydCBCcnVzaFNldHRpbmdzIGZyb20gJy4vQnJ1c2hTZXR0aW5ncy5qcyc7XG5pbXBvcnQgY29ybmVyc3RvbmVUb29scyBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5pbXBvcnQgeyBlZGl0U2VnbWVudElucHV0IH0gZnJvbSAnLi4vLi4vdXRpbC9icnVzaE1ldGFkYXRhSU8uanMnO1xuaW1wb3J0IG9uSU9DYW5jZWwgZnJvbSAnLi4vY29tbW9uL2hlbHBlcnMvb25JT0NhbmNlbC5qcyc7XG5pbXBvcnQgb25JbXBvcnRCdXR0b25DbGljayBmcm9tICcuLi9jb21tb24vaGVscGVycy9vbkltcG9ydEJ1dHRvbkNsaWNrLmpzJztcbmltcG9ydCBvbkV4cG9ydEJ1dHRvbkNsaWNrIGZyb20gJy4uL2NvbW1vbi9oZWxwZXJzL29uRXhwb3J0QnV0dG9uQ2xpY2suanMnO1xuaW1wb3J0ICcuL3NlZ21lbnRhdGlvbk1lbnUuc3R5bCc7XG5cbmltcG9ydCBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50IGZyb20gJy4uLy4uL3V0aWwvZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudC5qcyc7XG5pbXBvcnQgZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQgZnJvbSAnLi4vLi4vdXRpbC9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudC5qcyc7XG5cbmNvbnN0IGJydXNoTW9kdWxlID0gY29ybmVyc3RvbmVUb29scy5zdG9yZS5tb2R1bGVzLmJydXNoO1xuXG4vKipcbiAqIEBjbGFzcyBTZWdtZW50YXRpb25NZW51IC0gUmVuZGVycyBhIG1lbnUgZm9yIGltcG9ydGluZywgZXhwb3J0aW5nLCBjcmVhdGluZ1xuICogYW5kIHJlbmFtaW5nIFNlZ21lbnRzLiBBcyB3ZWxsIGFzIHNldHRpbmcgY29uZmlndXJhdGlvbiBzZXR0aW5ncyBmb3JcbiAqIHRoZSBCcnVzaCB0b29scy5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VnbWVudGF0aW9uTWVudSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzID0ge30pIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLmdldFNlZ21lbnRMaXN0ID0gdGhpcy5nZXRTZWdtZW50TGlzdC5iaW5kKHRoaXMpO1xuXG4gICAgY29uc3QgZW5hYmxlZEVsZW1lbnQgPSBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50KHByb3BzLnZpZXdwb3J0cywgcHJvcHMuYWN0aXZlSW5kZXgpO1xuICAgIGNvbnN0IHNlcmllc0luc3RhbmNlVWlkID0gZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQoZW5hYmxlZEVsZW1lbnQpO1xuXG4gICAgbGV0IHNlZ21lbnRzID0gW107XG4gICAgbGV0IGFjdGl2ZVNlZ21lbnRJbmRleCA9IDE7XG4gICAgY29uc3QgaW1wb3J0TWV0YWRhdGEgPSB0aGlzLmNvbnN0cnVjdG9yLl9pbXBvcnRNZXRhZGF0YShzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICBpZiAoZW5hYmxlZEVsZW1lbnQpIHtcbiAgICAgIGNvbnN0IHNlZ21lbnRMaXN0ID0gdGhpcy5nZXRTZWdtZW50TGlzdChlbmFibGVkRWxlbWVudCwgc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgICBzZWdtZW50cyA9IHNlZ21lbnRMaXN0LnNlZ21lbnRzO1xuICAgICAgYWN0aXZlU2VnbWVudEluZGV4ID0gc2VnbWVudExpc3Quc2VnbWVudHM7XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGltcG9ydE1ldGFkYXRhLFxuICAgICAgc2VnbWVudHMsXG4gICAgICBzZXJpZXNJbnN0YW5jZVVpZCxcbiAgICAgIGVuYWJsZWRFbGVtZW50LFxuICAgICAgZGVsZXRlQ29uZmlybWF0aW9uT3BlbjogZmFsc2UsXG4gICAgICBzZWdtZW50VG9EZWxldGU6IDEsXG4gICAgICBhY3RpdmVTZWdtZW50SW5kZXgsXG4gICAgICBpbXBvcnRpbmc6IGZhbHNlLFxuICAgICAgZXhwb3J0aW5nOiBmYWxzZVxuICAgIH07XG5cbiAgICB0aGlzLm9uU2VnbWVudENoYW5nZSA9IHRoaXMub25TZWdtZW50Q2hhbmdlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkVkaXRDbGljayA9IHRoaXMub25FZGl0Q2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLmNvbmZpcm1EZWxldGVPbkRlbGV0ZUNsaWNrID0gdGhpcy5jb25maXJtRGVsZXRlT25EZWxldGVDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25EZWxldGVDYW5jZWxDbGljayA9IHRoaXMub25EZWxldGVDYW5jZWxDbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25EZWxldGVDb25maXJtQ2xpY2sgPSB0aGlzLm9uRGVsZXRlQ29uZmlybUNsaWNrLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkltcG9ydEJ1dHRvbkNsaWNrID0gb25JbXBvcnRCdXR0b25DbGljay5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25FeHBvcnRCdXR0b25DbGljayA9IG9uRXhwb3J0QnV0dG9uQ2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLm9uSU9Db21wbGV0ZSA9IHRoaXMub25JT0NvbXBsZXRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbklPQ2FuY2VsID0gb25JT0NhbmNlbC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIGdldFNlZ21lbnRMaXN0IC0gR3JhYnMgdGhlIHNlZ21lbnRzIGZyb20gdGhlIGJydXNoU3RvcmUgYW5kXG4gICAqIHBvcHVsYXRlcyBzdGF0ZS5cbiAgICpcbiAgICogQHJldHVybnMge251bGx9XG4gICAqL1xuICBnZXRTZWdtZW50TGlzdChlbmFibGVkRWxlbWVudCwgc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICBlbmFibGVkRWxlbWVudCA9IGVuYWJsZWRFbGVtZW50IHx8IHRoaXMuc3RhdGUuZW5hYmxlZEVsZW1lbnQ7XG4gICAgc2VyaWVzSW5zdGFuY2VVaWQgPSBzZXJpZXNJbnN0YW5jZVVpZCB8fCB0aGlzLnN0YXRlLnNlcmllc0luc3RhbmNlVWlkO1xuXG4gICAgaWYgKCFlbmFibGVkRWxlbWVudCB8fCAhc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWdtZW50cyA9IHRoaXMuY29uc3RydWN0b3IuX3NlZ21lbnRzKGVuYWJsZWRFbGVtZW50KTtcbiAgICBjb25zdCBhY3RpdmVTZWdtZW50SW5kZXggPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmFjdGl2ZVNlZ21lbnRJbmRleChlbmFibGVkRWxlbWVudCk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgc2VnbWVudHMsXG4gICAgICBhY3RpdmVTZWdtZW50SW5kZXhcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIG9uSU9Db21wbGV0ZSAtIEEgY2FsbGJhY2sgZXhlY3V0ZWQgb24gc3VjY2VzZnVsIGNvbXBsZXRpb24gb2YgYW5cbiAgICogSU8gb3BwZXJhdGlvbi4gUmVjYWxjdWxhdGVzIHRoZSBTZWdtZW50YXRpb24gc3RhdGUuXG4gICAqXG4gICAqIEByZXR1cm5zIHt0eXBlfSAgZGVzY3JpcHRpb25cbiAgICovXG4gIG9uSU9Db21wbGV0ZSgpIHtcbiAgICBjb25zdCB7IHNlcmllc0luc3RhbmNlVWlkLCBlbmFibGVkRWxlbWVudCB9ID0gdGhpcy5zdGF0ZS5zZXJpZXNJbnN0YW5jZVVpZDtcblxuICAgIGNvbnN0IGltcG9ydE1ldGFkYXRhID0gdGhpcy5jb25zdHJ1Y3Rvci5faW1wb3J0TWV0YWRhdGEoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5jb25zdHJ1Y3Rvci5fc2VnbWVudHMoZW5hYmxlZEVsZW1lbnQpO1xuICAgIGNvbnN0IGFjdGl2ZVNlZ21lbnRJbmRleCA9IGJydXNoTW9kdWxlLmdldHRlcnMuYWN0aXZlU2VnbWVudEluZGV4KGVuYWJsZWRFbGVtZW50KTtcblxuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgaW1wb3J0TWV0YWRhdGEsXG4gICAgICBzZWdtZW50cyxcbiAgICAgIGFjdGl2ZVNlZ21lbnRJbmRleCxcbiAgICAgIGltcG9ydGluZzogZmFsc2UsXG4gICAgICBleHBvcnRpbmc6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25TZWdtZW50Q2hhbmdlIC0gQ2FsbGJhY2sgdGhhdCBjaGFuZ2VzIHRoZSBhY3RpdmUgc2VnbWVudCBiZWluZyBkcmF3bi5cbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyfSBzZWdtZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBzZWdtZW50IHRvIHNldCBhY3RpdmUuXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25TZWdtZW50Q2hhbmdlKHNlZ21lbnRJbmRleCkge1xuICAgIGNvbnN0IGVuYWJsZWRFbGVtZW50ID0gdGhpcy5zdGF0ZS5lbGVtZW50O1xuXG4gICAgYnJ1c2hNb2R1bGUuc2V0dGVycy5hY3RpdmVTZWdtZW50SW5kZXgoZW5hYmxlZEVsZW1lbnQsIHNlZ21lbnRJbmRleCk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlU2VnbWVudEluZGV4OiBzZWdtZW50SW5kZXggfSk7XG4gIH1cblxuICAvKipcbiAgICogb25FZGl0Q2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgdHJpZ2dlcnMgbWV0YWRhdGEgaW5wdXQgZm9yIGEgc2VnbWVudC5cbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyfSBzZWdtZW50SW5kZXggVGhlIGluZGV4IG9mIHRoZSBzZWdtZW50IG1ldGFkYXRhIHRvIGVkaXQuXG4gICAqIEBwYXJhbSAge29iamVjdH0gICBtZXRhZGF0YSAgICAgVGhlIGN1cnJlbnQgbWV0YWRhdGEgb2YgdGhlIHNlZ21lbnQuXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25FZGl0Q2xpY2soc2VnbWVudEluZGV4LCBtZXRhZGF0YSkge1xuICAgIGVkaXRTZWdtZW50SW5wdXQoc2VnbWVudEluZGV4LCBtZXRhZGF0YSk7XG4gIH1cblxuICAvKipcbiAgICogY29uZmlybURlbGV0ZU9uRGVsZXRlQ2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgdHJpZ2dlcnMgY29uZmlybWF0aW9uIG9mIHNlZ21lbnQgZGVsZXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcn0gc2VnbWVudEluZGV4IFRoZSBpbmRleCBvZiB0aGUgc2VnbWVudCBiZWluZyBkZWxldGVkLlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIGNvbmZpcm1EZWxldGVPbkRlbGV0ZUNsaWNrKHNlZ21lbnRJbmRleCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGVsZXRlQ29uZmlybWF0aW9uT3BlbjogdHJ1ZSxcbiAgICAgIHNlZ21lbnRUb0RlbGV0ZTogc2VnbWVudEluZGV4XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25EZWxldGVDb25maXJtQ2xpY2sgLSBBIGNhbGxiYWNrIHRoYXQgZGVsZXRlcyBhIHNlZ21lbnQgZm9ybSB0aGUgc2VyaWVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIG9uRGVsZXRlQ29uZmlybUNsaWNrKCkge1xuICAgIGNvbnN0IHsgc2VnbWVudFRvRGVsZXRlLCBlbmFibGVkRWxlbWVudCB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGJydXNoTW9kdWxlLnNldHRlcnMuZGVsZXRlU2VnbWVudChlbmFibGVkRWxlbWVudCwgc2VnbWVudFRvRGVsZXRlKTtcblxuICAgIGNvbnN0IHNlZ21lbnRzID0gdGhpcy5jb25zdHJ1Y3Rvci5fc2VnbWVudHMoZW5hYmxlZEVsZW1lbnQpO1xuXG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkZWxldGVDb25maXJtYXRpb25PcGVuOiBmYWxzZSxcbiAgICAgIHNlZ21lbnRzXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogb25EZWxldGVDYW5jZWxDbGljayAtIEEgY2FsbGJhY2sgdGhhdCBjbG9zZXMgdGhlIGRlbGV0ZSBjb25maXJtYXRpb24gd2luZG93XG4gICAqIGFuZCBhYm9ydHMgZGVsZXRpb24uXG4gICAqXG4gICAqIEByZXR1cm5zIHtudWxsfVxuICAgKi9cbiAgb25EZWxldGVDYW5jZWxDbGljaygpIHtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbk9wZW46IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogX2ltcG9ydE1ldGFkYXRhIC0gUmV0dXJucyB0aGUgaW1wb3J0IG1ldGFkYXRhIGZvciB0aGUgYWN0aXZlIHNlcmllcy5cbiAgICpcbiAgICogQHJldHVybnMge29iamVjdH0gVGhlIGltcG9ydE1ldGFkYXRhLlxuICAgKi9cbiAgc3RhdGljIF9pbXBvcnRNZXRhZGF0YShzZXJpZXNJbnN0YW5jZVVpZCkge1xuICAgIGNvbnN0IGltcG9ydE1ldGFkYXRhID0gYnJ1c2hNb2R1bGUuZ2V0dGVycy5pbXBvcnRNZXRhZGF0YShzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICBpZiAoaW1wb3J0TWV0YWRhdGEpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxhYmVsOiBpbXBvcnRNZXRhZGF0YS5sYWJlbCxcbiAgICAgICAgdHlwZTogaW1wb3J0TWV0YWRhdGEudHlwZSxcbiAgICAgICAgbmFtZTogaW1wb3J0TWV0YWRhdGEubmFtZSxcbiAgICAgICAgbW9kaWZpZWQ6IGltcG9ydE1ldGFkYXRhLm1vZGlmaWVkID8gJ3RydWUnIDogJyBmYWxzZSdcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdOZXcgU2VnbWVudGF0aW9uIENvbGxlY3Rpb24nLFxuICAgICAgbGFiZWw6ICcnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBfc2VnbWVudHMgLSBSZXR1cm5zIGFuIGFycmF5IG9mIHNlZ21lbnQgbWV0YWRhdGEgZm9yIHRoZSBhY3RpdmUgc2VyaWVzLlxuICAgKlxuICAgKiBAcmV0dXJucyB7b2JqZWN0W119IEFuIGFycmF5IG9mIHNlZ21lbnQgbWV0YWRhdGEuXG4gICAqL1xuICBzdGF0aWMgX3NlZ21lbnRzKGVsZW1lbnQpIHtcbiAgICAvLyBUT0RPIC0+IHN1cHBvcnQgZm9yIG11bHRpcGxlIGxhYmVsbWFwcy5cbiAgICBjb25zdCBzZWdtZW50TWV0YWRhdGEgPSBicnVzaE1vZHVsZS5nZXR0ZXJzLm1ldGFkYXRhKGVsZW1lbnQpO1xuXG4gICAgaWYgKCFzZWdtZW50TWV0YWRhdGEpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICBjb25zdCBzZWdtZW50cyA9IFtdO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzZWdtZW50TWV0YWRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChzZWdtZW50TWV0YWRhdGFbaV0pIHtcbiAgICAgICAgc2VnbWVudHMucHVzaCh7XG4gICAgICAgICAgaW5kZXg6IGksXG4gICAgICAgICAgbWV0YWRhdGE6IHNlZ21lbnRNZXRhZGF0YVtpXVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2VnbWVudHM7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgaW1wb3J0TWV0YWRhdGEsXG4gICAgICBzZWdtZW50cyxcbiAgICAgIGRlbGV0ZUNvbmZpcm1hdGlvbk9wZW4sXG4gICAgICBzZWdtZW50VG9EZWxldGUsXG4gICAgICBhY3RpdmVTZWdtZW50SW5kZXgsXG4gICAgICBlbmFibGVkRWxlbWVudCxcbiAgICAgIGltcG9ydGluZyxcbiAgICAgIGV4cG9ydGluZ1xuICAgIH0gPSB0aGlzLnN0YXRlO1xuXG4gICAgY29uc3QgeyBJbXBvcnRDYWxsYmFja09yQ29tcG9uZW50LCBFeHBvcnRDYWxsYmFja09yQ29tcG9uZW50IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IGNvbXBvbmVudDtcblxuICAgIGlmIChpbXBvcnRpbmcpIHtcbiAgICAgIGNvbXBvbmVudCA9IDxJbXBvcnRDYWxsYmFja09yQ29tcG9uZW50IG9uSW1wb3J0Q29tcGxldGU9e3RoaXMub25JT0NvbXBsZXRlfSBvbkltcG9ydENhbmNlbD17dGhpcy5vbklPQ2FuY2VsfSAvPjtcbiAgICB9IGVsc2UgaWYgKGV4cG9ydGluZykge1xuICAgICAgY29tcG9uZW50ID0gPEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQgb25FeHBvcnRDb21wbGV0ZT17dGhpcy5vbklPQ29tcGxldGV9IG9uRXhwb3J0Q2FuY2VsPXt0aGlzLm9uSU9DYW5jZWx9IC8+O1xuICAgIH0gZWxzZSBpZiAoZGVsZXRlQ29uZmlybWF0aW9uT3Blbikge1xuICAgICAgY29uc3Qgc2VnbWVudExhYmVsID0gc2VnbWVudHMuZmluZChzZWdtZW50ID0+IHNlZ21lbnQuaW5kZXggPT09IHNlZ21lbnRUb0RlbGV0ZSkubWV0YWRhdGEuU2VnbWVudExhYmVsO1xuXG4gICAgICBjb21wb25lbnQgPSAoXG4gICAgICAgIDxTZWdtZW50YXRpb25NZW51RGVsZXRlQ29uZmlybWF0aW9uXG4gICAgICAgICAgc2VnbWVudExhYmVsPXtzZWdtZW50TGFiZWx9XG4gICAgICAgICAgb25EZWxldGVDb25maXJtQ2xpY2s9e3RoaXMub25EZWxldGVDb25maXJtQ2xpY2t9XG4gICAgICAgICAgb25EZWxldGVDYW5jZWxDbGljaz17dGhpcy5vbkRlbGV0ZUNhbmNlbENsaWNrfVxuICAgICAgICAvPlxuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29tcG9uZW50ID0gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInNlZ21lbnRhdGlvbi1tZW51LWNvbXBvbmVudFwiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VnbWVudGF0aW9uLW1lbnUtbGlzdFwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJzZWdtZW50YXRpb24tbWVudS1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgPGgzPlNlZ21lbnRzPC9oMz5cbiAgICAgICAgICAgICAgPE1lbnVJT0J1dHRvbnNcbiAgICAgICAgICAgICAgICBJbXBvcnRDYWxsYmFja09yQ29tcG9uZW50PXtJbXBvcnRDYWxsYmFja09yQ29tcG9uZW50fVxuICAgICAgICAgICAgICAgIEV4cG9ydENhbGxiYWNrT3JDb21wb25lbnQ9e0V4cG9ydENhbGxiYWNrT3JDb21wb25lbnR9XG4gICAgICAgICAgICAgICAgb25JbXBvcnRCdXR0b25DbGljaz17dGhpcy5vbkltcG9ydEJ1dHRvbkNsaWNrfVxuICAgICAgICAgICAgICAgIG9uRXhwb3J0QnV0dG9uQ2xpY2s9e3RoaXMub25FeHBvcnRCdXR0b25DbGlja31cbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPHRhYmxlIGNsYXNzTmFtZT1cInBlcHBlcm1pbnQtdGFibGVcIj5cbiAgICAgICAgICAgICAgPHRib2R5PlxuICAgICAgICAgICAgICAgIDxTZWdtZW50YXRpb25NZW51TGlzdEhlYWRlciBpbXBvcnRNZXRhZGF0YT17aW1wb3J0TWV0YWRhdGF9IC8+XG4gICAgICAgICAgICAgICAgPFNlZ21lbnRhdGlvbk1lbnVMaXN0Qm9keVxuICAgICAgICAgICAgICAgICAgc2VnbWVudHM9e3NlZ21lbnRzfVxuICAgICAgICAgICAgICAgICAgYWN0aXZlU2VnbWVudEluZGV4PXthY3RpdmVTZWdtZW50SW5kZXh9XG4gICAgICAgICAgICAgICAgICBvblNlZ21lbnRDaGFuZ2U9e3RoaXMub25TZWdtZW50Q2hhbmdlfVxuICAgICAgICAgICAgICAgICAgb25FZGl0Q2xpY2s9e3RoaXMub25FZGl0Q2xpY2t9XG4gICAgICAgICAgICAgICAgICBvbkRlbGV0ZUNsaWNrPXt0aGlzLmNvbmZpcm1EZWxldGVPbkRlbGV0ZUNsaWNrfVxuICAgICAgICAgICAgICAgICAgZW5hYmxlZEVsZW1lbnQ9e2VuYWJsZWRFbGVtZW50fVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgIDwvdGJvZHk+XG4gICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxCcnVzaFNldHRpbmdzIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gPFJlYWN0LkZyYWdtZW50Pntjb21wb25lbnR9PC9SZWFjdC5GcmFnbWVudD47XG4gIH1cbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgJy4vc2VnbWVudGF0aW9uTWVudS5zdHlsJztcblxuLyoqXG4gKiBAY2xhc3MgU2VnbWVudGF0aW9uTWVudURlbGV0ZUNvbmZpcm1hdGlvbiAtIFJlbmRlcnMgYSBjb25maXJtYXRpb24gZGlhbG9nIGZvclxuICogY29uZmlybWF0aW9uIG9mIHNlZ21lbnQgZGVsZXRpb24uXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZ21lbnRhdGlvbk1lbnVEZWxldGVDb25maXJtYXRpb24gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc2VnbWVudExhYmVsLCBvbkRlbGV0ZUNvbmZpcm1DbGljaywgb25EZWxldGVDYW5jZWxDbGljayB9ID0gdGhpcy5wcm9wcztcblxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICA8ZGl2PlxuICAgICAgICAgIDxoNT5XYXJuaW5nITwvaDU+XG4gICAgICAgICAgPHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGRlbGV0ZSB7c2VnbWVudExhYmVsfT8gVGhpcyBjYW5ub3QgYmUgdW5kb25lLjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwic2VnLWRlbGV0ZS1ob3Jpem9udGFsLWJveFwiPlxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImJ0biBidG4tc20gYnRuLXByaW1hcnlcIiBvbkNsaWNrPXtvbkRlbGV0ZUNvbmZpcm1DbGlja30+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYSBmYS1jaGVjay1jaXJjbGUgZmEtMnhcIiAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgICA8YSBjbGFzc05hbWU9XCJidG4gYnRuLXNtIGJ0bi1wcmltYXJ5XCIgb25DbGljaz17b25EZWxldGVDYW5jZWxDbGlja30+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYSBmYS10aW1lcy1jaXJjbGUgZmEtMnhcIiAvPlxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFNlZ21lbnRhdGlvbk1lbnVMaXN0SXRlbSBmcm9tICcuL1NlZ21lbnRhdGlvbk1lbnVMaXN0SXRlbS5qcyc7XG5pbXBvcnQgeyBuZXdTZWdtZW50IH0gZnJvbSAnLi4vLi4vdXRpbC9icnVzaE1ldGFkYXRhSU8uanMnO1xuXG5pbXBvcnQgJy4vc2VnbWVudGF0aW9uTWVudS5zdHlsJztcblxuLyoqXG4gKiBAY2xhc3MgU2VnbWVudGF0aW9uTWVudUxpc3RCb2R5IC0gUmVuZGVycyBhIGxpc3Qgb2YgU2VnbWVudGF0aW9uTWVudUxpc3RJdGVtcyxcbiAqIGRpc3BsYXlpbmcgdGhlIG1ldGFkYXRhIG9mIHNlZ21lbnRzLlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWdtZW50YXRpb25NZW51TGlzdEJvZHkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgc2VnbWVudHMsIGFjdGl2ZVNlZ21lbnRJbmRleCwgb25TZWdtZW50Q2hhbmdlLCBvbkVkaXRDbGljaywgb25EZWxldGVDbGljaywgZW5hYmxlZEVsZW1lbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICB7c2VnbWVudHMubWFwKHNlZ21lbnQgPT4gKFxuICAgICAgICAgIDxTZWdtZW50YXRpb25NZW51TGlzdEl0ZW1cbiAgICAgICAgICAgIGtleT17YCR7c2VnbWVudC5tZXRhZGF0YS5TZWdtZW50TGFiZWx9XyR7c2VnbWVudC5pbmRleH1gfVxuICAgICAgICAgICAgc2VnbWVudEluZGV4PXtzZWdtZW50LmluZGV4fVxuICAgICAgICAgICAgbWV0YWRhdGE9e3NlZ21lbnQubWV0YWRhdGF9XG4gICAgICAgICAgICBvblNlZ21lbnRDaGFuZ2U9e29uU2VnbWVudENoYW5nZX1cbiAgICAgICAgICAgIG9uRWRpdENsaWNrPXtvbkVkaXRDbGlja31cbiAgICAgICAgICAgIG9uRGVsZXRlQ2xpY2s9e29uRGVsZXRlQ2xpY2t9XG4gICAgICAgICAgICBjaGVja2VkPXtzZWdtZW50LmluZGV4ID09PSBhY3RpdmVTZWdtZW50SW5kZXh9XG4gICAgICAgICAgICBlbmFibGVkRWxlbWVudD17ZW5hYmxlZEVsZW1lbnR9XG4gICAgICAgICAgLz5cbiAgICAgICAgKSl9XG4gICAgICAgIDx0cj5cbiAgICAgICAgICA8dGggLz5cbiAgICAgICAgICA8dGg+XG4gICAgICAgICAgICA8YSBjbGFzc05hbWU9XCJzZWdtZW50YXRpb24tbWVudS1uZXctYnV0dG9uIGJ0biBidG4tc20gYnRuLXByaW1hcnlcIiBvbkNsaWNrPXtuZXdTZWdtZW50fT5cbiAgICAgICAgICAgICAgPGkgY2xhc3NOYW1lPVwiZmEgZmEtcGx1cy1jaXJjbGVcIiAvPiBTZWdtZW50XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgPC90cj5cbiAgICAgIDwvUmVhY3QuRnJhZ21lbnQ+XG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCAnLi9zZWdtZW50YXRpb25NZW51LnN0eWwnO1xuXG4vKipcbiAqIEBjbGFzcyBTZWdtZW50YXRpb25NZW51TGlzdEhlYWRlciAtIFJlbmRlcnMgdGhlIGhlYWRlciBmb3IgdGhlXG4gKiBTZWdtZW50YXRpb25NZW51TGlzdCB0YWJsZS5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VnbWVudGF0aW9uTWVudUxpc3RIZWFkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcyA9IHt9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgaW1wb3J0TWV0YWRhdGEgfSA9IHRoaXMucHJvcHM7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPFJlYWN0LkZyYWdtZW50PlxuICAgICAgICA8dHI+XG4gICAgICAgICAgPHRoIGNvbFNwYW49XCIyXCIgY2xhc3NOYW1lPVwibGVmdC1hbGlnbmVkLWNlbGwgc2VnbWVudGF0aW9uLW1lbnUtbGlzdC1ib3JkZXJlZFwiPlxuICAgICAgICAgICAge2ltcG9ydE1ldGFkYXRhLm5hbWV9XG4gICAgICAgICAgPC90aD5cbiAgICAgICAgICA8dGggY29sU3Bhbj1cIjJcIiBjbGFzc05hbWU9XCJyaWdodC1hbGlnbmVkLWNlbGwgc2VnbWVudGF0aW9uLW1lbnUtbGlzdC1ib3JkZXJlZFwiPlxuICAgICAgICAgICAge2ltcG9ydE1ldGFkYXRhLmxhYmVsfVxuICAgICAgICAgIDwvdGg+XG4gICAgICAgIDwvdHI+XG4gICAgICAgIHtpbXBvcnRNZXRhZGF0YS50eXBlICYmIChcbiAgICAgICAgICA8dHI+XG4gICAgICAgICAgICA8dGggY29sU3Bhbj1cIjJcIiBjbGFzc05hbWU9XCJsZWZ0LWFsaWduZWQtY2VsbCBzZWdtZW50YXRpb24tbWVudS1saXN0LWJvcmRlcmVkXCI+XG4gICAgICAgICAgICAgIFR5cGU6IHtpbXBvcnRNZXRhZGF0YS50eXBlfVxuICAgICAgICAgICAgPC90aD5cbiAgICAgICAgICAgIDx0aCBjb2xTcGFuPVwiMlwiIGNsYXNzTmFtZT1cInJpZ2h0LWFsaWduZWQtY2VsbCBzZWdtZW50YXRpb24tbWVudS1saXN0LWJvcmRlcmVkXCI+XG4gICAgICAgICAgICAgIE1vZGlmaWVkOiB7aW1wb3J0TWV0YWRhdGEubW9kaWZpZWR9XG4gICAgICAgICAgICA8L3RoPlxuICAgICAgICAgIDwvdHI+XG4gICAgICAgICl9XG4gICAgICAgIDx0ciBjbGFzc05hbWU9XCJzZWdtZW50YXRpb24tbWVudS1saXN0LWJvcmRlcmVkXCI+XG4gICAgICAgICAgPHRoPlBhaW50PC90aD5cbiAgICAgICAgICA8dGg+TGFiZWw8L3RoPlxuICAgICAgICAgIDx0aCBjbGFzc05hbWU9XCJjZW50ZXJlZC1jZWxsXCI+VHlwZTwvdGg+XG4gICAgICAgICAgPHRoIGNsYXNzTmFtZT1cImNlbnRlcmVkLWNlbGxcIj5EZWxldGU8L3RoPlxuICAgICAgICA8L3RyPlxuICAgICAgPC9SZWFjdC5GcmFnbWVudD5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNvcm5lcnN0b25lVG9vbHMgZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG5pbXBvcnQgJy4vc2VnbWVudGF0aW9uTWVudS5zdHlsJztcblxuY29uc3QgYnJ1c2hNb2R1bGUgPSBjb3JuZXJzdG9uZVRvb2xzLnN0b3JlLm1vZHVsZXMuYnJ1c2g7XG5cbi8qKlxuICogQGNsYXNzIFNlZ21lbnRhdGlvbk1lbnVMaXN0SXRlbSAtIFJlbmRlcnMgbWV0YWRhdGEgZm9yIGEgc2luZ2xlIHNlZ21lbnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlZ21lbnRhdGlvbk1lbnVMaXN0SXRlbSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzID0ge30pIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gIH1cblxuICAvKipcbiAgICogX2dldFR5cGVXaXRoTW9kaWZpZXIgLSBSZXR1cm5zIHRoZSBzZWdtZW50IHR5cGUgd2l0aCBpdHMgbW9kaWZpZXIgYXMgYSBzdHJpbmcuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBfZ2V0VHlwZVdpdGhNb2RpZmllcigpIHtcbiAgICBjb25zdCB7IG1ldGFkYXRhIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IHR5cGVXaXRoTW9kaWZpZXIgPSBtZXRhZGF0YS5TZWdtZW50ZWRQcm9wZXJ0eVR5cGVDb2RlU2VxdWVuY2UuQ29kZU1lYW5pbmc7XG5cbiAgICBjb25zdCBtb2RpZmllciA9IG1ldGFkYXRhLlNlZ21lbnRlZFByb3BlcnR5VHlwZUNvZGVTZXF1ZW5jZS5TZWdtZW50ZWRQcm9wZXJ0eVR5cGVNb2RpZmllckNvZGVTZXF1ZW5jZTtcblxuICAgIGlmIChtb2RpZmllcikge1xuICAgICAgdHlwZVdpdGhNb2RpZmllciArPSBgICgke21vZGlmaWVyLkNvZGVNZWFuaW5nfSlgO1xuICAgIH1cblxuICAgIHJldHVybiB0eXBlV2l0aE1vZGlmaWVyO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHsgbWV0YWRhdGEsIHNlZ21lbnRJbmRleCwgb25TZWdtZW50Q2hhbmdlLCBvbkVkaXRDbGljaywgb25EZWxldGVDbGljaywgY2hlY2tlZCwgZW5hYmxlZEVsZW1lbnQgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCBzZWdtZW50TGFiZWwgPSBtZXRhZGF0YS5TZWdtZW50TGFiZWw7XG4gICAgY29uc3QgY29sb3JtYXAgPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmFjdGl2ZUNvcm5lcnN0b25lQ29sb3JNYXAoZW5hYmxlZEVsZW1lbnQpO1xuICAgIGNvbnN0IGNvbG9yID0gY29sb3JtYXAuZ2V0Q29sb3Ioc2VnbWVudEluZGV4KTtcbiAgICBjb25zdCBzZWdtZW50Q29sb3IgPSBgcmdiYSgke2NvbG9yWzBdfSwgJHtjb2xvclsxXX0sICR7Y29sb3JbMl19LCAxLjAgKWA7XG5cbiAgICBjb25zdCBzZWdtZW50Q2F0ZWdvcnkgPSBtZXRhZGF0YS5TZWdtZW50ZWRQcm9wZXJ0eUNhdGVnb3J5Q29kZVNlcXVlbmNlLkNvZGVNZWFuaW5nO1xuICAgIGNvbnN0IHR5cGVXaXRoTW9kaWZpZXIgPSB0aGlzLl9nZXRUeXBlV2l0aE1vZGlmaWVyKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPHRyPlxuICAgICAgICA8dGQgY2xhc3NOYW1lPVwiY2VudGVyZWQtY2VsbFwiPlxuICAgICAgICAgIDxpIGNsYXNzTmFtZT1cImZhIGZhLXNxdWFyZVwiIHN0eWxlPXt7IGNvbG9yOiBzZWdtZW50Q29sb3IgfX0gLz57JyAnfVxuICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgIGNoZWNrZWQ9e2NoZWNrZWR9XG4gICAgICAgICAgICBvbkNoYW5nZT17KCkgPT4ge1xuICAgICAgICAgICAgICBvblNlZ21lbnRDaGFuZ2Uoc2VnbWVudEluZGV4KTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cImxlZnQtYWxpZ25lZC1jZWxsXCI+XG4gICAgICAgICAgPGFcbiAgICAgICAgICAgIGNsYXNzTmFtZT1cInNlZ21lbnRhdGlvbi1tZW51LW5hbWUtbGlua1wiXG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiB7XG4gICAgICAgICAgICAgIG9uRWRpdENsaWNrKHNlZ21lbnRJbmRleCwgbWV0YWRhdGEpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICB7c2VnbWVudExhYmVsfVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkPlxuICAgICAgICAgIDxhXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJzZWdtZW50YXRpb24tbWVudS1uYW1lLWxpbmtcIlxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICBvbkVkaXRDbGljayhzZWdtZW50SW5kZXgsIG1ldGFkYXRhKTtcbiAgICAgICAgICAgIH19XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3R5cGVXaXRoTW9kaWZpZXJ9XG4gICAgICAgICAgICB7JyAtICd9XG4gICAgICAgICAgICB7c2VnbWVudENhdGVnb3J5fVxuICAgICAgICAgIDwvYT5cbiAgICAgICAgPC90ZD5cbiAgICAgICAgPHRkIGNsYXNzTmFtZT1cImNlbnRlcmVkLWNlbGxcIj5cbiAgICAgICAgICA8YVxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYnRuIGJ0bi1zbSBidG4tc2Vjb25kYXJ5XCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IHtcbiAgICAgICAgICAgICAgb25EZWxldGVDbGljayhzZWdtZW50SW5kZXgpO1xuICAgICAgICAgICAgfX1cbiAgICAgICAgICA+XG4gICAgICAgICAgICA8aSBjbGFzc05hbWU9XCJmYSBmYS10aW1lc1wiIC8+XG4gICAgICAgICAgPC9hPlxuICAgICAgICA8L3RkPlxuICAgICAgPC90cj5cbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgaW5pdCwgeyBUT09MX05BTUVTIH0gZnJvbSAnLi9pbml0LmpzJztcbmltcG9ydCBjb21tYW5kc01vZHVsZSBmcm9tICcuL2NvbW1hbmRzTW9kdWxlLmpzJztcbmltcG9ydCBTZWdtZW50YXRpb25NZW51IGZyb20gJy4vY29tcG9uZW50cy9zZWdtZW50YXRpb25NZW51L1NlZ21lbnRhdGlvbk1lbnUuanMnO1xuaW1wb3J0IFJvaUNvbnRvdXJNZW51IGZyb20gJy4vY29tcG9uZW50cy9yb2lDb250b3VyTWVudS9Sb2lDb250b3VyTWVudS5qcyc7XG5cbmNvbnN0IFRPT0xCQVJfQlVUVE9OX1RZUEVTID0ge1xuICBDT01NQU5EOiAnY29tbWFuZCcsXG4gIFNFVF9UT09MX0FDVElWRTogJ3NldFRvb2xBY3RpdmUnXG59O1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIC8qKlxuICAgKiBPbmx5IHJlcXVpcmVkIHByb3BlcnR5LiBTaG91bGQgYmUgYSB1bmlxdWUgdmFsdWUgYWNyb3NzIGFsbCBleHRlbnNpb25zLlxuICAgKi9cbiAgaWQ6ICdvaGlmLXNlZ21lbnRhdGlvbi1leHRlbnNpb24nLFxuXG4gIHByZVJlZ2lzdHJhdGlvbihjb25maWd1cmF0aW9uID0ge30pIHtcbiAgICBpbml0KGNvbmZpZ3VyYXRpb24pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBSZWdpc3RlcnMgb25lIG9yIG1vcmUgbmFtZWQgY29tbWFuZHMgc2NvcGVkIHRvIGEgY29udGV4dC4gQ29tbWFuZHMgYXJlXG4gICAqIHRoZSBwcmltYXJ5IG1lYW5zIGZvci4uLlxuICAgKi9cbiAgZ2V0Q29tbWFuZHNNb2R1bGUoKSB7XG4gICAgcmV0dXJuIGNvbW1hbmRzTW9kdWxlO1xuICB9LFxuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIHByb3ZpZGUgdG9vbGJhciBkZWZpbml0aW9ucyB0aGF0IHdpbGwgYmUgbWVyZ2VkIHdpdGggYW55XG4gICAqIGV4aXN0aW5nIGFwcGxpY2F0aW9uIHRvb2xiYXIgY29uZmlndXJhdGlvbi4gVXNlZCB0byBkZXRlcm1pbmUgd2hpY2hcbiAgICogYnV0dG9ucyBzaG91bGQgYmUgdmlzaWJsZSB3aGVuLCB0aGVpciBvcmRlciwgd2hhdCBoYXBwZW5zIHdoZW4gdGhleSdyZVxuICAgKiBjbGlja2VkLCBldGMuXG4gICAqL1xuICBnZXRUb29sYmFyTW9kdWxlKCkge1xuICAgIHJldHVybiB7XG4gICAgICBkZWZpbml0aW9uczogW1xuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdmcmVlaGFuZFJvaVRvb2xzJyxcbiAgICAgICAgICBsYWJlbDogJ1JPSScsXG4gICAgICAgICAgaWNvbjogJ2xldmVsJyxcbiAgICAgICAgICBidXR0b25zOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiAnRnJlZWhhbmRSb2knLFxuICAgICAgICAgICAgICBsYWJlbDogJ0RyYXcnLFxuICAgICAgICAgICAgICBpY29uOiAnbGV2ZWwnLFxuICAgICAgICAgICAgICB0eXBlOiBUT09MQkFSX0JVVFRPTl9UWVBFUy5TRVRfVE9PTF9BQ1RJVkUsXG4gICAgICAgICAgICAgIGNvbW1hbmROYW1lOiAnc2V0VG9vbEFjdGl2ZScsXG4gICAgICAgICAgICAgIGNvbW1hbmRPcHRpb25zOiB7IHRvb2xOYW1lOiBUT09MX05BTUVTLkZSRUVIQU5EX1JPSV8zRF9UT09MIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiAnRnJlZWhhbmRSb2lTY3VscHRvcicsXG4gICAgICAgICAgICAgIGxhYmVsOiAnU2N1bHB0JyxcbiAgICAgICAgICAgICAgaWNvbjogJ2xldmVsJyxcbiAgICAgICAgICAgICAgdHlwZTogVE9PTEJBUl9CVVRUT05fVFlQRVMuU0VUX1RPT0xfQUNUSVZFLFxuICAgICAgICAgICAgICBjb21tYW5kTmFtZTogJ3NldFRvb2xBY3RpdmUnLFxuICAgICAgICAgICAgICBjb21tYW5kT3B0aW9uczogeyB0b29sTmFtZTogVE9PTF9OQU1FUy5GUkVFSEFORF9ST0lfM0RfU0NVTFBUT1JfVE9PTCB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgaWQ6ICdicnVzaFRvb2xzJyxcbiAgICAgICAgICBsYWJlbDogJ1NlZ21lbnQnLFxuICAgICAgICAgIGljb246ICdsZXZlbCcsXG4gICAgICAgICAgYnV0dG9uczogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICBpZDogJ0JydXNoJyxcbiAgICAgICAgICAgICAgbGFiZWw6ICdNYW51YWwnLFxuICAgICAgICAgICAgICBpY29uOiAnbGV2ZWwnLFxuICAgICAgICAgICAgICB0eXBlOiBUT09MQkFSX0JVVFRPTl9UWVBFUy5TRVRfVE9PTF9BQ1RJVkUsXG4gICAgICAgICAgICAgIGNvbW1hbmROYW1lOiAnc2V0VG9vbEFjdGl2ZScsXG4gICAgICAgICAgICAgIGNvbW1hbmRPcHRpb25zOiB7IHRvb2xOYW1lOiBUT09MX05BTUVTLkJSVVNIXzNEX1RPT0wgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgaWQ6ICdCcnVzaDNESFVHYXRlZFRvb2wnLFxuICAgICAgICAgICAgICBsYWJlbDogJ1NtYXJ0IENUJyxcbiAgICAgICAgICAgICAgaWNvbjogJ2xldmVsJyxcbiAgICAgICAgICAgICAgdHlwZTogVE9PTEJBUl9CVVRUT05fVFlQRVMuU0VUX1RPT0xfQUNUSVZFLFxuICAgICAgICAgICAgICBjb21tYW5kTmFtZTogJ3NldFRvb2xBY3RpdmUnLFxuICAgICAgICAgICAgICBjb21tYW5kT3B0aW9uczogeyB0b29sTmFtZTogVE9PTF9OQU1FUy5CUlVTSF8zRF9IVV9HQVRFRF9UT09MIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgIGlkOiAnQnJ1c2gzREF1dG9HYXRlZFRvb2wnLFxuICAgICAgICAgICAgICBsYWJlbDogJ0F1dG8nLFxuICAgICAgICAgICAgICBpY29uOiAnbGV2ZWwnLFxuICAgICAgICAgICAgICB0eXBlOiBUT09MQkFSX0JVVFRPTl9UWVBFUy5TRVRfVE9PTF9BQ1RJVkUsXG4gICAgICAgICAgICAgIGNvbW1hbmROYW1lOiAnc2V0VG9vbEFjdGl2ZScsXG4gICAgICAgICAgICAgIGNvbW1hbmRPcHRpb25zOiB7IHRvb2xOYW1lOiBUT09MX05BTUVTLkJSVVNIXzNEX0FVVE9fR0FURURfVE9PTCB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgXVxuICAgICAgICB9XG4gICAgICBdLFxuICAgICAgZGVmYXVsdENvbnRleHQ6ICdBQ1RJVkVfVklFV1BPUlQ6OkNPUk5FUlNUT05FJ1xuICAgIH07XG4gIH0sXG5cbiAgZ2V0UGFuZWxNb2R1bGUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG1lbnVPcHRpb25zOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBpY29uOiAndGgtbGlzdCcsXG4gICAgICAgICAgbGFiZWw6ICdTZWdtZW50cycsXG4gICAgICAgICAgdGFyZ2V0OiAnc2VnbWVudC1wYW5lbCdcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGljb246ICd0aCcsXG4gICAgICAgICAgbGFiZWw6ICdDb250b3VycycsXG4gICAgICAgICAgdGFyZ2V0OiAnY29udG91ci1wYW5lbCdcbiAgICAgICAgfVxuICAgICAgXSxcbiAgICAgIGNvbXBvbmVudHM6IFtcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnc2VnbWVudC1wYW5lbCcsXG4gICAgICAgICAgZnJvbTogJ3JpZ2h0JyxcbiAgICAgICAgICB3aWR0aDogJzUwMHB4JyxcbiAgICAgICAgICBjb21wb25lbnQ6IFNlZ21lbnRhdGlvbk1lbnVcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIGlkOiAnY29udG91ci1wYW5lbCcsXG4gICAgICAgICAgZnJvbTogJ3JpZ2h0JyxcbiAgICAgICAgICB3aWR0aDogJzUwMHB4JyxcbiAgICAgICAgICBjb21wb25lbnQ6IFJvaUNvbnRvdXJNZW51XG4gICAgICAgIH1cbiAgICAgIF0sXG4gICAgICBkZWZhdWx0Q29udGV4dDogWydWSUVXRVInXVxuICAgIH07XG4gIH1cbn07XG4iLCJpbXBvcnQgeyBzdG9yZSwgcmVnaXN0ZXIsIGFkZFRvb2wgfSBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5pbXBvcnQgZnJlZWhhbmQzRE1vZHVsZSBmcm9tICcuL21vZHVsZXMvZnJlZWhhbmQzRE1vZHVsZS5qcyc7XG5pbXBvcnQgZXh0ZW5kQnJ1c2hNb2R1bGUgZnJvbSAnLi9tb2R1bGVzL2V4dGVuZEJydXNoTW9kdWxlLmpzJztcblxuaW1wb3J0IEJydXNoM0RUb29sIGZyb20gJy4vdG9vbHMvQnJ1c2gzRFRvb2wuanMnO1xuaW1wb3J0IEJydXNoM0RIVUdhdGVkVG9vbCBmcm9tICcuL3Rvb2xzL0JydXNoM0RIVUdhdGVkVG9vbC5qcyc7XG5pbXBvcnQgQnJ1c2gzREF1dG9HYXRlZFRvb2wgZnJvbSAnLi90b29scy9CcnVzaDNEQXV0b0dhdGVkVG9vbC5qcyc7XG5pbXBvcnQgRnJlZWhhbmRSb2kzRFRvb2wgZnJvbSAnLi90b29scy9GcmVlaGFuZFJvaTNEVG9vbC5qcyc7XG5pbXBvcnQgRnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbCBmcm9tICcuL3Rvb2xzL0ZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wuanMnO1xuXG5sZXQgVE9PTF9OQU1FUyA9IHt9O1xuXG5leHBvcnQgeyBUT09MX05BTUVTIH07XG5cbmNvbnN0IG1vZHVsZXMgPSBzdG9yZS5tb2R1bGVzO1xuXG5jb25zdCBkZWZhdWx0Q29uZmlnID0ge1xuICBtYXhSYWRpdXM6IDY0LFxuICBob2xlRmlsbDogMixcbiAgaG9sZUZpbGxSYW5nZTogWzAsIDIwXSxcbiAgc3RyYXlSZW1vdmU6IDUsXG4gIHN0cmF5UmVtb3ZlUmFuZ2U6IFswLCA5OV0sXG4gIGludGVycG9sYXRlOiBmYWxzZSxcbiAgc2hvd0ZyZWVoYW5kU3RhdHM6IGZhbHNlLFxuICBicnVzaDNkVG9vbE5hbWU6ICdCcnVzaDNEVG9vbCcsXG4gIGJydXNoM0RIVUdhdGVkVG9vbE5hbWU6ICdCcnVzaDNESFVHYXRlZFRvb2wnLFxuICBicnVzaDNEQXV0b0dhdGVkVG9vbDogJ0JydXNoM0RBdXRvR2F0ZWRUb29sJyxcbiAgZnJlZWhhbmRSb2kzRFRvb2w6ICdGcmVlaGFuZFJvaTNEVG9vbCcsXG4gIGZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2w6ICdGcmVlaGFuZFJvaTNEU2N1bHB0b3JUb29sJyxcbiAgZ2F0ZXM6IFtcbiAgICB7XG4gICAgICAvLyBodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3BtYy9hcnRpY2xlcy9QTUM0MzA5NTIyL1xuICAgICAgbmFtZTogJ2FkaXBvc2UnLFxuICAgICAgcmFuZ2U6IFstMTkwLCAtMzBdXG4gICAgfSxcbiAgICB7XG4gICAgICAvLyBodHRwczovL3d3dy5uY2JpLm5sbS5uaWguZ292L3BtYy9hcnRpY2xlcy9QTUM0MzA5NTIyL1xuICAgICAgbmFtZTogJ211c2NsZScsXG4gICAgICByYW5nZTogWy0yOSwgMTUwXVxuICAgIH0sXG4gICAge1xuICAgICAgbmFtZTogJ2N1c3RvbScsXG4gICAgICByYW5nZTogWzAsIDEwMF1cbiAgICB9XG4gIF1cbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaXQoY29uZmlndXJhdGlvbiA9IHt9KSB7XG4gIGNvbnN0IGJydXNoTW9kdWxlID0gbW9kdWxlcy5icnVzaDtcbiAgY29uc3QgY29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdENvbmZpZywgY29uZmlndXJhdGlvbik7XG5cbiAgZXh0ZW5kQnJ1c2hNb2R1bGUoYnJ1c2hNb2R1bGUsIGNvbmZpZyk7XG5cbiAgcmVnaXN0ZXIoJ21vZHVsZScsICdmcmVlaGFuZDNEJywgZnJlZWhhbmQzRE1vZHVsZSk7XG4gIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcblxuICBmcmVlaGFuZDNEU3RvcmUuc3RhdGUuaW50ZXJwb2xhdGUgPSBjb25maWcuaW50ZXJwb2xhdGU7XG4gIGZyZWVoYW5kM0RTdG9yZS5zdGF0ZS5kaXNwbGF5U3RhdHMgPSBjb25maWcuc2hvd0ZyZWVoYW5kU3RhdHM7XG5cbiAgYWRkVG9vbChCcnVzaDNEVG9vbCwgeyBuYW1lOiBjb25maWcuYnJ1c2gzZFRvb2xOYW1lIH0pO1xuICBhZGRUb29sKEJydXNoM0RIVUdhdGVkVG9vbCwgeyBuYW1lOiBjb25maWcuYnJ1c2gzREhVR2F0ZWRUb29sTmFtZSB9KTtcbiAgYWRkVG9vbChCcnVzaDNEQXV0b0dhdGVkVG9vbCwgeyBuYW1lOiBjb25maWcuYnJ1c2gzREF1dG9HYXRlZFRvb2wgfSk7XG4gIGFkZFRvb2woRnJlZWhhbmRSb2kzRFRvb2wsIHsgbmFtZTogY29uZmlnLmZyZWVoYW5kUm9pM0RUb29sIH0pO1xuICBhZGRUb29sKEZyZWVoYW5kUm9pM0RTY3VscHRvclRvb2wsIHtcbiAgICBuYW1lOiBjb25maWcuZnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbCxcbiAgICByZWZlcmVuY2VkVG9vbE5hbWU6IGNvbmZpZy5mcmVlaGFuZFJvaTNEVG9vbFxuICB9KTtcblxuICAvLyBUT0RPIC0+IENsZWFuIHRoaXMgdXAgYSBiaXQgYWZ0ZXIgUFcuXG4gIFRPT0xfTkFNRVMuRlJFRUhBTkRfUk9JXzNEX1RPT0wgPSBjb25maWcuZnJlZWhhbmRSb2kzRFRvb2w7XG4gIFRPT0xfTkFNRVMuRlJFRUhBTkRfUk9JXzNEX1NDVUxQVE9SX1RPT0wgPSBjb25maWcuZnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbDtcbiAgVE9PTF9OQU1FUy5CUlVTSF8zRF9UT09MID0gY29uZmlnLmJydXNoM2RUb29sTmFtZTtcbiAgVE9PTF9OQU1FUy5CUlVTSF8zRF9BVVRPX0dBVEVEX1RPT0wgPSBjb25maWcuYnJ1c2gzREF1dG9HYXRlZFRvb2w7XG4gIFRPT0xfTkFNRVMuQlJVU0hfM0RfSFVfR0FURURfVE9PTCA9IGNvbmZpZy5icnVzaDNESFVHYXRlZFRvb2xOYW1lO1xuXG4gIGNvbnNvbGUubG9nKGNvbmZpZyk7XG5cbiAgY29uc29sZS5sb2coVE9PTF9OQU1FUyk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmRCcnVzaE1vZHVsZShicnVzaE1vZHVsZSwgY29uZmlnKSB7XG4gIGNvbnN0IGJydXNoU3RhdGUgPSBicnVzaE1vZHVsZS5zdGF0ZTtcbiAgY29uc3QgZ2V0dGVycyA9IGJydXNoTW9kdWxlLmdldHRlcnM7XG4gIGNvbnN0IHNldHRlcnMgPSBicnVzaE1vZHVsZS5zZXR0ZXJzO1xuXG4gIGJydXNoU3RhdGUuaG9sZUZpbGwgPSBjb25maWcuaG9sZUZpbGw7XG4gIGJydXNoU3RhdGUuaG9sZUZpbGxSYW5nZSA9IGNvbmZpZy5ob2xlRmlsbFJhbmdlO1xuICBicnVzaFN0YXRlLnN0cmF5UmVtb3ZlID0gY29uZmlnLnN0cmF5UmVtb3ZlO1xuICBicnVzaFN0YXRlLnN0cmF5UmVtb3ZlUmFuZ2UgPSBjb25maWcuc3RyYXlSZW1vdmVSYW5nZTtcbiAgYnJ1c2hTdGF0ZS5nYXRlcyA9IGNvbmZpZy5nYXRlcztcbiAgYnJ1c2hTdGF0ZS5hY3RpdmVHYXRlID0gYnJ1c2hTdGF0ZS5nYXRlc1swXS5uYW1lO1xuICBicnVzaFN0YXRlLm1heFJhZGl1cyA9IGNvbmZpZy5tYXhSYWRpdXM7XG5cbiAgZ2V0dGVycy5hY3RpdmVHYXRlUmFuZ2UgPSAoKSA9PiB7XG4gICAgY29uc3QgYWN0aXZlR2F0ZSA9IGJydXNoU3RhdGUuYWN0aXZlR2F0ZTtcbiAgICBjb25zdCBnYXRlcyA9IGJydXNoU3RhdGUuZ2F0ZXM7XG5cbiAgICBjb25zdCBnYXRlSW5kZXggPSBnYXRlcy5maW5kSW5kZXgoZWxlbWVudCA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudC5uYW1lID09PSBhY3RpdmVHYXRlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGJydXNoU3RhdGUuZ2F0ZXNbZ2F0ZUluZGV4XS5yYW5nZTtcbiAgfTtcblxuICBnZXR0ZXJzLmN1c3RvbUdhdGVSYW5nZSA9ICgpID0+IHtcbiAgICBjb25zdCBnYXRlcyA9IGJydXNoU3RhdGUuZ2F0ZXM7XG5cbiAgICBjb25zdCBnYXRlSW5kZXggPSBnYXRlcy5maW5kSW5kZXgoZWxlbWVudCA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudC5uYW1lID09PSAnY3VzdG9tJztcbiAgICB9KTtcblxuICAgIHJldHVybiBicnVzaFN0YXRlLmdhdGVzW2dhdGVJbmRleF0ucmFuZ2U7XG4gIH07XG5cbiAgc2V0dGVycy5jdXN0b21HYXRlUmFuZ2UgPSAobWluLCBtYXgpID0+IHtcbiAgICBjb25zdCBnYXRlcyA9IGJydXNoU3RhdGUuZ2F0ZXM7XG5cbiAgICBjb25zdCBnYXRlSW5kZXggPSBnYXRlcy5maW5kSW5kZXgoZWxlbWVudCA9PiB7XG4gICAgICByZXR1cm4gZWxlbWVudC5uYW1lID09PSAnY3VzdG9tJztcbiAgICB9KTtcblxuICAgIGNvbnN0IGN1c3RvbUdhdGVSYW5nZSA9IGJydXNoU3RhdGUuZ2F0ZXNbZ2F0ZUluZGV4XS5yYW5nZTtcblxuICAgIGlmIChtaW4gIT09IG51bGwpIHtcbiAgICAgIGN1c3RvbUdhdGVSYW5nZVswXSA9IG1pbjtcbiAgICB9XG5cbiAgICBpZiAobWF4ICE9PSBudWxsKSB7XG4gICAgICBjdXN0b21HYXRlUmFuZ2VbMV0gPSBtYXg7XG4gICAgfVxuICB9O1xuXG4gIGdldHRlcnMuaW1wb3J0TWV0YWRhdGEgPSBzZXJpZXNJbnN0YW5jZVVpZCA9PiB7XG4gICAgaWYgKGJydXNoTW9kdWxlLnN0YXRlLmltcG9ydCAmJiBicnVzaE1vZHVsZS5zdGF0ZS5pbXBvcnRbc2VyaWVzSW5zdGFuY2VVaWRdKSB7XG4gICAgICByZXR1cm4gYnJ1c2hNb2R1bGUuc3RhdGUuaW1wb3J0W3Nlcmllc0luc3RhbmNlVWlkXTtcbiAgICB9XG5cbiAgICByZXR1cm47XG4gIH07XG5cbiAgc2V0dGVycy5pbXBvcnRNZXRhZGF0YSA9IChzZXJpZXNJbnN0YW5jZVVpZCwgbWV0YWRhdGEpID0+IHtcbiAgICAvLyBTdG9yZSB0aGF0IHdlJ3ZlIGltcG9ydGVkIGEgY29sbGVjdGlvbiBmb3IgdGhpcyBzZXJpZXMuXG4gICAgaWYgKCFicnVzaE1vZHVsZS5zdGF0ZS5pbXBvcnQpIHtcbiAgICAgIGJydXNoTW9kdWxlLnN0YXRlLmltcG9ydCA9IHt9O1xuICAgIH1cblxuICAgIGJydXNoTW9kdWxlLnN0YXRlLmltcG9ydFtzZXJpZXNJbnN0YW5jZVVpZF0gPSBtZXRhZGF0YTtcbiAgfTtcblxuICBzZXR0ZXJzLmltcG9ydE1vZGlmaWVkID0gc2VyaWVzSW5zdGFuY2VVaWQgPT4ge1xuICAgIGNvbnN0IGltcG9ydE1ldGFkYXRhID0gYnJ1c2hNb2R1bGUuc3RhdGUuaW1wb3J0W3Nlcmllc0luc3RhbmNlVWlkXTtcblxuICAgIGlmIChpbXBvcnRNZXRhZGF0YS5tb2RpZmllZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGltcG9ydE1ldGFkYXRhLm1vZGlmaWVkID0gdHJ1ZTtcblxuICAgIC8vIEphbWVzQVBldHRzXG4gICAgLy8gVE9ETzogRm9yY2UgdXBkYXRlIG9mIGNvbXBvbmVudC5cbiAgfTtcbn1cbiIsImltcG9ydCBjb3JuZXJzdG9uZSBmcm9tICdjb3JuZXJzdG9uZS1jb3JlJztcbmltcG9ydCBnZW5lcmF0ZVVJRCBmcm9tICcuLi91dGlsL2dlbmVyYXRlVUlELmpzJztcbmltcG9ydCBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudCBmcm9tICcuLi91dGlsL2dldFNlcmllc0luc3RhbmNlVWlkRnJvbUVuYWJsZWRFbGVtZW50LmpzJztcblxuLyoqXG4gKiBAdHlwZWRlZiB7c2VyaWVzW119IHNlcmllc0NvbGxlY3Rpb25cbiAqXG4gKiBAZXhhbXBsZVxuICogW1xuICogICBzZXJpZXMxLFxuICogICBzZXJpZXMyXG4gKiBdO1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gc2VyaWVzXG4gKiBAcHJvcGVydHkge3N0cmluZ30gdWlkIFRoZSBzZXJpZXNJbnN0YW5jZVVpZFxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFjdGl2ZVN0cnVjdHVyZVNldEluZGV4IFRoZSBhY3RpdmVTdHJ1Y3R1cmVTZXQgd2l0aGluIHRoZSBzZXJpZXMuXG4gKiBAcHJvcGVydHkge3N0cnVjdHVyZVNldFtdfSBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uIEFuIGFycmF5IG9mIHN0cnVjdHVyZVNldHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIHtcbiAqICB1aWQ6ICdteVNlcmllc0luc3RhbmNlVWlkJyxcbiAqICBhY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleDogMCxcbiAqICBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uLFxuICogfTtcbiAqL1xuXG4vKipcbiAqIEB0eXBlZGVmIHtvYmplY3R9IHN0cnVjdHVyZVNldFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHVpZCBUaGUgc3RydWN0dXJlU2V0VWlkXG4gKiBAcHJvcGVydHkge3N0cmluZ30gbmFtZSBBIGh1bWFuIHJlYWRhYmxlIGRlc2NyaXB0b3Igb2YgdGhlIHN0cnVjdHVyZVNldC5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gaXNMb2NrZWQgV2hldGhlciB0aGUgc3RydWN0dXJlU2V0IGlzIGltbXV0YWJsZS5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gdmlzaWJsZSBXaGV0aGVyIHRoZSBzdHJ1Y3R1cmVTZXQgc2hvdWxkIGJlIHJlbmRlcmVkLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGFjdGl2ZVJPSUNvbnRvdXJJbmRleCBUaGUgaW5kZXggb2YgdGhlIGFjdGl2ZSBST0lDb250b3VyLlxuICogQHByb3BlcnR5IHtST0lDb250b3VyW119IFJPSUNvbnRvdXJDb2xsZWN0aW9uIEFuIGFycmF5IG9mIFJPSUNvbnRvdXJzLlxuICpcbiAqIEBleGFtcGxlXG4gKiB7XG4gKiAgIHVpZDogJ215U3RydWN0dXJlU2V0VWlkJyxcbiAqICAgbmFtZTogYG15TG92ZWx5U3RydWN0dXJlU2V0YCxcbiAqICAgaXNMb2NrZWQ6IGZhbHNlLFxuICogICB2aXNpYmxlOiB0cnVlLFxuICogICBhY3RpdmVST0lDb250b3VySW5kZXg6IDcsXG4gKiAgIFJPSUNvbnRvdXJDb2xsZWN0aW9uXG4gKiB9O1xuICovXG5cbi8qKlxuICogQHR5cGVkZWYge29iamVjdH0gUk9JQ29udG91clxuICogQHByb3BlcnR5IHtzdHJpbmd9IHVpZCBUaGUgUk9JQ29udG91clVpZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBuYW1lIEEgaHVtYW4gcmVhZGFibGUgZGVzY3JpcHRvciBvZiB0aGUgYmlvbG9naWNhbCBvYmplY3QgdGhlIGNvbnRvdXIgZW5jbG9zZXMuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gY29sb3IgQSBjc3MgY29sb3IgdG8gcmVuZGVyIHRoZSB2b2x1bWUgd2l0aC5cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBwb2x5Z29uQ291bnQgVGhlIG51bWJlciBvZiBwb2x5Z29ucyB0aGF0IGNvbXByaXNlIHRoZSBST0lDb250b3VyLlxuICpcbiAqIEBleGFtcGxlXG4gKiB7XG4gKiAgdWlkOiAnbXlST0lDb250b3VyVWlkJyxcbiAqICBuYW1lOiAnbXlMb3ZlbHlST0lDb250b3VyJyxcbiAqICBjb2xvcjogJ2Nvcm5mbG93ZXJibHVlJyxcbiAqICBwb2x5Z29uQ291bnQ6ICczNCdcbiAqIH07XG4gKi9cblxuLy8gRWFjaCBjb250b3VyIHJlZmVyZW5jZXMgYSBzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBST0lDb250b3VyVWlkLlxuXG5jb25zdCBzdGF0ZSA9IHtcbiAgc2VyaWVzQ29sbGVjdGlvbjogW10sXG4gIGludGVycG9sYXRlOiBmYWxzZSxcbiAgZGlzcGxheVN0YXRzOiBmYWxzZVxufTtcblxuZnVuY3Rpb24gY2hlY2sob2JqZWN0LCBuYW1lKSB7XG4gIGlmICghb2JqZWN0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBJbnN1ZmZpY2llbnQgaW5mb3JtYXRpb24gcHJvdmlkZWQsIG11c3QgcHJvdmlkZSAke25hbWV9LmApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCkge1xuICBjaGVjayhzZXJpZXNJbnN0YW5jZVVpZCwgJ3Nlcmllc0luc3RhbmNlVWlkJyk7XG5cbiAgcmV0dXJuIHN0YXRlLnNlcmllc0NvbGxlY3Rpb24uZmluZChzZXJpZXMgPT4ge1xuICAgIHJldHVybiBzZXJpZXMudWlkID09PSBzZXJpZXNJbnN0YW5jZVVpZDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkID0gJ0RFRkFVTFQnKSB7XG4gIGNoZWNrKHN0cnVjdHVyZVNldFVpZCwgJ3N0cnVjdHVyZVNldFVpZCcpO1xuXG4gIGNvbnN0IHNlcmllcyA9IGdldFNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgaWYgKCFzZXJpZXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gc2VyaWVzLnN0cnVjdHVyZVNldENvbGxlY3Rpb24uZmluZChzdHJ1Y3R1cmVTZXQgPT4ge1xuICAgIHJldHVybiBzdHJ1Y3R1cmVTZXQudWlkID09PSBzdHJ1Y3R1cmVTZXRVaWQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIFJPSUNvbnRvdXJVaWQpIHtcbiAgY2hlY2soUk9JQ29udG91clVpZCwgJ1JPSUNvbnRvdXJVaWQnKTtcblxuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBnZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgaWYgKCFzdHJ1Y3R1cmVTZXQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICByZXR1cm4gc3RydWN0dXJlU2V0LlJPSUNvbnRvdXJDb2xsZWN0aW9uLmZpbmQoUk9JQ29udG91ciA9PiB7XG4gICAgcmV0dXJuIFJPSUNvbnRvdXIgJiYgUk9JQ29udG91ci51aWQgPT09IFJPSUNvbnRvdXJVaWQ7XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBnZXRST0lDb250b3VySW5kZXgoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCkge1xuICBjaGVjayhST0lDb250b3VyVWlkLCAnUk9JQ29udG91clVpZCcpO1xuXG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IGdldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcblxuICBpZiAoIXN0cnVjdHVyZVNldCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb24uZmluZEluZGV4KFJPSUNvbnRvdXIgPT4ge1xuICAgIHJldHVybiBST0lDb250b3VyLnVpZCA9PT0gUk9JQ29udG91clVpZDtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEFjdGl2ZVN0cnVjdHVyZVNldEluZGV4KHNlcmllc0luc3RhbmNlVWlkKSB7XG4gIGNvbnN0IHNlcmllcyA9IGdldFNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgcmV0dXJuIHNlcmllcy5hY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleDtcbn1cblxuZnVuY3Rpb24gZ2V0QWN0aXZlUk9JQ29udG91ckluZGV4KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQgPSAnREVGQVVMVCcpIHtcbiAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gIHJldHVybiBzdHJ1Y3R1cmVTZXQuYWN0aXZlUk9JQ29udG91ckluZGV4O1xufVxuXG5mdW5jdGlvbiBnZXRBY3RpdmVST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQgPSAnREVGQVVMVCcpIHtcbiAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gIGNvbnN0IGFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9IHN0cnVjdHVyZVNldC5hY3RpdmVST0lDb250b3VySW5kZXg7XG5cbiAgaWYgKGFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9PT0gbnVsbCB8fCBhY3RpdmVST0lDb250b3VySW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIHJldHVybiBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb25bYWN0aXZlUk9JQ29udG91ckluZGV4XTtcbn1cblxuZnVuY3Rpb24gc2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKSB7XG4gIGNoZWNrKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICBjb25zdCBzZXJpZXMgPSB7XG4gICAgdWlkOiBzZXJpZXNJbnN0YW5jZVVpZCxcbiAgICBhY3RpdmVTdHJ1Y3R1cmVTZXRJbmRleDogbnVsbCxcbiAgICBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uOiBbXVxuICB9O1xuXG4gIHN0YXRlLnNlcmllc0NvbGxlY3Rpb24ucHVzaChzZXJpZXMpO1xuXG4gIC8vIEFkZCBhIGRlZmF1bHQgc3RydWN0dXJlU2V0IGZvciB0aGUgc2VyaWVzLlxuICBzZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsICdkZWZhdWx0Jywge1xuICAgIHVpZDogJ0RFRkFVTFQnXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBzZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIG5hbWUsIG9wdGlvbnMgPSB7fSkge1xuICBjaGVjayhuYW1lLCAnbmFtZScpO1xuXG4gIGxldCBzZXJpZXMgPSBnZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gIGlmICghc2VyaWVzKSB7XG4gICAgLy8gR2VuZXJhdGUgdGhlIHNlcmllcy5cbiAgICBzZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgIHNlcmllcyA9IGdldFNlcmllcyhzZXJpZXNJbnN0YW5jZVVpZCk7XG4gIH1cblxuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSB7XG4gICAgdWlkOiBvcHRpb25zLnVpZCA/IG9wdGlvbnMudWlkIDogZ2VuZXJhdGVVSUQoKSxcbiAgICBuYW1lLFxuICAgIGlzTG9ja2VkOiBvcHRpb25zLmlzTG9ja2VkID8gb3B0aW9ucy5pc0xvY2tlZCA6IGZhbHNlLFxuICAgIHZpc2libGU6IG9wdGlvbnMudmlzaWJsZSA/IG9wdGlvbnMudmlzaWJsZSA6IHRydWUsXG4gICAgYWN0aXZlUk9JQ29udG91ckluZGV4OiBvcHRpb25zLmFjdGl2ZVJPSUNvbnRvdXJJbmRleCAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5hY3RpdmVST0lDb250b3VySW5kZXggOiBudWxsLFxuICAgIFJPSUNvbnRvdXJDb2xsZWN0aW9uOiBbXVxuICB9O1xuXG4gIHNlcmllcy5zdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uLnB1c2goc3RydWN0dXJlU2V0KTtcbn1cblxuZnVuY3Rpb24gc2V0Uk9JQ29udG91cihzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgY2hlY2sobmFtZSwgJ25hbWUnKTtcblxuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBnZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgaWYgKCFzdHJ1Y3R1cmVTZXQpIHtcbiAgICAvLyBDYW4ndCBnZW5lcmF0ZSB0aGUgc3RydWN0dXJlU2V0IGFzIG5vdCBlbm91Z2ggaW5mbyAobm8gbmFtZSkuXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZ2VuZXJhdGUgUk9JQ29udG91ciwgYXMgdGhlIHN0cnVjdHVyZVNldCB3aXRoICR7c3RydWN0dXJlU2V0VWlkfSBkb2VzIG5vdCBleGlzdC5gKTtcbiAgfVxuXG4gIGNvbnN0IFJPSUNvbnRvdXIgPSB7XG4gICAgdWlkOiBvcHRpb25zLnVpZCA/IG9wdGlvbnMudWlkIDogZ2VuZXJhdGVVSUQoKSxcbiAgICBuYW1lLFxuICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yID8gb3B0aW9ucy5jb2xvciA6IGdldE5leHRDb2xvcigpLFxuICAgIHBvbHlnb25Db3VudDogb3B0aW9ucy5wb2x5Z29uQ291bnQgPyBvcHRpb25zLnBvbHlnb25Db3VudCA6IDBcbiAgfTtcblxuICBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb24ucHVzaChST0lDb250b3VyKTtcblxuICByZXR1cm4gUk9JQ29udG91ci51aWQ7XG59XG5cbmZ1bmN0aW9uIHNldFJPSUNvbnRvdXJBbmRTZXRJbmRleEFjdGl2ZShzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBuYW1lLCBvcHRpb25zID0ge30pIHtcbiAgc2V0Uk9JQ29udG91cihzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBuYW1lLCBvcHRpb25zKTtcblxuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBnZXRTdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgY29uc3QgaW5kZXggPSBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb24ubGVuZ3RoIC0gMTtcblxuICBzdHJ1Y3R1cmVTZXQuYWN0aXZlUk9JQ29udG91ckluZGV4ID0gaW5kZXg7XG5cbiAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiBzZXREZWxldGVST0lGcm9tU3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIFJPSUNvbnRvdXJVaWQpIHtcbiAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuICBjb25zdCBST0lDb250b3VyQ29sbGVjdGlvbiA9IHN0cnVjdHVyZVNldC5ST0lDb250b3VyQ29sbGVjdGlvbjtcblxuICBjb25zdCBST0lDb250b3VySW5kZXggPSBST0lDb250b3VyQ29sbGVjdGlvbi5maW5kSW5kZXgoUk9JQ29udG91ciA9PiB7XG4gICAgcmV0dXJuIFJPSUNvbnRvdXIudWlkID09PSBST0lDb250b3VyVWlkO1xuICB9KTtcblxuICBST0lDb250b3VyQ29sbGVjdGlvbi5zcGxpY2UoUk9JQ29udG91ckluZGV4LCAxKTtcbn1cblxuZnVuY3Rpb24gc2V0U3RydWN0dXJlU2V0TmFtZShuYW1lLCBzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKSB7XG4gIGNoZWNrKG5hbWUsICduYW1lJyk7XG5cbiAgY29uc3Qgc3RydWN0dXJlU2V0ID0gZ2V0U3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gIHN0cnVjdHVyZVNldC5uYW1lID0gbmFtZTtcbn1cblxuZnVuY3Rpb24gc2V0RGVsZXRlU3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpIHtcbiAgY29uc3Qgc2VyaWVzID0gZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICBjb25zdCBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uID0gc2VyaWVzLnN0cnVjdHVyZVNldENvbGxlY3Rpb247XG5cbiAgY29uc3Qgc3RydWN0dXJlU2V0SW5kZXggPSBzdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uLmZpbmRJbmRleChzdHJ1Y3R1cmVTZXQgPT4ge1xuICAgIHJldHVybiBzdHJ1Y3R1cmVTZXQudWlkID09PSBzdHJ1Y3R1cmVTZXRVaWQ7XG4gIH0pO1xuXG4gIHN0cnVjdHVyZVNldENvbGxlY3Rpb24uc3BsaWNlKHN0cnVjdHVyZVNldEluZGV4LCAxKTtcbn1cblxuZnVuY3Rpb24gc2V0Uk9JQ29udG91ck5hbWUobmFtZSwgc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCkge1xuICBjaGVjayhuYW1lLCAnbmFtZScpO1xuXG4gIGNvbnN0IFJPSUNvbnRvdXIgPSBnZXRST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIFJPSUNvbnRvdXJVaWQpO1xuXG4gIFJPSUNvbnRvdXIubmFtZSA9IG5hbWU7XG59XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZVN0cnVjdHVyZVNldEluZGV4KGluZGV4LCBzZXJpZXNJbnN0YW5jZVVpZCkge1xuICBjaGVjayhpbmRleCwgJ2luZGV4Jyk7XG5cbiAgY29uc3Qgc2VyaWVzID0gZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICBzZXJpZXMuYWN0aXZlU3RydWN0dXJlU2V0SW5kZXggPSBpbmRleDtcbn1cblxuZnVuY3Rpb24gc2V0QWN0aXZlU3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpIHtcbiAgY2hlY2soc3RydWN0dXJlU2V0VWlkLCAnc3RydWN0dXJlU2V0VWlkJyk7XG5cbiAgY29uc3Qgc2VyaWVzID0gZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgY29uc3Qgc3RydWN0dXJlU2V0Q29sbGVjdGlvbiA9IHNlcmllcy5zdHJ1Y3R1cmVTZXRDb2xsZWN0aW9uO1xuXG4gIGNvbnN0IHN0cnVjdHVyZVNldEluZGV4ID0gc3RydWN0dXJlU2V0Q29sbGVjdGlvbi5maW5kSW5kZXgoc3RydWN0dXJlU2V0ID0+IHtcbiAgICByZXR1cm4gc3RydWN0dXJlU2V0LnVpZCA9PT0gc3RydWN0dXJlU2V0VWlkO1xuICB9KTtcblxuICBzZXJpZXMuYWN0aXZlU3RydWN0dXJlU2V0SW5kZXggPSBzdHJ1Y3R1cmVTZXRJbmRleDtcbn1cblxuZnVuY3Rpb24gc2V0QWN0aXZlUk9JQ29udG91ckluZGV4KGluZGV4LCBzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkID0gJ0RFRkFVTFQnKSB7XG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IGdldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcblxuICBzdHJ1Y3R1cmVTZXQuYWN0aXZlUk9JQ29udG91ckluZGV4ID0gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZVJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCA9ICdERUZBVUxUJywgUk9JQ29udG91clVpZCkge1xuICBjaGVjayhST0lDb250b3VyVWlkLCAnUk9JQ29udG91clVpZCcpO1xuXG4gIGNvbnN0IHN0cnVjdHVyZVNldCA9IGdldFN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkKTtcbiAgY29uc3QgUk9JQ29udG91ckNvbGxlY3Rpb24gPSBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb247XG5cbiAgY29uc3QgUk9JQ29udG91ckluZGV4ID0gUk9JQ29udG91ckNvbGxlY3Rpb24uZmluZEluZGV4KFJPSUNvbnRvdXIgPT4ge1xuICAgIHJldHVybiBST0lDb250b3VyLnVpZCA9PT0gUk9JQ29udG91clVpZDtcbiAgfSk7XG5cbiAgc3RydWN0dXJlU2V0LmFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9IFJPSUNvbnRvdXJJbmRleDtcbn1cblxuZnVuY3Rpb24gaW5jcmVtZW50UG9seWdvbkNvdW50KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIFJPSUNvbnRvdXJVaWQpIHtcbiAgY29uc3QgUk9JQ29udG91ciA9IGdldFJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCk7XG5cbiAgUk9JQ29udG91ci5wb2x5Z29uQ291bnQrKztcbn1cblxuZnVuY3Rpb24gZGVjcmVtZW50UG9seWdvbkNvdW50KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQsIFJPSUNvbnRvdXJVaWQpIHtcbiAgY29uc3QgUk9JQ29udG91ciA9IGdldFJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCwgUk9JQ29udG91clVpZCk7XG5cbiAgUk9JQ29udG91ci5wb2x5Z29uQ291bnQtLTtcbn1cblxuY29uc3QgZ2V0dGVycyA9IHtcbiAgc2VyaWVzOiBnZXRTZXJpZXMsXG4gIHN0cnVjdHVyZVNldDogZ2V0U3RydWN0dXJlU2V0LFxuICBST0lDb250b3VyOiBnZXRST0lDb250b3VyLFxuICBST0lDb250b3VySW5kZXg6IGdldFJPSUNvbnRvdXJJbmRleCxcbiAgYWN0aXZlU3RydWN0dXJlU2V0SW5kZXg6IGdldEFjdGl2ZVN0cnVjdHVyZVNldEluZGV4LFxuICBhY3RpdmVST0lDb250b3VySW5kZXg6IGdldEFjdGl2ZVJPSUNvbnRvdXJJbmRleCxcbiAgYWN0aXZlUk9JQ29udG91cjogZ2V0QWN0aXZlUk9JQ29udG91clxufTtcblxuY29uc3Qgc2V0dGVycyA9IHtcbiAgc2VyaWVzOiBzZXRTZXJpZXMsXG4gIHN0cnVjdHVyZVNldDogc2V0U3RydWN0dXJlU2V0LFxuICBST0lDb250b3VyOiBzZXRST0lDb250b3VyLFxuICBST0lDb250b3VyQW5kU2V0SW5kZXhBY3RpdmU6IHNldFJPSUNvbnRvdXJBbmRTZXRJbmRleEFjdGl2ZSxcbiAgZGVsZXRlUk9JRnJvbVN0cnVjdHVyZVNldDogc2V0RGVsZXRlUk9JRnJvbVN0cnVjdHVyZVNldCxcbiAgZGVsZXRlU3RydWN0dXJlU2V0OiBzZXREZWxldGVTdHJ1Y3R1cmVTZXQsXG4gIHN0cnVjdHVyZVNldE5hbWU6IHNldFN0cnVjdHVyZVNldE5hbWUsXG4gIFJPSUNvbnRvdXJOYW1lOiBzZXRST0lDb250b3VyTmFtZSxcbiAgYWN0aXZlU3RydWN0dXJlU2V0SW5kZXg6IHNldEFjdGl2ZVN0cnVjdHVyZVNldEluZGV4LFxuICBhY3RpdmVTdHJ1Y3R1cmVTZXQ6IHNldEFjdGl2ZVN0cnVjdHVyZVNldCxcbiAgYWN0aXZlUk9JQ29udG91ckluZGV4OiBzZXRBY3RpdmVST0lDb250b3VySW5kZXgsXG4gIGFjdGl2ZVJPSUNvbnRvdXI6IHNldEFjdGl2ZVJPSUNvbnRvdXIsXG4gIGluY3JlbWVudFBvbHlnb25Db3VudCxcbiAgZGVjcmVtZW50UG9seWdvbkNvdW50LFxuICB0b2dnbGVJbnRlcnBvbGF0ZTogKCkgPT4ge1xuICAgIHN0YXRlLmludGVycG9sYXRlID0gIXN0YXRlLmludGVycG9sYXRlO1xuICB9LFxuICB0b2dnbGVEaXNwbGF5U3RhdHM6ICgpID0+IHtcbiAgICBzdGF0ZS5kaXNwbGF5U3RhdHMgPSAhc3RhdGUuZGlzcGxheVN0YXRzO1xuICB9XG59O1xuXG4vKipcbiAqIGVuYWJsZWRFbGVtZW50Q2FsbGJhY2sgLSBFbGVtZW50IHNwZWNpZmljIGluaXRpbGlzYXRpb24uXG4gKiBAcHVibGljXG4gKiBAcGFyYW0gIHtPYmplY3R9IGVuYWJsZWRFbGVtZW50ICBUaGUgZWxlbWVudCBvbiB3aGljaCB0aGUgbW9kdWxlIGlzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiZWluZyBpbml0aWFsaXNlZC5cbiAqL1xuZnVuY3Rpb24gZW5hYmxlZEVsZW1lbnRDYWxsYmFjayhlbGVtZW50KSB7XG4gIGNvbnN0IGVuYWJsZWRFbGVtZW50ID0gY29ybmVyc3RvbmUuZ2V0RW5hYmxlZEVsZW1lbnQoZWxlbWVudCk7XG5cbiAgaWYgKCFlbmFibGVkRWxlbWVudC5pbWFnZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHNlcmllc0luc3RhbmNlVWlkID0gZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQoZW5hYmxlZEVsZW1lbnQpO1xuXG4gIGlmICghZ2V0U2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKSkge1xuICAgIC8vIEdlbmVyYXRlIHNlcmllcyBzdG9yZS5cbiAgICBzZXRTZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgc3RhdGUsXG4gIGVuYWJsZWRFbGVtZW50Q2FsbGJhY2ssXG4gIGdldHRlcnMsXG4gIHNldHRlcnNcbn07XG5cbmNvbnN0IGltcG9ydENvbG9ycyA9IFtcbiAgJ2Nvcm5mbG93ZXJibHVlJyxcbiAgJ2ZpcmVicmljaycsXG4gICdnb2xkZW5yb2QnLFxuICAnYmx1ZXZpb2xldCcsXG4gICdpbmRpYW5yZWQnLFxuICAnb3JhbmdlJyxcbiAgJ21lZGl1bXR1cnF1b2lzZScsXG4gICdsaWdodGNvcmFsJyxcbiAgJ2toYWtpJyxcbiAgJ2RhcmttYWdlbnRhJyxcbiAgJ2xpZ2h0c2VhZ3JlZW4nLFxuICAndG9tYXRvJyxcbiAgJ2FxdWFtYXJpbmUnLFxuICAnZGFya3NhbG1vbicsXG4gICdtb2NjYXNpbicsXG4gICdvcmNoaWQnLFxuICAnc2t5Ymx1ZScsXG4gICdwZXJ1J1xuXTtcblxuLy8gU3VjaCB0aGF0IGZpcnN0IGNvbG9yIHdpbGwgYmUgdGhlIGZpcnN0IGluIHJvaUNvbG9yc1xubGV0IGN1cnJlbnRDb2xvckluZGV4ID0gaW1wb3J0Q29sb3JzLmxlbmd0aDtcblxuLyoqXG4gKiBnZXROZXh0Q29sb3JcbiAqXG4gKiBAcmV0dXJuIHtzdHJpbmd9IEEgQ1NTIHJlY29nbmlzZWQgY29sb3Igd2l0aCB3aGljaCB0byByZW5kZXIgdGhlIFJPSSBjb250b3VyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0TmV4dENvbG9yKCkge1xuICBjdXJyZW50Q29sb3JJbmRleCsrO1xuICBpZiAoY3VycmVudENvbG9ySW5kZXggPj0gaW1wb3J0Q29sb3JzLmxlbmd0aCkge1xuICAgIGN1cnJlbnRDb2xvckluZGV4ID0gMDtcbiAgfVxuXG4gIHJldHVybiBpbXBvcnRDb2xvcnNbY3VycmVudENvbG9ySW5kZXhdO1xufVxuIiwiaW1wb3J0IGNvcm5lcnN0b25lVG9vbHMgZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuaW1wb3J0IEJydXNoM0RIVUdhdGVkVG9vbCBmcm9tICcuL0JydXNoM0RIVUdhdGVkVG9vbC5qcyc7XG5cbmNvbnN0IHsgZ2V0Q2lyY2xlIH0gPSBjb3JuZXJzdG9uZVRvb2xzLmltcG9ydEludGVybmFsTW9kdWxlKCd1dGlsL2JydXNoVXRpbHMnKTtcblxuY29uc3QgYnJ1c2hNb2R1bGUgPSBjb3JuZXJzdG9uZVRvb2xzLnN0b3JlLm1vZHVsZXMuYnJ1c2g7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJydXNoM0RBdXRvR2F0ZWRUb29sIGV4dGVuZHMgQnJ1c2gzREhVR2F0ZWRUb29sIHtcbiAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiA9IHt9KSB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IHt9O1xuICAgIGNvbnN0IGluaXRpYWxDb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q29uZmlnLCBjb25maWd1cmF0aW9uKTtcblxuICAgIHN1cGVyKGluaXRpYWxDb25maWd1cmF0aW9uKTtcblxuICAgIHRoaXMuaW5pdGlhbENvbmZpZ3VyYXRpb24gPSBpbml0aWFsQ29uZmlndXJhdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBNT1VTRV9ET1dOIGV2ZW50LlxuICAgKlxuICAgKiBAb3ZlcnJpZGVcbiAgICogQGV2ZW50XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldnQgLSBUaGUgZXZlbnQuXG4gICAqL1xuICBwcmVNb3VzZURvd25DYWxsYmFjayhldnQpIHtcbiAgICB0aGlzLl9zZXRDdXN0b21HYXRlKGV2dCk7XG4gICAgdGhpcy5fc3RhcnRQYWludGluZyhldnQpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogX3NldEN1c3RvbUdhdGUgLSBHZXRzIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIGJydXNoIHZhbHVlcyB3aXRoaW4gdGhlIGltYWdlXG4gICAqIGFuZCBzZXRzIHRoZSBnYXRlIG1vZGUgdG8gXCJjdXN0b21cIiB3aXRoIHRoZXNlIHZhbHVlcy5cbiAgICpcbiAgICogQHBhcmFtICB7b2JqZWN0fSBldnQgVGhlIGNvcm5lcnN0b25lIGV2ZW50LlxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIF9zZXRDdXN0b21HYXRlKGV2dCkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGV2dC5kZXRhaWw7XG4gICAgY29uc3QgaW1hZ2UgPSBldmVudERhdGEuaW1hZ2U7XG4gICAgY29uc3QgeyByb3dzLCBjb2x1bW5zIH0gPSBpbWFnZTtcbiAgICBjb25zdCB7IHgsIHkgfSA9IGV2ZW50RGF0YS5jdXJyZW50UG9pbnRzLmltYWdlO1xuICAgIGNvbnN0IHJhZGl1cyA9IGJydXNoTW9kdWxlLnN0YXRlLnJhZGl1cztcbiAgICBjb25zdCBpbWFnZVBpeGVsRGF0YSA9IGltYWdlLmdldFBpeGVsRGF0YSgpO1xuICAgIGNvbnN0IHJlc2NhbGVTbG9wZSA9IGltYWdlLnNsb3BlIHx8IDE7XG4gICAgY29uc3QgcmVzY2FsZUludGVyY2VwdCA9IGltYWdlLmludGVyY2VwdCB8fCAwO1xuXG4gICAgY29uc3QgY2lyY2xlID0gZ2V0Q2lyY2xlKHJhZGl1cywgcm93cywgY29sdW1ucywgeCwgeSk7XG5cbiAgICAvLyBJbml0aWFsaXNlIGhpIGFuZCBsbyBhcyB0aGUgZmlyc3QgcGl4ZWxWYWx1ZSBpbiB0aGUgY2lyY2xlLlxuICAgIGxldCBsbyA9IGltYWdlUGl4ZWxEYXRhW2NpcmNsZVswXVswXSArIGNpcmNsZVswXVsxXSAqIHJvd3NdO1xuICAgIGxldCBoaSA9IGxvO1xuXG4gICAgLy8gRmluZCB0aGUgaGlnaGVzdCBhbmQgbG93ZXN0IHZhbHVlLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2lyY2xlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcGl4ZWxWYWx1ZSA9IGltYWdlUGl4ZWxEYXRhW2NpcmNsZVtpXVswXSArIGNpcmNsZVtpXVsxXSAqIHJvd3NdO1xuXG4gICAgICBpZiAocGl4ZWxWYWx1ZSA8IGxvKSB7XG4gICAgICAgIGxvID0gcGl4ZWxWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHBpeGVsVmFsdWUgPiBoaSkge1xuICAgICAgICBoaSA9IHBpeGVsVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbG8gPSBsbyAqIHJlc2NhbGVTbG9wZSArIHJlc2NhbGVJbnRlcmNlcHQ7XG4gICAgaGkgPSBoaSAqIHJlc2NhbGVTbG9wZSArIHJlc2NhbGVJbnRlcmNlcHQ7XG5cbiAgICB0aGlzLmdhdGUgPSBbbG8sIGhpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBfZ2F0ZUNpcmNsZSAtIEdpdmVuIGFuIGltYWdlIGFuZCBhIGJydXNoIGNpcmNsZSwgZ2F0ZSB0aGUgY2lyY2xlIGJldHdlZW5cbiAgICogdGhlIHNldCBnYXRlIHZhbHVlcywgYW5kIHRoZW4gY2xlYW51cCB0aGUgcmVzdWx0aW5nIG1hc2sgdXNpbmcgdGhlXG4gICAqIGhvbGVGaWxsIGFuZCBzdHJheVJlbW92ZSBwcm9wZXJ0aWVzIG9mIHRoZSBicnVzaCBtb2R1bGUuXG4gICAqXG4gICAqIEBwYXJhbSAge29iamVjdH0gaW1hZ2UgICBUaGUgY29ybmVyc3RvbmUgaW1hZ2UuXG4gICAqIEBwYXJhbSAge051bWJlcltdW119IGNpcmNsZSAgQW4gYXJyYXkgb2YgaW1hZ2UgcGl4ZWxzIGNvbnRhaW5lZCB3aXRoaW4gdGhlIGJydXNoXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLlxuICAgKiBAcmV0dXJucyB7TnVtYmVyW11bXX0gIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGdhdGVkL2NsZWFuZWQgcGl4ZWxzIHRvIGZpbGwuXG4gICAqL1xuICBfZ2F0ZUNpcmNsZShpbWFnZSwgY2lyY2xlKSB7XG4gICAgY29uc3Qgcm93cyA9IGltYWdlLmltYWdlO1xuICAgIGNvbnN0IGltYWdlUGl4ZWxEYXRhID0gaW1hZ2UuZ2V0UGl4ZWxEYXRhKCk7XG4gICAgY29uc3QgZ2F0ZVZhbHVlcyA9IHRoaXMuZ2F0ZTtcbiAgICBjb25zdCByZXNjYWxlU2xvcGUgPSBpbWFnZS5zbG9wZSB8fCAxO1xuICAgIGNvbnN0IHJlc2NhbGVJbnRlcmNlcHQgPSBpbWFnZS5pbnRlcmNlcHQgfHwgMDtcblxuICAgIGNvbnN0IGdhdGVkQ2lyY2xlQXJyYXkgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2lyY2xlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcGl4ZWxWYWx1ZSA9IGltYWdlUGl4ZWxEYXRhW2NpcmNsZVtpXVswXSArIGNpcmNsZVtpXVsxXSAqIHJvd3NdO1xuXG4gICAgICBwaXhlbFZhbHVlID0gcGl4ZWxWYWx1ZSAqIHJlc2NhbGVTbG9wZSArIHJlc2NhbGVJbnRlcmNlcHQ7XG5cbiAgICAgIGlmIChwaXhlbFZhbHVlID49IGdhdGVWYWx1ZXNbMF0gJiYgcGl4ZWxWYWx1ZSA8PSBnYXRlVmFsdWVzWzFdKSB7XG4gICAgICAgIGdhdGVkQ2lyY2xlQXJyYXkucHVzaChjaXJjbGVbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLl9jbGVhbkdhdGVkQ2lyY2xlKGNpcmNsZSwgZ2F0ZWRDaXJjbGVBcnJheSk7XG4gIH1cbn1cbiIsImltcG9ydCB7IHN0b3JlLCBFVkVOVFMsIGltcG9ydEludGVybmFsTW9kdWxlIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuaW1wb3J0IGNvcm5lcnN0b25lIGZyb20gJ2Nvcm5lcnN0b25lLWNvcmUnO1xuXG5pbXBvcnQgQnJ1c2gzRFRvb2wgZnJvbSAnLi9CcnVzaDNEVG9vbC5qcyc7XG5pbXBvcnQgZmxvb2RGaWxsIGZyb20gJy4vbi1kaW1lbnNpb25hbC1mbG9vZC1maWxsLmpzJztcblxuY29uc3QgYnJ1c2hNb2R1bGUgPSBzdG9yZS5tb2R1bGVzLmJydXNoO1xuY29uc3QgeyBnZXRDaXJjbGUsIGRyYXdCcnVzaFBpeGVscyB9ID0gaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ3V0aWwvYnJ1c2hVdGlscycpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCcnVzaDNESFVHYXRlZFRvb2wgZXh0ZW5kcyBCcnVzaDNEVG9vbCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb24gPSB7fSkge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSB7fTtcbiAgICBjb25zdCBpbml0aWFsQ29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdENvbmZpZywgY29uZmlndXJhdGlvbik7XG5cbiAgICBzdXBlcihpbml0aWFsQ29uZmlndXJhdGlvbik7XG5cbiAgICB0aGlzLmluaXRpYWxDb25maWd1cmF0aW9uID0gaW5pdGlhbENvbmZpZ3VyYXRpb247XG4gIH1cblxuICAvKipcbiAgICogRXZlbnQgaGFuZGxlciBmb3IgTU9VU0VfRE9XTiBldmVudC5cbiAgICpcbiAgICogQG92ZXJyaWRlXG4gICAqIEBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZ0IC0gVGhlIGV2ZW50LlxuICAgKi9cbiAgcHJlTW91c2VEb3duQ2FsbGJhY2soZXZ0KSB7XG4gICAgdGhpcy5hY3RpdmVHYXRlUmFuZ2UgPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmFjdGl2ZUdhdGVSYW5nZSgpO1xuXG4gICAgdGhpcy5fc3RhcnRQYWludGluZyhldnQpO1xuXG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogUGFpbnRzIHRoZSBkYXRhIHRvIHRoZSBjYW52YXMuXG4gICAqXG4gICAqIEBwcm90ZWN0ZWRcbiAgICogQHBhcmFtICB7T2JqZWN0fSBldnQgVGhlIGRhdGEgb2JqZWN0IGFzc29jaWF0ZWQgd2l0aCB0aGUgZXZlbnQuXG4gICAqIEByZXR1cm5zIHt2b2lkfVxuICAgKi9cbiAgX3BhaW50KGV2dCkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGV2dC5kZXRhaWw7XG4gICAgY29uc3QgeyBlbGVtZW50LCBpbWFnZSB9ID0gZXZlbnREYXRhO1xuICAgIGNvbnN0IHsgcm93cywgY29sdW1ucyB9ID0gaW1hZ2U7XG4gICAgY29uc3QgeyB4LCB5IH0gPSBldmVudERhdGEuY3VycmVudFBvaW50cy5pbWFnZTtcblxuICAgIGlmICh4IDwgMCB8fCB4ID4gY29sdW1ucyB8fCB5IDwgMCB8fCB5ID4gcm93cykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IHJhZGl1cyA9IGJydXNoTW9kdWxlLnN0YXRlLnJhZGl1cztcbiAgICBjb25zdCBwb2ludGVyQXJyYXkgPSB0aGlzLl9nYXRlQ2lyY2xlKGltYWdlLCBnZXRDaXJjbGUocmFkaXVzLCByb3dzLCBjb2x1bW5zLCB4LCB5KSk7XG5cbiAgICBjb25zdCB7IGxhYmVsbWFwM0QsIGN1cnJlbnRJbWFnZUlkSW5kZXgsIGFjdGl2ZUxhYmVsbWFwSW5kZXgsIHNob3VsZEVyYXNlIH0gPSB0aGlzLnBhaW50RXZlbnREYXRhO1xuXG4gICAgLy8gRHJhdyAvIEVyYXNlIHRoZSBhY3RpdmUgY29sb3IuXG4gICAgZHJhd0JydXNoUGl4ZWxzKHBvaW50ZXJBcnJheSwgbGFiZWxtYXAzRCwgY3VycmVudEltYWdlSWRJbmRleCwgY29sdW1ucywgc2hvdWxkRXJhc2UpO1xuXG4gICAgY29ybmVyc3RvbmUudHJpZ2dlckV2ZW50KGVsZW1lbnQsIEVWRU5UUy5MQUJFTE1BUF9NT0RJRklFRCwge1xuICAgICAgYWN0aXZlTGFiZWxtYXBJbmRleFxuICAgIH0pO1xuXG4gICAgY29ybmVyc3RvbmUudXBkYXRlSW1hZ2UoZXZ0LmRldGFpbC5lbGVtZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBfZ2F0ZUNpcmNsZSAtIEdpdmVuIGFuIGltYWdlIGFuZCBhIGJydXNoIGNpcmNsZSwgZ2F0ZSB0aGUgY2lyY2xlIGJldHdlZW5cbiAgICogdGhlIHNldCBnYXRlIHZhbHVlcywgYW5kIHRoZW4gY2xlYW51cCB0aGUgcmVzdWx0aW5nIG1hc2sgdXNpbmcgdGhlXG4gICAqIGhvbGVGaWxsIGFuZCBzdHJheVJlbW92ZSBwcm9wZXJ0aWVzIG9mIHRoZSBicnVzaCBtb2R1bGUuXG4gICAqXG4gICAqIEBwYXJhbSAge29iamVjdH0gaW1hZ2UgICBUaGUgY29ybmVyc3RvbmUgaW1hZ2UuXG4gICAqIEBwYXJhbSAge051bWJlcltdW119IGNpcmNsZSAgQW4gYXJyYXkgb2YgaW1hZ2UgcGl4ZWxzIGNvbnRhaW5lZCB3aXRoaW4gdGhlIGJydXNoXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLlxuICAgKiBAcmV0dXJucyB7TnVtYmVyW11bXX0gIEFuIGFycmF5IGNvbnRhaW5pbmcgdGhlIGdhdGVkL2NsZWFuZWQgcGl4ZWxzIHRvIGZpbGwuXG4gICAqL1xuICBfZ2F0ZUNpcmNsZShpbWFnZSwgY2lyY2xlKSB7XG4gICAgY29uc3Qgcm93cyA9IGltYWdlLnJvd3M7XG4gICAgY29uc3QgaW1hZ2VQaXhlbERhdGEgPSBpbWFnZS5nZXRQaXhlbERhdGEoKTtcbiAgICBjb25zdCBnYXRlUmFuZ2UgPSB0aGlzLmFjdGl2ZUdhdGVSYW5nZTtcbiAgICBjb25zdCByZXNjYWxlU2xvcGUgPSBpbWFnZS5zbG9wZSB8fCAxO1xuICAgIGNvbnN0IHJlc2NhbGVJbnRlcmNlcHQgPSBpbWFnZS5pbnRlcmNlcHQgfHwgMDtcblxuICAgIGNvbnN0IGdhdGVkQ2lyY2xlQXJyYXkgPSBbXTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2lyY2xlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgcGl4ZWxWYWx1ZSA9IGltYWdlUGl4ZWxEYXRhW2NpcmNsZVtpXVswXSArIGNpcmNsZVtpXVsxXSAqIHJvd3NdO1xuXG4gICAgICBwaXhlbFZhbHVlID0gcGl4ZWxWYWx1ZSAqIHJlc2NhbGVTbG9wZSArIHJlc2NhbGVJbnRlcmNlcHQ7XG5cbiAgICAgIGlmIChwaXhlbFZhbHVlID49IGdhdGVSYW5nZVswXSAmJiBwaXhlbFZhbHVlIDw9IGdhdGVSYW5nZVsxXSkge1xuICAgICAgICBnYXRlZENpcmNsZUFycmF5LnB1c2goY2lyY2xlW2ldKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2xlYW5HYXRlZENpcmNsZShjaXJjbGUsIGdhdGVkQ2lyY2xlQXJyYXkpO1xuICB9XG5cbiAgLyoqXG4gICAqIF9nZXRFZGdlUGl4ZWxzIC0gUmV0dXJucyB0aGUgaW5kaWNpZXMgb2YgdGhlIGVkZ2UgcGl4ZWxzIGZvciB0aGUgY2lyY3VsYXJcbiAgICogYnJ1c2ggZGF0YS5cbiAgICpcbiAgICogQHBhcmFtICB7TnVtYmVyW11bXX0gZGF0YSBUaGUgc3F1YXJlZC1jaXJjbGUgZGF0YSB3aGVyZSBhbGwgY2lyY2xlIG1lbWJlcnMgYXJlXG4gICAqICAgICAgICAgICAgICAgICAgICAgMCwgYW5kIHZhbHVlcyBvdXRzaWRlIHRoZSBjaXJjbGUgYXJlIC0xXG4gICAqIEByZXR1cm5zIHtOdW1iZXJbXVtdfSBBbiBhcnJheSBvZiBwb3NpdGlvbnMgb2YgdGhlIGNpcmNsZSBlZGdlIHBpeGVscy5cbiAgICovXG4gIF9nZXRFZGdlUGl4ZWxzKGRhdGEpIHtcbiAgICBjb25zdCBlZGdlUGl4ZWxzID0gW107XG4gICAgY29uc3QgeFNpemUgPSBkYXRhLmxlbmd0aDtcbiAgICBjb25zdCB5U2l6ZSA9IGRhdGFbMF0ubGVuZ3RoO1xuXG4gICAgLy8gZmlyc3QgYW5kIGxhc3Qgcm93IGFkZCBhbGwgb2YgdG9wIGFuZCBib3R0b20gd2hpY2ggYXJlIGNpcmNsZSBtZW1iZXJzLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGRhdGFbaV1bMF0pIHtcbiAgICAgICAgZWRnZVBpeGVscy5wdXNoKFtpLCAwXSk7XG4gICAgICAgIGVkZ2VQaXhlbHMucHVzaChbaSwgeVNpemUgLSAxXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWxsIG90aGVyIHJvd3MgLSBGaW5kIGZpcnN0IGNpcmNsZSBtZW1iZXIsIGFuZCB1c2UgaXRzIHBvc2l0aW9uIHRvIGFkZFxuICAgIC8vIFRoZSBmaXJzdCBhbmQgbGFzdCBjaXJjbGUgbWVtYmVyIG9mIHRoYXQgcm93LlxuICAgIGZvciAobGV0IGogPSAxOyBqIDwgeVNpemUgLSAxOyBqKyspIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoZGF0YVtpXVtqXSkge1xuICAgICAgICAgIGVkZ2VQaXhlbHMucHVzaChbaSwgal0pO1xuICAgICAgICAgIGVkZ2VQaXhlbHMucHVzaChbeFNpemUgLSAxIC0gaSwgal0pO1xuXG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZWRnZVBpeGVscztcbiAgfVxuXG4gIC8qKlxuICAgKiBfY2xlYW5HYXRlZENpcmNsZSAtIENsZWFuIHRoZSBIVSBnYXRlZCBjaXJjbGUgdXNpbmcgdGhlIGhvbGVGaWxsIGFuZFxuICAgKiBzdHJheVJlbW92ZSBwcm9wZXJ0aWVzIG9mIHRoZSBicnVzaCBtb2R1bGUuXG4gICAqXG4gICAqIEBwYXJhbSAge051bWJlcltdW119IGNpcmNsZSAgICAgQW4gYXJyYXkgb2YgdGhlIHBpeGVsIGluZGljaWVzIHdpdGhpbiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicnVzaCBjaXJjbGUuXG4gICAqIEBwYXJhbSAge051bWJlcltdW119IGdhdGVkQ2lyY2xlQXJyYXkgQW4gYXJyYXkgb2YgdGhlIHBpeGVsIGluZGljaWVzIHdpdGhpblxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBnYXRlIHJhbmdlLlxuICAgKiBAcmV0dXJucyB7TnVtYmVyW11bXX0gICAgICAgICAgICAgICAgICBUaGUgY2xlYW5lZCBhcnJheSBvZiBwaXhlbCBpbmRpY2llcy5cbiAgICovXG4gIF9jbGVhbkdhdGVkQ2lyY2xlKGNpcmNsZSwgZ2F0ZWRDaXJjbGVBcnJheSkge1xuICAgIGNvbnN0IHsgbWF4LCBtaW4gfSA9IHRoaXMuX2dldEJvdW5kaW5nQm94T2ZDaXJjbGUoY2lyY2xlKTtcblxuICAgIGNvbnN0IHhTaXplID0gbWF4WzBdIC0gbWluWzBdICsgMTtcbiAgICBjb25zdCB5U2l6ZSA9IG1heFsxXSAtIG1pblsxXSArIDE7XG5cbiAgICBjb25zdCBkYXRhID0gdGhpcy5fYm94R2F0ZWRDaXJjbGUoY2lyY2xlLCBnYXRlZENpcmNsZUFycmF5LCBtaW4sIHhTaXplLCB5U2l6ZSk7XG5cbiAgICAvLyBEZWZpbmUgb3VyIGdldHRlciBmb3IgYWNjZXNzaW5nIHRoZSBkYXRhIHN0cnVjdHVyZS5cbiAgICBmdW5jdGlvbiBnZXR0ZXIoeCwgeSkge1xuICAgICAgcmV0dXJuIGRhdGFbeF1beV07XG4gICAgfVxuXG4gICAgdGhpcy5fZmxvb2RGaWxsRW1wdHlSZWdpb25zRnJvbUVkZ2VzKGRhdGEsIGdldHRlcik7XG5cbiAgICBjb25zdCB7IGhvbGVzLCByZWdpb25zIH0gPSB0aGlzLl9maW5kSG9sZXNBbmRSZWdpb25zKGNpcmNsZSwgZGF0YSwgZ2V0dGVyLCBtaW4pO1xuXG4gICAgY29uc3QgbGFyZ2VzdFJlZ2lvbkFyZWEgPSB0aGlzLl9nZXRBcmVhT2ZMYXJnZXN0UmVnaW9uKHJlZ2lvbnMpO1xuXG4gICAgLy8gRGVsZXRlIGFueSByZWdpb24gb3V0c2lkZSB0aGUgYHN0cmF5UmVtb3ZlYCB0aHJlc2hvbGQuXG4gICAgZm9yIChsZXQgciA9IDA7IHIgPCByZWdpb25zLmxlbmd0aDsgcisrKSB7XG4gICAgICBjb25zdCByZWdpb24gPSByZWdpb25zW3JdO1xuXG4gICAgICBpZiAocmVnaW9uLmxlbmd0aCA8PSAoYnJ1c2hNb2R1bGUuc3RhdGUuc3RyYXlSZW1vdmUgLyAxMDAuMCkgKiBsYXJnZXN0UmVnaW9uQXJlYSkge1xuICAgICAgICBmb3IgKGxldCBwID0gMDsgcCA8IHJlZ2lvbi5sZW5ndGg7IHArKykge1xuICAgICAgICAgIGRhdGFbcmVnaW9uW3BdWzBdXVtyZWdpb25bcF1bMV1dID0gMztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZpbGwgaW4gYW55IGhvbGVzIHNtYWxsZXIgdGhhbiB0aGUgYGhvbGVGaWxsYCB0aHJlc2hvbGQuXG4gICAgZm9yIChsZXQgciA9IDA7IHIgPCBob2xlcy5sZW5ndGg7IHIrKykge1xuICAgICAgY29uc3QgaG9sZSA9IGhvbGVzW3JdO1xuXG4gICAgICBpZiAoaG9sZS5sZW5ndGggPD0gKGJydXNoTW9kdWxlLnN0YXRlLmhvbGVGaWxsIC8gMTAwLjApICogbGFyZ2VzdFJlZ2lvbkFyZWEpIHtcbiAgICAgICAgZm9yIChsZXQgcCA9IDA7IHAgPCBob2xlLmxlbmd0aDsgcCsrKSB7XG4gICAgICAgICAgZGF0YVtob2xlW3BdWzBdXVtob2xlW3BdWzFdXSA9IDU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBmaWxsZWRHYXRlZENpcmNsZUFycmF5ID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHhTaXplOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgeVNpemU7IGorKykge1xuICAgICAgICBpZiAoZGF0YVtpXVtqXSA9PT0gNSkge1xuICAgICAgICAgIGZpbGxlZEdhdGVkQ2lyY2xlQXJyYXkucHVzaChbaSArIG1pblswXSwgaiArIG1pblsxXV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbGxlZEdhdGVkQ2lyY2xlQXJyYXk7XG4gIH1cblxuICAvKipcbiAgICogX2dldEJvdW5kaW5nQm94T2ZDaXJjbGUgLSBSZXR1cm5zIHR3byBwb2ludHMgZGVmaW5pbmcgdGhlIGV4dGVudCBvZiB0aGUgY2lyY2xlLlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJbXVtdfSBjaXJjbGUgIEFuIGFycmF5IG9mIHRoZSBwaXhlbCBpbmRpY2llcyB3aXRoaW4gdGhlIGJydXNoIGNpcmNsZS5cbiAgICogQHJldHVybnMge29iamVjdH0gICAgICAgIFRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG9mIHRoZSBleHRlbnQuXG4gICAqL1xuICBfZ2V0Qm91bmRpbmdCb3hPZkNpcmNsZShjaXJjbGUpIHtcbiAgICBjb25zdCBtYXggPSBbY2lyY2xlWzBdWzBdLCBjaXJjbGVbMF1bMV1dO1xuICAgIGNvbnN0IG1pbiA9IFtjaXJjbGVbMF1bMF0sIGNpcmNsZVswXVsxXV07XG5cbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IGNpcmNsZS5sZW5ndGg7IHArKykge1xuICAgICAgY29uc3QgW2ksIGpdID0gY2lyY2xlW3BdO1xuXG4gICAgICBpZiAoaSA+IG1heFswXSkge1xuICAgICAgICBtYXhbMF0gPSBpO1xuICAgICAgfSBlbHNlIGlmIChpIDwgbWluWzBdKSB7XG4gICAgICAgIG1pblswXSA9IGk7XG4gICAgICB9XG5cbiAgICAgIGlmIChqID4gbWF4WzFdKSB7XG4gICAgICAgIG1heFsxXSA9IGo7XG4gICAgICB9IGVsc2UgaWYgKGogPCBtaW5bMV0pIHtcbiAgICAgICAgbWluWzFdID0gajtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBtYXgsIG1pbiB9O1xuICB9XG5cbiAgLyoqXG4gICAqIF9ib3hHYXRlZENpcmNsZSAtIEdlbmVyYXRlcyBhIHJlY3Rhbmd1bGFyIGRhdGFzZXQgZnJvbSB0aGUgYnJ1c2ggY2lyY2xlXG4gICAqICAgICAgICAgICAgICAgICAgIGZvciBlZmZpY2llbnQgZmxvb2QgZmlsbC9jbGVhbmluZy5cbiAgICpcbiAgICogQHBhcmFtICB7dHlwZX0gY2lyY2xlICAgICAgICAgICBBbiBhcnJheSBvZiB0aGUgcGl4ZWwgaW5kaWNpZXMgd2l0aGluIHRoZSBicnVzaCBjaXJjbGUuXG4gICAqIEBwYXJhbSAge3R5cGV9IGdhdGVkQ2lyY2xlQXJyYXkgVGhlIGNpcmNsZSBhcnJheSB3aXRoIHRoZSBnYXRlIGFwcGxpZWQuXG4gICAqIEBwYXJhbSAge3R5cGV9IG1pbiAgICAgICAgICAgICAgVGhlIGxvY2F0aW9uIG9mIHRoZSB0b3AgbGVmdCBwaXhlbCBvZiB0aGVcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZWQgZGF0YXNldCB3aXRoIHJlc3BlY3QgdG8gdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZXJseWluZyBpbWFnZSBkYXRhLlxuICAgKiBAcGFyYW0gIHt0eXBlfSB4U2l6ZSAgICAgICAgICAgIFRoZSB4IHNpemUgb2YgdGhlIGdlbmVyYXRlZCBib3guXG4gICAqIEBwYXJhbSAge3R5cGV9IHlTaXplICAgICAgICAgICAgVGhlIHkgc2l6ZSBvZiB0aGUgZ2VuZXJhdGVkIGJveC5cbiAgICogQHJldHVybnMge251bWJlcltdW119ICAgICAgICAgICBUaGUgZGF0YSB3aXRoIHBpeGVsIFswLDBdIGNlbnRlcmVkIG9uIG1pbixcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgY2lyY2xlIG1hcmtlZCB3aXRoIDEgZm9yIHVub2NjdXBpZWQsIDJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3Igb2NjdXBpZWQgYW5kIDAgZm9yIG91dHNpZGUgb2YgdGhlIGNpcmNsZSBib3VuZHMuXG4gICAqL1xuICBfYm94R2F0ZWRDaXJjbGUoY2lyY2xlLCBnYXRlZENpcmNsZUFycmF5LCBtaW4sIHhTaXplLCB5U2l6ZSkge1xuICAgIGNvbnN0IGRhdGEgPSBbXTtcblxuICAgIC8vIEZpbGwgaW4gc3F1YXJlIGFzIDAgKG91dCBvZiBib3VuZHMvaWdub3JlKS5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHhTaXplOyBpKyspIHtcbiAgICAgIGRhdGFbaV0gPSBuZXcgVWludDhDbGFtcGVkQXJyYXkoeVNpemUpO1xuICAgIH1cblxuICAgIC8vIGZpbGwgY2lyY2xlIGluIGFzIDEuXG4gICAgZm9yIChsZXQgcCA9IDA7IHAgPCBjaXJjbGUubGVuZ3RoOyBwKyspIHtcbiAgICAgIGNvbnN0IGkgPSBjaXJjbGVbcF1bMF0gLSBtaW5bMF07XG4gICAgICBjb25zdCBqID0gY2lyY2xlW3BdWzFdIC0gbWluWzFdO1xuXG4gICAgICBkYXRhW2ldW2pdID0gMTtcbiAgICB9XG5cbiAgICAvLyBmaWxsIGdhdGVkIHJlZ2lvbiBhcyAyLlxuICAgIGZvciAobGV0IHAgPSAwOyBwIDwgZ2F0ZWRDaXJjbGVBcnJheS5sZW5ndGg7IHArKykge1xuICAgICAgY29uc3QgaSA9IGdhdGVkQ2lyY2xlQXJyYXlbcF1bMF0gLSBtaW5bMF07XG4gICAgICBjb25zdCBqID0gZ2F0ZWRDaXJjbGVBcnJheVtwXVsxXSAtIG1pblsxXTtcblxuICAgICAgZGF0YVtpXVtqXSA9IDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cblxuICAvKipcbiAgICogX2Zsb29kRmlsbEVtcHR5UmVnaW9uc0Zyb21FZGdlcyAtIEZsb29kIGZpbGxzIGVtcHR5IHJlZ2lvbnMgd2hpY2ggdG91Y2ggdGhlXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGdlIG9mIHRoZSBjaXJjbGUgd2l0aCB0aGUgdmFsdWUgMy5cbiAgICpcbiAgICogQHBhcmFtICB7bnVtYmVyW11bXX0gZGF0YSBUaGUgZGF0YSB0byBmbG9vZCBmaWxsLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBnZXR0ZXIgVGhlIGdldHRlciBmdW5jdGlvbiBmbG9vZEZpbGwgdXNlcyB0byBhY2Nlc3MgYXJyYXlcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnRzLlxuICAgKiBAbW9kaWZpZXMgZGF0YVxuICAgKiBAcmV0dXJucyB7bnVsbH1cbiAgICovXG4gIF9mbG9vZEZpbGxFbXB0eVJlZ2lvbnNGcm9tRWRnZXMoZGF0YSwgZ2V0dGVyKSB7XG4gICAgY29uc3QgZWRnZVBpeGVscyA9IHRoaXMuX2dldEVkZ2VQaXhlbHMoZGF0YSk7XG5cbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IGVkZ2VQaXhlbHMubGVuZ3RoOyBwKyspIHtcbiAgICAgIGNvbnN0IGkgPSBlZGdlUGl4ZWxzW3BdWzBdO1xuICAgICAgY29uc3QgaiA9IGVkZ2VQaXhlbHNbcF1bMV07XG5cbiAgICAgIGlmIChkYXRhW2ldW2pdID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZsb29kRmlsbCh7XG4gICAgICAgICAgZ2V0dGVyOiBnZXR0ZXIsXG4gICAgICAgICAgc2VlZDogW2ksIGpdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZsb29kZWQgPSByZXN1bHQuZmxvb2RlZDtcblxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGZsb29kZWQubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBkYXRhW2Zsb29kZWRba11bMF1dW2Zsb29kZWRba11bMV1dID0gMztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBfZmluZEhvbGVzQW5kUmVnaW9ucyAtIEZpbmRzIGFsbCB0aGUgaG9sZXMgYW5kIHJlZ2lvbnMgYW5kIHJldHVybnMgdGhlaXJcbiAgICogICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbnMgd2l0aGluIHRoZSAyRCBkYXRhIHNldC4gU2V0cyB0aGUgdmFsdWUgb2ZcbiAgICogICAgICAgICAgICAgICAgICAgICAgICBob2xlcyBhbmQgcmVnaW9ucyB0byA0IGFuZCA1LCByZXNwZWN0aXZlbHkuXG4gICAqXG4gICAqIEBwYXJhbSAge251bWJlcltdW119IGNpcmNsZSBBbiBhcnJheSBvZiB0aGUgcGl4ZWwgaW5kaWNpZXMgd2l0aGluIHRoZSBicnVzaCBjaXJjbGUuXG4gICAqIEBwYXJhbSAge251bWJlcltdW119IGRhdGEgICBUaGUgZGF0YSBzZXQuXG4gICAqIEBwYXJhbSAge2Z1bmN0aW9ufSAgIGdldHRlciBUaGUgZ2V0dGVyIGZ1bmN0aW9uIGZsb29kRmlsbCB1c2VzIHRvIGFjY2VzcyBhcnJheVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudHMuXG4gICAqIEBwYXJhbSAge251bWJlcltdfSAgIG1pbiAgICBUaGUgbG9jYXRpb24gb2YgdGhlIHRvcCBsZWZ0IHBpeGVsIG9mIHRoZSBkYXRhc2V0XG4gICAqICAgICAgICAgICAgICAgICAgICAgICB3aXRoIHJlc3BlY3QgdG8gdGhlIHVuZGVybHlpbmcgaW1hZ2UgZGF0YS5cbiAgICogQHJldHVybnMge29iamVjdH0gICAgQW4gb2JqZWN0IGNvbnRhaW5pbmcgYXJyYXlzIG9mIHRoZSBvY2N1cGF0aW9uIG9mIGFsbFxuICAgKiAgICAgICAgICAgICAgICAgICAgICByZWdpb25zIGFuZCBob2xlcyBpbiB0aGUgZGF0YXNldC5cbiAgICovXG4gIF9maW5kSG9sZXNBbmRSZWdpb25zKGNpcmNsZSwgZGF0YSwgZ2V0dGVyLCBtaW4pIHtcbiAgICBjb25zdCBob2xlcyA9IFtdO1xuICAgIGNvbnN0IHJlZ2lvbnMgPSBbXTtcblxuICAgIC8vIEZpbmQgZWFjaCBob2xlIGFuZCBwYWludCB0aGVtIDMuXG4gICAgLy8gRmluZCBjb250aWd1b3VzIHJlZ2lvbnMgYW5kIHBhaW50IHRoZW0gNC5cbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IGNpcmNsZS5sZW5ndGg7IHArKykge1xuICAgICAgY29uc3QgaSA9IGNpcmNsZVtwXVswXSAtIG1pblswXTtcbiAgICAgIGNvbnN0IGogPSBjaXJjbGVbcF1bMV0gLSBtaW5bMV07XG5cbiAgICAgIGlmIChkYXRhW2ldW2pdID09PSAxKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGZsb29kRmlsbCh7XG4gICAgICAgICAgZ2V0dGVyOiBnZXR0ZXIsXG4gICAgICAgICAgc2VlZDogW2ksIGpdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGZsb29kZWQgPSByZXN1bHQuZmxvb2RlZDtcblxuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGZsb29kZWQubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBkYXRhW2Zsb29kZWRba11bMF1dW2Zsb29kZWRba11bMV1dID0gNDtcbiAgICAgICAgfVxuXG4gICAgICAgIGhvbGVzLnB1c2goZmxvb2RlZCk7XG4gICAgICB9IGVsc2UgaWYgKGRhdGFbaV1bal0gPT09IDIpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gZmxvb2RGaWxsKHtcbiAgICAgICAgICBnZXR0ZXI6IGdldHRlcixcbiAgICAgICAgICBzZWVkOiBbaSwgal1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgY29uc3QgZmxvb2RlZCA9IHJlc3VsdC5mbG9vZGVkO1xuXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgZmxvb2RlZC5sZW5ndGg7IGsrKykge1xuICAgICAgICAgIGRhdGFbZmxvb2RlZFtrXVswXV1bZmxvb2RlZFtrXVsxXV0gPSA1O1xuICAgICAgICB9XG5cbiAgICAgICAgcmVnaW9ucy5wdXNoKGZsb29kZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7IGhvbGVzLCByZWdpb25zIH07XG4gIH1cblxuICAvKipcbiAgICogX2dldEFyZWFPZkxhcmdlc3RSZWdpb24gLSBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGluIHRoZSBsYXJnZXN0XG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uIG9mIGEgbGlzdCBvZiByZWdpb25zLlxuICAgKlxuICAgKiBAcGFyYW0gIHtudW1iZXJbXVtdW119IHJlZ2lvbnMgQW4gYXJyYXkgb2YgcmVnaW9ucyBvZiAyRCBwb2ludHMuXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9ICAgICAgICBUaGUgYXJlYSBvZiB0aGUgbGFyZ2VzdCByZWdpb24gaW4gcGl4ZWxzLlxuICAgKi9cbiAgX2dldEFyZWFPZkxhcmdlc3RSZWdpb24ocmVnaW9ucykge1xuICAgIGxldCBsYXJnZXN0UmVnaW9uQXJlYSA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlZ2lvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWdpb25zW2ldLmxlbmd0aCA+IGxhcmdlc3RSZWdpb25BcmVhKSB7XG4gICAgICAgIGxhcmdlc3RSZWdpb25BcmVhID0gcmVnaW9uc1tpXS5sZW5ndGg7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGxhcmdlc3RSZWdpb25BcmVhO1xuICB9XG59XG4iLCJpbXBvcnQgeyBCcnVzaFRvb2wsIHN0b3JlIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuaW1wb3J0IGdlbmVyYXRlQnJ1c2hNZXRhZGF0YSBmcm9tICcuLi91dGlsL2dlbmVyYXRlQnJ1c2hNZXRhZGF0YS5qcyc7XG5cbmNvbnN0IGJydXNoTW9kdWxlID0gc3RvcmUubW9kdWxlcy5icnVzaDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQnJ1c2gzRFRvb2wgZXh0ZW5kcyBCcnVzaFRvb2wge1xuICBjb25zdHJ1Y3Rvcihjb25maWd1cmF0aW9uID0ge30pIHtcbiAgICBjb25zdCBkZWZhdWx0Q29uZmlnID0ge307XG4gICAgY29uc3QgaW5pdGlhbENvbmZpZ3VyYXRpb24gPSBPYmplY3QuYXNzaWduKGRlZmF1bHRDb25maWcsIGNvbmZpZ3VyYXRpb24pO1xuXG4gICAgc3VwZXIoaW5pdGlhbENvbmZpZ3VyYXRpb24pO1xuXG4gICAgdGhpcy5pbml0aWFsQ29uZmlndXJhdGlvbiA9IGluaXRpYWxDb25maWd1cmF0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpc2UgcGFpbnRpbmcgd2l0aCBiYXNlQnJ1c2hUb29sXG4gICAqXG4gICAqIEBvdmVycmlkZSBAcHJvdGVjdGVkXG4gICAqIEBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZ0IC0gVGhlIGV2ZW50LlxuICAgKi9cbiAgX3N0YXJ0UGFpbnRpbmcoZXZ0KSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZXZ0LmRldGFpbDtcbiAgICBjb25zdCBlbGVtZW50ID0gZXZlbnREYXRhLmVsZW1lbnQ7XG5cbiAgICBjb25zdCB7IGxhYmVsbWFwM0QsIGN1cnJlbnRJbWFnZUlkSW5kZXgsIGFjdGl2ZUxhYmVsbWFwSW5kZXggfSA9IGJydXNoTW9kdWxlLmdldHRlcnMuZ2V0QW5kQ2FjaGVMYWJlbG1hcDJEKGVsZW1lbnQpO1xuXG4gICAgY29uc3Qgc2hvdWxkRXJhc2UgPSB0aGlzLl9pc0N0cmxEb3duKGV2ZW50RGF0YSkgfHwgdGhpcy5jb25maWd1cmF0aW9uLmFsd2F5c0VyYXNlT25DbGljaztcblxuICAgIHRoaXMucGFpbnRFdmVudERhdGEgPSB7XG4gICAgICBsYWJlbG1hcDNELFxuICAgICAgY3VycmVudEltYWdlSWRJbmRleCxcbiAgICAgIGFjdGl2ZUxhYmVsbWFwSW5kZXgsXG4gICAgICBzaG91bGRFcmFzZVxuICAgIH07XG5cbiAgICBjb25zdCBzZWdtZW50SW5kZXggPSBsYWJlbG1hcDNELmFjdGl2ZVNlZ21lbnRJbmRleDtcbiAgICBsZXQgbWV0YWRhdGEgPSBsYWJlbG1hcDNELm1ldGFkYXRhW3NlZ21lbnRJbmRleF07XG5cbiAgICBpZiAoIW1ldGFkYXRhKSB7XG4gICAgICBtZXRhZGF0YSA9IGdlbmVyYXRlQnJ1c2hNZXRhZGF0YSgnVW5uYW1lZCBTZWdtZW50Jyk7XG5cbiAgICAgIGJydXNoTW9kdWxlLnNldHRlcnMubWV0YWRhdGEoZWxlbWVudCwgYWN0aXZlTGFiZWxtYXBJbmRleCwgc2VnbWVudEluZGV4LCBtZXRhZGF0YSk7XG4gICAgfVxuXG4gICAgLy8gTWV0YWRhdGEgYXNzaWduZWQsIHN0YXJ0IGRyYXdpbmcuXG4gICAgaWYgKGV2ZW50RGF0YS5jdXJyZW50UG9pbnRzKSB7XG4gICAgICB0aGlzLl9wYWludChldnQpO1xuICAgIH1cbiAgICB0aGlzLl9kcmF3aW5nID0gdHJ1ZTtcbiAgICB0aGlzLl9zdGFydExpc3RlbmluZ0Zvck1vdXNlVXAoZWxlbWVudCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IEZyZWVoYW5kUm9pU2N1bHB0b3JUb29sLCB0b29sQ29sb3JzLCBzdG9yZSwgZ2V0VG9vbFN0YXRlIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuaW1wb3J0IHsgdXBkYXRlSW1hZ2UgfSBmcm9tICdjb3JuZXJzdG9uZS1jb3JlJztcbmltcG9ydCBpbnRlcnBvbGF0ZSBmcm9tICcuLi91dGlsL2ZyZWVoYW5kSW50ZXJwb2xhdGUvaW50ZXJwb2xhdGUuanMnO1xuXG5jb25zdCB7IG1vZHVsZXMsIHN0YXRlIH0gPSBzdG9yZTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRnJlZWhhbmRSb2kzRFNjdWxwdG9yVG9vbCBleHRlbmRzIEZyZWVoYW5kUm9pU2N1bHB0b3JUb29sIHtcbiAgY29uc3RydWN0b3IoY29uZmlndXJhdGlvbiA9IHt9KSB7XG4gICAgY29uc3QgZGVmYXVsdENvbmZpZyA9IHtcbiAgICAgIGNvbmZpZ3VyYXRpb246IGdldERlZmF1bHRGcmVlaGFuZFNjdWxwdGVyTW91c2VUb29sQ29uZmlndXJhdGlvbigpXG4gICAgfTtcbiAgICBjb25zdCBpbml0aWFsQ29uZmlndXJhdGlvbiA9IE9iamVjdC5hc3NpZ24oZGVmYXVsdENvbmZpZywgY29uZmlndXJhdGlvbik7XG5cbiAgICBzdXBlcihpbml0aWFsQ29uZmlndXJhdGlvbik7XG5cbiAgICAvLyBDcmVhdGUgYm91bmQgZnVuY3Rpb25zIGZvciBwcml2YXRlIGV2ZW50IGxvb3AuXG4gICAgdGhpcy5hY3RpdmVNb3VzZVVwQ2FsbGJhY2sgPSB0aGlzLmFjdGl2ZU1vdXNlVXBDYWxsYmFjay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbGVjdCB0aGUgZnJlZWhhbmQgdG9vbCB0byBiZSBlZGl0ZWQuIERvbid0IGFsbG93IHNlbGVjdGluZyBvZiBsb2NrZWRcbiAgICogUk9JQ29udG91cnMuXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudERhdGEgLSBEYXRhIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxuICAgKi9cbiAgX3NlbGVjdEZyZWVoYW5kVG9vbChldmVudERhdGEpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZ3VyYXRpb247XG4gICAgY29uc3QgZWxlbWVudCA9IGV2ZW50RGF0YS5lbGVtZW50O1xuICAgIGNvbnN0IGNsb3Nlc3RUb29sSW5kZXggPSB0aGlzLl9nZXRDbG9zZXN0RnJlZWhhbmRUb29sT25FbGVtZW50KGVsZW1lbnQsIGV2ZW50RGF0YSk7XG5cbiAgICBpZiAoY2xvc2VzdFRvb2xJbmRleCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdG9vbFN0YXRlID0gZ2V0VG9vbFN0YXRlKGVsZW1lbnQsIHRoaXMucmVmZXJlbmNlZFRvb2xOYW1lKTtcblxuICAgIGNvbnN0IHRvb2xEYXRhID0gdG9vbFN0YXRlLmRhdGFbY2xvc2VzdFRvb2xJbmRleF07XG5cbiAgICBjb25zdCBpc0xvY2tlZCA9IHRvb2xEYXRhLnJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQuaXNMb2NrZWQ7XG5cbiAgICBpZiAoaXNMb2NrZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25maWcuaG92ZXJDb2xvciA9IHRvb2xEYXRhLnJlZmVyZW5jZWRST0lDb250b3VyLmNvbG9yO1xuXG4gICAgY29uZmlnLmN1cnJlbnRUb29sID0gY2xvc2VzdFRvb2xJbmRleDtcbiAgfVxuXG4gIC8qKlxuICAgKiBFdmVudCBoYW5kbGVyIGZvciBNT1VTRV9VUCBkdXJpbmcgdGhlIGFjdGl2ZSBsb29wLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZ0IC0gVGhlIGV2ZW50LlxuICAgKi9cbiAgX2FjdGl2ZUVuZChldnQpIHtcbiAgICBjb25zdCBldmVudERhdGEgPSBldnQuZGV0YWlsO1xuICAgIGNvbnN0IGVsZW1lbnQgPSBldmVudERhdGEuZWxlbWVudDtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZ3VyYXRpb247XG5cbiAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcblxuICAgIHN0YXRlLmlzTXVsdGlQYXJ0VG9vbEFjdGl2ZSA9IGZhbHNlO1xuXG4gICAgdGhpcy5fZ2V0TW91c2VMb2NhdGlvbihldmVudERhdGEpO1xuICAgIHRoaXMuX2ludmFsaWRhdGVUb29sRGF0YShldmVudERhdGEpO1xuXG4gICAgY29uZmlnLm1vdXNlVXBSZW5kZXIgPSB0cnVlO1xuXG4gICAgdGhpcy5fZGVhY3RpdmF0ZVNjdWxwdChlbGVtZW50KTtcblxuICAgIGNvbnN0IHRvb2xEYXRhID0gZ2V0VG9vbFN0YXRlKGVsZW1lbnQsIHRoaXMucmVmZXJlbmNlZFRvb2xOYW1lKTtcbiAgICBjb25zdCBkYXRhID0gdG9vbERhdGEuZGF0YVtjb25maWcuY3VycmVudFRvb2xdO1xuXG4gICAgaWYgKG1vZHVsZXMuZnJlZWhhbmQzRC5nZXR0ZXJzLmludGVycG9sYXRlKCkpIHtcbiAgICAgIGludGVycG9sYXRlKGRhdGEpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB0aGUgaW1hZ2VcbiAgICB1cGRhdGVJbWFnZShldmVudERhdGEuZWxlbWVudCk7XG5cbiAgICBwcmV2ZW50UHJvcGFnYXRpb24oZXZ0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZhbGlkYXRlIHRoZSBmcmVlaGFuZCB0b29sIGRhdGEsIHRpcmdnZXJpbmcgcmUtY2FsY3VsYXRpb24gb2Ygc3RhdGlzdGljcy5cbiAgICpcbiAgICogQHByaXZhdGUgQG92ZXJyaWRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBldmVudERhdGEgLSBEYXRhIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIGV2ZW50LlxuICAgKi9cbiAgX2ludmFsaWRhdGVUb29sRGF0YShldmVudERhdGEpIHtcbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZ3VyYXRpb247XG4gICAgY29uc3QgZWxlbWVudCA9IGV2ZW50RGF0YS5lbGVtZW50O1xuICAgIGNvbnN0IHRvb2xEYXRhID0gZ2V0VG9vbFN0YXRlKGVsZW1lbnQsIHRoaXMucmVmZXJlbmNlZFRvb2xOYW1lKTtcbiAgICBjb25zdCBkYXRhID0gdG9vbERhdGEuZGF0YVtjb25maWcuY3VycmVudFRvb2xdO1xuXG4gICAgZGF0YS5pbnZhbGlkYXRlZCA9IHRydWU7XG4gICAgZGF0YS5pbnRlcnBvbGF0ZWQgPSBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGRlZmF1bHQgZnJlZWhhbmRTY3VscHRlck1vdXNlVG9vbCBjb25maWd1cmF0aW9uLlxuICpcbiAqIEByZXR1cm4ge09iamVjdH0gVGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGdldERlZmF1bHRGcmVlaGFuZFNjdWxwdGVyTW91c2VUb29sQ29uZmlndXJhdGlvbigpIHtcbiAgcmV0dXJuIHtcbiAgICBtb3VzZUxvY2F0aW9uOiB7XG4gICAgICBoYW5kbGVzOiB7XG4gICAgICAgIHN0YXJ0OiB7XG4gICAgICAgICAgaGlnaGxpZ2h0OiB0cnVlLFxuICAgICAgICAgIGFjdGl2ZTogdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtaW5TcGFjaW5nOiAxLFxuICAgIGN1cnJlbnRUb29sOiBudWxsLFxuICAgIGRyYWdDb2xvcjogdG9vbENvbG9ycy5nZXRBY3RpdmVDb2xvcigpLFxuICAgIGhvdmVyQ29sb3I6IHRvb2xDb2xvcnMuZ2V0VG9vbENvbG9yKCksXG5cbiAgICAvKiAtLS0gSG92ZXIgb3B0aW9ucyAtLS1cbiAgICBzaG93Q3Vyc29yT25Ib3ZlcjogICAgICAgIFNob3dzIGEgcHJldmlldyBvZiB0aGUgc2N1bHB0aW5nIHJhZGl1cyBvbiBob3Zlci5cbiAgICBsaW1pdFJhZGl1c091dHNpZGVSZWdpb246IExpbWl0IG1heCB0b29sc2l6ZSBvdXRzaWRlIHRoZSBzdWJqZWN0IFJPSSBiYXNlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb24gc3ViamVjdCBST0kgYXJlYS5cbiAgICBob3ZlckN1cnNvckZhZGVBbHBoYTogICAgIEFscGhhIHRvIGZhZGUgdG8gd2hlbiB0b29sIHZlcnkgZGlzdGFudCBmcm9tXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJqZWN0IFJPSS5cbiAgICBob3ZlckN1cnNvckZhZGVEaXN0YW5jZTogIERpc3RhbmNlIGZyb20gUk9JIGluIHdoaWNoIHRvIGZhZGUgdGhlIGhvdmVyQ3Vyc29yXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoaW4gdW5pdHMgb2YgcmFkaWkpLlxuICAgICovXG4gICAgc2hvd0N1cnNvck9uSG92ZXI6IHRydWUsXG4gICAgbGltaXRSYWRpdXNPdXRzaWRlUmVnaW9uOiB0cnVlLFxuICAgIGhvdmVyQ3Vyc29yRmFkZUFscGhhOiAwLjUsXG4gICAgaG92ZXJDdXJzb3JGYWRlRGlzdGFuY2U6IDEuMlxuICB9O1xufVxuXG5mdW5jdGlvbiBwcmV2ZW50UHJvcGFnYXRpb24oZXZ0KSB7XG4gIGV2dC5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKTtcbiAgZXZ0LnN0b3BQcm9wYWdhdGlvbigpO1xuICBldnQucHJldmVudERlZmF1bHQoKTtcbn1cbiIsImltcG9ydCB7IG1ldGFEYXRhLCB1cGRhdGVJbWFnZSwgcGl4ZWxUb0NhbnZhcywgZ2V0RW5hYmxlZEVsZW1lbnQsIGdldFBpeGVscyB9IGZyb20gJ2Nvcm5lcnN0b25lLWNvcmUnO1xuaW1wb3J0IHsgcG9pbnQgfSBmcm9tICdjb3JuZXJzdG9uZS1tYXRoJztcbmltcG9ydCB7XG4gIGltcG9ydEludGVybmFsTW9kdWxlLFxuICBGcmVlaGFuZFJvaVRvb2wsXG4gIGdldFRvb2xTdGF0ZSxcbiAgc3RvcmUsXG4gIHRvb2xTdHlsZSxcbiAgdG9vbENvbG9ycyxcbiAgRVZFTlRTXG59IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcblxuaW1wb3J0IGdlbmVyYXRlVUlEIGZyb20gJy4uL3V0aWwvZ2VuZXJhdGVVSUQuanMnO1xuaW1wb3J0IGludGVycG9sYXRlIGZyb20gJy4uL3V0aWwvZnJlZWhhbmRJbnRlcnBvbGF0ZS9pbnRlcnBvbGF0ZS5qcyc7XG5pbXBvcnQgZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQgZnJvbSAnLi4vdXRpbC9nZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudC5qcyc7XG5cbi8vIENvcm5lcnN0b25lIDNyZCBwYXJ0eSBkZXYga2l0IGltcG9ydHNcbmNvbnN0IHsgaW5zZXJ0T3JEZWxldGUsIGZyZWVoYW5kQXJlYSwgY2FsY3VsYXRlRnJlZWhhbmRTdGF0aXN0aWNzIH0gPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgndXRpbC9mcmVlaGFuZFV0aWxzJyk7XG5jb25zdCBkcmF3ID0gaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ2RyYXdpbmcvZHJhdycpO1xuY29uc3QgZHJhd0pvaW5lZExpbmVzID0gaW1wb3J0SW50ZXJuYWxNb2R1bGUoJ2RyYXdpbmcvZHJhd0pvaW5lZExpbmVzJyk7XG5jb25zdCBkcmF3SGFuZGxlcyA9IGltcG9ydEludGVybmFsTW9kdWxlKCdkcmF3aW5nL2RyYXdIYW5kbGVzJyk7XG5jb25zdCBkcmF3TGlua2VkVGV4dEJveCA9IGltcG9ydEludGVybmFsTW9kdWxlKCdkcmF3aW5nL2RyYXdMaW5rZWRUZXh0Qm94Jyk7XG5jb25zdCBtb3ZlSGFuZGxlTmVhckltYWdlUG9pbnQgPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgnbWFuaXB1bGF0b3JzL21vdmVIYW5kbGVOZWFySW1hZ2VQb2ludCcpO1xuY29uc3QgZ2V0TmV3Q29udGV4dCA9IGltcG9ydEludGVybmFsTW9kdWxlKCdkcmF3aW5nL2dldE5ld0NvbnRleHQnKTtcbmNvbnN0IG1vZHVsZXMgPSBzdG9yZS5tb2R1bGVzO1xuY29uc3QgbnVtYmVyc1dpdGhDb21tYXMgPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgndXRpbC9udW1iZXJzV2l0aENvbW1hcycpO1xuY29uc3QgcG9pbnRJbnNpZGVCb3VuZGluZ0JveCA9IGltcG9ydEludGVybmFsTW9kdWxlKCd1dGlsL3BvaW50SW5zaWRlQm91bmRpbmdCb3gnKTtcbmNvbnN0IGNhbGN1bGF0ZVNVViA9IGltcG9ydEludGVybmFsTW9kdWxlKCd1dGlsL2NhbGN1bGF0ZVNVVicpO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBGcmVlaGFuZFJvaTNEVG9vbCBleHRlbmRzIEZyZWVoYW5kUm9pVG9vbCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZ3VyYXRpb24gPSB7fSkge1xuICAgIGNvbnN0IGRlZmF1bHRDb25maWcgPSB7XG4gICAgICBjb25maWd1cmF0aW9uOiBkZWZhdWx0RnJlZWhhbmRDb25maWd1cmF0aW9uKClcbiAgICB9O1xuICAgIGNvbnN0IGluaXRpYWxDb25maWd1cmF0aW9uID0gT2JqZWN0LmFzc2lnbihkZWZhdWx0Q29uZmlnLCBjb25maWd1cmF0aW9uKTtcblxuICAgIHN1cGVyKGluaXRpYWxDb25maWd1cmF0aW9uKTtcblxuICAgIHRoaXMuY29uZmlndXJhdGlvbi5hbHdheXNTaG93SGFuZGxlcyA9IGZhbHNlO1xuICAgIHRoaXMuX2ZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcblxuICAgIHRoaXMuX29uTWVhc3VyZW1lbnRSZW1vdmVkID0gdGhpcy5fb25NZWFzdXJlbWVudFJlbW92ZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9kcmF3aW5nTW91c2VVcENhbGxiYWNrID0gdGhpcy5fZHJhd2luZ01vdXNlVXBDYWxsYmFjay5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgbWVhc3VyZW1lbnQgZGF0YSBmb3IgdGhpcyB0b29sLlxuICAgKiBAb3ZlcnJpZGUgQHB1YmxpYyBAbWV0aG9kXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBldmVudERhdGFcbiAgICogQHJldHVybnMge29iamVjdH0gbWVhc3VyZW1lbnREYXRhXG4gICAqL1xuICBjcmVhdGVOZXdNZWFzdXJlbWVudChldmVudERhdGEpIHtcbiAgICBjb25zdCBmcmVlaGFuZDNEU3RvcmUgPSB0aGlzLl9mcmVlaGFuZDNEU3RvcmU7XG4gICAgY29uc3QgZ29vZEV2ZW50RGF0YSA9IGV2ZW50RGF0YSAmJiBldmVudERhdGEuY3VycmVudFBvaW50cyAmJiBldmVudERhdGEuY3VycmVudFBvaW50cy5pbWFnZTtcblxuICAgIGlmICghZ29vZEV2ZW50RGF0YSkge1xuICAgICAgY29uc29sZS5lcnJvcihgcmVxdWlyZWQgZXZlbnREYXRhIG5vdCBzdXBwbGllZCB0byB0b29sICR7dGhpcy5uYW1lfSdzIGNyZWF0ZU5ld01lYXN1cmVtZW50YCk7XG5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBlbmFibGVkRWxlbWVudCA9IGdldEVuYWJsZWRFbGVtZW50KHRoaXMuZWxlbWVudCk7XG4gICAgY29uc3Qgc2VyaWVzSW5zdGFuY2VVaWQgPSBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudChlbmFibGVkRWxlbWVudCk7XG4gICAgY29uc3QgcmVmZXJlbmNlZFN0cnVjdHVyZVNldCA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCwgJ0RFRkFVTFQnKTtcbiAgICBjb25zdCByZWZlcmVuY2VkUk9JQ29udG91ciA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLmFjdGl2ZVJPSUNvbnRvdXIoc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgY29uc3QgbWVhc3VyZW1lbnREYXRhID0ge1xuICAgICAgdWlkOiBnZW5lcmF0ZVVJRCgpLFxuICAgICAgc2VyaWVzSW5zdGFuY2VVaWQsXG4gICAgICBzdHJ1Y3R1cmVTZXRVaWQ6ICdERUZBVUxUJyxcbiAgICAgIFJPSUNvbnRvdXJVaWQ6IHJlZmVyZW5jZWRST0lDb250b3VyLnVpZCxcbiAgICAgIHJlZmVyZW5jZWRST0lDb250b3VyLFxuICAgICAgcmVmZXJlbmNlZFN0cnVjdHVyZVNldCxcbiAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICBhY3RpdmU6IHRydWUsXG4gICAgICBpbnZhbGlkYXRlZDogdHJ1ZSxcbiAgICAgIGhhbmRsZXM6IHtcbiAgICAgICAgcG9pbnRzOiBbXVxuICAgICAgfVxuICAgIH07XG5cbiAgICBtZWFzdXJlbWVudERhdGEuaGFuZGxlcy50ZXh0Qm94ID0ge1xuICAgICAgYWN0aXZlOiBmYWxzZSxcbiAgICAgIGhhc01vdmVkOiBmYWxzZSxcbiAgICAgIG1vdmVzSW5kZXBlbmRlbnRseTogZmFsc2UsXG4gICAgICBkcmF3bkluZGVwZW5kZW50bHk6IHRydWUsXG4gICAgICBhbGxvd2VkT3V0c2lkZUltYWdlOiB0cnVlLFxuICAgICAgaGFzQm91bmRpbmdCb3g6IHRydWVcbiAgICB9O1xuXG4gICAgZnJlZWhhbmQzRFN0b3JlLnNldHRlcnMuaW5jcmVtZW50UG9seWdvbkNvdW50KHNlcmllc0luc3RhbmNlVWlkLCAnREVGQVVMVCcsIHJlZmVyZW5jZWRST0lDb250b3VyLnVpZCk7XG5cbiAgICByZXR1cm4gbWVhc3VyZW1lbnREYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2ZW50IGhhbmRsZXIgZm9yIGNhbGxlZCBieSB0aGUgbW91c2VEb3duQWN0aXZhdGUgZXZlbnQsIGlmIHRvb2wgaXMgYWN0aXZlIGFuZFxuICAgKiB0aGUgZXZlbnQgaXMgbm90IGNhdWdodCBieSBtb3VzZURvd25DYWxsYmFjay5cbiAgICogQG92ZXJyaWRlXG4gICAqXG4gICAqIEBldmVudFxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZ0IC0gVGhlIGV2ZW50LlxuICAgKi9cbiAgYWRkTmV3TWVhc3VyZW1lbnQoZXZ0LCBpbnRlcmFjdGlvblR5cGUpIHtcbiAgICBjb25zdCBldmVudERhdGEgPSBldnQuZGV0YWlsO1xuXG4gICAgLy8gQ3JlYXRlIG1ldGFkYXRhIGlmIGl0IGRvZXNuJ3QgZXhpc3QuXG4gICAgdGhpcy5fYWRkQW5kU2V0Vm9sdW1lSWZOb1ZvbHVtZXMoKTtcbiAgICB0aGlzLl9kcmF3aW5nID0gdHJ1ZTtcblxuICAgIHRoaXMuX3N0YXJ0RHJhd2luZyhldnQpO1xuICAgIHRoaXMuX2FkZFBvaW50KGV2ZW50RGF0YSk7XG4gICAgcHJldmVudFByb3BhZ2F0aW9uKGV2dCk7XG4gIH1cblxuICBfYWRkQW5kU2V0Vm9sdW1lSWZOb1ZvbHVtZXMoKSB7XG4gICAgY29uc3QgZW5hYmxlZEVsZW1lbnQgPSBnZXRFbmFibGVkRWxlbWVudCh0aGlzLmVsZW1lbnQpO1xuICAgIGNvbnN0IHNlcmllc0luc3RhbmNlVWlkID0gZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tRW5hYmxlZEVsZW1lbnQoZW5hYmxlZEVsZW1lbnQpO1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcbiAgICBsZXQgc2VyaWVzID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcblxuICAgIGlmICghc2VyaWVzKSB7XG4gICAgICBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5zZXJpZXMoc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgICAgc2VyaWVzID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc2VyaWVzKHNlcmllc0luc3RhbmNlVWlkKTtcbiAgICB9XG5cbiAgICBjb25zdCBhY3RpdmVST0lDb250b3VyID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuYWN0aXZlUk9JQ29udG91cihzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgICBpZiAoIWFjdGl2ZVJPSUNvbnRvdXIpIHtcbiAgICAgIGZyZWVoYW5kM0RTdG9yZS5zZXR0ZXJzLlJPSUNvbnRvdXJBbmRTZXRJbmRleEFjdGl2ZShzZXJpZXNJbnN0YW5jZVVpZCwgJ0RFRkFVTFQnLCAnVW5uYW1lZCBMZXNpb24nKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGhhbmRsZSBvZiBhIHBhcnRpY3VsYXIgdG9vbCBpZiBpdCBpcyBjbG9zZSB0byB0aGUgbW91c2UgY3Vyc29yXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgb24gd2hpY2ggdGhlIHJvaSBpcyBiZWluZyBkcmF3bi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgICAgICBEYXRhIG9iamVjdCBhc3NvY2lhdGVkIHdpdGggdGhlIHRvb2wuXG4gICAqIEBwYXJhbSB7Kn0gY29vcmRzXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ8T2JqZWN0fEJvb2xlYW59XG4gICAqL1xuICBfcG9pbnROZWFySGFuZGxlKGVsZW1lbnQsIGRhdGEsIGNvb3Jkcykge1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IHRoaXMuX2ZyZWVoYW5kM0RTdG9yZTtcblxuICAgIGlmICghZGF0YS5oYW5kbGVzIHx8IGRhdGEuaGFuZGxlcy5wb2ludHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChkYXRhLnZpc2libGUgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcG9pbnRzID0gZGF0YS5oYW5kbGVzLnBvaW50cztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBoYW5kbGVDYW52YXMgPSBwaXhlbFRvQ2FudmFzKGVsZW1lbnQsIHBvaW50c1tpXSk7XG5cbiAgICAgIGlmIChwb2ludC5kaXN0YW5jZShoYW5kbGVDYW52YXMsIGNvb3JkcykgPCA2KSB7XG4gICAgICAgIHJldHVybiBpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENoZWNrIHRvIHNlZSBpZiBtb3VzZSBpbiBib3VuZGluZyBib3ggb2YgdGV4dGJveFxuICAgIGlmIChmcmVlaGFuZDNEU3RvcmUuc3RhdGUuZGlzcGxheVN0YXRzICYmIGRhdGEuaGFuZGxlcy50ZXh0Qm94KSB7XG4gICAgICBpZiAocG9pbnRJbnNpZGVCb3VuZGluZ0JveChkYXRhLmhhbmRsZXMudGV4dEJveCwgY29vcmRzKSkge1xuICAgICAgICByZXR1cm4gZGF0YS5oYW5kbGVzLnRleHRCb3g7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFjdGl2ZSBtb3VzZSBkb3duIGNhbGxiYWNrIHRoYXQgdGFrZXMgcHJpb3JpdHkgaWYgdGhlIHVzZXIgaXMgYXR0ZW1wdGluZ1xuICAgKiB0byBpbnNlcnQgb3IgZGVsZXRlIGEgaGFuZGxlIHdpdGggY3RybCArIGNsaWNrLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gZXZ0IC0gVGhlIGV2ZW50LlxuICAgKi9cbiAgcHJlTW91c2VEb3duQ2FsbGJhY2soZXZ0KSB7XG4gICAgY29uc3QgZXZlbnREYXRhID0gZXZ0LmRldGFpbDtcblxuICAgIGNvbnN0IHRvb2xEYXRhID0gZ2V0VG9vbFN0YXRlKGV2dC5jdXJyZW50VGFyZ2V0LCB0aGlzLm5hbWUpO1xuXG4gICAgaWYgKCF0b29sRGF0YSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IG5lYXJieSA9IHRoaXMuX3BvaW50TmVhckhhbmRsZUFsbFRvb2xzKGV2ZW50RGF0YSk7XG4gICAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gdGhpcy5fZnJlZWhhbmQzRFN0b3JlO1xuXG4gICAgaWYgKGV2ZW50RGF0YS5ldmVudC5jdHJsS2V5KSB7XG4gICAgICBpZiAobmVhcmJ5ICE9PSB1bmRlZmluZWQgJiYgbmVhcmJ5LmhhbmRsZU5lYXJieS5oYXNCb3VuZGluZ0JveCkge1xuICAgICAgICAvLyBDdHJsICsgY2xpY2tlZCB0ZXh0Qm94LCBkbyBub3RoaW5nIGJ1dCBzdGlsbCBjb25zdW1lIGV2ZW50LlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaW5zZXJ0T3JEZWxldGUuY2FsbCh0aGlzLCBldnQsIG5lYXJieSk7XG4gICAgICB9XG5cbiAgICAgIHByZXZlbnRQcm9wYWdhdGlvbihldnQpO1xuXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoIW5lYXJieSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGRhdGEgPSB0b29sRGF0YS5kYXRhW25lYXJieS50b29sSW5kZXhdO1xuXG4gICAgLy8gQ2hlY2sgaWYgbG9ja2VkIGFuZCByZXR1cm5cbiAgICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zdHJ1Y3R1cmVTZXQoZGF0YS5zZXJpZXNJbnN0YW5jZVVpZCwgZGF0YS5zdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gICAgaWYgKHN0cnVjdHVyZVNldC5pc0xvY2tlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDdXN0b20gY2FsbGJhY2sgZm9yIHdoZW4gYSBoYW5kbGUgaXMgc2VsZWN0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSAge09iamVjdH0gZXZ0XG4gICAqIEBwYXJhbSAge09iamVjdH0gaGFuZGxlIFRoZSBzZWxlY3RlZCBoYW5kbGUuXG4gICAqL1xuICBoYW5kbGVTZWxlY3RlZENhbGxiYWNrKGV2dCwgZGF0YSwgaGFuZGxlLCBpbnRlcmFjdGlvblR5cGUgPSAnbW91c2UnKSB7XG4gICAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gdGhpcy5fZnJlZWhhbmQzRFN0b3JlO1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGV2dC5kZXRhaWw7XG4gICAgY29uc3QgZWxlbWVudCA9IGV2ZW50RGF0YS5lbGVtZW50O1xuXG4gICAgaWYgKGV2ZW50RGF0YS5ldmVudC5tZXRhS2V5KSB7XG4gICAgICB0aGlzLl9zd2l0Y2hST0lDb250b3VyKGV2dCwgZGF0YSk7XG4gICAgICBwcmV2ZW50UHJvcGFnYXRpb24oZXZ0KTtcblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChoYW5kbGUuaGFzQm91bmRpbmdCb3ggJiYgZnJlZWhhbmQzRFN0b3JlLnN0YXRlLmRpc3BsYXlTdGF0cykge1xuICAgICAgLy8gVXNlIGRlZmF1bHQgbW92ZSBoYW5kbGVyIC0gQ2FuIG1vdmUgdGV4dGJveCBvZiBsb2NrZWQgUk9JQ29udG91cnMuXG4gICAgICBtb3ZlSGFuZGxlTmVhckltYWdlUG9pbnQoZXZ0LCB0aGlzLCBkYXRhLCBoYW5kbGUsIGludGVyYWN0aW9uVHlwZSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgaWYgbG9ja2VkIGFuZCByZXR1cm5cbiAgICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zdHJ1Y3R1cmVTZXQoZGF0YS5zZXJpZXNJbnN0YW5jZVVpZCwgZGF0YS5zdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gICAgaWYgKHN0cnVjdHVyZVNldC5pc0xvY2tlZCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbmZpZyA9IHRoaXMuY29uZmlndXJhdGlvbjtcblxuICAgIGNvbmZpZy5kcmFnT3JpZ2luID0ge1xuICAgICAgeDogaGFuZGxlLngsXG4gICAgICB5OiBoYW5kbGUueVxuICAgIH07XG5cbiAgICAvLyBIYXZlIHRvIGRvIHRoaXMgdG8gZ2V0IHRvb2wgaW5kZXguXG4gICAgY29uc3QgbmVhcmJ5ID0gdGhpcy5fcG9pbnROZWFySGFuZGxlQWxsVG9vbHMoZXZlbnREYXRhKTtcblxuICAgIGlmICghbmVhcmJ5KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgaGFuZGxlTmVhcmJ5ID0gbmVhcmJ5LmhhbmRsZU5lYXJieTtcbiAgICBjb25zdCB0b29sSW5kZXggPSBuZWFyYnkudG9vbEluZGV4O1xuXG4gICAgdGhpcy5fbW9kaWZ5aW5nID0gdHJ1ZTtcbiAgICBjb25maWcuY3VycmVudEhhbmRsZSA9IGhhbmRsZU5lYXJieTtcbiAgICBjb25maWcuY3VycmVudFRvb2wgPSB0b29sSW5kZXg7XG5cbiAgICB0aGlzLl9hY3RpdmF0ZU1vZGlmeShlbGVtZW50KTtcbiAgICBwcmV2ZW50UHJvcGFnYXRpb24oZXZ0KTtcbiAgfVxuXG4gIF9zd2l0Y2hST0lDb250b3VyKGV2dCwgZGF0YSkge1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IHRoaXMuX2ZyZWVoYW5kM0RTdG9yZTtcblxuICAgIGZyZWVoYW5kM0RTdG9yZS5zZXR0ZXJzLmFjdGl2ZVJPSUNvbnRvdXIoZGF0YS5zZXJpZXNJbnN0YW5jZVVpZCwgZGF0YS5zdHJ1Y3R1cmVTZXRVaWQsIGRhdGEuUk9JQ29udG91clVpZCk7XG5cbiAgICB1cGRhdGVJbWFnZShldnQuZGV0YWlsLmVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gZXZ0XG4gICAqIEByZXR1cm5zXG4gICAqL1xuICByZW5kZXJUb29sRGF0YShldnQpIHtcbiAgICBjb25zdCBldmVudERhdGEgPSBldnQuZGV0YWlsO1xuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IHRoaXMuX2ZyZWVoYW5kM0RTdG9yZTtcblxuICAgIC8vIElmIHdlIGhhdmUgbm8gdG9vbFN0YXRlIGZvciB0aGlzIGVsZW1lbnQsIHJldHVybiBpbW1lZGlhdGVseSBhcyB0aGVyZSBpcyBub3RoaW5nIHRvIGRvXG4gICAgY29uc3QgdG9vbFN0YXRlID0gZ2V0VG9vbFN0YXRlKGV2dC5jdXJyZW50VGFyZ2V0LCB0aGlzLm5hbWUpO1xuXG4gICAgaWYgKCF0b29sU3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBpbWFnZSA9IGV2ZW50RGF0YS5pbWFnZTtcbiAgICBjb25zdCBlbGVtZW50ID0gZXZlbnREYXRhLmVsZW1lbnQ7XG4gICAgY29uc3QgY29uZmlnID0gdGhpcy5jb25maWd1cmF0aW9uO1xuICAgIGNvbnN0IHNlcmllc01vZHVsZSA9IG1ldGFEYXRhLmdldCgnZ2VuZXJhbFNlcmllc01vZHVsZScsIGltYWdlLmltYWdlSWQpO1xuXG4gICAgbGV0IG1vZGFsaXR5O1xuXG4gICAgaWYgKHNlcmllc01vZHVsZSkge1xuICAgICAgbW9kYWxpdHkgPSBzZXJpZXNNb2R1bGUubW9kYWxpdHk7XG4gICAgfVxuXG4gICAgLy8gV2UgaGF2ZSB0b29sIGRhdGEgZm9yIHRoaXMgZWxlbWVudCAtIGl0ZXJhdGUgb3ZlciBlYWNoIG9uZSBhbmQgZHJhdyBpdFxuICAgIGNvbnN0IGNvbnRleHQgPSBnZXROZXdDb250ZXh0KGV2ZW50RGF0YS5jYW52YXNDb250ZXh0LmNhbnZhcyk7XG5cbiAgICBjb25zdCBsaW5lV2lkdGggPSB0b29sU3R5bGUuZ2V0VG9vbFdpZHRoKCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvb2xTdGF0ZS5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBkYXRhID0gdG9vbFN0YXRlLmRhdGFbaV07XG4gICAgICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBkYXRhLnJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQ7XG4gICAgICBjb25zdCBST0lDb250b3VyID0gZGF0YS5yZWZlcmVuY2VkUk9JQ29udG91cjtcblxuICAgICAgaWYgKGRhdGEudmlzaWJsZSA9PT0gZmFsc2UgfHwgIXN0cnVjdHVyZVNldC52aXNpYmxlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpc1JPSUFjdGl2ZSA9XG4gICAgICAgIGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLlJPSUNvbnRvdXJJbmRleChkYXRhLnNlcmllc0luc3RhbmNlVWlkLCBkYXRhLnN0cnVjdHVyZVNldFVpZCwgZGF0YS5ST0lDb250b3VyVWlkKSA9PT1cbiAgICAgICAgZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuYWN0aXZlUk9JQ29udG91ckluZGV4KGRhdGEuc2VyaWVzSW5zdGFuY2VVaWQpO1xuXG4gICAgICBkcmF3KGNvbnRleHQsIGNvbnRleHQgPT4ge1xuICAgICAgICBsZXQgY29sb3IgPSB0b29sQ29sb3JzLmdldENvbG9ySWZBY3RpdmUoZGF0YSk7XG4gICAgICAgIGxldCBmaWxsQ29sb3I7XG5cbiAgICAgICAgY29uc3QgcG9pbnRzID0gZGF0YS5oYW5kbGVzLnBvaW50cztcblxuICAgICAgICBpZiAoZGF0YS5hY3RpdmUgJiYgIXN0cnVjdHVyZVNldC5pc0xvY2tlZCkge1xuICAgICAgICAgIGlmIChkYXRhLmhhbmRsZXMuaW52YWxpZEhhbmRsZVBsYWNlbWVudCkge1xuICAgICAgICAgICAgY29sb3IgPSBjb25maWcuaW52YWxpZENvbG9yO1xuICAgICAgICAgICAgZmlsbENvbG9yID0gY29uZmlnLmludmFsaWRDb2xvcjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29sb3IgPSB0b29sQ29sb3JzLmdldENvbG9ySWZBY3RpdmUoZGF0YSk7XG4gICAgICAgICAgICBmaWxsQ29sb3IgPSB0b29sQ29sb3JzLmdldEZpbGxDb2xvcigpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb2xvciA9IFJPSUNvbnRvdXIuY29sb3I7XG4gICAgICAgICAgZmlsbENvbG9yID0gUk9JQ29udG91ci5jb2xvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChpc1JPSUFjdGl2ZSAmJiBkYXRhLmludGVycG9sYXRlZCkge1xuICAgICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSBjb25maWcuaW50ZXJwb2xhdGVkQWxwaGE7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YS5oYW5kbGVzLnBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBbLi4ucG9pbnRzW2pdLmxpbmVzXTtcblxuICAgICAgICAgICAgaWYgKGogPT09IHBvaW50cy5sZW5ndGggLSAxICYmICFkYXRhLnBvbHlCb3VuZGluZ0JveCkge1xuICAgICAgICAgICAgICAvLyBJZiBpdCdzIHN0aWxsIGJlaW5nIGFjdGl2ZWx5IGRyYXduLCBrZWVwIHRoZSBsYXN0IGxpbmUgdG9cbiAgICAgICAgICAgICAgLy8gVGhlIG1vdXNlIGxvY2F0aW9uXG4gICAgICAgICAgICAgIGxpbmVzLnB1c2goY29uZmlnLm1vdXNlTG9jYXRpb24uaGFuZGxlcy5zdGFydCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkcmF3Sm9pbmVkTGluZXMoY29udGV4dCwgZXZlbnREYXRhLmVsZW1lbnQsIGRhdGEuaGFuZGxlcy5wb2ludHNbal0sIGxpbmVzLCB7IGNvbG9yIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQuZ2xvYmFsQWxwaGEgPSAxLjA7XG5cbiAgICAgICAgLy8gRHJhdyBoYW5kbGVzXG5cbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgICBjb2xvcixcbiAgICAgICAgICBmaWxsOiBmaWxsQ29sb3JcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoaXNST0lBY3RpdmUgJiYgZGF0YS5pbnRlcnBvbGF0ZWQpIHtcbiAgICAgICAgICAvLyBSZW5kZXIgZG90dGVkIGxpbmVcbiAgICAgICAgICBvcHRpb25zLmhhbmRsZVJhZGl1cyA9IGNvbmZpZy5pbnRlcnBvbGF0ZWRIYW5kbGVSYWRpdXM7XG4gICAgICAgICAgZHJhd0hhbmRsZXMoY29udGV4dCwgZXZlbnREYXRhLCBwb2ludHMsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2UgaWYgKGNvbmZpZy5hbHdheXNTaG93SGFuZGxlcyB8fCAoZGF0YS5hY3RpdmUgJiYgZGF0YS5wb2x5Qm91bmRpbmdCb3gpKSB7XG4gICAgICAgICAgLy8gUmVuZGVyIGFsbCBoYW5kbGVzXG4gICAgICAgICAgb3B0aW9ucy5oYW5kbGVSYWRpdXMgPSBjb25maWcuYWN0aXZlSGFuZGxlUmFkaXVzO1xuICAgICAgICAgIGRyYXdIYW5kbGVzKGNvbnRleHQsIGV2ZW50RGF0YSwgcG9pbnRzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkYXRhLmNhbkNvbXBsZXRlKSB7XG4gICAgICAgICAgLy8gRHJhdyBsYXJnZSBoYW5kbGUgYXQgdGhlIG9yaWdpbiBpZiBjYW4gY29tcGxldGUgZHJhd2luZ1xuICAgICAgICAgIG9wdGlvbnMuaGFuZGxlUmFkaXVzID0gY29uZmlnLmNvbXBsZXRlSGFuZGxlUmFkaXVzO1xuICAgICAgICAgIGRyYXdIYW5kbGVzKGNvbnRleHQsIGV2ZW50RGF0YSwgW3BvaW50c1swXV0sIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRhdGEuYWN0aXZlICYmICFkYXRhLnBvbHlCb3VuZGluZ0JveCkge1xuICAgICAgICAgIC8vIERyYXcgaGFuZGxlIGF0IG9yaWdpbiBhbmQgYXQgbW91c2UgaWYgYWN0aXZlbHkgZHJhd2luZ1xuICAgICAgICAgIG9wdGlvbnMuaGFuZGxlUmFkaXVzID0gY29uZmlnLmFjdGl2ZUhhbmRsZVJhZGl1cztcbiAgICAgICAgICBkcmF3SGFuZGxlcyhjb250ZXh0LCBldmVudERhdGEsIGNvbmZpZy5tb3VzZUxvY2F0aW9uLmhhbmRsZXMsIG9wdGlvbnMpO1xuICAgICAgICAgIGRyYXdIYW5kbGVzKGNvbnRleHQsIGV2ZW50RGF0YSwgW3BvaW50c1swXV0sIG9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGVmaW5lIHZhcmlhYmxlcyBmb3IgdGhlIGFyZWEgYW5kIG1lYW4vc3RhbmRhcmQgZGV2aWF0aW9uXG4gICAgICAgIGxldCBhcmVhLCBtZWFuU3RkRGV2LCBtZWFuU3RkRGV2U1VWO1xuXG4gICAgICAgIC8vIFBlcmZvcm0gYSBjaGVjayB0byBzZWUgaWYgdGhlIHRvb2wgaGFzIGJlZW4gaW52YWxpZGF0ZWQuIFRoaXMgaXMgdG8gcHJldmVudFxuICAgICAgICAvLyBVbm5lY2Vzc2FyeSByZS1jYWxjdWxhdGlvbiBvZiB0aGUgYXJlYSwgbWVhbiwgYW5kIHN0YW5kYXJkIGRldmlhdGlvbiBpZiB0aGVcbiAgICAgICAgLy8gSW1hZ2UgaXMgcmUtcmVuZGVyZWQgYnV0IHRoZSB0b29sIGhhcyBub3QgbW92ZWQgKGUuZy4gZHVyaW5nIGEgem9vbSlcbiAgICAgICAgaWYgKGRhdGEuaW52YWxpZGF0ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgLy8gSWYgdGhlIGRhdGEgaXMgbm90IGludmFsaWRhdGVkLCByZXRyaWV2ZSBpdCBmcm9tIHRoZSB0b29sU3RhdGVcbiAgICAgICAgICBtZWFuU3RkRGV2ID0gZGF0YS5tZWFuU3RkRGV2O1xuICAgICAgICAgIG1lYW5TdGREZXZTVVYgPSBkYXRhLm1lYW5TdGREZXZTVVY7XG4gICAgICAgICAgYXJlYSA9IGRhdGEuYXJlYTtcbiAgICAgICAgfSBlbHNlIGlmICghZGF0YS5hY3RpdmUpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGF0YSBoYXMgYmVlbiBpbnZhbGlkYXRlZCwgYW5kIHRoZSB0b29sIGlzIG5vdCBjdXJyZW50bHkgYWN0aXZlLFxuICAgICAgICAgIC8vIFdlIG5lZWQgdG8gY2FsY3VsYXRlIGl0IGFnYWluLlxuXG4gICAgICAgICAgLy8gUmV0cmlldmUgdGhlIGJvdW5kcyBvZiB0aGUgUk9JIGluIGltYWdlIGNvb3JkaW5hdGVzXG4gICAgICAgICAgY29uc3QgYm91bmRzID0ge1xuICAgICAgICAgICAgbGVmdDogcG9pbnRzWzBdLngsXG4gICAgICAgICAgICByaWdodDogcG9pbnRzWzBdLngsXG4gICAgICAgICAgICBib3R0b206IHBvaW50c1swXS55LFxuICAgICAgICAgICAgdG9wOiBwb2ludHNbMF0ueFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYm91bmRzLmxlZnQgPSBNYXRoLm1pbihib3VuZHMubGVmdCwgcG9pbnRzW2ldLngpO1xuICAgICAgICAgICAgYm91bmRzLnJpZ2h0ID0gTWF0aC5tYXgoYm91bmRzLnJpZ2h0LCBwb2ludHNbaV0ueCk7XG4gICAgICAgICAgICBib3VuZHMuYm90dG9tID0gTWF0aC5taW4oYm91bmRzLmJvdHRvbSwgcG9pbnRzW2ldLnkpO1xuICAgICAgICAgICAgYm91bmRzLnRvcCA9IE1hdGgubWF4KGJvdW5kcy50b3AsIHBvaW50c1tpXS55KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb25zdCBwb2x5Qm91bmRpbmdCb3ggPSB7XG4gICAgICAgICAgICBsZWZ0OiBib3VuZHMubGVmdCxcbiAgICAgICAgICAgIHRvcDogYm91bmRzLmJvdHRvbSxcbiAgICAgICAgICAgIHdpZHRoOiBNYXRoLmFicyhib3VuZHMucmlnaHQgLSBib3VuZHMubGVmdCksXG4gICAgICAgICAgICBoZWlnaHQ6IE1hdGguYWJzKGJvdW5kcy50b3AgLSBib3VuZHMuYm90dG9tKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBTdG9yZSB0aGUgYm91bmRpbmcgYm94IGluZm9ybWF0aW9uIGZvciB0aGUgdGV4dCBib3hcbiAgICAgICAgICBkYXRhLnBvbHlCb3VuZGluZ0JveCA9IHBvbHlCb3VuZGluZ0JveDtcblxuICAgICAgICAgIC8vIEZpcnN0LCBtYWtlIHN1cmUgdGhpcyBpcyBub3QgYSBjb2xvciBpbWFnZSwgc2luY2Ugbm8gbWVhbiAvIHN0YW5kYXJkXG4gICAgICAgICAgLy8gRGV2aWF0aW9uIHdpbGwgYmUgY2FsY3VsYXRlZCBmb3IgY29sb3IgaW1hZ2VzLlxuICAgICAgICAgIGlmICghaW1hZ2UuY29sb3IpIHtcbiAgICAgICAgICAgIC8vIFJldHJpZXZlIHRoZSBhcnJheSBvZiBwaXhlbHMgdGhhdCB0aGUgUk9JIGJvdW5kcyBjb3ZlclxuICAgICAgICAgICAgY29uc3QgcGl4ZWxzID0gZ2V0UGl4ZWxzKFxuICAgICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgICBwb2x5Qm91bmRpbmdCb3gubGVmdCxcbiAgICAgICAgICAgICAgcG9seUJvdW5kaW5nQm94LnRvcCxcbiAgICAgICAgICAgICAgcG9seUJvdW5kaW5nQm94LndpZHRoLFxuICAgICAgICAgICAgICBwb2x5Qm91bmRpbmdCb3guaGVpZ2h0XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAvLyBDYWxjdWxhdGUgdGhlIG1lYW4gJiBzdGFuZGFyZCBkZXZpYXRpb24gZnJvbSB0aGUgcGl4ZWxzIGFuZCB0aGUgb2JqZWN0IHNoYXBlXG4gICAgICAgICAgICBtZWFuU3RkRGV2ID0gY2FsY3VsYXRlRnJlZWhhbmRTdGF0aXN0aWNzLmNhbGwodGhpcywgcGl4ZWxzLCBwb2x5Qm91bmRpbmdCb3gsIHBvaW50cyk7XG5cbiAgICAgICAgICAgIGlmIChtb2RhbGl0eSA9PT0gJ1BUJykge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgaW1hZ2UgaXMgZnJvbSBhIFBFVCBzY2FuLCB1c2UgdGhlIERJQ09NIHRhZ3MgdG9cbiAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIHRoZSBTVVYgZnJvbSB0aGUgbWVhbiBhbmQgc3RhbmRhcmQgZGV2aWF0aW9uLlxuXG4gICAgICAgICAgICAgIC8vIE5vdGUgdGhhdCBiZWNhdXNlIHdlIGFyZSB1c2luZyBtb2RhbGl0eSBwaXhlbCB2YWx1ZXMgZnJvbSBnZXRQaXhlbHMsIGFuZFxuICAgICAgICAgICAgICAvLyBUaGUgY2FsY3VsYXRlU1VWIHJvdXRpbmUgYWxzbyByZXNjYWxlcyB0byBtb2RhbGl0eSBwaXhlbCB2YWx1ZXMsIHdlIGFyZSBmaXJzdFxuICAgICAgICAgICAgICAvLyBSZXR1cm5pbmcgdGhlIHZhbHVlcyB0byBzdG9yZWRQaXhlbCB2YWx1ZXMgYmVmb3JlIGNhbGN1YXRpbmcgU1VWIHdpdGggdGhlbS5cbiAgICAgICAgICAgICAgLy8gVE9ETzogQ2xlYW4gdGhpcyB1cD8gU2hvdWxkIHdlIGFkZCBhbiBvcHRpb24gdG8gbm90IHNjYWxlIGluIGNhbGN1bGF0ZVNVVj9cbiAgICAgICAgICAgICAgbWVhblN0ZERldlNVViA9IHtcbiAgICAgICAgICAgICAgICBtZWFuOiBjYWxjdWxhdGVTVVYoaW1hZ2UsIChtZWFuU3RkRGV2Lm1lYW4gLSBpbWFnZS5pbnRlcmNlcHQpIC8gaW1hZ2Uuc2xvcGUpLFxuICAgICAgICAgICAgICAgIHN0ZERldjogY2FsY3VsYXRlU1VWKGltYWdlLCAobWVhblN0ZERldi5zdGREZXYgLSBpbWFnZS5pbnRlcmNlcHQpIC8gaW1hZ2Uuc2xvcGUpXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIElmIHRoZSBtZWFuIGFuZCBzdGFuZGFyZCBkZXZpYXRpb24gdmFsdWVzIGFyZSBzYW5lLCBzdG9yZSB0aGVtIGZvciBsYXRlciByZXRyaWV2YWxcbiAgICAgICAgICAgIGlmIChtZWFuU3RkRGV2ICYmICFpc05hTihtZWFuU3RkRGV2Lm1lYW4pKSB7XG4gICAgICAgICAgICAgIGRhdGEubWVhblN0ZERldiA9IG1lYW5TdGREZXY7XG4gICAgICAgICAgICAgIGRhdGEubWVhblN0ZERldlNVViA9IG1lYW5TdGREZXZTVVY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gUmV0cmlldmUgdGhlIHBpeGVsIHNwYWNpbmcgdmFsdWVzLCBhbmQgaWYgdGhleSBhcmUgbm90XG4gICAgICAgICAgLy8gUmVhbCBub24temVybyB2YWx1ZXMsIHNldCB0aGVtIHRvIDFcbiAgICAgICAgICBjb25zdCBjb2x1bW5QaXhlbFNwYWNpbmcgPSBpbWFnZS5jb2x1bW5QaXhlbFNwYWNpbmcgfHwgMTtcbiAgICAgICAgICBjb25zdCByb3dQaXhlbFNwYWNpbmcgPSBpbWFnZS5yb3dQaXhlbFNwYWNpbmcgfHwgMTtcbiAgICAgICAgICBjb25zdCBzY2FsaW5nID0gY29sdW1uUGl4ZWxTcGFjaW5nICogcm93UGl4ZWxTcGFjaW5nO1xuXG4gICAgICAgICAgYXJlYSA9IGZyZWVoYW5kQXJlYShwb2ludHMsIHNjYWxpbmcpO1xuXG4gICAgICAgICAgLy8gSWYgdGhlIGFyZWEgdmFsdWUgaXMgc2FuZSwgc3RvcmUgaXQgZm9yIGxhdGVyIHJldHJpZXZhbFxuICAgICAgICAgIGlmICghaXNOYU4oYXJlYSkpIHtcbiAgICAgICAgICAgIGRhdGEuYXJlYSA9IGFyZWE7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU2V0IHRoZSBpbnZhbGlkYXRlZCBmbGFnIHRvIGZhbHNlIHNvIHRoYXQgdGhpcyBkYXRhIHdvbid0IGF1dG9tYXRpY2FsbHkgYmUgcmVjYWxjdWxhdGVkXG4gICAgICAgICAgZGF0YS5pbnZhbGlkYXRlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gT25seSByZW5kZXIgdGV4dCBpZiBwb2x5Z29uIFJPSSBoYXMgYmVlbiBjb21wbGV0ZWQsIGFuZCBpcyBhY3RpdmUsXG4gICAgICAgIC8vIE9yIGNvbmZpZyBpcyBzZXQgdG8gc2hvdyB0aGUgdGV4dEJveCBhbGwgdGhlIHRpbWVcbiAgICAgICAgaWYgKGRhdGEucG9seUJvdW5kaW5nQm94ICYmIChmcmVlaGFuZDNEU3RvcmUuc3RhdGUuZGlzcGxheVN0YXRzIHx8IGRhdGEuYWN0aXZlKSkge1xuICAgICAgICAgIC8vIElmIHRoZSB0ZXh0Ym94IGhhcyBub3QgYmVlbiBtb3ZlZCBieSB0aGUgdXNlciwgaXQgc2hvdWxkIGJlIGRpc3BsYXllZCBvbiB0aGUgcmlnaHQtbW9zdFxuICAgICAgICAgIC8vIFNpZGUgb2YgdGhlIHRvb2wuXG5cbiAgICAgICAgICBpZiAoIWRhdGEuaGFuZGxlcy50ZXh0Qm94Lmhhc01vdmVkKSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSByaWdodG1vc3Qgc2lkZSBvZiB0aGUgcG9seUJvdW5kaW5nQm94IGF0IGl0cyB2ZXJ0aWNhbCBjZW50ZXIsIGFuZCBwbGFjZSB0aGUgdGV4dGJveCBoZXJlXG4gICAgICAgICAgICAvLyBOb3RlIHRoYXQgdGhpcyBjYWxjdWxhdGVzIGl0IGluIGltYWdlIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICBkYXRhLmhhbmRsZXMudGV4dEJveC54ID0gZGF0YS5wb2x5Qm91bmRpbmdCb3gubGVmdCArIGRhdGEucG9seUJvdW5kaW5nQm94LndpZHRoO1xuICAgICAgICAgICAgZGF0YS5oYW5kbGVzLnRleHRCb3gueSA9IGRhdGEucG9seUJvdW5kaW5nQm94LnRvcCArIGRhdGEucG9seUJvdW5kaW5nQm94LmhlaWdodCAvIDI7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29uc3QgdGV4dCA9IHRleHRCb3hUZXh0LmNhbGwodGhpcywgZGF0YSk7XG5cbiAgICAgICAgICBkcmF3TGlua2VkVGV4dEJveChcbiAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgZGF0YS5oYW5kbGVzLnRleHRCb3gsXG4gICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgcG9pbnRzLFxuICAgICAgICAgICAgdGV4dEJveEFuY2hvclBvaW50cyxcbiAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgbGluZVdpZHRoLFxuICAgICAgICAgICAgMCxcbiAgICAgICAgICAgIHRydWVcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0ZXh0Qm94VGV4dChkYXRhKSB7XG4gICAgICBjb25zdCBST0lDb250b3VyID0gZGF0YS5yZWZlcmVuY2VkUk9JQ29udG91cjtcbiAgICAgIGNvbnN0IHN0cnVjdHVyZVNldCA9IGRhdGEucmVmZXJlbmNlZFN0cnVjdHVyZVNldDtcblxuICAgICAgY29uc3QgeyBtZWFuU3RkRGV2LCBtZWFuU3RkRGV2U1VWLCBhcmVhIH0gPSBkYXRhO1xuICAgICAgLy8gRGVmaW5lIGFuIGFycmF5IHRvIHN0b3JlIHRoZSByb3dzIG9mIHRleHQgZm9yIHRoZSB0ZXh0Ym94XG4gICAgICBjb25zdCB0ZXh0TGluZXMgPSBbXTtcblxuICAgICAgdGV4dExpbmVzLnB1c2goUk9JQ29udG91ci5uYW1lKTtcblxuICAgICAgaWYgKHN0cnVjdHVyZVNldC5uYW1lID09PSAnREVGQVVMVCcpIHtcbiAgICAgICAgdGV4dExpbmVzLnB1c2goJ1dvcmtpbmcgUk9JIENvbGxlY3Rpb24nKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRleHRMaW5lcy5wdXNoKHN0cnVjdHVyZVNldC5uYW1lKTtcbiAgICAgIH1cblxuICAgICAgLy8gSWYgdGhlIG1lYW4gYW5kIHN0YW5kYXJkIGRldmlhdGlvbiB2YWx1ZXMgYXJlIHByZXNlbnQsIGRpc3BsYXkgdGhlbVxuICAgICAgaWYgKG1lYW5TdGREZXYgJiYgbWVhblN0ZERldi5tZWFuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gSWYgdGhlIG1vZGFsaXR5IGlzIENULCBhZGQgSFUgdG8gZGVub3RlIEhvdW5zZmllbGQgVW5pdHNcbiAgICAgICAgbGV0IG1vU3VmZml4ID0gJyc7XG5cbiAgICAgICAgaWYgKG1vZGFsaXR5ID09PSAnQ1QnKSB7XG4gICAgICAgICAgbW9TdWZmaXggPSAnIEhVJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENyZWF0ZSBhIGxpbmUgb2YgdGV4dCB0byBkaXNwbGF5IHRoZSBtZWFuIGFuZCBhbnkgdW5pdHMgdGhhdCB3ZXJlIHNwZWNpZmllZCAoaS5lLiBIVSlcbiAgICAgICAgbGV0IG1lYW5UZXh0ID0gYE1lYW46ICR7bnVtYmVyc1dpdGhDb21tYXMobWVhblN0ZERldi5tZWFuLnRvRml4ZWQoMikpfSR7bW9TdWZmaXh9YDtcbiAgICAgICAgLy8gQ3JlYXRlIGEgbGluZSBvZiB0ZXh0IHRvIGRpc3BsYXkgdGhlIHN0YW5kYXJkIGRldmlhdGlvbiBhbmQgYW55IHVuaXRzIHRoYXQgd2VyZSBzcGVjaWZpZWQgKGkuZS4gSFUpXG4gICAgICAgIGxldCBzdGREZXZUZXh0ID0gYFN0ZERldjogJHtudW1iZXJzV2l0aENvbW1hcyhtZWFuU3RkRGV2LnN0ZERldi50b0ZpeGVkKDIpKX0ke21vU3VmZml4fWA7XG5cbiAgICAgICAgLy8gSWYgdGhpcyBpbWFnZSBoYXMgU1VWIHZhbHVlcyB0byBkaXNwbGF5LCBjb25jYXRlbmF0ZSB0aGVtIHRvIHRoZSB0ZXh0IGxpbmVcbiAgICAgICAgaWYgKG1lYW5TdGREZXZTVVYgJiYgbWVhblN0ZERldlNVVi5tZWFuICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBTVVZ0ZXh0ID0gJyBTVVY6ICc7XG5cbiAgICAgICAgICBtZWFuVGV4dCArPSBTVVZ0ZXh0ICsgbnVtYmVyc1dpdGhDb21tYXMobWVhblN0ZERldlNVVi5tZWFuLnRvRml4ZWQoMikpO1xuICAgICAgICAgIHN0ZERldlRleHQgKz0gU1VWdGV4dCArIG51bWJlcnNXaXRoQ29tbWFzKG1lYW5TdGREZXZTVVYuc3RkRGV2LnRvRml4ZWQoMikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHRoZXNlIHRleHQgbGluZXMgdG8gdGhlIGFycmF5IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgdGV4dGJveFxuICAgICAgICB0ZXh0TGluZXMucHVzaChtZWFuVGV4dCk7XG4gICAgICAgIHRleHRMaW5lcy5wdXNoKHN0ZERldlRleHQpO1xuICAgICAgfVxuXG4gICAgICAvLyBJZiB0aGUgYXJlYSBpcyBhIHNhbmUgdmFsdWUsIGRpc3BsYXkgaXRcbiAgICAgIGlmIChhcmVhKSB7XG4gICAgICAgIC8vIERldGVybWluZSB0aGUgYXJlYSBzdWZmaXggYmFzZWQgb24gdGhlIHBpeGVsIHNwYWNpbmcgaW4gdGhlIGltYWdlLlxuICAgICAgICAvLyBJZiBwaXhlbCBzcGFjaW5nIGlzIHByZXNlbnQsIHVzZSBtaWxsaW1ldGVycy4gT3RoZXJ3aXNlLCB1c2UgcGl4ZWxzLlxuICAgICAgICAvLyBUaGlzIHVzZXMgQ2hhciBjb2RlIDE3OCBmb3IgYSBzdXBlcnNjcmlwdCAyXG4gICAgICAgIGxldCBzdWZmaXggPSBgIG1tJHtTdHJpbmcuZnJvbUNoYXJDb2RlKDE3OCl9YDtcblxuICAgICAgICBpZiAoIWltYWdlLnJvd1BpeGVsU3BhY2luZyB8fCAhaW1hZ2UuY29sdW1uUGl4ZWxTcGFjaW5nKSB7XG4gICAgICAgICAgc3VmZml4ID0gYCBwaXhlbHMke1N0cmluZy5mcm9tQ2hhckNvZGUoMTc4KX1gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ3JlYXRlIGEgbGluZSBvZiB0ZXh0IHRvIGRpc3BsYXkgdGhlIGFyZWEgYW5kIGl0cyB1bml0c1xuICAgICAgICBjb25zdCBhcmVhVGV4dCA9IGBBcmVhOiAke251bWJlcnNXaXRoQ29tbWFzKGFyZWEudG9GaXhlZCgyKSl9JHtzdWZmaXh9YDtcblxuICAgICAgICAvLyBBZGQgdGhpcyB0ZXh0IGxpbmUgdG8gdGhlIGFycmF5IHRvIGJlIGRpc3BsYXllZCBpbiB0aGUgdGV4dGJveFxuICAgICAgICB0ZXh0TGluZXMucHVzaChhcmVhVGV4dCk7XG4gICAgICB9XG5cbiAgICAgIHRleHRMaW5lcy5wdXNoKGAke1JPSUNvbnRvdXIucG9seWdvbkNvdW50fSBjb250b3Vyc2ApO1xuXG4gICAgICByZXR1cm4gdGV4dExpbmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRleHRCb3hBbmNob3JQb2ludHMocG9pbnRzKSB7XG4gICAgICByZXR1cm4gcG9pbnRzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFbmRzIHRoZSBhY3RpdmUgZHJhd2luZyBsb29wIGFuZCBjb21wbGV0ZXMgdGhlIHBvbHlnb24uXG4gICAqXG4gICAqIEBwcml2YXRlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBlbGVtZW50IC0gVGhlIGVsZW1lbnQgb24gd2hpY2ggdGhlIHJvaSBpcyBiZWluZyBkcmF3bi5cbiAgICogQHBhcmFtIHtPYmplY3R9IGhhbmRsZU5lYXJieSAtIHRoZSBoYW5kbGUgbmVhcmVzdCB0byB0aGUgbW91c2UgY3Vyc29yLlxuICAgKi9cbiAgX2VuZERyYXdpbmcoZWxlbWVudCwgaGFuZGxlTmVhcmJ5KSB7XG4gICAgY29uc3QgdG9vbFN0YXRlID0gZ2V0VG9vbFN0YXRlKGVsZW1lbnQsIHRoaXMubmFtZSk7XG5cbiAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZ3VyYXRpb247XG5cbiAgICBjb25zdCBkYXRhID0gdG9vbFN0YXRlLmRhdGFbY29uZmlnLmN1cnJlbnRUb29sXTtcblxuICAgIGNvbnN0IHBvaW50cyA9IGRhdGEuaGFuZGxlcy5wb2ludHM7XG5cbiAgICBkYXRhLmFjdGl2ZSA9IGZhbHNlO1xuICAgIGRhdGEuaGlnaGxpZ2h0ID0gZmFsc2U7XG4gICAgZGF0YS5oYW5kbGVzLmludmFsaWRIYW5kbGVQbGFjZW1lbnQgPSBmYWxzZTtcblxuICAgIC8vIENvbm5lY3QgdGhlIGVuZCBoYW5kbGUgdG8gdGhlIG9yaWdpbiBoYW5kbGVcbiAgICBpZiAoaGFuZGxlTmVhcmJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHBvaW50c1tjb25maWcuY3VycmVudEhhbmRsZSAtIDFdLmxpbmVzLnB1c2gocG9pbnRzWzBdKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbW9kaWZ5aW5nKSB7XG4gICAgICB0aGlzLl9tb2RpZnlpbmcgPSBmYWxzZTtcbiAgICAgIGRhdGEuaW52YWxpZGF0ZWQgPSB0cnVlO1xuICAgICAgZGF0YS5pbnRlcnBvbGF0ZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBSZXNldCB0aGUgY3VycmVudCBoYW5kbGVcbiAgICBjb25maWcuY3VycmVudEhhbmRsZSA9IDA7XG4gICAgY29uZmlnLmN1cnJlbnRUb29sID0gLTE7XG4gICAgZGF0YS5jYW5Db21wbGV0ZSA9IGZhbHNlO1xuXG4gICAgaWYgKHRoaXMuX2RyYXdpbmcpIHtcbiAgICAgIHRoaXMuX2RyYXdpbmcgPSBmYWxzZTtcbiAgICAgIHRoaXMuX2RlYWN0aXZhdGVEcmF3KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIGlmIChtb2R1bGVzLmZyZWVoYW5kM0Quc3RhdGUuaW50ZXJwb2xhdGUpIHtcbiAgICAgIGludGVycG9sYXRlKGRhdGEsIGVsZW1lbnQpO1xuICAgIH1cblxuICAgIHVwZGF0ZUltYWdlKGVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBjYWxsYmFjayBmb3Igd2hlbiB0b29sRGF0YSBpcyBkZWxldGVkLlxuICAgKlxuICAgKiBAcGFyYW0gIHtPYmplY3R9IGV2dFxuICAgKi9cbiAgX29uTWVhc3VyZW1lbnRSZW1vdmVkKGV2dCkge1xuICAgIGNvbnN0IGV2ZW50RGF0YSA9IGV2dC5kZXRhaWw7XG5cbiAgICBpZiAoZXZlbnREYXRhLnRvb2xUeXBlICE9PSB0aGlzLm5hbWUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBtZWFzdXJlbWVudERhdGEgPSBldmVudERhdGEubWVhc3VyZW1lbnREYXRhO1xuXG4gICAgdGhpcy5fZnJlZWhhbmQzRFN0b3JlLnNldHRlcnMuZGVjcmVtZW50UG9seWdvbkNvdW50KFxuICAgICAgbWVhc3VyZW1lbnREYXRhLnNlcmllc0luc3RhbmNlVWlkLFxuICAgICAgbWVhc3VyZW1lbnREYXRhLnN0cnVjdHVyZVNldFVpZCxcbiAgICAgIG1lYXN1cmVtZW50RGF0YS5ST0lDb250b3VyVWlkXG4gICAgKTtcbiAgfVxuXG4gIHBhc3NpdmVDYWxsYmFjayhlbGVtZW50KSB7XG4gICAgdGhpcy5fY2xvc2VUb29sSWZEcmF3aW5nKGVsZW1lbnQpO1xuICAgIHRoaXMuX2FkZE1lYXN1cmVtZW50UmVtb3ZlZExpc3RlbmVyKGVsZW1lbnQpO1xuICB9XG5cbiAgZW5hYmxlZENhbGxiYWNrKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jbG9zZVRvb2xJZkRyYXdpbmcoZWxlbWVudCk7XG4gICAgdGhpcy5fYWRkTWVhc3VyZW1lbnRSZW1vdmVkTGlzdGVuZXIoZWxlbWVudCk7XG4gIH1cblxuICBhY3RpdmVDYWxsYmFjayhlbGVtZW50KSB7XG4gICAgdGhpcy5fYWRkTWVhc3VyZW1lbnRSZW1vdmVkTGlzdGVuZXIoZWxlbWVudCk7XG4gIH1cblxuICBkaXNhYmxlZENhbGxiYWNrKGVsZW1lbnQpIHtcbiAgICB0aGlzLl9jbG9zZVRvb2xJZkRyYXdpbmcoZWxlbWVudCk7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKEVWRU5UUy5NRUFTVVJFTUVOVF9SRU1PVkVELCB0aGlzLl9vbk1lYXN1cmVtZW50UmVtb3ZlZCk7XG4gIH1cblxuICBfYWRkTWVhc3VyZW1lbnRSZW1vdmVkTGlzdGVuZXIoZWxlbWVudCkge1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihFVkVOVFMuTUVBU1VSRU1FTlRfUkVNT1ZFRCwgdGhpcy5fb25NZWFzdXJlbWVudFJlbW92ZWQpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihFVkVOVFMuTUVBU1VSRU1FTlRfUkVNT1ZFRCwgdGhpcy5fb25NZWFzdXJlbWVudFJlbW92ZWQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRGcmVlaGFuZENvbmZpZ3VyYXRpb24oKSB7XG4gIHJldHVybiB7XG4gICAgbW91c2VMb2NhdGlvbjoge1xuICAgICAgaGFuZGxlczoge1xuICAgICAgICBzdGFydDoge1xuICAgICAgICAgIGhpZ2hsaWdodDogdHJ1ZSxcbiAgICAgICAgICBhY3RpdmU6IHRydWVcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgc3BhY2luZzogMSxcbiAgICBpbnRlcnBvbGF0ZWRIYW5kbGVSYWRpdXM6IDAuNSxcbiAgICBpbnRlcnBvbGF0ZWRBbHBoYTogMC41LFxuICAgIGFjdGl2ZUhhbmRsZVJhZGl1czogMyxcbiAgICBjb21wbGV0ZUhhbmRsZVJhZGl1czogNixcbiAgICBjb21wbGV0ZUhhbmRsZVJhZGl1c1RvdWNoOiAyOCxcbiAgICBhbHdheXNTaG93SGFuZGxlczogZmFsc2UsXG4gICAgaW52YWxpZENvbG9yOiAnY3JpbXNvbicsXG4gICAgY3VycmVudEhhbmRsZTogMCxcbiAgICBjdXJyZW50VG9vbDogLTFcbiAgfTtcbn1cblxuZnVuY3Rpb24gcHJldmVudFByb3BhZ2F0aW9uKGV2dCkge1xuICBldnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS90dXp6L24tZGltZW5zaW9uYWwtZmxvb2QtZmlsbFxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gIGxldCBnZXR0ZXIsIHNlZWQsIG9uRmxvb2QsIG9uQm91bmRhcnksIGVxdWFscywgZGlhZ29uYWxzLCBzdGFydE5vZGUsIHBlcm11dGF0aW9ucywgc3RhY2ssIGZsb29kZWQsIHZpc2l0cywgYm91bmRzO1xuXG4gIGxldCBpbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGdldHRlciA9IG9wdGlvbnMuZ2V0dGVyO1xuICAgIHNlZWQgPSBvcHRpb25zLnNlZWQ7XG4gICAgb25GbG9vZCA9IG9wdGlvbnMub25GbG9vZCB8fCBub29wO1xuICAgIG9uQm91bmRhcnkgPSBvcHRpb25zLm9uQm91bmRhcnkgfHwgbm9vcDtcbiAgICBlcXVhbHMgPSBvcHRpb25zLmVxdWFscyB8fCBkZWZhdWx0RXF1YWxzO1xuICAgIGRpYWdvbmFscyA9IG9wdGlvbnMuZGlhZ29uYWxzIHx8IGZhbHNlO1xuICAgIHN0YXJ0Tm9kZSA9IGdldChzZWVkKTtcbiAgICBwZXJtdXRhdGlvbnMgPSBwcnVuZWRQZXJtdXRhdGlvbnMoKTtcbiAgICBzdGFjayA9IFtdO1xuICAgIGZsb29kZWQgPSBbXTtcbiAgICB2aXNpdHMgPSB7fTtcbiAgICBib3VuZHMgPSB7fTtcbiAgfTtcblxuICBsZXQgbWFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBzdGFjay5wdXNoKHsgY3VycmVudEFyZ3M6IHNlZWQgfSk7XG5cbiAgICB3aGlsZSAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgZmxvb2Qoc3RhY2sucG9wKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBmbG9vZGVkOiBmbG9vZGVkLFxuICAgICAgYm91bmRhcmllczogYm91bmRhcmllcygpXG4gICAgfTtcbiAgfTtcblxuICBsZXQgZmxvb2QgPSBmdW5jdGlvbiAoam9iKSB7XG4gICAgbGV0IGdldEFyZ3MgPSBqb2IuY3VycmVudEFyZ3M7XG4gICAgbGV0IHByZWxldGdzID0gam9iLnByZXZpb3VzQXJncztcblxuICAgIGlmICh2aXNpdGVkKGdldEFyZ3MpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIG1hcmtBc1Zpc2l0ZWQoZ2V0QXJncyk7XG5cbiAgICBpZiAobWVtYmVyKGdldEFyZ3MpKSB7XG4gICAgICBtYXJrQXNGbG9vZGVkKGdldEFyZ3MpO1xuICAgICAgcHVzaEFkamFjZW50KGdldEFyZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtYXJrQXNCb3VuZGFyeShwcmVsZXRncyk7XG4gICAgfVxuICB9O1xuXG4gIGxldCB2aXNpdGVkID0gZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiB2aXNpdHNba2V5XSA9PT0gdHJ1ZTtcbiAgfTtcblxuICBsZXQgbWFya0FzVmlzaXRlZCA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICB2aXNpdHNba2V5XSA9IHRydWU7XG4gIH07XG5cbiAgbGV0IG1lbWJlciA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgbGV0IG5vZGUgPSBzYWZlbHkoZ2V0LCBbZ2V0QXJnc10pO1xuXG4gICAgcmV0dXJuIHNhZmVseShlcXVhbHMsIFtub2RlLCBzdGFydE5vZGVdKTtcbiAgfTtcblxuICBsZXQgbWFya0FzRmxvb2RlZCA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgZmxvb2RlZC5wdXNoKGdldEFyZ3MpO1xuICAgIG9uRmxvb2QuYXBwbHkodW5kZWZpbmVkLCBnZXRBcmdzKTtcbiAgfTtcblxuICBsZXQgbWFya0FzQm91bmRhcnkgPSBmdW5jdGlvbiAocHJlbGV0Z3MpIHtcbiAgICBib3VuZHNbcHJlbGV0Z3NdID0gcHJlbGV0Z3M7XG4gICAgb25Cb3VuZGFyeS5hcHBseSh1bmRlZmluZWQsIHByZWxldGdzKTtcbiAgfTtcblxuICBsZXQgcHVzaEFkamFjZW50ID0gZnVuY3Rpb24gKGdldEFyZ3MpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBlcm11dGF0aW9ucy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgbGV0IHBlcm0gPSBwZXJtdXRhdGlvbnNbaV07XG4gICAgICBsZXQgbmV4dEFyZ3MgPSBnZXRBcmdzLnNsaWNlKDApO1xuXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGdldEFyZ3MubGVuZ3RoOyBqICs9IDEpIHtcbiAgICAgICAgbmV4dEFyZ3Nbal0gKz0gcGVybVtqXTtcbiAgICAgIH1cblxuICAgICAgc3RhY2sucHVzaCh7XG4gICAgICAgIGN1cnJlbnRBcmdzOiBuZXh0QXJncyxcbiAgICAgICAgcHJldmlvdXNBcmdzOiBnZXRBcmdzXG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgbGV0IGdldCA9IGZ1bmN0aW9uIChnZXRBcmdzKSB7XG4gICAgcmV0dXJuIGdldHRlci5hcHBseSh1bmRlZmluZWQsIGdldEFyZ3MpO1xuICB9O1xuXG4gIGxldCBzYWZlbHkgPSBmdW5jdGlvbiAoZiwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZi5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7fVxuICB9O1xuXG4gIGxldCBub29wID0gZnVuY3Rpb24gKCkge307XG5cbiAgbGV0IGRlZmF1bHRFcXVhbHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xuICB9O1xuXG4gIGxldCBwcnVuZWRQZXJtdXRhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHBlcm11dGF0aW9ucyA9IHBlcm11dGUoc2VlZC5sZW5ndGgpO1xuXG4gICAgcmV0dXJuIHBlcm11dGF0aW9ucy5maWx0ZXIoZnVuY3Rpb24gKHBlcm0pIHtcbiAgICAgIGxldCBjb3VudCA9IGNvdW50Tm9uWmVyb2VzKHBlcm0pO1xuXG4gICAgICByZXR1cm4gY291bnQgIT09IDAgJiYgKGNvdW50ID09PSAxIHx8IGRpYWdvbmFscyk7XG4gICAgfSk7XG4gIH07XG5cbiAgbGV0IHBlcm11dGUgPSBmdW5jdGlvbiAobGVuZ3RoKSB7XG4gICAgbGV0IHBlcm1zID0gW107XG5cbiAgICBsZXQgcGVybXV0YXRpb24gPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gICAgICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgcmV0dXJuIHBhcnNlSW50KGMsIDEwKSAtIDE7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLnBvdygzLCBsZW5ndGgpOyBpICs9IDEpIHtcbiAgICAgIGxldCBzdHJpbmcgPSBscGFkKGkudG9TdHJpbmcoMyksICcwJywgbGVuZ3RoKTtcblxuICAgICAgcGVybXMucHVzaChwZXJtdXRhdGlvbihzdHJpbmcpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGVybXM7XG4gIH07XG5cbiAgbGV0IGxwYWQgPSBmdW5jdGlvbiAoc3RyaW5nLCBjaGFyYWN0ZXIsIGxlbmd0aCkge1xuICAgIGxldCBhcnJheSA9IG5ldyBBcnJheShsZW5ndGggKyAxKTtcbiAgICBsZXQgcGFkID0gYXJyYXkuam9pbihjaGFyYWN0ZXIpO1xuXG4gICAgcmV0dXJuIChwYWQgKyBzdHJpbmcpLnNsaWNlKC1sZW5ndGgpO1xuICB9O1xuXG4gIGxldCBjb3VudE5vblplcm9lcyA9IGZ1bmN0aW9uIChhcnJheSkge1xuICAgIGxldCBjb3VudCA9IDA7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICBpZiAoYXJyYXlbaV0gIT09IDApIHtcbiAgICAgICAgY291bnQgKz0gMTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY291bnQ7XG4gIH07XG5cbiAgbGV0IGJvdW5kYXJpZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGFycmF5ID0gW107XG5cbiAgICBmb3IgKGxldCBrZXkgaW4gYm91bmRzKSB7XG4gICAgICBpZiAoYm91bmRzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgYXJyYXkudW5zaGlmdChib3VuZHNba2V5XSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xuICB9O1xuXG4gIGluaXRpYWxpemUoKTtcbiAgcmV0dXJuIG1haW4oKTtcbn07XG4iLCJpbXBvcnQgeyBzdG9yZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcblxuaW1wb3J0IGdlbmVyYXRlQnJ1c2hNZXRhZGF0YSBmcm9tICcuL2dlbmVyYXRlQnJ1c2hNZXRhZGF0YS5qcyc7XG5cbmNvbnN0IGJydXNoTW9kdWxlID0gc3RvcmUubW9kdWxlcy5icnVzaDtcblxuZXhwb3J0IGZ1bmN0aW9uIG5ld1NlZ21lbnRJbnB1dChzZWdJbmRleCwgbWV0YWRhdGEpIHtcbiAgYnJ1c2hNZXRkYXRhSW5wdXQoc2VnSW5kZXgsIG1ldGFkYXRhLCBzZWdtZW50SW5wdXRDYWxsYmFjayk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlZGl0U2VnbWVudElucHV0KHNlZ0luZGV4LCBtZXRhZGF0YSkge1xuICBicnVzaE1ldGRhdGFJbnB1dChzZWdJbmRleCwgbWV0YWRhdGEsIHNlZ21lbnRJbnB1dENhbGxiYWNrKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld1NlZ21lbnQoZW5hYmxlZEVsZW1lbnQpIHtcbiAgaWYgKCFlbmFibGVkRWxlbWVudCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuXG4gIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBlbmFibGVkRWxlbWVudC5lbGVtZW50O1xuXG4gIGxldCBzZWdtZW50TWV0YWRhdGEgPSBicnVzaE1vZHVsZS5nZXR0ZXJzLm1ldGFkYXRhKGFjdGl2ZUVsZW1lbnQpO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShzZWdtZW50TWV0YWRhdGEpKSB7XG4gICAgY29uc3QgeyBsYWJlbG1hcDNEIH0gPSBicnVzaE1vZHVsZS5nZXR0ZXJzLmdldEFuZENhY2hlTGFiZWxtYXAyRChhY3RpdmVFbGVtZW50KTtcblxuICAgIHNlZ21lbnRNZXRhZGF0YSA9IGxhYmVsbWFwM0QubWV0YWRhdGE7XG4gIH1cblxuICBjb25zdCBjb2xvcm1hcCA9IGJydXNoTW9kdWxlLmdldHRlcnMuYWN0aXZlQ29ybmVyc3RvbmVDb2xvck1hcChhY3RpdmVFbGVtZW50KTtcblxuICBjb25zdCBudW1iZXJPZkNvbG9ycyA9IGNvbG9ybWFwLmdldE51bWJlck9mQ29sb3JzKCk7XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBudW1iZXJPZkNvbG9yczsgaSsrKSB7XG4gICAgaWYgKCFzZWdtZW50TWV0YWRhdGFbaV0pIHtcbiAgICAgIG5ld1NlZ21lbnRJbnB1dChpKTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBzZWdtZW50SW5wdXRDYWxsYmFjayhkYXRhKSB7XG4gIGlmICghZGF0YSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGNvbnN0IHsgbGFiZWwsIGNhdGVnb3J5VUlELCB0eXBlVUlELCBtb2RpZmllclVJRCwgc2VnSW5kZXgsIGVsZW1lbnQgfSA9IGRhdGE7XG5cbiAgY29uc3QgbWV0YWRhdGEgPSBnZW5lcmF0ZUJydXNoTWV0YWRhdGEobGFiZWwsIGNhdGVnb3J5VUlELCB0eXBlVUlELCBtb2RpZmllclVJRCk7XG5cbiAgLy8gVE9ETyAtPiBzdXBwb3J0IGZvciBtdWx0aXBsZSBsYWJlbG1hcHMuXG4gIGJydXNoTW9kdWxlLnNldHRlcnMubWV0YWRhdGEoZWxlbWVudCwgMCwgc2VnSW5kZXgsIG1ldGFkYXRhKTtcbiAgYnJ1c2hNb2R1bGUuc2V0dGVycy5hY3RpdmVTZWdtZW50SW5kZXgoZWxlbWVudCwgc2VnSW5kZXgpO1xufVxuXG4vKipcbiAqIE9wZW5zIHRoZSBicnVzaE1ldGFkYXRhIGRpYWxvZy5cbiAqXG4gKi9cblxuLy8gVE9ETyAtPiBOZWVkIHRvIG1ha2UgdGhpcyBpbnRvIGEgcmVhY3QtbW9kYWw/XG5mdW5jdGlvbiBicnVzaE1ldGRhdGFJbnB1dChzZWdJbmRleCwgbWV0YWRhdGEsIGNhbGxiYWNrKSB7XG4gIGNvbnNvbGUubG9nKCdUT0RPOiBSZW1ha2UgYnJ1c2hNZXRhZGF0YSBpbnB1dCBtZW51IScpO1xuICAvKlxuICBjb25zdCBicnVzaE1ldGFkYXRhRGlhbG9nID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2JydXNoTWV0YWRhdGFEaWFsb2cnKTtcbiAgY29uc3QgZGlhbG9nRGF0YSA9IEJsYXplLmdldERhdGEoYnJ1c2hNZXRhZGF0YURpYWxvZyk7XG5cbiAgZGlhbG9nRGF0YS5icnVzaE1ldGFkYXRhRGlhbG9nU2VnSW5kZXguc2V0KHNlZ0luZGV4KTtcbiAgZGlhbG9nRGF0YS5icnVzaE1ldGFkYXRhRGlhbG9nTWV0YWRhdGEuc2V0KG1ldGFkYXRhKTtcbiAgZGlhbG9nRGF0YS5icnVzaE1ldGFkYXRhRGlhbG9nQ2FsbGJhY2suc2V0KGNhbGxiYWNrKTtcblxuICBicnVzaE1ldGFkYXRhRGlhbG9nLnNob3dNb2RhbCgpO1xuICAqL1xufVxuIiwiaW1wb3J0IHsgc3RvcmUgfSBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5cbmNvbnN0IG1vZHVsZXMgPSBzdG9yZS5tb2R1bGVzO1xuXG5leHBvcnQgY2xhc3MgUG9seWdvbiB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHBvaW50cyxcbiAgICBzb3BJbnN0YW5jZVVpZCxcbiAgICBzZXJpZXNJbnN0YW5jZVVpZCxcbiAgICBzdHJ1Y3R1cmVTZXRVaWQsXG4gICAgUk9JQ29udG91clVpZCxcbiAgICBwb2x5Z29uVWlkLFxuICAgIGZyYW1lTnVtYmVyLFxuICAgIGludGVycG9sYXRlZFxuICApIHtcbiAgICB0aGlzLl9wb2x5UG9pbnRzID0gdGhpcy5fZGVlcENvcHlQb2ludHMocG9pbnRzKTtcbiAgICB0aGlzLl9zb3BJbnN0YW5jZVVpZCA9IHNvcEluc3RhbmNlVWlkO1xuICAgIHRoaXMuX3Nlcmllc0luc3RhbmNlVWlkID0gc2VyaWVzSW5zdGFuY2VVaWQ7XG4gICAgdGhpcy5fc3RydWN0dXJlU2V0VWlkID0gc3RydWN0dXJlU2V0VWlkO1xuICAgIHRoaXMuX1JPSUNvbnRvdXJVaWQgPSBST0lDb250b3VyVWlkO1xuICAgIHRoaXMuX3BvbHlnb25VaWQgPSBwb2x5Z29uVWlkO1xuICAgIHRoaXMuX2ZyYW1lTnVtYmVyID0gZnJhbWVOdW1iZXI7XG4gICAgdGhpcy5faW50ZXJwb2xhdGVkID0gaW50ZXJwb2xhdGVkO1xuICB9XG5cbiAgX2RlZXBDb3B5UG9pbnRzKHBvaW50cykge1xuICAgIC8vIENyZWF0ZXMgYSBkZWVwIGNvcHkgb2YgdGhlIHBvaW50cyBhcnJheVxuICAgIGNvbnN0IHBvbHlQb2ludHMgPSBbXTtcbiAgICBjb25zdCBpc1ogPSBwb2ludHNbMF0ueiAhPT0gdW5kZWZpbmVkO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBvbHlQb2ludHMucHVzaCh7XG4gICAgICAgIHg6IHBvaW50c1tpXS54LFxuICAgICAgICB5OiBwb2ludHNbaV0ueVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChpc1opIHtcbiAgICAgICAgcG9seVBvaW50c1tpXS56ID0gcG9pbnRzW2ldLno7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHBvbHlQb2ludHM7XG4gIH1cblxuICBnZXRGcmVlaGFuZFRvb2xEYXRhKGltcG9ydFR5cGUpIHtcbiAgICBjb25zdCBzZXJpZXNJbnN0YW5jZVVpZCA9IHRoaXMuX3Nlcmllc0luc3RhbmNlVWlkO1xuICAgIGNvbnN0IHN0cnVjdHVyZVNldFVpZCA9IHRoaXMuX3N0cnVjdHVyZVNldFVpZDtcbiAgICBjb25zdCBST0lDb250b3VyVWlkID0gdGhpcy5fUk9JQ29udG91clVpZDtcblxuICAgIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcblxuICAgIGNvbnN0IHJlZmVyZW5jZWRST0lDb250b3VyID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuUk9JQ29udG91cihzZXJpZXNJbnN0YW5jZVVpZCwgc3RydWN0dXJlU2V0VWlkLCBST0lDb250b3VyVWlkKTtcbiAgICBjb25zdCByZWZlcmVuY2VkU3RydWN0dXJlU2V0ID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gICAgY29uc3QgZGF0YSA9IHtcbiAgICAgIHVpZDogdGhpcy5fcG9seWdvblVpZCxcbiAgICAgIHNlcmllc0luc3RhbmNlVWlkLFxuICAgICAgc3RydWN0dXJlU2V0VWlkLFxuICAgICAgUk9JQ29udG91clVpZCxcbiAgICAgIHJlZmVyZW5jZWRST0lDb250b3VyLFxuICAgICAgcmVmZXJlbmNlZFN0cnVjdHVyZVNldCxcbiAgICAgIHZpc2libGU6IHRydWUsXG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgaW52YWxpZGF0ZWQ6IHRydWUsXG4gICAgICBoYW5kbGVzOiB7XG4gICAgICAgIHBvaW50czogW11cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuX3NvcEluc3RhbmNlVWlkKSB7XG4gICAgICBkYXRhLnNvcEluc3RhbmNlVUlEID0gdGhpcy5fc29wSW5zdGFuY2VVaWQ7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2ludGVycG9sYXRlZCkge1xuICAgICAgZGF0YS5pbnRlcnBvbGF0ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX2dlbmVyYXRlUG9pbnRzKGRhdGEuaGFuZGxlcy5wb2ludHMpO1xuXG4gICAgZGF0YS5oYW5kbGVzLnRleHRCb3ggPSB7XG4gICAgICBhY3RpdmU6IGZhbHNlLFxuICAgICAgaGFzTW92ZWQ6IGZhbHNlLFxuICAgICAgbW92ZXNJbmRlcGVuZGVudGx5OiBmYWxzZSxcbiAgICAgIGRyYXduSW5kZXBlbmRlbnRseTogdHJ1ZSxcbiAgICAgIGFsbG93ZWRPdXRzaWRlSW1hZ2U6IHRydWUsXG4gICAgICBoYXNCb3VuZGluZ0JveDogdHJ1ZVxuICAgIH07XG5cbiAgICBkYXRhLnBvbHlCb3VuZGluZ0JveCA9IHt9O1xuXG4gICAgZGF0YS50b0JlU2NhbGVkID0gaW1wb3J0VHlwZTtcblxuICAgIHJldHVybiBkYXRhO1xuICB9XG5cbiAgX2dlbmVyYXRlUG9pbnRzKHBvaW50cykge1xuICAgIC8vIENvbnN0cnVjdCBkYXRhLmhhbmRsZXMucG9pbnRzIGFycmF5XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLl9wb2x5UG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBwb2ludHMucHVzaCh0aGlzLl9kZWVwQ29weU9uZVBvaW50KGkpKTtcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSBsaW5lcyB0byBiZSBkcmF3blxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoaSA9PT0gcG9pbnRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgcG9pbnRzW2ldLmxpbmVzLnB1c2gocG9pbnRzWzBdKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBvaW50c1tpXS5saW5lcy5wdXNoKHBvaW50c1tpICsgMV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9kZWVwQ29weU9uZVBvaW50KGkpIHtcbiAgICBsZXQgcG9pbnQgPSB7XG4gICAgICB4OiB0aGlzLl9wb2x5UG9pbnRzW2ldLngsXG4gICAgICB5OiB0aGlzLl9wb2x5UG9pbnRzW2ldLnksXG4gICAgICBsaW5lczogW11cbiAgICB9O1xuXG4gICAgaWYgKHRoaXMuX3BvbHlQb2ludHNbaV0ueiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwb2ludC56ID0gdGhpcy5fcG9seVBvaW50c1tpXS56O1xuICAgIH1cblxuICAgIHJldHVybiBwb2ludDtcbiAgfVxuXG4gIGdldCBwb2x5UG9pbnRzKCkge1xuICAgIHJldHVybiB0aGlzLl9wb2x5UG9pbnRzO1xuICB9XG4gIGdldCBzb3BJbnN0YW5jZVVpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc29wSW5zdGFuY2VVaWQ7XG4gIH1cblxuICBnZXQgdWlkKCkge1xuICAgIHJldHVybiB0aGlzLl9wb2x5Z29uVWlkO1xuICB9XG5cbiAgZ2V0IGZyYW1lTnVtYmVyKCkge1xuICAgIHJldHVybiB0aGlzLl9mcmFtZU51bWJlcjtcbiAgfVxufVxuIiwiaW1wb3J0IHsgZ2xvYmFsSW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlTWFuYWdlciwgZ2V0VG9vbFN0YXRlIH0gZnJvbSAnY29ybmVyc3RvbmUtdG9vbHMnO1xuXG5jb25zdCBnbG9iYWxUb29sU3RhdGVNYW5hZ2VyID0gZ2xvYmFsSW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlTWFuYWdlcjtcblxuLyoqXG4gKiBnZW5lcmF0ZUludGVycG9sYXRpb25MaXN0IC0gR2VuZXJhdGUgdGhlIGxpc3Qgb2YgY29udG91cnMgdG8gaW50ZXJwb2xhdGUsXG4gKiBpbmNsdWRpbmcgd2hldGhlciB0aGV5IGFyZSBuZXcgY29udG91cnMsIG9yIGludGVycG9sYXRlZCBjb250b3VycyB0aGF0IG5lZWRcbiAqIHRvIGJlIHVwZGF0ZWQuXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSB0b29sRGF0YSBUaGUgdG9vbCBkYXRhIG9mIHRoZSBmcmVlaGFuZDNEIGNvbnRvdXIuXG4gKiBAcmV0dXJuIHtvYmplY3R9IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBST0lDb250b3VyRGF0YSBhbmQgdGhlXG4gKiBpbnRlcnBvbGF0aW9uTGlzdC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHRvb2xEYXRhLCBlbGVtZW50KSB7XG4gIGNvbnN0IFJPSUNvbnRvdXJVaWQgPSB0b29sRGF0YS5ST0lDb250b3VyVWlkO1xuICBjb25zdCBpbWFnZUlkcyA9IF9nZXRJbWFnZUlkc09mQWN0aXZlU2VyaWVzKGVsZW1lbnQpO1xuICBjb25zdCBST0lDb250b3VyRGF0YSA9IF9nZXRST0lDb250b3VyRGF0YShpbWFnZUlkcywgUk9JQ29udG91clVpZCk7XG4gIGNvbnN0IGV4dGVudCA9IF9nZXRFeHRlbnRPZlJlZ2lvbihST0lDb250b3VyRGF0YSk7XG4gIGNvbnN0IHNsaWNlRWRpdGVkID0gX2dldFNsaWNlUG9zaXRpb25PZlRvb2xEYXRhKFJPSUNvbnRvdXJEYXRhLCB0b29sRGF0YS51aWQpO1xuXG4gIGNvbnN0IGludGVycG9sYXRpb25MaXN0ID0gW107XG5cbiAgLy8gQ2hlY2sgaWYgY29udG91cnMgYmV0d2VlbiB0aGUgZXh0ZW50IGNhbiBiZSBpbnRlcnBvbGF0ZWQuXG4gIGZvciAobGV0IGkgPSBleHRlbnRbMF0gKyAxOyBpIDw9IGV4dGVudFsxXSAtIDE7IGkrKykge1xuICAgIGlmIChfc2xpY2VOZWVkc0ludGVycG9sYXRpbmcoUk9JQ29udG91ckRhdGEsIGkpKSB7XG4gICAgICBjb25zdCBjb250b3VyUGFpciA9IF9nZXRCb3VuZGluZ1BhaXIoaSwgZXh0ZW50LCBST0lDb250b3VyRGF0YSk7XG5cbiAgICAgIGlmIChjb250b3VyUGFpciAmJiAoY29udG91clBhaXJbMF0gPT09IHNsaWNlRWRpdGVkIHx8IGNvbnRvdXJQYWlyWzFdID09PSBzbGljZUVkaXRlZCkpIHtcbiAgICAgICAgX2FwcGVuZGludGVycG9sYXRpb25MaXN0KGNvbnRvdXJQYWlyLCBpbnRlcnBvbGF0aW9uTGlzdCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBST0lDb250b3VyRGF0YSxcbiAgICBpbnRlcnBvbGF0aW9uTGlzdFxuICB9O1xufVxuXG4vKipcbiAqIF9nZXRTbGljZVBvc2l0aW9uT2ZUb29sRGF0YSAtIEZpbmRzIHRoZSBzbGljZSB0aGF0IHdhcyBlZGl0ZWQuXG4gKlxuICogQHBhcmFtICB7dHlwZX0gUk9JQ29udG91ckRhdGEgZGVzY3JpcHRpb25cbiAqIEBwYXJhbSAge3R5cGV9IHBvbHlnb25VaWQgICAgIGRlc2NyaXB0aW9uXG4gKiBAcmV0dXJuIHt0eXBlfSAgICAgICAgICAgICAgICBkZXNjcmlwdGlvblxuICovXG5mdW5jdGlvbiBfZ2V0U2xpY2VQb3NpdGlvbk9mVG9vbERhdGEoUk9JQ29udG91ckRhdGEsIHBvbHlnb25VaWQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBST0lDb250b3VyRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChST0lDb250b3VyRGF0YVtpXS5jb250b3Vycykge1xuICAgICAgY29uc3QgY29udG91cnMgPSBST0lDb250b3VyRGF0YVtpXS5jb250b3VycztcblxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb250b3Vycy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoY29udG91cnNbal0udWlkID09PSBwb2x5Z29uVWlkKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm47XG59XG5cbi8qKlxuICogX2dldEltYWdlSWRzT2ZBY3RpdmVTZXJpZXMgLSByZXR1cm5zIGFuIGFycmF5IG9mIHRoZSBpbWFnZUlkcyBmb3IgdGhlIGN1cnJlbnRcbiAqIGFjdGl2ZSBzZXJpZXMuXG4gKlxuICogQHJldHVybiB7U3RyaW5nW119IEFuIGFycmF5IG9mIGltYWdlSWRzLlxuICovXG5cbmZ1bmN0aW9uIF9nZXRJbWFnZUlkc09mQWN0aXZlU2VyaWVzKGVsZW1lbnQpIHtcbiAgY29uc3Qgc3RhY2tUb29sU3RhdGUgPSBnZXRUb29sU3RhdGUoZWxlbWVudCwgJ3N0YWNrJyk7XG5cbiAgcmV0dXJuIHN0YWNrVG9vbFN0YXRlLmRhdGFbMF0uaW1hZ2VJZHM7XG59XG5cbi8qKlxuICogX2dldFJPSUNvbnRvdXJEYXRhIC0gR2VuZXJhdGVzIGEgbGlzdCBvZiB0aGUgc2xpY2UgbG9jYXRpb25zIG9mIHRoZSAyRFxuICogcG9seWdvbnMgdGhhdCBtYWtlIHVwIHRoZSBST0lDb250b3VyLlxuICpcbiAqIEBwYXJhbSAge1N0cmluZ1tdfSBpbWFnZUlkcyAgQW4gYXJyYXkgb2YgSW1hZ2UgSWRzLlxuICogQHBhcmFtICB7dHlwZX0gUk9JQ29udG91clVpZCBUaGUgVUlEIG9mIHRoZSBST0lDb250b3VyLlxuICogQHJldHVybiB7b2JqZWN0W119ICAgICAgICAgICBUaGUgbGlzdCBvZiBjb250b3VyIGxvY2F0aW9ucyBpbiB0aGUgc3RhY2suXG4gKi9cblxuZnVuY3Rpb24gX2dldFJPSUNvbnRvdXJEYXRhKGltYWdlSWRzLCBST0lDb250b3VyVWlkKSB7XG4gIGNvbnN0IFJPSUNvbnRvdXJEYXRhID0gW107XG4gIGNvbnN0IHRvb2xTdGF0ZU1hbmFnZXIgPSBnbG9iYWxUb29sU3RhdGVNYW5hZ2VyLnNhdmVUb29sU3RhdGUoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlSWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgaW1hZ2VJZCA9IGltYWdlSWRzW2ldO1xuICAgIGNvbnN0IGltYWdlVG9vbFN0YXRlID0gdG9vbFN0YXRlTWFuYWdlcltpbWFnZUlkXTtcblxuICAgIGlmICghaW1hZ2VUb29sU3RhdGUgfHwgIWltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pKSB7XG4gICAgICBST0lDb250b3VyRGF0YS5wdXNoKHtcbiAgICAgICAgaW1hZ2VJZFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGNvbnRvdXJzID0gaW1hZ2VUb29sU3RhdGUuZnJlZWhhbmRSb2kuZGF0YS5maWx0ZXIoY29udG91ciA9PiB7XG4gICAgICAgIHJldHVybiBjb250b3VyLlJPSUNvbnRvdXJVaWQgPT09IFJPSUNvbnRvdXJVaWQ7XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgY29udG91cnNPblNsaWNlID0ge1xuICAgICAgICBpbWFnZUlkXG4gICAgICB9O1xuXG4gICAgICBpZiAoY29udG91cnMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnRvdXJzT25TbGljZS5jb250b3VycyA9IGNvbnRvdXJzO1xuICAgICAgfVxuXG4gICAgICBST0lDb250b3VyRGF0YS5wdXNoKGNvbnRvdXJzT25TbGljZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFJPSUNvbnRvdXJEYXRhO1xufVxuXG4vKipcbiAqIF9nZXRFeHRlbnRPZlJlZ2lvbiAtIFJldHVybnMgYSAyIGVsZW1lbnQgYXJyYXkgd2l0aCB0aGUgc2xpY2UgbG9jYXRpb25zIG9mXG4gKiB0b3AgYW5kIGJvdHRvbSBwb2x5Z29uIG9mIHRoZSBST0lDb250b3VyLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gUk9JQ29udG91ckRhdGEgIERhdGEgb24gdGhlIHNsaWNlIGxvY2F0aW9uIG9mIGNvbnRvdXJzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIFJPSUNvbnRvdXIuXG4gKiBAcmV0dXJuIHtOdW1iZXJbXX0gICAgICAgICAgICAgICBUaGUgc2xpY2UgbG9jYXRpb25zIG9mIHRoZSB0b3AgYW5kIGJvdHRvbVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9seWdvbiBvZiB0aGUgUk9JQ29udG91ci5cbiAqL1xuXG5mdW5jdGlvbiBfZ2V0RXh0ZW50T2ZSZWdpb24oUk9JQ29udG91ckRhdGEpIHtcbiAgY29uc3QgZXh0ZW50ID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBST0lDb250b3VyRGF0YS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChST0lDb250b3VyRGF0YVtpXS5jb250b3Vycykge1xuICAgICAgZXh0ZW50LnB1c2goaSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gUk9JQ29udG91ckRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICBpZiAoUk9JQ29udG91ckRhdGFbaV0uY29udG91cnMpIHtcbiAgICAgIGV4dGVudC5wdXNoKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4dGVudDtcbn1cblxuLyoqXG4gKiBfc2xpY2VOZWVkc0ludGVycG9sYXRpbmcgLSBDaGVjayB3aGV0aGVyIHRoZXJlIGFyZSBubyBjb250b3VycyBvbiB0aGlzXG4gKiBzbGljZSwgb3Igb25lIHdoaWNoIGlzIGFuIGludGVycG9sYXRlZCBjb250b3VyLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gUk9JQ29udG91ckRhdGEgIERhdGEgb24gdGhlIHNsaWNlIGxvY2F0aW9uIG9mIGNvbnRvdXJzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIFJPSUNvbnRvdXIuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHNsaWNlSW5kZXggICAgICBUaGUgc2xpY2UgaW5kZXguXG4gKiBAcmV0dXJuIHtib29sZWFufSAgICAgICAgICAgICAgICBXaGV0aGVyIG9yIG5vdCB0aGUgc2xpY2UgbmVlZHMgaW50ZXJwb2xhdGluZy5cbiAqL1xuZnVuY3Rpb24gX3NsaWNlTmVlZHNJbnRlcnBvbGF0aW5nKFJPSUNvbnRvdXJEYXRhLCBzbGljZUluZGV4KSB7XG4gIHJldHVybiAoXG4gICAgIVJPSUNvbnRvdXJEYXRhW3NsaWNlSW5kZXhdLmNvbnRvdXJzIHx8XG4gICAgKFJPSUNvbnRvdXJEYXRhW3NsaWNlSW5kZXhdLmNvbnRvdXJzLmxlbmd0aCA9PT0gMSAmJiBST0lDb250b3VyRGF0YVtzbGljZUluZGV4XS5jb250b3Vyc1swXS5pbnRlcnBvbGF0ZWQpXG4gICk7XG59XG5cbi8qKlxuICogX2FwcGVuZGludGVycG9sYXRpb25MaXN0IC0gSWYgdGhlIGNvbnRvdXIgb24gc2xpY2UgaSBjYW4gYmUgdXBkYXRlZCwgYWRkIGl0IHRvIHRoZVxuICogaW50ZXJwb2xhdGlvbkxpc3QuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBzbGljZUluZGV4ICAgICAgVGhlIHNsaWNlIGluZGV4LlxuICogQHBhcmFtICB7TnVtYmVyW119IGV4dGVudCAgICAgICAgVGhlIGV4dGVudCBvZiBzbGljZSBvY2N1cGFuY3kgb2YgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBST0lDb250b3VyLlxuICogQHBhcmFtICB7b2JqZWN0W119IFJPSUNvbnRvdXJEYXRhICBEYXRhIGZvciB0aGUgc2xpY2UgbG9jYXRpb24gb2YgY29udG91cnNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgUk9JQ29udG91ci5cbiAqIEBwYXJhbSAge29iamVjdFtdfSBpbnRlcnBvbGF0aW9uTGlzdCBUaGUgbGlzdCBvZiBjb250b3VycyB0byBiZSBpbnRlcnBvbGF0ZWQuXG4gKiBAcmV0dXJuIHtudWxsfVxuICovXG5mdW5jdGlvbiBfYXBwZW5kaW50ZXJwb2xhdGlvbkxpc3QoY29udG91clBhaXIsIGludGVycG9sYXRpb25MaXN0KSB7XG4gIGlmICghaW50ZXJwb2xhdGlvbkxpc3RbY29udG91clBhaXJbMF1dKSB7XG4gICAgaW50ZXJwb2xhdGlvbkxpc3RbY29udG91clBhaXJbMF1dID0ge1xuICAgICAgcGFpcjogY29udG91clBhaXIsXG4gICAgICBsaXN0OiBbXVxuICAgIH07XG4gIH1cbn1cblxuLyoqXG4gKiBfZ2V0Qm91bmRpbmdQYWlyIC0gR2l2ZW4gdGhlIHNsaWNlIGluZGV4IGFuZCBleHRlbnQgb2YgdGhlIFJPSUNvbnRvdXIsXG4gKiBnZXQgdGhlIHBhaXIgb2YgcG9seWdvbnMgdG8gdXNlIGZvciBpbnRlcnBvbGF0aW9uIG9mIHRoZSBzbGljZS4gUmV0dXJuc1xuICogdW5kZWZpbmVkIGlmIHRoZXJlIGlzIGFuIGFtYmlndWl0eSBhbmQgaW50ZXJwb2xhdGlvbiBjYW4ndCB0YWtlIHBsYWNlLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gc2xpY2VJbmRleCAgIFRoZSBzbGljZSBpbmRleC5cbiAqIEBwYXJhbSAge051bWJlcltdfSBleHRlbnQgICAgICAgIFRoZSBleHRlbnQgb2Ygc2xpY2Ugb2NjdXBhbmN5IG9mIHRoZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUk9JQ29udG91ci5cbiAqIEBwYXJhbSAge29iamVjdFtdfSBST0lDb250b3VyRGF0YSAgRGF0YSBmb3IgdGhlIHNsaWNlIGxvY2F0aW9uIG9mIGNvbnRvdXJzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgdGhlIFJPSUNvbnRvdXIuXG4gKiBAcmV0dXJuIHtOdW1iZXJbXSB8fCB1bmRlZmluZWR9ICBUaGUgcGFpciBvZiBzbGljZSBpbmRpY2llcywgb3IgdW5kZWZpbmVkIGlmXG4gKiB0aGUgY29udG91cnMgdG8gdXNlIGZvciBpbnRlcnBvbGF0aW9uIGlzIGFtYmlndW91cy5cbiAqL1xuXG5mdW5jdGlvbiBfZ2V0Qm91bmRpbmdQYWlyKHNsaWNlSW5kZXgsIGV4dGVudCwgUk9JQ29udG91ckRhdGEpIHtcbiAgbGV0IGNvbnRvdXJQYWlyID0gW107XG4gIGxldCBjYW5JbnRlcnBvbGF0ZSA9IHRydWU7XG5cbiAgLy8gQ2hlY2sgZm9yIG5lYXJlc3QgbG93ZXN0IHNsaWNlSW5kZXggY29udGFpbmluZyBjb250b3Vycy5cbiAgZm9yIChsZXQgaSA9IHNsaWNlSW5kZXggLSAxOyBpID49IGV4dGVudFswXTsgaS0tKSB7XG4gICAgaWYgKFJPSUNvbnRvdXJEYXRhW2ldLmNvbnRvdXJzKSB7XG4gICAgICBjb25zdCBjb250b3VycyA9IFJPSUNvbnRvdXJEYXRhW2ldLmNvbnRvdXJzO1xuXG4gICAgICBpZiAoY29udG91cnNbMF0uaW50ZXJwb2xhdGVkKSB7XG4gICAgICAgIC8vIFRoaXMgY29udG91ciBpcyBpbnRlcnBvbGF0ZWQuIFdlIG5lZWQgdG9cbiAgICAgICAgLy8gRmluZCBhIHNvbGlkIGNvbnRvdXIgdG8gaW50ZXJwb2xhdGUgZnJvbS5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250b3Vycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNhbkludGVycG9sYXRlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIC8vIEZvdW5kIHNpbmdsZSwgbm9uIGludGVycG9sYXRlZCBjb250b3VyIHRvIGludGVycG9sYXRlIGZyb20uXG4gICAgICBjb250b3VyUGFpci5wdXNoKGkpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgaWYgKCFjYW5JbnRlcnBvbGF0ZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIENoZWNrIGZvciBuZWFyZXN0IHVwcGVyIHNsaWNlSW5kZXggY29udGFpbmluZyBjb250b3Vycy5cbiAgZm9yIChsZXQgaSA9IHNsaWNlSW5kZXggKyAxOyBpIDw9IGV4dGVudFsxXTsgaSsrKSB7XG4gICAgaWYgKFJPSUNvbnRvdXJEYXRhW2ldLmNvbnRvdXJzKSB7XG4gICAgICBjb25zdCBjb250b3VycyA9IFJPSUNvbnRvdXJEYXRhW2ldLmNvbnRvdXJzO1xuXG4gICAgICBpZiAoY29udG91cnNbMF0uaW50ZXJwb2xhdGVkKSB7XG4gICAgICAgIC8vIFRoaXMgY29udG91ciBpcyBpbnRlcnBvbGF0ZWQuIFdlIG5lZWQgdG9cbiAgICAgICAgLy8gRmluZCBhIHNvbGlkIGNvbnRvdXIgdG8gaW50ZXJwb2xhdGUgZnJvbS5cbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChjb250b3Vycy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGNhbkludGVycG9sYXRlID0gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGNvbnRvdXJQYWlyLnB1c2goaSk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICBpZiAoIWNhbkludGVycG9sYXRlKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRvdXJQYWlyO1xufVxuIiwiaW1wb3J0IHsgZ2xvYmFsSW1hZ2VJZFNwZWNpZmljVG9vbFN0YXRlTWFuYWdlciwgc3RvcmUgfSBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5cbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tICcuLi9jbGFzc2VzL1BvbHlnb24uanMnO1xuaW1wb3J0IGdlbmVyYXRlVUlEIGZyb20gJy4uL2dlbmVyYXRlVUlELmpzJztcbmltcG9ydCBnZW5lcmF0ZUludGVycG9sYXRpb25EYXRhIGZyb20gJy4vZ2VuZXJhdGVJbnRlcnBvbGF0aW9uRGF0YS5qcyc7XG5cbmNvbnN0IGdsb2JhbFRvb2xTdGF0ZU1hbmFnZXIgPSBnbG9iYWxJbWFnZUlkU3BlY2lmaWNUb29sU3RhdGVNYW5hZ2VyO1xuY29uc3QgZFAgPSAwLjI7IC8vIEFpbSBmb3IgPCAwLjJtbSBiZXR3ZWVuIGludGVycG9sYXRlZCBub2RlcyB3aGVuIHN1cGVyLXNhbXBsaW5nLlxuY29uc3QgbW9kdWxlcyA9IHN0b3JlLm1vZHVsZXM7XG5cbi8qKlxuICogaW50ZXJwb2xhdGUgLSBJbnRlcnBvbGF0ZSBtaXNzaW5nIGNvbnRvdXJzIGluIHRoZSBST0lDb250b3VyLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gdG9vbERhdGEgVGhlIHRvb2wgZGF0YSBvZiB0aGUgZnJlZWhhbmQzRCBjb250b3VyLlxuICogQHJldHVybiB7bnVsbH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHRvb2xEYXRhLCBlbGVtZW50KSB7XG4gIGNvbnN0IHsgUk9JQ29udG91ckRhdGEsIGludGVycG9sYXRpb25MaXN0IH0gPSBnZW5lcmF0ZUludGVycG9sYXRpb25EYXRhKHRvb2xEYXRhLCBlbGVtZW50KTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGludGVycG9sYXRpb25MaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGludGVycG9sYXRpb25MaXN0W2ldKSB7XG4gICAgICBfbGluZWFybHlJbnRlcnBvbGF0ZUJldHdlZW4oaW50ZXJwb2xhdGlvbkxpc3RbaV0ubGlzdCwgaW50ZXJwb2xhdGlvbkxpc3RbaV0ucGFpciwgUk9JQ29udG91ckRhdGEpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIF9saW5lYXJseUludGVycG9sYXRlQmV0d2VlbiAtIExpbmVhcmx5IGludGVycG9sYXRlIGFsbCB0aGUgc2xpY2VzIGluIHRoZVxuICogaW5kaWNpZXMgYXJyYXkgYmV0d2VlbiB0aGUgY29udG91clBhaXIuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyW119IGluZGljaWVzICAgICBBbiBhcnJheSBvZiBzbGljZSBpbmRpY2llcyB0byBpbnRlcnBvbGF0ZS5cbiAqIEBwYXJhbSAge051bWJlcltdfSBjb250b3VyUGFpciAgVGhlIHBhaXIgb2YgY29udG91cnMgdG8gaW50ZXJwb2xhdGUgYmV0d2Vlbi5cbiAqIEBwYXJhbSAge29iamVjdFtdfSBST0lDb250b3VyRGF0YSAgRGF0YSBmb3IgdGhlIHNsaWNlIGxvY2F0aW9uIG9mIGNvbnRvdXJzXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciB0aGUgUk9JQ29udG91ci5cbiAqIEByZXR1cm4ge251bGx9XG4gKi9cblxuZnVuY3Rpb24gX2xpbmVhcmx5SW50ZXJwb2xhdGVCZXR3ZWVuKGluZGljaWVzLCBjb250b3VyUGFpciwgUk9JQ29udG91ckRhdGEpIHtcbiAgY29uc3QgYzEgPSBfZ2VuZXJhdGVDbG9zZWRDb250b3VyKFJPSUNvbnRvdXJEYXRhW2NvbnRvdXJQYWlyWzBdXS5jb250b3Vyc1swXS5oYW5kbGVzLnBvaW50cyk7XG4gIGNvbnN0IGMyID0gX2dlbmVyYXRlQ2xvc2VkQ29udG91cihST0lDb250b3VyRGF0YVtjb250b3VyUGFpclsxXV0uY29udG91cnNbMF0uaGFuZGxlcy5wb2ludHMpO1xuXG4gIGNvbnN0IHsgYzFJbnRlcnAsIGMySW50ZXJwIH0gPSBfZ2VuZXJhdGVJbnRlcnBvbGF0aW9uQ29udG91clBhaXIoYzEsIGMyKTtcblxuICAvLyBVc2luZyB0aGUgbmV3bHkgY29uc3RydWN0ZWQgY29udG91cnMsIGludGVycG9sYXRlIGVhY2ggUk9JLlxuICBpbmRpY2llcy5mb3JFYWNoKGZ1bmN0aW9uIChpbmRleCkge1xuICAgIF9saW5lYXJseUludGVycG9sYXRlQ29udG91cihjMUludGVycCwgYzJJbnRlcnAsIGluZGV4LCBjb250b3VyUGFpciwgUk9JQ29udG91ckRhdGEsIGMxLngubGVuZ3RoID4gYzIueC5sZW5ndGgpO1xuICB9KTtcbn1cblxuLyoqXG4gKiBfbGluZWFybHlJbnRlcnBvbGF0ZUNvbnRvdXIgLSBJbnNlcnRzIGEgbGluZWFybHkgaW50ZXJwb2xhdGVkIGNvbnRvdXIgYXRcbiAqIHNwZWNpZmllZCBzbGljZSBpbmRleC5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMxSW50ZXJwICAgICAgIFRoZSBmaXJzdCByZWZlcmVuY2UgY29udG91ci5cbiAqIEBwYXJhbSAge29iamVjdH0gYzJJbnRlcnAgICAgICAgVGhlIHNlY29uZCByZWZlcmVuY2UgY29udG91ci5cbiAqIEBwYXJhbSAge051bWJlcn0gc2xpY2VJbmRleCAgICAgICBUaGUgc2xpY2UgaW5kZXggdG8gaW50ZXJwb2xhdGUuXG4gKiBAcGFyYW0gIHtOdW1iZXJ7fX0gY29udG91clBhaXIgICAgVGhlIHNsaWNlIGluZGljaWVzIG9mIHRoZSByZWZlcmVuY2UgY29udG91cnMuXG4gKiBAcGFyYW0gIHtvYmplY3RbXX0gUk9JQ29udG91ckRhdGEgIERhdGEgZm9yIHRoZSBzbGljZSBsb2NhdGlvbiBvZiBjb250b3Vyc1xuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIHRoZSBST0lDb250b3VyLlxuICogQHBhcmFtICB7Ym9vbGVhbn0gYzFIYXNNb3JlTm9kZXMgVHJ1ZSBpZiBjMSBoYXMgbW9yZSBub2RlcyB0aGFuIGMyLlxuICogQHJldHVybiB7bnVsbH1cbiAqL1xuZnVuY3Rpb24gX2xpbmVhcmx5SW50ZXJwb2xhdGVDb250b3VyKGMxSW50ZXJwLCBjMkludGVycCwgc2xpY2VJbmRleCwgY29udG91clBhaXIsIFJPSUNvbnRvdXJEYXRhLCBjMUhhc01vcmVOb2Rlcykge1xuICBjb25zdCB6SW50ZXJwID0gKHNsaWNlSW5kZXggLSBjb250b3VyUGFpclswXSkgLyAoY29udG91clBhaXJbMV0gLSBjb250b3VyUGFpclswXSk7XG4gIGNvbnN0IGludGVycG9sYXRlZDJEQ29udG91ciA9IF9nZW5lcmF0ZUludGVycG9sYXRlZE9wZW5Db250b3VyKGMxSW50ZXJwLCBjMkludGVycCwgekludGVycCwgYzFIYXNNb3JlTm9kZXMpO1xuXG4gIGNvbnN0IGMxTWV0YWRhdGEgPSBST0lDb250b3VyRGF0YVtjb250b3VyUGFpclswXV0uY29udG91cnNbMF07XG5cbiAgaWYgKFJPSUNvbnRvdXJEYXRhW3NsaWNlSW5kZXhdLmNvbnRvdXJzKSB7XG4gICAgX2VkaXRJbnRlcnBvbGF0ZWRDb250b3VyKGludGVycG9sYXRlZDJEQ29udG91ciwgUk9JQ29udG91ckRhdGFbc2xpY2VJbmRleF0uaW1hZ2VJZCwgYzFNZXRhZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgX2FkZEludGVycG9sYXRlZENvbnRvdXIoaW50ZXJwb2xhdGVkMkRDb250b3VyLCBST0lDb250b3VyRGF0YVtzbGljZUluZGV4XS5pbWFnZUlkLCBjMU1ldGFkYXRhKTtcbiAgfVxufVxuXG4vKipcbiAqIF9nZW5lcmF0ZUludGVycG9sYXRpb25Db250b3VyUGFpciAtIGdlbmVyYXRlcyB0d28gYWxpZ25lZCBjb250b3VycyB3aXRoIGFuXG4gKiBlcXVhbCBudW1iZXIgb2Ygbm9kZXMgZnJvbSB3aGljaCBhbiBpbnRlcm1lZGlhdGUgY29udG91ciBtYXkgYmUgaW50ZXJwb2xhdGVkLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYzEgVGhlIGZpcnN0IGNvbnRvdXIuXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMyIFRoZSBzZWNvbmQgY29udG91ci5cbiAqIEByZXR1cm4ge29iamVjdH0gIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSB0d28gY29udG91cnMuXG4gKi9cbmZ1bmN0aW9uIF9nZW5lcmF0ZUludGVycG9sYXRpb25Db250b3VyUGFpcihjMSwgYzIpIHtcbiAgY29uc3QgY3VtUGVyaW0xID0gX2dldEN1bXVsYXRpdmVQZXJpbWV0ZXIoYzEpO1xuICBjb25zdCBjdW1QZXJpbTIgPSBfZ2V0Q3VtdWxhdGl2ZVBlcmltZXRlcihjMik7XG5cbiAgY29uc3QgaW50ZXJwTm9kZXMgPSBNYXRoLm1heChcbiAgICBNYXRoLmNlaWwoY3VtUGVyaW0xW2N1bVBlcmltMS5sZW5ndGggLSAxXSAvIGRQKSxcbiAgICBNYXRoLmNlaWwoY3VtUGVyaW0yW2N1bVBlcmltMi5sZW5ndGggLSAxXSAvIGRQKVxuICApO1xuXG4gIGNvbnN0IGN1bVBlcmltMU5vcm0gPSBfbm9ybWFsaXNlZEN1bXVsYXRpdmVQZXJpbWV0ZXIoY3VtUGVyaW0xKTtcbiAgY29uc3QgY3VtUGVyaW0yTm9ybSA9IF9ub3JtYWxpc2VkQ3VtdWxhdGl2ZVBlcmltZXRlcihjdW1QZXJpbTIpO1xuXG4gIGNvbnN0IG51bU5vZGVzMSA9IGludGVycE5vZGVzICsgYzIueC5sZW5ndGg7XG4gIGNvbnN0IG51bU5vZGVzMiA9IGludGVycE5vZGVzICsgYzEueC5sZW5ndGg7XG5cbiAgLy8gY29uY2F0aW5hdGUgcCAmJiBjdW1QZXJpbU5vcm1cbiAgY29uc3QgcGVyaW0xSW50ZXJwID0gX2dldEludGVycG9sYXRlZFBlcmltKG51bU5vZGVzMSwgY3VtUGVyaW0xTm9ybSk7XG4gIGNvbnN0IHBlcmltMkludGVycCA9IF9nZXRJbnRlcnBvbGF0ZWRQZXJpbShudW1Ob2RlczIsIGN1bVBlcmltMk5vcm0pO1xuXG4gIGNvbnN0IHBlcmltMUluZCA9IF9nZXRJbmRpY2F0b3JBcnJheShjMSwgbnVtTm9kZXMxKTtcbiAgY29uc3QgcGVyaW0ySW5kID0gX2dldEluZGljYXRvckFycmF5KGMyLCBudW1Ob2RlczIpO1xuXG4gIGNvbnN0IG5vZGVzUGVyU2VnbWVudDEgPSBfZ2V0Tm9kZXNQZXJTZWdtZW50KHBlcmltMUludGVycCwgcGVyaW0xSW5kKTtcbiAgY29uc3Qgbm9kZXNQZXJTZWdtZW50MiA9IF9nZXROb2Rlc1BlclNlZ21lbnQocGVyaW0ySW50ZXJwLCBwZXJpbTJJbmQpO1xuXG4gIGNvbnN0IGMxaSA9IF9nZXRTdXBlclNhbXBsZWRDb250b3VyKGMxLCBub2Rlc1BlclNlZ21lbnQxKTtcbiAgY29uc3QgYzJpID0gX2dldFN1cGVyU2FtcGxlZENvbnRvdXIoYzIsIG5vZGVzUGVyU2VnbWVudDIpO1xuXG4gIC8vIEtlZXAgYzJpIGZpeGVkIGFuZCBzaGlmdCB0aGUgc3RhcnRpbmcgbm9kZSBvZiBjMWkgdG8gbWluaW1pc2UgdGhlIHRvdGFsIGxlbmd0aCBvZiBzZWdtZW50cy5cbiAgX3NoaWZ0U3VwZXJTYW1wbGVkQ29udG91ckluUGxhY2UoYzFpLCBjMmkpO1xuXG4gIHJldHVybiBfcmVkdWNlQ29udG91cnNUb09yaWdpbk5vZGVzKGMxaSwgYzJpKTtcbn1cblxuLyoqXG4gKiBfYWRkSW50ZXJwb2xhdGVkQ29udG91ciAtIEFkZHMgYSBuZXcgY29udG91ciB0byB0aGUgaW1hZ2VJZC5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGludGVycG9sYXRlZDJEQ29udG91ciBUaGUgcG9seWdvbiB0byBhZGQgdG8gdGhlIFJPSUNvbnRvdXIuXG4gKiBAcGFyYW0gIHtTdHJpbmd9IGltYWdlSWQgICAgICAgICAgICAgICBUaGUgaW1hZ2VJZCB0byBhZGQgdGhlIHBvbHlnb24gdG8uXG4gKiBAcGFyYW0gIHt0eXBlfSByZWZlcmVuY2VkVG9vbERhdGEgICAgVGhlIHRvb2xEYXRhIG9mIGFub3RoZXIgcG9seWdvbiBpbiB0aGVcbiAqIFJPSUNvbnRvdXIsIHRvIGFzc2lnbiBhcHByb3ByaWF0ZSBtZXRhZGF0YSB0byB0aGUgbmV3IHBvbHlnb24uXG4gKiBAcmV0dXJuIHtudWxsfVxuICovXG5mdW5jdGlvbiBfYWRkSW50ZXJwb2xhdGVkQ29udG91cihpbnRlcnBvbGF0ZWQyRENvbnRvdXIsIGltYWdlSWQsIHJlZmVyZW5jZWRUb29sRGF0YSkge1xuICBjb25zdCBwb2ludHMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGludGVycG9sYXRlZDJEQ29udG91ci54Lmxlbmd0aDsgaSsrKSB7XG4gICAgcG9pbnRzLnB1c2goe1xuICAgICAgeDogaW50ZXJwb2xhdGVkMkRDb250b3VyLnhbaV0sXG4gICAgICB5OiBpbnRlcnBvbGF0ZWQyRENvbnRvdXIueVtpXVxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgcG9seWdvbiA9IG5ldyBQb2x5Z29uKFxuICAgIHBvaW50cyxcbiAgICBudWxsLFxuICAgIHJlZmVyZW5jZWRUb29sRGF0YS5zZXJpZXNJbnN0YW5jZVVpZCxcbiAgICByZWZlcmVuY2VkVG9vbERhdGEuc3RydWN0dXJlU2V0VWlkLFxuICAgIHJlZmVyZW5jZWRUb29sRGF0YS5ST0lDb250b3VyVWlkLFxuICAgIGdlbmVyYXRlVUlEKCksXG4gICAgbnVsbCxcbiAgICB0cnVlXG4gICk7XG5cbiAgY29uc3QgdG9vbFN0YXRlTWFuYWdlciA9IGdsb2JhbFRvb2xTdGF0ZU1hbmFnZXIuc2F2ZVRvb2xTdGF0ZSgpO1xuXG4gIGlmICghdG9vbFN0YXRlTWFuYWdlcltpbWFnZUlkXSkge1xuICAgIHRvb2xTdGF0ZU1hbmFnZXJbaW1hZ2VJZF0gPSB7fTtcbiAgfVxuXG4gIGNvbnN0IGltYWdlVG9vbFN0YXRlID0gdG9vbFN0YXRlTWFuYWdlcltpbWFnZUlkXTtcblxuICBpZiAoIWltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pKSB7XG4gICAgaW1hZ2VUb29sU3RhdGUuZnJlZWhhbmRSb2kgPSB7fTtcbiAgICBpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhID0gW107XG4gIH0gZWxzZSBpZiAoIWltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pLmRhdGEpIHtcbiAgICBpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhID0gW107XG4gIH1cblxuICBpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhLnB1c2gocG9seWdvbi5nZXRGcmVlaGFuZFRvb2xEYXRhKGZhbHNlKSk7XG5cbiAgbW9kdWxlcy5mcmVlaGFuZDNELnNldHRlcnMuaW5jcmVtZW50UG9seWdvbkNvdW50KFxuICAgIHJlZmVyZW5jZWRUb29sRGF0YS5zZXJpZXNJbnN0YW5jZVVpZCxcbiAgICByZWZlcmVuY2VkVG9vbERhdGEuc3RydWN0dXJlU2V0VWlkLFxuICAgIHJlZmVyZW5jZWRUb29sRGF0YS5ST0lDb250b3VyVWlkXG4gICk7XG59XG5cbi8qKlxuICogX2VkaXRJbnRlcnBvbGF0ZWRDb250b3VyIC0gRWRpdHMgYW4gaW50ZXJwb2xhdGVkIHBvbHlnb24gb24gdGhlIGltYWdlSWRcbiAqIHRoYXQgY29ycmVzcG9uZHMgdG8gdGhlIHNwZWNpZmllZCBST0lDb250b3VyLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gaW50ZXJwb2xhdGVkMkRDb250b3VyIFRoZSBwb2x5Z29uIHRvIGFkZCB0byB0aGUgUk9JQ29udG91ci5cbiAqIEBwYXJhbSAge1N0cmluZ30gaW1hZ2VJZCAgICAgICAgICAgICAgIFRoZSBpbWFnZUlkIHRvIGFkZCB0aGUgcG9seWdvbiB0by5cbiAqIEBwYXJhbSAge3R5cGV9IHJlZmVyZW5jZWRUb29sRGF0YSAgICBUaGUgdG9vbERhdGEgb2YgYW5vdGhlciBwb2x5Z29uIGluIHRoZVxuICogUk9JQ29udG91ciwgdG8gYXNzaWduIGFwcHJvcHJpYXRlIG1ldGFkYXRhIHRvIHRoZSBuZXcgcG9seWdvbi5cbiAqIEByZXR1cm4ge251bGx9XG4gKi9cbmZ1bmN0aW9uIF9lZGl0SW50ZXJwb2xhdGVkQ29udG91cihpbnRlcnBvbGF0ZWQyRENvbnRvdXIsIGltYWdlSWQsIHJlZmVyZW5jZWRUb29sRGF0YSkge1xuICBjb25zdCB0b29sU3RhdGVNYW5hZ2VyID0gZ2xvYmFsVG9vbFN0YXRlTWFuYWdlci5zYXZlVG9vbFN0YXRlKCk7XG4gIGNvbnN0IGltYWdlVG9vbFN0YXRlID0gdG9vbFN0YXRlTWFuYWdlcltpbWFnZUlkXTtcblxuICBpZiAoIWltYWdlVG9vbFN0YXRlKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZSB0b29sc3RhdGUgZG9lcyBub3QgZXhpc3QuIFRoaXMgc2hvdWxkIG5vdCBiZSByZWFjaGVkIGluIHRoaXMgY2FzZSEnKTtcbiAgfVxuXG4gIC8vIEZpbmQgdGhlIGluZGV4IG9mIHRoZSBwb2x5Z29uIG9uIHRoaXMgc2xpY2UgY29ycmVzcG9uZGluZyB0b1xuICAvLyBUaGUgUk9JQ29udG91ci5cbiAgbGV0IHRvb2xEYXRhSW5kZXg7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZVRvb2xTdGF0ZS5mcmVlaGFuZFJvaS5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pLmRhdGFbaV0uUk9JQ29udG91clVpZCA9PT0gcmVmZXJlbmNlZFRvb2xEYXRhLlJPSUNvbnRvdXJVaWQpIHtcbiAgICAgIHRvb2xEYXRhSW5kZXggPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb2xkUG9seWdvbiA9IGltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pLmRhdGFbdG9vbERhdGFJbmRleF07XG4gIGNvbnN0IHBvaW50cyA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW50ZXJwb2xhdGVkMkRDb250b3VyLngubGVuZ3RoOyBpKyspIHtcbiAgICBwb2ludHMucHVzaCh7XG4gICAgICB4OiBpbnRlcnBvbGF0ZWQyRENvbnRvdXIueFtpXSxcbiAgICAgIHk6IGludGVycG9sYXRlZDJEQ29udG91ci55W2ldXG4gICAgfSk7XG4gIH1cblxuICBjb25zdCB1cGRhdGVkUG9seWdvbiA9IG5ldyBQb2x5Z29uKFxuICAgIHBvaW50cyxcbiAgICBudWxsLFxuICAgIG9sZFBvbHlnb24uc2VyaWVzSW5zdGFuY2VVaWQsXG4gICAgb2xkUG9seWdvbi5zdHJ1Y3R1cmVTZXRVaWQsXG4gICAgb2xkUG9seWdvbi5ST0lDb250b3VyVWlkLFxuICAgIG9sZFBvbHlnb24udWlkLFxuICAgIG51bGwsXG4gICAgdHJ1ZVxuICApO1xuXG4gIGltYWdlVG9vbFN0YXRlLmZyZWVoYW5kUm9pLmRhdGFbdG9vbERhdGFJbmRleF0gPSB1cGRhdGVkUG9seWdvbi5nZXRGcmVlaGFuZFRvb2xEYXRhKGZhbHNlKTtcbn1cblxuLyoqXG4gKiBfZ2VuZXJhdGVJbnRlcnBvbGF0ZWRPcGVuQ29udG91ciAtIEludGVycG9sYXRlIGFuIG9wZW4gY29udG91ciBiZXR3ZWVuIGMxaXJcbiAqIGFuZCBjMmlyIGF0IHRoZSB6SW50ZXJwIHBvc2l0aW9uLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYzFpciAgICAgICAgICAgIFRoZSBpbnRlcnBvbGF0ZWQgYzEgY29udG91ciB3aXRoXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdXBlcmZsdW91cyBub2RlcyByZW1vdmVkLlxuICogQHBhcmFtICB7b2JqZWN0fSBjMmlyICAgICAgICAgICAgVGhlIGludGVycG9sYXRlZCBjMiBjb250b3VyIHdpdGhcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1cGVyZmx1b3VzIG5vZGVzIHJlbW92ZWQuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IHpJbnRlcnAgICAgICAgICBUaGUgei0gY29vcmRpbmF0ZSBvZiB0aGUgZGVzaXJlZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJwb2xhdGlvbi5cbiAqIEBwYXJhbSAge2Jvb2xlYW59IGMxSGFzTW9yZU5vZGVzIFRydWUgaWYgYzEgaGFzIG1vcmUgb3JpZ2luYWwgbm9kZXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoYW4gYzIuXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAgICAgICBUaGUgaW50ZXJwb2xhdGVkIGNvbnRvdXIgYXQgej16SW50ZXJwLlxuICovXG5mdW5jdGlvbiBfZ2VuZXJhdGVJbnRlcnBvbGF0ZWRPcGVuQ29udG91cihjMWlyLCBjMmlyLCB6SW50ZXJwLCBjMUhhc01vcmVOb2Rlcykge1xuICBjb25zdCBjSW50ZXJwID0ge1xuICAgIHg6IFtdLFxuICAgIHk6IFtdXG4gIH07XG5cbiAgY29uc3QgaW5kaWNpZXMgPSBjMUhhc01vcmVOb2RlcyA/IGMxaXIuSSA6IGMyaXIuSTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGMxaXIueC5sZW5ndGg7IGkrKykge1xuICAgIGlmIChpbmRpY2llc1tpXSkge1xuICAgICAgY0ludGVycC54LnB1c2goKDEgLSB6SW50ZXJwKSAqIGMxaXIueFtpXSArIHpJbnRlcnAgKiBjMmlyLnhbaV0pO1xuICAgICAgY0ludGVycC55LnB1c2goKDEgLSB6SW50ZXJwKSAqIGMxaXIueVtpXSArIHpJbnRlcnAgKiBjMmlyLnlbaV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjSW50ZXJwO1xufVxuXG4vKipcbiAqIF9yZWR1Y2VDb250b3Vyc1RvT3JpZ2luTm9kZXMgLSBSZW1vdmVzIGFueSBub2RlcyBmcm9tIHRoZSBjb250b3VycyB0aGF0IGRvbid0XG4gKiBjb3JyZXNwb25kIHRvIGFuIG9yaWdpbmFsIGNvbnRvdXIgbm9kZS5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMxaSBUaGUgZmlyc3Qgc3VwZXItc2FtcGxlZCBjb250b3VyLlxuICogQHBhcmFtICB7b2JqZWN0fSBjMmkgVGhlIHNlY29uZCBzdXBlci1zYW1wbGVkIGNvbnRvdXIuXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICBBbiBvYmplY3QgY29udGFpbmluZyB0aGUgdHdvIHJlZHVjZWQgY29udG91cnMuXG4gKi9cbmZ1bmN0aW9uIF9yZWR1Y2VDb250b3Vyc1RvT3JpZ2luTm9kZXMoYzFpLCBjMmkpIHtcbiAgY29uc3QgYzFJbnRlcnAgPSB7XG4gICAgeDogW10sXG4gICAgeTogW10sXG4gICAgSTogW11cbiAgfTtcbiAgY29uc3QgYzJJbnRlcnAgPSB7XG4gICAgeDogW10sXG4gICAgeTogW10sXG4gICAgSTogW11cbiAgfTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGMxaS54Lmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGMxaS5JW2ldIHx8IGMyaS5JW2ldKSB7XG4gICAgICBjMUludGVycC54LnB1c2goYzFpLnhbaV0pO1xuICAgICAgYzFJbnRlcnAueS5wdXNoKGMxaS55W2ldKTtcbiAgICAgIGMxSW50ZXJwLkkucHVzaChjMWkuSVtpXSk7XG5cbiAgICAgIGMySW50ZXJwLngucHVzaChjMmkueFtpXSk7XG4gICAgICBjMkludGVycC55LnB1c2goYzJpLnlbaV0pO1xuICAgICAgYzJJbnRlcnAuSS5wdXNoKGMyaS5JW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGMxSW50ZXJwLFxuICAgIGMySW50ZXJwXG4gIH07XG59XG5cbi8qKlxuICogX3NoaWZ0U3VwZXJTYW1wbGVkQ29udG91ckluUGxhY2UgLSBTaGlmdHMgdGhlIGluZGljaWVzIG9mIGMxaSBhcm91bmQgdG9cbiAqIG1pbmltaXNlOiBTVU0gKHxjMWlbaV0tYzJpW2ldfCkgZnJvbSAwIHRvIE4uXG4gKlxuICogQHBhcmFtICB7b2JqZWN0fSBjMWkgVGhlIGNvbnRvdXIgdG8gc2hpZnQuXG4gKiBAcGFyYW0gIHtvYmplY3R9IGMyaSBUaGUgcmVmZXJlbmNlIGNvbnRvdXIuXG4gKiBAbW9kaWZpZXMgYzFpXG4gKi9cbmZ1bmN0aW9uIF9zaGlmdFN1cGVyU2FtcGxlZENvbnRvdXJJblBsYWNlKGMxaSwgYzJpKSB7XG4gIGNvbnN0IGMxaUxlbmd0aCA9IGMxaS54Lmxlbmd0aDtcblxuICBsZXQgb3B0aW1hbCA9IHtcbiAgICBzdGFydGluZ05vZGU6IDAsXG4gICAgdG90YWxTcXVhcmVkWFlMZW5ndGhzOiBJbmZpbml0eVxuICB9O1xuXG4gIGZvciAobGV0IHN0YXJ0aW5nTm9kZSA9IDA7IHN0YXJ0aW5nTm9kZSA8IGMxaUxlbmd0aDsgc3RhcnRpbmdOb2RlKyspIHtcbiAgICBsZXQgbm9kZSA9IHN0YXJ0aW5nTm9kZTtcblxuICAgIC8vIE5PVEU6IDEpIElnbm9yZSBjYWxjdWxhdGluZyBaLCBhcyB0aGUgc3VtIG9mIGFsbCBzcXVhcmVkIFogZGlzdGFuY2VzIHdpbGwgYWx3YXlzIGJlIGEgY29uc3RhbnQuXG4gICAgLy8gTk9URTogMikgRG9uJ3QgbmVlZCBhY3R1YWwgbGVuZ3RoLCBzbyBkb24ndCB3b3JyeSBhYm91dCBzcXVhcmUgcm9vdGluZy5cbiAgICBsZXQgdG90YWxTcXVhcmVkWFlMZW5ndGhzID0gMDtcblxuICAgIGZvciAobGV0IGl0dGVyYXRpb24gPSAwOyBpdHRlcmF0aW9uIDwgYzFpTGVuZ3RoOyBpdHRlcmF0aW9uKyspIHtcbiAgICAgIHRvdGFsU3F1YXJlZFhZTGVuZ3RocyArPSAoYzFpLnhbbm9kZV0gLSBjMmkueFtpdHRlcmF0aW9uXSkgKiogMiArIChjMWkueVtub2RlXSAtIGMyaS55W2l0dGVyYXRpb25dKSAqKiAyO1xuXG4gICAgICBub2RlKys7XG5cbiAgICAgIGlmIChub2RlID09PSBjMWlMZW5ndGgpIG5vZGUgPSAwO1xuICAgIH1cblxuICAgIGlmICh0b3RhbFNxdWFyZWRYWUxlbmd0aHMgPCBvcHRpbWFsLnRvdGFsU3F1YXJlZFhZTGVuZ3Rocykge1xuICAgICAgb3B0aW1hbC50b3RhbFNxdWFyZWRYWUxlbmd0aHMgPSB0b3RhbFNxdWFyZWRYWUxlbmd0aHM7XG4gICAgICBvcHRpbWFsLnN0YXJ0aW5nTm9kZSA9IHN0YXJ0aW5nTm9kZTtcbiAgICB9XG4gIH1cblxuICBsZXQgbm9kZSA9IG9wdGltYWwuc3RhcnRpbmdOb2RlO1xuXG4gIF9zaGlmdENpcmN1bGFyQXJyYXkoYzFpLngsIG5vZGUpO1xuICBfc2hpZnRDaXJjdWxhckFycmF5KGMxaS55LCBub2RlKTtcbiAgX3NoaWZ0Q2lyY3VsYXJBcnJheShjMWkuSSwgbm9kZSk7XG59XG5cbi8qKlxuICogX3NoaWZ0Q2lyY3VsYXJBcnJheSAtIFNoaWZ0IHRoZSBjaXJjdWxhciBhcnJheSBieSB0aGUgY291bnQuXG4gKlxuICogQHBhcmFtICB7KltdfSBhcnIgICBUaGUgYXJyYXkuXG4gKiBAcGFyYW0gIHtOdW1iZXJ9IGNvdW50IFRoZSBzaGlmdC5cbiAqIEByZXR1cm4geypbXX0gICAgICAgVGhlIHNoaWZ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIF9zaGlmdENpcmN1bGFyQXJyYXkoYXJyLCBjb3VudCkge1xuICBjb3VudCAtPSBhcnIubGVuZ3RoICogTWF0aC5mbG9vcihjb3VudCAvIGFyci5sZW5ndGgpO1xuICBhcnIucHVzaC5hcHBseShhcnIsIGFyci5zcGxpY2UoMCwgY291bnQpKTtcbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBfZ2V0U3VwZXJTYW1wbGVkQ29udG91ciAtIEdlbmVyYXRlcyBhIHN1cGVyIHNhbXBsZWQgY29udG91ciB3aXRoIGFkZGl0aW9uYWxcbiAqIG5vZGVzIGFkZGVkIHBlciBzZWdtZW50LlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gYyAgICAgICAgICAgICAgICAgVGhlIG9yaWdpbmFsIGNvbnRvdXIuXG4gKiBAcGFyYW0gIHtOdW1iZXJbXX0gbm9kZXNQZXJTZWdtZW50IEFuIGFycmF5IG9mIHRoZSBudW1iZXIgb2Ygbm9kZXMgdG8gYWRkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlciBsaW5lIHNlZ21lbnQuXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgICAgICAgICAgIFRoZSBzdXBlciBzYW1wbGVkIGNvbnRvdXIuXG4gKi9cbmZ1bmN0aW9uIF9nZXRTdXBlclNhbXBsZWRDb250b3VyKGMsIG5vZGVzUGVyU2VnbWVudCkge1xuICBjb25zdCBjaSA9IHtcbiAgICB4OiBbXSxcbiAgICB5OiBbXSxcbiAgICBJOiBbXVxuICB9O1xuXG4gIC8vIExlbmd0aCAtIDEsIHByb2R1Y2VzICdvcGVuJyBwb2x5Z29uLlxuICBmb3IgKGxldCBuID0gMDsgbiA8IGMueC5sZW5ndGggLSAxOyBuKyspIHtcbiAgICAvLyBBZGQgb3JpZ2luYWwgbm9kZS5cbiAgICBjaS54LnB1c2goYy54W25dKTtcbiAgICBjaS55LnB1c2goYy55W25dKTtcbiAgICBjaS5JLnB1c2godHJ1ZSk7XG5cbiAgICAvLyBBZGQgbGluZXJhbGx5IGludGVycG9sYXRlZCBub2Rlcy5cbiAgICBjb25zdCB4U3BhY2luZyA9IChjLnhbbiArIDFdIC0gYy54W25dKSAvIChub2Rlc1BlclNlZ21lbnRbbl0gKyAxKTtcbiAgICBjb25zdCB5U3BhY2luZyA9IChjLnlbbiArIDFdIC0gYy55W25dKSAvIChub2Rlc1BlclNlZ21lbnRbbl0gKyAxKTtcblxuICAgIC8vIEFkZCBvdGhlciBub2Rlc1BlclNlZ21lbnQgLSAxIG90aGVyIG5vZGVzIChhcyBhbHJlYWR5IHB1dCBpbiBvcmlnaW5hbCBub2RlKS5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzUGVyU2VnbWVudFtuXSAtIDE7IGkrKykge1xuICAgICAgY2kueC5wdXNoKGNpLnhbY2kueC5sZW5ndGggLSAxXSArIHhTcGFjaW5nKTtcbiAgICAgIGNpLnkucHVzaChjaS55W2NpLnkubGVuZ3RoIC0gMV0gKyB5U3BhY2luZyk7XG4gICAgICBjaS5JLnB1c2goZmFsc2UpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBjaTtcbn1cblxuLyoqXG4gKiBfZ2V0Tm9kZXNQZXJTZWdtZW50IC0gUmV0dXJucyBhbiBhcnJheSBvZiB0aGUgbnVtYmVyIG9mIGludGVycG9sYXRlZCBub2Rlc1xuICogdG8gYmUgYWRkZWQgYWxvbmcgZWFjaCBsaW5lIHNlZ21lbnQgb2YgYSBwb2x5Z29uLlxuICpcbiAqIEBwYXJhbSAge051bWJlcltdfSBwZXJpbUludGVycCBOb3JtYWxpc2VkIGFycmF5IG9mIG9yaWdpbmFsIGFuZCBhZGRlZCBub2Rlcy5cbiAqIEBwYXJhbSAge2Jvb2xlYW5bXX0gcGVyaW1JbmQgICAgVGhlIGluZGljYXRvciBhcnJheSBkZXNjcmliaW5nIHRoZSBsb2NhdGlvbiBvZlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlIG9yaWdpbmFsIGNvbnRvdXIncyBub2Rlcy5cbiAqIEByZXR1cm4ge051bWJlcltdfSAgICAgICAgIEFuIGFycmF5IGNvbnRhaW5naW5nIHRoZSBudW1iZXIgb2Ygbm9kZXMgdG8gYmVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkIHBlciBvcmlnaW5hbCBsaW5lIHNlZ21lbnQuXG4gKi9cbmZ1bmN0aW9uIF9nZXROb2Rlc1BlclNlZ21lbnQocGVyaW1JbnRlcnAsIHBlcmltSW5kKSB7XG4gIGNvbnN0IGlkeCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGVyaW1JbnRlcnAubGVuZ3RoOyArK2kpIGlkeFtpXSA9IGk7XG4gIGlkeC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIHBlcmltSW50ZXJwW2FdIDwgcGVyaW1JbnRlcnBbYl0gPyAtMSA6IHBlcmltSW50ZXJwW2FdID4gcGVyaW1JbnRlcnBbYl07XG4gIH0pO1xuXG4gIGNvbnN0IHBlcmltSW5kU29ydGVkID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwZXJpbUluZC5sZW5ndGg7IGkrKykge1xuICAgIHBlcmltSW5kU29ydGVkLnB1c2gocGVyaW1JbmRbaWR4W2ldXSk7XG4gIH1cblxuICBjb25zdCBpbmRpY2llc09mT3JpZ2luTm9kZXMgPSBwZXJpbUluZFNvcnRlZC5yZWR1Y2UoZnVuY3Rpb24gKGFyciwgZWxlbWVudFZhbHVlLCBpKSB7XG4gICAgaWYgKGVsZW1lbnRWYWx1ZSkgYXJyLnB1c2goaSk7XG4gICAgcmV0dXJuIGFycjtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IG5vZGVzUGVyU2VnbWVudCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kaWNpZXNPZk9yaWdpbk5vZGVzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIG5vZGVzUGVyU2VnbWVudC5wdXNoKGluZGljaWVzT2ZPcmlnaW5Ob2Rlc1tpICsgMV0gLSBpbmRpY2llc09mT3JpZ2luTm9kZXNbaV0pO1xuICB9XG5cbiAgcmV0dXJuIG5vZGVzUGVyU2VnbWVudDtcbn1cblxuLyoqXG4gKiBfZ2V0SW5kaWNhdG9yQXJyYXkgLSBQcm9kdWNlcyBhbiBhcnJheSBvZiB0aGUgbG9jYXRpb24gb2YgdGhlIG9yaWdpbmFsIG5vZGVzXG4gKiBpbiBhIHN1cGVyIHNhbXBsZWQgY29udG91ci5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbnRvdXIgICBUaGUgb3JpZ2luYWwgY29udG91ci5cbiAqIEBwYXJhbSAge051bWJlcn0gbnVtTm9kZXMgVGhlIG51bWJlciBvZiBub2RlcyBhZGRlZC5cbiAqIEByZXR1cm4ge2Jvb2xlYW5bXX0gICAgICAgICAgIFRoZSBpbmRpY2F0b3IgYXJyYXkgb2Ygb3JpZ2luYWwgbm9kZSBsb2NhdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIF9nZXRJbmRpY2F0b3JBcnJheShjb250b3VyLCBudW1Ob2Rlcykge1xuICBjb25zdCBwZXJpbUluZCA9IFtdO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtTm9kZXMgLSAyOyBpKyspIHtcbiAgICBwZXJpbUluZC5wdXNoKGZhbHNlKTtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY29udG91ci54Lmxlbmd0aDsgaSsrKSB7XG4gICAgcGVyaW1JbmQucHVzaCh0cnVlKTtcbiAgfVxuXG4gIHJldHVybiBwZXJpbUluZDtcbn1cblxuLyoqXG4gKiBfZ2V0SW50ZXJwb2xhdGVkUGVyaW0gLSBBZGRzIGFkZGl0aW9uYWwgaW50ZXJwb2xhdGVkIG5vZGVzIHRvIHRoZVxuICogbm9ybWFsaXNlZCBwZXJpbWV0ZXIgYXJyYXkuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSBudW1Ob2RlcyAgICBUaGUgbnVtYmVyIG9mIG5vZGVzIHRvIGFkZC5cbiAqIEBwYXJhbSAge051bWJlcltdfSBjdW1QZXJpbU5vcm0gVGhlIGN1bXVsYXRpdmUgcGVyaW1ldGVyIGFycmF5LlxuICogQHJldHVybiB7TnVtYmVyW119ICAgICAgICAgICAgICBUaGUgYXJyYXkgb2Ygbm9kZXMuXG4gKi9cbmZ1bmN0aW9uIF9nZXRJbnRlcnBvbGF0ZWRQZXJpbShudW1Ob2RlcywgY3VtUGVyaW1Ob3JtKSB7XG4gIGNvbnN0IGRpZmYgPSAxIC8gKG51bU5vZGVzIC0gMSk7XG4gIGNvbnN0IGxpbnNwYWNlID0gW2RpZmZdO1xuXG4gIC8vIExlbmd0aCAtIDIgYXMgd2UgYXJlIGRpc2NhcmRpbmcgMCBhbiAxIGZvciBlZmZpY2llbmN5IChubyBuZWVkIHRvIGNhbGN1bGF0ZSB0aGVtKS5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBudW1Ob2RlcyAtIDI7IGkrKykge1xuICAgIGxpbnNwYWNlLnB1c2gobGluc3BhY2VbbGluc3BhY2UubGVuZ3RoIC0gMV0gKyBkaWZmKTtcbiAgfVxuXG4gIHJldHVybiBsaW5zcGFjZS5jb25jYXQoY3VtUGVyaW1Ob3JtKTtcbn1cblxuLyoqXG4gKiBfZ2V0Q3VtdWxhdGl2ZVBlcmltZXRlciAtIFJldHVybnMgYW4gYXJyYXkgb2YgdGhlIHRoZSBjdW11bGF0aXZlIHBlcmltZXRlciBhdFxuICogZWFjaCBub2RlIG9mIHRoZSBjb250b3VyLlxuICpcbiAqIEBwYXJhbSAge29iamVjdH0gY29udG91ciBUaGUgY29udG91ci5cbiAqIEByZXR1cm4ge051bWJlcltdfSAgICAgICAgIEFuIGFycmF5IG9mIHRoZSBjdW11bGF0aXZlIHBlcmltZXRlciBhdCBlYWNoIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIF9nZXRDdW11bGF0aXZlUGVyaW1ldGVyKGNvbnRvdXIpIHtcbiAgbGV0IGN1bXVsYXRpdmVQZXJpbWV0ZXIgPSBbMF07XG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBjb250b3VyLngubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBsZW5ndGhPZlNlZ21lbnQgPSBNYXRoLnNxcnQoKGNvbnRvdXIueFtpXSAtIGNvbnRvdXIueFtpIC0gMV0pICoqIDIgKyAoY29udG91ci55W2ldIC0gY29udG91ci55W2kgLSAxXSkgKiogMik7XG5cbiAgICBjdW11bGF0aXZlUGVyaW1ldGVyLnB1c2goY3VtdWxhdGl2ZVBlcmltZXRlcltpIC0gMV0gKyBsZW5ndGhPZlNlZ21lbnQpO1xuICB9XG5cbiAgcmV0dXJuIGN1bXVsYXRpdmVQZXJpbWV0ZXI7XG59XG5cbi8qKlxuICogX25vcm1hbGlzZWRDdW11bGF0aXZlUGVyaW1ldGVyIC0gTm9ybWFsaXNlcyB0aGUgY3VtdWxhdGl2ZSBwZXJpbWV0ZXIgYXJyYXkuXG4gKlxuICogQHBhcmFtICB7dHlwZX0gY3VtUGVyaW0gQW4gYXJyYXkgb2YgdGhlIGN1bXVsYXRpdmUgcGVyaW1ldGVyIGF0IGVhY2ggb2YgYVxuICogY29udG91ci5cbiAqIEByZXR1cm4ge3R5cGV9ICAgICAgICAgIFRoZSBub3JtYWxpc2VkIGFycmF5LlxuICovXG5mdW5jdGlvbiBfbm9ybWFsaXNlZEN1bXVsYXRpdmVQZXJpbWV0ZXIoY3VtUGVyaW0pIHtcbiAgY29uc3QgY3VtUGVyaW1Ob3JtID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdW1QZXJpbS5sZW5ndGg7IGkrKykge1xuICAgIGN1bVBlcmltTm9ybS5wdXNoKGN1bVBlcmltW2ldIC8gY3VtUGVyaW1bY3VtUGVyaW0ubGVuZ3RoIC0gMV0pO1xuICB9XG5cbiAgcmV0dXJuIGN1bVBlcmltTm9ybTtcbn1cblxuLyoqXG4gKiBfZ2VuZXJhdGVDbG9zZWRDb250b3VyIC0gR2VuZXJhdGUgYSBjbG9ja3dpc2UgY29udG91ciBvYmplY3QgZnJvbSB0aGUgcG9pbnRzXG4gKiBvZiBhIGNsb2Nrd2lzZSBvciBhbnRpLWNsb2Nrd2lzZSBwb2x5Z29uLlxuICpcbiAqIEBwYXJhbSAge29iamVjdFtdfSBwb2ludHMgVGhlIHBvaW50cyB0byBnZW5lcmF0ZSB0aGUgY29udG91ciBmcm9tLlxuICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICAgVGhlIGdlbmVyYXRlZCBjb250b3VyIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gX2dlbmVyYXRlQ2xvc2VkQ29udG91cihwb2ludHMpIHtcbiAgY29uc3QgYyA9IHtcbiAgICB4OiBbXSxcbiAgICB5OiBbXVxuICB9O1xuXG4gIC8vIE5PVEU6IEZvciB6IHBvc2l0aW9ucyB3ZSBvbmx5IG5lZWQgdGhlIHJlbGF0aXZlIGRpZmZlcmVuY2UgZm9yIGludGVycG9sYXRpb24sIHRodXMgdXNlIGZyYW1lIGluZGV4IGFzIFouXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgYy54W2ldID0gcG9pbnRzW2ldLng7XG4gICAgYy55W2ldID0gcG9pbnRzW2ldLnk7XG4gIH1cblxuICAvLyBQdXNoIGxhc3Qgbm9kZSB0byBjcmVhdGUgY2xvc2VkIGNvbnRvdXIuXG4gIGMueC5wdXNoKGMueFswXSk7XG4gIGMueS5wdXNoKGMueVswXSk7XG5cbiAgX3JldmVyc2VJZkFudGlDbG9ja3dpc2UoYyk7XG5cbiAgcmV0dXJuIGM7XG59XG5cbi8qKlxuICogX3JldmVyc2VJZkFudGlDbG9ja3dpc2UgLSBJZiB0aGUgY29udG91cidzIG5vZGVzIHJ1biBhbnRpLWNsb2Nrd2lzZSxcbiAqIHJldmVyc2UgdGhlbS5cbiAqXG4gKiBAcGFyYW0gIHtvYmplY3R9IGNvbnRvdXIgVGhlIGNvbnRvdXIuXG4gKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgVGhlIGNvbnRvdXIsIGNvcnJlY3RlZCB0byBiZSBjbG9ja3dpc2UgaWYgYXBwcm9wcmlhdGUuXG4gKi9cbmZ1bmN0aW9uIF9yZXZlcnNlSWZBbnRpQ2xvY2t3aXNlKGNvbnRvdXIpIHtcbiAgY29uc3QgbGVuZ3RoID0gY29udG91ci54Lmxlbmd0aDtcbiAgY29uc3QgY29udG91clhNZWFuID0gY29udG91ci54LnJlZHVjZShnZXRTdW1SZWR1Y2VyKSAvIGxlbmd0aDtcbiAgbGV0IGNoZWNrU3VtID0gMDtcblxuICBmb3IgKGxldCBrID0gMCwgaSA9IDEsIGogPSAyOyBrIDwgbGVuZ3RoOyBrKyspIHtcbiAgICBjaGVja1N1bSArPSAoY29udG91ci54W2ldIC0gY29udG91clhNZWFuKSAqIChjb250b3VyLnlbal0gLSBjb250b3VyLnlba10pO1xuICAgIGkrKztcbiAgICBqKys7XG4gICAgaWYgKGkgPj0gbGVuZ3RoKSBpID0gMDtcbiAgICBpZiAoaiA+PSBsZW5ndGgpIGogPSAwO1xuICB9XG5cbiAgaWYgKGNoZWNrU3VtID4gMCkge1xuICAgIGNvbnRvdXIueC5yZXZlcnNlKCk7XG4gICAgY29udG91ci55LnJldmVyc2UoKTtcbiAgfVxufVxuXG4vKipcbiAqIGdldFN1bVJlZHVjZXIgLSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBjYWxjdWxhdGVzIHRoZSBzdW0gb2YgYW4gYXJyYXkuXG4gKlxuICogQHBhcmFtICB7TnVtYmVyfSB0b3RhbCBUaGUgcnVubmluZyB0b3RhbC5cbiAqIEBwYXJhbSAge051bWJlcn0gbnVtICAgVGhlIG51bWVyaWNhbCB2YWx1ZSBvZiB0aGUgYXJyYXkgZWxlbWVudC5cbiAqIEByZXR1cm4ge051bWJlcn0gICAgICAgVGhlIHVwZGF0ZWQgcnVubmluZyB0b3RhbC5cbiAqL1xuZnVuY3Rpb24gZ2V0U3VtUmVkdWNlcih0b3RhbCwgbnVtKSB7XG4gIHJldHVybiB0b3RhbCArIG51bTtcbn1cbiIsImltcG9ydCBHZW5lcmFsQW5hdG9teUxpc3QgZnJvbSAnLi4vR2VuZXJhbEFuYXRvbXlsaXN0LmpzJztcblxuY29uc3QgY2F0ZWdvcmllcyA9IEdlbmVyYWxBbmF0b215TGlzdC5TZWdtZW50YXRpb25Db2Rlcy5DYXRlZ29yeTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VuZXJhdGVNZXRhZGF0YShsYWJlbCwgY2F0ZWdvcnlVSUQgPSAnVC1EMDA1MCcsIHR5cGVVSUQgPSAnVC1EMDA1MCcsIG1vZGlmaWVyVUlEKSB7XG4gIGNvbnN0IGNhdGVnb3J5ID0gY2F0ZWdvcmllcy5maW5kKGNhdGVnb3JpZXNJID0+IGNhdGVnb3JpZXNJLkNvZGVWYWx1ZSA9PT0gY2F0ZWdvcnlVSUQpO1xuICBjb25zdCB0eXBlID0gY2F0ZWdvcnkuVHlwZS5maW5kKHR5cGVzSSA9PiB0eXBlc0kuQ29kZVZhbHVlID09PSB0eXBlVUlEKTtcblxuICBjb25zdCBtZXRhZGF0YSA9IHtcbiAgICBTZWdtZW50ZWRQcm9wZXJ0eUNhdGVnb3J5Q29kZVNlcXVlbmNlOiB7XG4gICAgICBDb2RlVmFsdWU6IGNhdGVnb3J5LkNvZGVWYWx1ZSxcbiAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IGNhdGVnb3J5LkNvZGluZ1NjaGVtZURlc2lnbmF0b3IsXG4gICAgICBDb2RlTWVhbmluZzogY2F0ZWdvcnkuQ29kZU1lYW5pbmdcbiAgICB9LFxuICAgIFNlZ21lbnRMYWJlbDogbGFiZWwsXG4gICAgU2VnbWVudEFsZ29yaXRobVR5cGU6ICdNQU5VQUwnLFxuXG4gICAgU2VnbWVudGVkUHJvcGVydHlUeXBlQ29kZVNlcXVlbmNlOiB7XG4gICAgICBDb2RlVmFsdWU6IHR5cGUuQ29kZVZhbHVlLFxuICAgICAgQ29kaW5nU2NoZW1lRGVzaWduYXRvcjogdHlwZS5Db2RpbmdTY2hlbWVEZXNpZ25hdG9yLFxuICAgICAgQ29kZU1lYW5pbmc6IHR5cGUuQ29kZU1lYW5pbmdcbiAgICB9XG4gIH07XG5cbiAgaWYgKG1vZGlmaWVyVUlEKSB7XG4gICAgY29uc3QgbW9kZmllciA9IHR5cGUuTW9kaWZpZXIuZmluZChtb2RpZmllckkgPT4gbW9kaWZpZXJJLkNvZGVWYWx1ZSA9PT0gbW9kaWZpZXJVSUQpO1xuXG4gICAgbWV0YWRhdGEuU2VnbWVudGVkUHJvcGVydHlUeXBlQ29kZVNlcXVlbmNlLlNlZ21lbnRlZFByb3BlcnR5VHlwZU1vZGlmaWVyQ29kZVNlcXVlbmNlID0ge1xuICAgICAgQ29kZVZhbHVlOiBtb2RmaWVyLkNvZGVWYWx1ZSxcbiAgICAgIENvZGluZ1NjaGVtZURlc2lnbmF0b3I6IG1vZGZpZXIuQ29kaW5nU2NoZW1lRGVzaWduYXRvcixcbiAgICAgIENvZGVNZWFuaW5nOiBtb2RmaWVyLkNvZGVNZWFuaW5nXG4gICAgfTtcblxuICAgIG1ldGFkYXRhLlJlY29tbWVuZGVkRGlzcGxheUNJRUxhYlZhbHVlID0gbW9kZmllci5yZWNvbW1lbmRlZERpc3BsYXlSR0JWYWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBtZXRhZGF0YS5SZWNvbW1lbmRlZERpc3BsYXlDSUVMYWJWYWx1ZSA9IHR5cGUucmVjb21tZW5kZWREaXNwbGF5UkdCVmFsdWU7XG4gIH1cblxuICByZXR1cm4gbWV0YWRhdGE7XG59XG4iLCIvKipcbiAqIEdlbmVyYXRlcyBhIFVVSUQgZm9yIHRoZSBlbmFibGVkRWxlbWVudC5cbiAqIEBleHBvcnQgQHB1YmxpYyBAbWV0aG9kXG4gKiBAbmFtZSBnZW5lcmF0ZVVJRFxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gdGhlIFVVSUQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICgpIHtcbiAgLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzg4MDk0NzIvOTIwODMyMCBQdWJsaWMgRG9tYWluL01JVFxuICAvKiBlc2xpbnQgbm8tYml0d2lzZTogW1wiZXJyb3JcIiwgeyBcImFsbG93XCI6IFtcIiZcIixcInxcIl0gfV0gKi9cbiAgbGV0IGQgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcblxuICBpZiAodHlwZW9mIHBlcmZvcm1hbmNlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgcGVyZm9ybWFuY2Uubm93ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgZCArPSBwZXJmb3JtYW5jZS5ub3coKTsgLy8gVXNlIGhpZ2gtcHJlY2lzaW9uIHRpbWVyIGlmIGF2YWlsYWJsZVxuICB9XG4gIHJldHVybiAneC54LngueC54LngueHh4eC54eHgueC54Lnh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xuICAgIGNvbnN0IHIgPSAoZCArIE1hdGgucmFuZG9tKCkgKiAxNikgJSAxNiB8IDA7XG5cbiAgICBkID0gTWF0aC5mbG9vcihkIC8gMTYpO1xuICAgIHJldHVybiAoYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICB9KTtcbn1cbiIsImltcG9ydCB7IGltcG9ydEludGVybmFsTW9kdWxlLCBzdG9yZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50IGZyb20gJy4vZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudC5qcyc7XG5cbmNvbnN0IEJhc2VCcnVzaFRvb2wgPSBpbXBvcnRJbnRlcm5hbE1vZHVsZSgnYmFzZS9CYXNlQnJ1c2hUb29sJyk7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uICh2aWV3cG9ydHMpIHtcbiAgY29uc3QgZW5hYmxlZEVsZW1lbnQgPSBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50KHZpZXdwb3J0cy52aWV3cG9ydFNwZWNpZmljRGF0YSwgdmlld3BvcnRzLmFjdGl2ZVZpZXdwb3J0SW5kZXgpO1xuXG4gIGNvbnN0IGVsZW1lbnQgPSBlbmFibGVkRWxlbWVudC5lbGVtZW50O1xuXG4gIGxldCB0b29scyA9IHN0b3JlLnN0YXRlLnRvb2xzO1xuXG4gIHRvb2xzID0gdG9vbHMuZmlsdGVyKHRvb2wgPT4gdG9vbC5lbGVtZW50ID09PSBlbGVtZW50ICYmIHRvb2wubW9kZSA9PT0gJ2FjdGl2ZScpO1xuXG4gIHJldHVybiB0b29scy5maWx0ZXIodG9vbCA9PiB0b29sIGluc3RhbmNlb2YgQmFzZUJydXNoVG9vbCk7XG59XG4iLCJpbXBvcnQgeyBzdG9yZSB9IGZyb20gJ2Nvcm5lcnN0b25lLXRvb2xzJztcbmltcG9ydCBnZXRBY3RpdmVWaWV3cG9ydEVuYWJsZWRFbGVtZW50IGZyb20gJy4vZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudC5qcyc7XG5pbXBvcnQgRnJlZWhhbmQzRFJvaVRvb2wgZnJvbSAnLi4vdG9vbHMvRnJlZWhhbmRSb2kzRFRvb2wuanMnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAodmlld3BvcnRzKSB7XG4gIGNvbnN0IGVuYWJsZWRFbGVtZW50ID0gZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudCh2aWV3cG9ydHMudmlld3BvcnRTcGVjaWZpY0RhdGEsIHZpZXdwb3J0cy5hY3RpdmVWaWV3cG9ydEluZGV4KTtcblxuICBjb25zdCBlbGVtZW50ID0gZW5hYmxlZEVsZW1lbnQuZWxlbWVudDtcblxuICBsZXQgdG9vbHMgPSBzdG9yZS5zdGF0ZS50b29scztcblxuICB0b29scyA9IHRvb2xzLmZpbHRlcih0b29sID0+IHRvb2wuZWxlbWVudCA9PT0gZWxlbWVudCAmJiB0b29sLm1vZGUgPT09ICdhY3RpdmUnKTtcblxuICByZXR1cm4gdG9vbHMuZmlsdGVyKHRvb2wgPT4gdG9vbCBpbnN0YW5jZW9mIEZyZWVoYW5kM0RSb2lUb29sKTtcbn1cbiIsIi8qKlxuICogR3JhYnMgYGRvbWAgcmVmZXJlbmNlIGZvciB0aGUgZW5hYmxlZEVsZW1lbnQgb2ZcbiAqIHRoZSBhY3RpdmUgdmlld3BvcnRcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0QWN0aXZlVmlld3BvcnRFbmFibGVkRWxlbWVudCh2aWV3cG9ydHMsIGFjdGl2ZUluZGV4KSB7XG4gIGNvbnN0IGFjdGl2ZVZpZXdwb3J0ID0gdmlld3BvcnRzW2FjdGl2ZUluZGV4XSB8fCB7fTtcblxuICByZXR1cm4gYWN0aXZlVmlld3BvcnQuZG9tO1xufVxuIiwiaW1wb3J0IGNvcm5lcnN0b25lIGZyb20gJ2Nvcm5lcnN0b25lLWNvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21FbmFibGVkRWxlbWVudChlbmFibGVkRWxlbWVudCkge1xuICBpZiAoIWVuYWJsZWRFbGVtZW50KSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgY29uc3QgaW1hZ2VJZCA9IGVuYWJsZWRFbGVtZW50LmltYWdlLmltYWdlSWQ7XG4gIGNvbnN0IGdlbmVyYWxTZXJpZXNNb2R1bGUgPSBjb3JuZXJzdG9uZS5tZXRhRGF0YS5nZXQoJ2dlbmVyYWxTZXJpZXNNb2R1bGUnLCBpbWFnZUlkKTtcblxuICByZXR1cm4gZ2VuZXJhbFNlcmllc01vZHVsZS5zZXJpZXNJbnN0YW5jZVVJRDtcbn1cbiIsImltcG9ydCBjb3JuZXJzdG9uZSBmcm9tICdjb3JuZXJzdG9uZS1jb3JlJztcblxuLyoqXG4gKiBFeHRyYWN0cyB0aGUgc2VyaWVzSW5zdGFuY2VVaWQgZnJvbSBhbiBpbWFnZSwgZ2l2ZW4gdGhlIGltYWdlSWQuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGltYWdlSWQgVGhlIElEIG9mIHRoZSBpbWFnZSBiZWluZyBxdWVyaWVkLlxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21JbWFnZUlkKGltYWdlSWQpIHtcbiAgY29uc3QgZ2VuZXJhbFNlcmllc01vZHVsZSA9IGNvcm5lcnN0b25lLm1ldGFEYXRhLmdldCgnZ2VuZXJhbFNlcmllc01vZHVsZScsIGltYWdlSWQpO1xuXG4gIHJldHVybiBnZW5lcmFsU2VyaWVzTW9kdWxlLnNlcmllc0luc3RhbmNlVUlEO1xufVxuIiwiaW1wb3J0IHsgc3RvcmUsIGdsb2JhbEltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZU1hbmFnZXIgfSBmcm9tICdjb3JuZXJzdG9uZS10b29scyc7XG5cbmltcG9ydCBnZXRTZXJpZXNJbnN0YW5jZVVpZEZyb21JbWFnZUlkIGZyb20gJy4vZ2V0U2VyaWVzSW5zdGFuY2VVaWRGcm9tSW1hZ2VJZC5qcyc7XG5cbmNvbnN0IG1vZHVsZXMgPSBzdG9yZS5tb2R1bGVzO1xuY29uc3QgZ2xvYmFsVG9vbFN0YXRlTWFuYWdlciA9IGdsb2JhbEltYWdlSWRTcGVjaWZpY1Rvb2xTdGF0ZU1hbmFnZXI7XG5cbi8qKlxuICogVW5sb2NrIGEgc3RydWN0dXJlU2V0LCBtb3ZpbmcgdGhlbSB0byB0aGUgd29ya2luZyBkaXJlY3RvcnlcbiAqIHNvIHRoYXQgdGhleSBtYXkgYmUgZWRpdGVkXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHNlcmllc0luc3RhbmNlVWlkICBUaGUgVUlEIG9mIHRoZSBzZXJpZXMgb24gd2hpY2ggdGhlIFJPSXNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzaWRlLlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cnVjdHVyZVNldFVpZCAgICBUaGUgdWlkIG9mIHRoZSBuZXdseSBjcmVhdGVkIHN0cnVjdHVyZVNldC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpIHtcbiAgY29uc3QgZnJlZWhhbmQzRFN0b3JlID0gbW9kdWxlcy5mcmVlaGFuZDNEO1xuICBjb25zdCBzdHJ1Y3R1cmVTZXQgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5zdHJ1Y3R1cmVTZXQoc2VyaWVzSW5zdGFuY2VVaWQsIHN0cnVjdHVyZVNldFVpZCk7XG5cbiAgY29uc3QgUk9JQ29udG91ckNvbGxlY3Rpb24gPSBzdHJ1Y3R1cmVTZXQuUk9JQ29udG91ckNvbGxlY3Rpb247XG5cbiAgY29uc3Qgd29ya2luZ1N0cnVjdHVyZVNldCA9IGZyZWVoYW5kM0RTdG9yZS5nZXR0ZXJzLnN0cnVjdHVyZVNldChzZXJpZXNJbnN0YW5jZVVpZCk7XG5cbiAgLy8gQ3JlYXRlIG5ldyBST0lDb250b3VycyBpbiB0aGUgd29ya2luZyBkaXJlY3RvcnkuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgUk9JQ29udG91ckNvbGxlY3Rpb24ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBST0lDb250b3VyID0gUk9JQ29udG91ckNvbGxlY3Rpb25baV07XG5cbiAgICBmcmVlaGFuZDNEU3RvcmUuc2V0dGVycy5ST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkLCAnREVGQVVMVCcsIFJPSUNvbnRvdXIubmFtZSwge1xuICAgICAgdWlkOiBST0lDb250b3VyLnVpZCxcbiAgICAgIHBvbHlnb25Db3VudDogUk9JQ29udG91ci5wb2x5Z29uQ291bnQsXG4gICAgICBjb2xvcjogUk9JQ29udG91ci5jb2xvclxuICAgIH0pO1xuICB9XG5cbiAgY29uc3QgdG9vbFN0YXRlTWFuYWdlciA9IGdsb2JhbFRvb2xTdGF0ZU1hbmFnZXIuc2F2ZVRvb2xTdGF0ZSgpO1xuXG4gIE9iamVjdC5rZXlzKHRvb2xTdGF0ZU1hbmFnZXIpLmZvckVhY2goZWxlbWVudElkID0+IHtcbiAgICAvLyBPbmx5IGdldCBwb2x5Z29ucyBmcm9tIHRoaXMgc2VyaWVzXG4gICAgaWYgKGdldFNlcmllc0luc3RhbmNlVWlkRnJvbUltYWdlSWQoZWxlbWVudElkKSA9PT0gc2VyaWVzSW5zdGFuY2VVaWQpIHtcbiAgICAgIC8vIGdyYWIgdGhlIGZyZWVoYW5kIHRvb2wgZm9yIHRoaXMgRElDT00gaW5zdGFuY2VcblxuICAgICAgaWYgKHRvb2xTdGF0ZU1hbmFnZXIgJiYgdG9vbFN0YXRlTWFuYWdlcltlbGVtZW50SWRdICYmIHRvb2xTdGF0ZU1hbmFnZXJbZWxlbWVudElkXS5mcmVlaGFuZFJvaSkge1xuICAgICAgICBjb25zdCB0b29sU3RhdGUgPSB0b29sU3RhdGVNYW5hZ2VyW2VsZW1lbnRJZF0uZnJlZWhhbmRSb2k7XG4gICAgICAgIGNvbnN0IHRvb2xEYXRhID0gdG9vbFN0YXRlLmRhdGE7XG5cbiAgICAgICAgbW92ZVBvbHlnb25zSW5JbnN0YW5jZSh3b3JraW5nU3RydWN0dXJlU2V0LCB0b29sRGF0YSwgc2VyaWVzSW5zdGFuY2VVaWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gUmVtb3ZlIG5hbWVkIHN0cnVjdHVyZVNldC5cbiAgZnJlZWhhbmQzRFN0b3JlLnNldHRlcnMuZGVsZXRlU3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCBzdHJ1Y3R1cmVTZXRVaWQpO1xuXG4gIGlmICh3b3JraW5nU3RydWN0dXJlU2V0LmFjdGl2ZVJPSUNvbnRvdXJJbmRleCA9PT0gbnVsbCkge1xuICAgIHdvcmtpbmdTdHJ1Y3R1cmVTZXQuYWN0aXZlUk9JQ29udG91ckluZGV4ID0gMDtcbiAgfVxufVxuXG4vKipcbiAqIE1vdmVzIHRoZSBST0lzIGRlZmluZWQgYnkgdGhlIHNlcmllc0luc3RhbmNlVWlkLCByb2lDb2xsZWN0aW9uTmFtZVxuICogYW5kIGV4cG9ydE1hc2sgZnJvbSB0aGUgd29ya2luZyBkaXJlY3RvcnkgdG8gYSBuZXcgbmFtZWQgcm9pQ29sbGVjdGlvbi5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IGV4cG9ydERhdGEgIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSByZXF1aXJlZCBpbmZvcm1hdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBleGVjdXRlIHRoZSBtb3ZlIG9wcGVyYXRpb24uXG4gKi9cbmZ1bmN0aW9uIG1vdmVQb2x5Z29uc0luSW5zdGFuY2Uod29ya2luZ1N0cnVjdHVyZVNldCwgdG9vbERhdGEsIHNlcmllc0luc3RhbmNlVWlkKSB7XG4gIGNvbnN0IGZyZWVoYW5kM0RTdG9yZSA9IG1vZHVsZXMuZnJlZWhhbmQzRDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRvb2xEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgZGF0YSA9IHRvb2xEYXRhW2ldO1xuXG4gICAgY29uc3QgcmVmZXJlbmNlZFJPSUNvbnRvdXIgPSBmcmVlaGFuZDNEU3RvcmUuZ2V0dGVycy5ST0lDb250b3VyKHNlcmllc0luc3RhbmNlVWlkLCAnREVGQVVMVCcsIGRhdGEuUk9JQ29udG91clVpZCk7XG5cbiAgICBjb25zdCByZWZlcmVuY2VkU3RydWN0dXJlU2V0ID0gZnJlZWhhbmQzRFN0b3JlLmdldHRlcnMuc3RydWN0dXJlU2V0KHNlcmllc0luc3RhbmNlVWlkLCAnREVGQVVMVCcpO1xuXG4gICAgZGF0YS5zdHJ1Y3R1cmVTZXRVaWQgPSAnREVGQVVMVCc7XG4gICAgZGF0YS5yZWZlcmVuY2VkUk9JQ29udG91ciA9IHJlZmVyZW5jZWRST0lDb250b3VyO1xuICAgIGRhdGEucmVmZXJlbmNlZFN0cnVjdHVyZVNldCA9IHJlZmVyZW5jZWRTdHJ1Y3R1cmVTZXQ7XG4gIH1cbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gX19XRUJQQUNLX0VYVEVSTkFMX01PRFVMRV9jb3JuZXJzdG9uZV9jb3JlX187IiwibW9kdWxlLmV4cG9ydHMgPSBfX1dFQlBBQ0tfRVhURVJOQUxfTU9EVUxFX2Nvcm5lcnN0b25lX21hdGhfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfY29ybmVyc3RvbmVfdG9vbHNfXzsiLCJtb2R1bGUuZXhwb3J0cyA9IF9fV0VCUEFDS19FWFRFUk5BTF9NT0RVTEVfcmVhY3RfXzsiXSwic291cmNlUm9vdCI6IiJ9