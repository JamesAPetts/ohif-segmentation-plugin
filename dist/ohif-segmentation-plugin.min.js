!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("react"),require("cornerstone-tools"),require("cornerstone-core"),require("cornerstone-math")):"function"==typeof define&&define.amd?define("ohif-segmentation-plugin",["react","cornerstone-tools","cornerstone-core","cornerstone-math"],n):"object"==typeof exports?exports["ohif-segmentation-plugin"]=n(require("react"),require("cornerstone-tools"),require("cornerstone-core"),require("cornerstone-math")):e["ohif-segmentation-plugin"]=n(e.react,e["cornerstone-tools"],e["cornerstone-core"],e["cornerstone-math"])}("undefined"!=typeof self?self:this,function(e,n,t,o){return function(e){var n={};function t(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(o,a,function(n){return e[n]}.bind(null,a));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=5)}([function(n,t){n.exports=e},function(e,t){e.exports=n},function(e,n){e.exports=t},function(e,n,t){"use strict";e.exports=function(e){var n,t,o,a,i,r,l,c,d,u,s,m,p=function(e){var n=e.currentArgs,t=e.previousArgs;C(n)||(g(n),S(n)?(f(n),D(n)):h(t))},C=function(e){return!0===s[e]},g=function(e){s[e]=!0},S=function(e){var n=b(y,[e]);return b(i,[n,l])},f=function(e){u.push(e),o.apply(void 0,e)},h=function(e){m[e]=e,a.apply(void 0,e)},D=function(e){for(var n=0;n<c.length;n+=1){for(var t=c[n],o=e.slice(0),a=0;a<e.length;a+=1)o[a]+=t[a];d.push({currentArgs:o,previousArgs:e})}},y=function(e){return n.apply(void 0,e)},b=function(e,n){try{return e.apply(void 0,n)}catch(e){}},T=function(){},M=function(e,n){return e===n},x=function(){return v(t.length).filter(function(e){var n=R(e);return 0!==n&&(1===n||r)})},v=function(e){for(var n=[],t=function(e){return e.split("").map(function(e){return parseInt(e,10)-1})},o=0;o<Math.pow(3,e);o+=1){var a=I(o.toString(3),"0",e);n.push(t(a))}return n},I=function(e,n,t){return(new Array(t+1).join(n)+e).slice(-t)},R=function(e){for(var n=0,t=0;t<e.length;t+=1)0!==e[t]&&(n+=1);return n},L=function(){var e=[];for(var n in m)m.hasOwnProperty(n)&&e.unshift(m[n]);return e};return n=e.getter,t=e.seed,o=e.onFlood||T,a=e.onBoundary||T,i=e.equals||M,r=e.diagonals||!1,l=y(t),c=x(),d=[],u=[],s={},m={},function(){for(d.push({currentArgs:t});d.length>0;)p(d.pop());return{flooded:u,boundaries:L()}}()}},function(e,n){e.exports=o},function(e,n,t){"use strict";t.r(n);var o=t(1),a=t.n(o),i=t(2),r=t.n(i),l=function(){var e=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(e+=performance.now()),"x.x.x.x.x.x.xxxx.xxx.x.x.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[xy]/g,function(n){var t=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===n?t:3&t|8).toString(16)})};function c(e){if(e){var n=e.image.imageId;return r.a.metaData.get("generalSeriesModule",n).seriesInstanceUID}}var d={seriesCollection:[],interpolate:!1,displayStats:!1};function u(e,n){if(!e)throw new Error("Insufficient information provided, must provide ".concat(n,"."))}function s(e){return u(e,"seriesInstanceUid"),d.seriesCollection.find(function(n){return n.uid===e})}function m(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT";u(n,"structureSetUid");var t=s(e);if(t)return t.structureSetCollection.find(function(e){return e.uid===n})}function p(e,n,t){u(t,"ROIContourUid");var o=m(e,n);if(o)return o.ROIContourCollection.find(function(e){return e&&e.uid===t})}function C(e){u(e);var n={uid:e,activeStructureSetIndex:null,structureSetCollection:[]};d.seriesCollection.push(n),g(e,"default",{uid:"DEFAULT"})}function g(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(n,"name");var o=s(e);o||(C(e),o=s(e));var a={uid:t.uid?t.uid:l(),name:n,isLocked:!!t.isLocked&&t.isLocked,visible:!t.visible||t.visible,activeROIContourIndex:void 0!==t.activeROIContourIndex?t.activeROIContourIndex:null,ROIContourCollection:[]};o.structureSetCollection.push(a)}function S(e,n,t){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};u(t,"name");var a=m(e,n);if(!a)throw new Error("Cannot generate ROIContour, as the structureSet with ".concat(n," does not exist."));var i={uid:o.uid?o.uid:l(),name:t,color:o.color?o.color:function(){++y>=D.length&&(y=0);return D[y]}(),polygonCount:o.polygonCount?o.polygonCount:0};return a.ROIContourCollection.push(i),i.uid}var f={series:C,structureSet:g,ROIContour:S,ROIContourAndSetIndexActive:function(e,n,t){S(e,n,t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:{});var o=m(e,n),a=o.ROIContourCollection.length-1;return o.activeROIContourIndex=a,a},deleteROIFromStructureSet:function(e,n,t){var o=m(e,n).ROIContourCollection,a=o.findIndex(function(e){return e.uid===t});o.splice(a,1)},deleteStructureSet:function(e,n){var t=s(e).structureSetCollection,o=t.findIndex(function(e){return e.uid===n});t.splice(o,1)},structureSetName:function(e,n,t){u(e,"name"),m(n,t).name=e},ROIContourName:function(e,n,t,o){u(e,"name"),p(n,t,o).name=e},activeStructureSetIndex:function(e,n){u(e,"index"),s(n).activeStructureSetIndex=e},activeStructureSet:function(e,n){u(n,"structureSetUid");var t=s(e),o=t.structureSetCollection.findIndex(function(e){return e.uid===n});t.activeStructureSetIndex=o},activeROIContourIndex:function(e,n){m(n,arguments.length>2&&void 0!==arguments[2]?arguments[2]:"DEFAULT").activeROIContourIndex=e},activeROIContour:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT",t=arguments.length>2?arguments[2]:void 0;u(t,"ROIContourUid");var o=m(e,n),a=o.ROIContourCollection.findIndex(function(e){return e.uid===t});o.activeROIContourIndex=a},incrementPolygonCount:function(e,n,t){p(e,n,t).polygonCount++},decrementPolygonCount:function(e,n,t){p(e,n,t).polygonCount--},toggleInterpolate:function(){d.interpolate=!d.interpolate},toggleDisplayStats:function(){d.displayStats=!d.displayStats}};var h={state:d,enabledElementCallback:function(e){var n=r.a.getEnabledElement(e);if(n.image){var t=c(n);s(t)||C(t)}},getters:{series:s,structureSet:m,ROIContour:p,ROIContourIndex:function(e,n,t){u(t,"ROIContourUid");var o=m(e,n);if(o)return o.ROIContourCollection.findIndex(function(e){return e.uid===t})},activeStructureSetIndex:function(e){return s(e).activeStructureSetIndex},activeROIContourIndex:function(e){return m(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT").activeROIContourIndex},activeROIContour:function(e){var n=m(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT"),t=n.activeROIContourIndex;if(null!=t)return n.ROIContourCollection[t]}},setters:f},D=["cornflowerblue","firebrick","goldenrod","blueviolet","indianred","orange","mediumturquoise","lightcoral","khaki","darkmagenta","lightseagreen","tomato","aquamarine","darksalmon","moccasin","orchid","skyblue","peru"],y=D.length;var b=JSON.parse('{\n  "SegmentationCategoryTypeContextName": "Segmentation category and type - 3D Slicer General Anatomy list",\n  "@schema": "https://raw.githubusercontent.com/qiicr/dcmqi/master/doc/schemas/segment-context-schema.json#",\n  "SegmentationCodes": {\n    "Category": [\n      {\n        "CodeMeaning": "Tissue",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "85756007",\n        "cid": "7051",\n        "UMLSConceptUID": "C0040300",\n        "CodeValue": "T-D0050",\n        "contextGroupName": "Segmentation Property Categories",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              128,\n              174,\n              128\n            ],\n            "CodeMeaning": "Tissue",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tissue",\n            "cid": "7166",\n            "UMLSConceptUID": "C0040300",\n            "CodeValue": "T-D0050",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "85756007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              101,\n              79\n            ],\n            "CodeMeaning": "Artery",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "artery",\n            "cid": "7166",\n            "UMLSConceptUID": "C0555806",\n            "CodeValue": "T-41066",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "275989006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              230,\n              220,\n              70\n            ],\n            "CodeMeaning": "Body fat",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "fat",\n            "cid": "7166",\n            "UMLSConceptUID": "C0344335",\n            "CodeValue": "F-03D38",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "248300009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              241,\n              214,\n              145\n            ],\n            "CodeMeaning": "Bone",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "bone",\n            "cid": "7166",\n            "UMLSConceptUID": "C0262950",\n            "CodeValue": "T-D016E",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "272673000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              183,\n              156,\n              220\n            ],\n            "CodeMeaning": "Capillary",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "capillary",\n            "cid": "7166",\n            "UMLSConceptUID": "C0006901",\n            "CodeValue": "T-40050",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "20982000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              111,\n              184,\n              210\n            ],\n            "CodeMeaning": "Cartilage",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cartilage",\n            "cid": "7166",\n            "UMLSConceptUID": "C0007301",\n            "CodeValue": "T-D021B",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "309312004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              111,\n              184,\n              210\n            ],\n            "CodeMeaning": "Connective tissue",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "connective tissue",\n            "cid": "7166",\n            "UMLSConceptUID": "C0009780",\n            "CodeValue": "T-1A200",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "21793004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              183,\n              214,\n              211\n            ],\n            "CodeMeaning": "Ligament",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "ligament",\n            "cid": "7166",\n            "UMLSConceptUID": "C0023685",\n            "CodeValue": "T-18010",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "52082005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              68,\n              172,\n              100\n            ],\n            "CodeMeaning": "Lymph node",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lymph node",\n            "cid": "7166",\n            "UMLSConceptUID": "C0024204",\n            "CodeValue": "T-C4000",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "59441001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              111,\n              197,\n              131\n            ],\n            "CodeMeaning": "Lymphatic vessel",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lymphatic vessel",\n            "cid": "7166",\n            "UMLSConceptUID": "C0229889",\n            "CodeValue": "T-C6010",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "83555006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              178,\n              212,\n              242\n            ],\n            "CodeMeaning": "Meniscus",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "meniscus",\n            "cid": "7166",\n            "UMLSConceptUID": "C0224498",\n            "CodeValue": "T-15009",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "74135004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              192,\n              104,\n              88\n            ],\n            "CodeMeaning": "Muscle",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscle",\n            "cid": "7166",\n            "UMLSConceptUID": "C0026845",\n            "CodeValue": "T-13001",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "71616004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              214,\n              49\n            ],\n            "CodeMeaning": "Nerve",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "nerve",\n            "cid": "7166",\n            "UMLSConceptUID": "C1268169",\n            "CodeValue": "T-D0598",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "119410002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              221,\n              130,\n              101\n            ],\n            "CodeMeaning": "Organ",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "organ",\n            "cid": "7166",\n            "UMLSConceptUID": "C1285092",\n            "CodeValue": "T-1A310",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "2861001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "CodeMeaning": "Skin",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skin",\n            "cid": "7166",\n            "UMLSConceptUID": "C1123023",\n            "CodeValue": "T-01000",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "39937001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              152,\n              189,\n              207\n            ],\n            "CodeMeaning": "Tendon",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tendon",\n            "cid": "7166",\n            "UMLSConceptUID": "C0039508",\n            "CodeValue": "T-17010",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "13024002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              0,\n              151,\n              206\n            ],\n            "CodeMeaning": "Vein",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "vein",\n            "cid": "7166",\n            "UMLSConceptUID": "C0447146",\n            "CodeValue": "T-4806E",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "181378009"\n          }\n        ],\n        "showAnatomy": true\n      },\n      {\n        "CodeMeaning": "Anatomical Structure",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "123037004",\n        "cid": "7051",\n        "UMLSConceptUID": "C1268086",\n        "CodeValue": "T-D000A",\n        "contextGroupName": "Segmentation Property Categories",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "abdomen",\n            "CodeValue": "T-D4000",\n            "UMLSConceptUID": "C0000726",\n            "CodeMeaning": "Abdomen",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "113345001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              186,\n              124,\n              161\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "abdominal cavity",\n            "CodeValue": "T-D4010",\n            "UMLSConceptUID": "C0230168",\n            "CodeMeaning": "Abdominal cavity",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "52731004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              171,\n              85,\n              68\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of abdominal wall",\n            "CodeValue": "T-14001",\n            "UMLSConceptUID": "C1279385",\n            "CodeMeaning": "Abdominal wall muscle",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "195879000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              60,\n              143,\n              83\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "adenohypophysis",\n            "CodeValue": "T-B1100",\n            "UMLSConceptUID": "C0032008",\n            "CodeMeaning": "Adenohypophysis",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "62818001"\n          },\n          {\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "cid": "7154",\n            "CodeMeaning": "Adrenal gland",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0001625",\n            "CodeValue": "T-B3000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  249,\n                  186,\n                  150\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right adrenal gland",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  249,\n                  186,\n                  150\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left adrenal gland",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "23451007"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Amygdala",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0002708",\n            "CodeValue": "T-A3230",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  98,\n                  153,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right amygdaloid complex",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  98,\n                  153,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left amygdaloid complex",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "4958002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              224,\n              199\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "anus",\n            "CodeValue": "T-59900",\n            "UMLSConceptUID": "C0003461",\n            "CodeMeaning": "Anus",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "53505006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              224,\n              97,\n              76\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "aorta",\n            "CodeValue": "T-42000",\n            "UMLSConceptUID": "C0003483",\n            "CodeMeaning": "Aorta",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "15825003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              218,\n              123,\n              97\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "aortic valve",\n            "CodeValue": "T-35400",\n            "UMLSConceptUID": "C0003501",\n            "CodeMeaning": "Aortic Valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "34202007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "arachnoid",\n            "CodeValue": "T-A1220",\n            "UMLSConceptUID": "C0003707",\n            "CodeMeaning": "Arachnoid",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "75042008"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Arcuate Fasciculus",\n            "CodingSchemeDesignator": "FMA",\n            "UMLSConceptUID": "C2329633",\n            "CodeValue": "276650",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  125,\n                  102,\n                  154\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right arcuate fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  125,\n                  102,\n                  154\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left arcuate fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": ""\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              226,\n              77\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "autonomic nerve",\n            "CodeValue": "T-A9605",\n            "UMLSConceptUID": "C0206250",\n            "CodeMeaning": "Autonomic nerve",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "53520000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              0,\n              145,\n              30\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "biliary tree",\n            "CodeValue": "T-60610",\n            "UMLSConceptUID": "C0005400",\n            "CodeMeaning": "Bile Duct",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "28273000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              222,\n              154,\n              132\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urinary bladder",\n            "CodeValue": "T-74000",\n            "UMLSConceptUID": "C0005682",\n            "CodeMeaning": "Bladder",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "89837001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              239,\n              172\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skeleton of thorax",\n            "CodeValue": "T-D0170",\n            "UMLSConceptUID": "C0448157",\n            "CodeMeaning": "Bone of thorax",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "272710004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              242,\n              206,\n              142\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skeleton of neck",\n            "CodeValue": "T-D006D",\n            "UMLSConceptUID": "C0730130",\n            "CodeMeaning": "Bone structure of head and/or neck",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "312779009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              250,\n              225\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "brain",\n            "CodeValue": "T-A0100",\n            "UMLSConceptUID": "C0006104",\n            "CodeMeaning": "Brain",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "12738006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              85,\n              188,\n              255\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "CSF space",\n            "CodeValue": "T-A0109",\n            "UMLSConceptUID": "C0459387",\n            "CodeMeaning": "Brain cerebrospinal fluid pathway",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "280371009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "ventricles of brain",\n            "CodeValue": "T-A1600",\n            "UMLSConceptUID": "C0007799",\n            "CodeMeaning": "Brain ventricle",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "35764002"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Caudate nucleus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0007461",\n            "CodeValue": "T-A3200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  30,\n                  111,\n                  85\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right caudate nucleus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  30,\n                  111,\n                  85\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left caudate nucleus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "11000004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              214,\n              49\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "central nervous system",\n            "CodeValue": "T-A0090",\n            "UMLSConceptUID": "C0927232",\n            "CodeMeaning": "Central nervous system",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "21483005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              194,\n              195,\n              164\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebellar white matter",\n            "CodeValue": "T-A6080",\n            "UMLSConceptUID": "C0152381",\n            "CodeMeaning": "Cerebellar white matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "33060004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebral aqueduct",\n            "CodeValue": "T-A1800",\n            "UMLSConceptUID": "C0007769",\n            "CodeMeaning": "Cerebral aqueduct",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "80447000"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Cerebral fornix",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152334",\n            "CodeValue": "T-A2970",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  64,\n                  123,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right fornix",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  64,\n                  123,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left fornix",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "87463005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              128,\n              174,\n              128\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebral cortex",\n            "CodeValue": "T-A2020",\n            "UMLSConceptUID": "C0007776",\n            "CodeMeaning": "Cerebral Grey Matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "40146001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              250,\n              225\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebral white matter",\n            "CodeValue": "T-A2030",\n            "UMLSConceptUID": "C0152295",\n            "CodeMeaning": "Cerebral White Matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "68523003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              255,\n              207\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cervical vertebral column",\n            "CodeValue": "T-11501",\n            "UMLSConceptUID": "C0728985",\n            "CodeMeaning": "Cervical spine",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "122494005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              188,\n              95,\n              76\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of thoracic wall",\n            "CodeValue": "T-14122",\n            "UMLSConceptUID": "C1269825",\n            "CodeMeaning": "Chest wall muscle",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "372074006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Cingulum",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228272",\n            "CodeValue": "T-A2840",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  146,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right cingulum bundle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  146,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left cingulum bundle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "37035000"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Clavicle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0008913",\n            "CodeValue": "T-12310",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  205,\n                  179,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right clavicle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  205,\n                  179,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left clavicle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "51299004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              204,\n              168,\n              143\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "colon",\n            "CodeValue": "T-59300",\n            "UMLSConceptUID": "C0009368",\n            "CodeMeaning": "Colon",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "71854001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              97,\n              113,\n              158\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "corpus callosum",\n            "CodeValue": "T-A2700",\n            "UMLSConceptUID": "C0010090",\n            "CodeMeaning": "Corpus callosum",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "88442005"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Corpus striatum",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0010097",\n            "CodeValue": "T-A3100",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  140,\n                  190\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right striatum",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  140,\n                  190\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left striatum",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "31428008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              234,\n              92\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cranial nerves",\n            "CodeValue": "T-A8000",\n            "UMLSConceptUID": "C0010268",\n            "CodeMeaning": "Cranial nerve",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "25238003"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Diencephalon",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0012144",\n            "CodeValue": "T-A0102",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  69,\n                  110,\n                  53\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "diencephalon",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              }\n            ],\n            "SNOMEDCTConceptID": "87563008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              253,\n              229\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "duodenum",\n            "CodeValue": "T-58200",\n            "UMLSConceptUID": "C0013303",\n            "CodeMeaning": "Duodenum",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "38848004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "dura mater",\n            "CodeValue": "T-A1120",\n            "UMLSConceptUID": "C0013313",\n            "CodeMeaning": "Dura mater",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "18545000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              211,\n              171,\n              143\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "esophagus",\n            "CodeValue": "T-56000",\n            "UMLSConceptUID": "C0014876",\n            "CodeMeaning": "Esophagus",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "32849002"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "External ear",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0013453",\n            "CodeValue": "T-AB100",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  122,\n                  90\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right external ear",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  122,\n                  90\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left external ear",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "28347008"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Eyeball",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0229242",\n            "CodeValue": "T-AA770",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  194,\n                  142,\n                  0\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right eyeball",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  194,\n                  142,\n                  0\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left eyeball",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "79652003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              185,\n              135,\n              134\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "female external genitalia",\n            "CodeValue": "T-80010",\n            "UMLSConceptUID": "C0227747",\n            "CodeMeaning": "Female external genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "86969008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              170,\n              147\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "female internal genitalia",\n            "CodeValue": "T-80020",\n            "UMLSConceptUID": "C0227748",\n            "CodeMeaning": "Female internal genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "87759004"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Foot",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016504",\n            "CodeValue": "T-D9700",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right foot",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left foot",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "56459004"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Forearm",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016536",\n            "CodeValue": "T-D8500",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right forearm",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left forearm",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "14975008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "fourth ventricle",\n            "CodeValue": "T-A1820",\n            "UMLSConceptUID": "C0149556",\n            "CodeMeaning": "Fourth ventricle",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "35918002"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Frontal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016732",\n            "CodeValue": "T-11110",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  203,\n                  179,\n                  77\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right frontal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  203,\n                  179,\n                  77\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left frontal bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "74872008"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Frontal lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016733",\n            "CodeValue": "T-A2200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  83,\n                  146,\n                  164\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right frontal lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  83,\n                  146,\n                  164\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left frontal lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "83251001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              139,\n              150,\n              98\n            ],\n            "cid": "4040",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "gallbladder",\n            "CodeValue": "T-63000",\n            "UMLSConceptUID": "C0016976",\n            "CodeMeaning": "Gallbladder",\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "SNOMEDCTConceptID": "28231008"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Globus pallidus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0017651",\n            "CodeValue": "T-A3500",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  48,\n                  129,\n                  126\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right pallidum",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  48,\n                  129,\n                  126\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left pallidum",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "14738005"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Hand",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0018563",\n            "CodeValue": "T-D8700",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right hand",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left hand",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "85562004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "head",\n            "CodeValue": "T-D1100",\n            "UMLSConceptUID": "C0018670",\n            "CodeMeaning": "Head",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "69536005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              206,\n              110,\n              84\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "heart",\n            "CodeValue": "T-32000",\n            "UMLSConceptUID": "C0018787",\n            "CodeMeaning": "Heart",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "80891009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              210,\n              139\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "hyoid bone",\n            "CodeValue": "T-11190",\n            "UMLSConceptUID": "C0020417",\n            "CodeMeaning": "Hyoid bone",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "21387005"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Inferior cerebellar peduncle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152393",\n            "CodeValue": "T-A6640",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  186,\n                  135,\n                  135\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right inferior cerebellar peduncle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  186,\n                  135,\n                  135\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left inferior cerebellar peduncle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "67701001"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Inferior longitudinal fasciculus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228273",\n            "CodeValue": "T-A2850",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  159,\n                  116,\n                  163\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right inferior longitudinal fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  159,\n                  116,\n                  163\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left inferior longitudinal fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "55233005"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Inner ear",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0022889",\n            "CodeValue": "T-AB700",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  147,\n                  118\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right inner ear",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  147,\n                  118\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left inner ear",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "22945000"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Insula",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0021640",\n            "CodeValue": "T-A2610",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  188,\n                  135,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right insular lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  188,\n                  135,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left insular lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "36169008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              233,\n              138,\n              112\n            ],\n            "cid": "6116",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "atrial septum",\n            "CodeValue": "T-32150",\n            "UMLSConceptUID": "C0225836",\n            "CodeMeaning": "Interatrial septum",\n            "contextGroupName": "Muscular Anatomy",\n            "SNOMEDCTConceptID": "58095006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              195,\n              100,\n              73\n            ],\n            "cid": "6116",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "ventricular septum",\n            "CodeValue": "T-32410",\n            "UMLSConceptUID": "C0225870",\n            "CodeMeaning": "Interventricular septum",\n            "contextGroupName": "Muscular Anatomy",\n            "SNOMEDCTConceptID": "589001"\n          },\n          {\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "cid": "7154",\n            "CodeMeaning": "Kidney",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0022646",\n            "CodeValue": "T-71000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  185,\n                  102,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right kidney",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  185,\n                  102,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left kidney",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "64033007"\n          },\n          {\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "cid": "4040",\n            "CodeMeaning": "Knee",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C1456798",\n            "CodeValue": "T-D9200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right knee",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left knee",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "72696002"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Lacrimal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0222733",\n            "CodeValue": "T-1115A",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  250,\n                  160\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lacrimal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              }\n            ],\n            "SNOMEDCTConceptID": "6229007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              150,\n              208,\n              243\n            ],\n            "cid": "4040",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "larynx",\n            "CodeValue": "T-24100",\n            "UMLSConceptUID": "C0023078",\n            "CodeMeaning": "Larynx",\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "SNOMEDCTConceptID": "4596009"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Lateral corticospinal tract",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152402",\n            "CodeValue": "T-A7093",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  160,\n                  133\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right corticospinal tract",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  160,\n                  133\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left corticospinal tract",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "461002"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Lateral ventricle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152279",\n            "CodeValue": "T-A1650",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  88,\n                  106,\n                  215\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lateral ventricle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  88,\n                  106,\n                  215\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left lateral ventricle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "66720007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              152,\n              55,\n              13\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "left ventricle of heart",\n            "CodeValue": "T-32600",\n            "UMLSConceptUID": "C0225897",\n            "CodeMeaning": "Left Ventricle",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "87878005"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Limbic lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0458337",\n            "CodeValue": "T-A0036",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  150,\n                  201\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right limbic lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  150,\n                  201\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left limbic lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "279215006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              188,\n              91,\n              95\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lips",\n            "CodeValue": "T-52000",\n            "UMLSConceptUID": "C0023759",\n            "CodeMeaning": "Lip",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "48477009"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Lower leg",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C1140621",\n            "CodeValue": "T-D9400",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right leg",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left leg",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "30021000"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Lower limb",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0023216",\n            "CodeValue": "T-D9000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lower limb",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left lower limb",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "61685007"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Lower lobe of lung",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0225758",\n            "CodeValue": "T-28830",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  224,\n                  186,\n                  162\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "inferior lobe of right lung",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  224,\n                  186,\n                  162\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "inferior lobe of left lung",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "90572001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              212,\n              188,\n              102\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lumbar vertebral column",\n            "CodeValue": "T-11503",\n            "UMLSConceptUID": "C0024091",\n            "CodeMeaning": "Lumbar spine",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "122496007"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Lung",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0024109",\n            "CodeValue": "T-28000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  197,\n                  165,\n                  145\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lung",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  197,\n                  165,\n                  145\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left lung",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "39607008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              185,\n              135,\n              134\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "male external genitalia",\n            "CodeValue": "T-90010",\n            "UMLSConceptUID": "C0227922",\n            "CodeMeaning": "Male external genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "90418005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              146,\n              127\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "male internal genitalia",\n            "CodeValue": "T-90020",\n            "UMLSConceptUID": "C0227923",\n            "CodeMeaning": "Male internal genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "38242008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              222,\n              198,\n              101\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mandible",\n            "CodeValue": "T-11180",\n            "UMLSConceptUID": "C0024687",\n            "CodeMeaning": "Mandible",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "91609006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Medial Lemniscus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228420",\n            "CodeValue": "T-A5271",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  140,\n                  103\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right medial lemniscus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  140,\n                  103\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left medial lemniscus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "30114003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mediastinum",\n            "CodeValue": "T-D3300",\n            "UMLSConceptUID": "C0025066",\n            "CodeMeaning": "Mediastinum",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "72410000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "meninges",\n            "CodeValue": "T-A1110",\n            "UMLSConceptUID": "C0025285",\n            "CodeMeaning": "Meninges",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "1231004"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Middle cerebellar peduncle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152392",\n            "CodeValue": "T-A6630",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  148,\n                  120,\n                  72\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right middle cerebellar peduncle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  148,\n                  120,\n                  72\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left middle cerebellar peduncle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "33723005"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Middle ear",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0013455",\n            "CodeValue": "T-AB300",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  112,\n                  73\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right middle ear",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  112,\n                  73\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left middle ear",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "25342003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              202,\n              164,\n              140\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "middle lobe of right lung",\n            "CodeValue": "T-28300",\n            "UMLSConceptUID": "C0225757",\n            "CodeMeaning": "Middle lobe of right lung",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "72481006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              159,\n              63,\n              27\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mitral valve",\n            "CodeValue": "T-35300",\n            "UMLSConceptUID": "C0026264",\n            "CodeMeaning": "Mitral Valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "91134007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              201,\n              121,\n              77\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of head",\n            "CodeValue": "T-13100",\n            "UMLSConceptUID": "C0224097",\n            "CodeMeaning": "Muscle of head",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "22688005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              213,\n              124,\n              109\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of neck",\n            "CodeValue": "T-13300",\n            "UMLSConceptUID": "C0027532",\n            "CodeMeaning": "Muscle of neck",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "81727001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "neck",\n            "CodeValue": "T-D1600",\n            "UMLSConceptUID": "C0027530",\n            "CodeMeaning": "Neck",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "45048000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              92,\n              162,\n              109\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "neurohypophysis",\n            "CodeValue": "T-B1200",\n            "UMLSConceptUID": "C0032009",\n            "CodeMeaning": "Neurohypophysis",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "37512009"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Occipital lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0028785",\n            "CodeValue": "T-A2400",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  182,\n                  166,\n                  110\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right occipital lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  182,\n                  166,\n                  110\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left occipital lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "31065004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              234,\n              234,\n              194\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "omentum",\n            "CodeValue": "T-D4600",\n            "UMLSConceptUID": "C0028977",\n            "CodeMeaning": "Omentum",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "27398004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              99,\n              106,\n              24\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "optic chiasm",\n            "CodeValue": "T-A800B",\n            "UMLSConceptUID": "C0029126",\n            "CodeMeaning": "Optic chiasm",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "244453006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Optic radiation",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228277",\n            "CodeValue": "T-A2880",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  78,\n                  152,\n                  141\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right optic radiation",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  78,\n                  152,\n                  141\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left optic radiation",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "70105001"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Optic tract",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152405",\n            "CodeValue": "T-A8060",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  156,\n                  171,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right optic tract",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  156,\n                  171,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left optic tract",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "53238003"\n          },\n          {\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "cid": "7160",\n            "CodeMeaning": "Ovary",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0029939",\n            "CodeValue": "T-87000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  213,\n                  141,\n                  113\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right ovary",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  213,\n                  141,\n                  113\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left ovary",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "15497006"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Palatine bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0222734",\n            "CodeValue": "T-11160",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  242,\n                  217,\n                  123\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right palatine bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  242,\n                  217,\n                  123\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left palatine bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "51283005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              249,\n              180,\n              111\n            ],\n            "cid": "4030",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pancreas",\n            "CodeValue": "T-65000",\n            "UMLSConceptUID": "C0030274",\n            "CodeMeaning": "Pancreas",\n            "contextGroupName": "CT, MR and PET Anatomy Imaged",\n            "SNOMEDCTConceptID": "15776009"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Parietal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0030558",\n            "CodeValue": "T-11120",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  204,\n                  109\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right parietal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  204,\n                  109\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left parietal bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "24924006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Parietal lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0030560",\n            "CodeValue": "T-A2300",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  141,\n                  93,\n                  137\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right parietal lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  141,\n                  93,\n                  137\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left parietal lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "16630005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              184,\n              122,\n              154\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pericardial cavity",\n            "CodeValue": "T-39050",\n            "UMLSConceptUID": "C0225972",\n            "CodeMeaning": "Pericardial cavity",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "25489000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pericardium",\n            "CodeValue": "T-39000",\n            "UMLSConceptUID": "C0031050",\n            "CodeMeaning": "Pericardium",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "76848001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              224,\n              194,\n              0\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peripheral nerve",\n            "CodeValue": "T-A0500",\n            "UMLSConceptUID": "C0031119",\n            "CodeMeaning": "Peripheral nerve",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "84782009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              186,\n              0\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peripheral nervous system",\n            "CodeValue": "T-A0140",\n            "UMLSConceptUID": "C0206417",\n            "CodeMeaning": "Peripheral nervous system",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "3058005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              255,\n              220\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peritoneum",\n            "CodeValue": "T-D4400",\n            "UMLSConceptUID": "C0031153",\n            "CodeMeaning": "Peritioneum",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "15425007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              204,\n              142,\n              178\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peritoneal cavity",\n            "CodeValue": "T-D4425",\n            "UMLSConceptUID": "C1704247",\n            "CodeMeaning": "Peritoneal cavity",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "83670000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              184,\n              105,\n              108\n            ],\n            "cid": "4040",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pharynx",\n            "CodeValue": "T-55000",\n            "UMLSConceptUID": "C0031354",\n            "CodeMeaning": "Pharynx",\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "SNOMEDCTConceptID": "54066008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pia mater",\n            "CodeValue": "T-A1280",\n            "UMLSConceptUID": "C0031869",\n            "CodeMeaning": "Pia mater",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "23180006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              253,\n              135,\n              192\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pineal gland",\n            "CodeValue": "T-B2000",\n            "UMLSConceptUID": "C0031939",\n            "CodeMeaning": "Pineal Gland",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "45793000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              57,\n              157,\n              110\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pituitary gland",\n            "CodeValue": "T-B1000",\n            "UMLSConceptUID": "C0032005",\n            "CodeMeaning": "Pituitary",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "56329008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              126,\n              161,\n              197\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "posterior commissure",\n            "CodeValue": "T-A4904",\n            "UMLSConceptUID": "C0152327",\n            "CodeMeaning": "Posterior cerebral commissure",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "279336005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              230,\n              158,\n              140\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "prostate",\n            "CodeValue": "T-92000",\n            "UMLSConceptUID": "C0033572",\n            "CodeMeaning": "Prostate",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "41216001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              225,\n              130,\n              104\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pulmonary valve",\n            "CodeValue": "T-35200",\n            "UMLSConceptUID": "C0034086",\n            "CodeMeaning": "Pulmonary valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "39057004"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Putamen",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0034169",\n            "CodeValue": "T-A3400",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  210,\n                  157,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right putamen",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  210,\n                  157,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left putamen",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "89278009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              180,\n              119,\n              153\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "retroperitoneal space",\n            "CodeValue": "T-D4900",\n            "UMLSConceptUID": "C0035359",\n            "CodeMeaning": "Retroperitoneal space",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "82849001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              181,\n              85,\n              57\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "right ventricle of heart",\n            "CodeValue": "T-32500",\n            "UMLSConceptUID": "C0225883",\n            "CodeMeaning": "Right Ventricle",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "53085002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              70,\n              163,\n              117\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "salivary glands",\n            "CodeValue": "T-61007",\n            "UMLSConceptUID": "C0036098",\n            "CodeMeaning": "Salivary gland",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "385294005"\n          },\n          {\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "cid": "7160",\n            "CodeMeaning": "Seminal Vesicle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0036628",\n            "CodeValue": "T-93000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  245,\n                  172,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right seminal vesicle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  245,\n                  172,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left seminal vesicle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "64739004"\n          },\n          {\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "cid": "4040",\n            "CodeMeaning": "Shoulder",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0037004",\n            "CodeValue": "T-D2220",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right shoulder",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left shoulder",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "16982005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              124,\n              92\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skin of abdominal wall",\n            "CodeValue": "T-02480",\n            "UMLSConceptUID": "C0222166",\n            "CodeMeaning": "Skin of abdomen",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "75093004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              173,\n              121,\n              88\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skin of thoracic wall",\n            "CodeValue": "T-02424",\n            "UMLSConceptUID": "C0222149",\n            "CodeMeaning": "Skin of chest",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "74160004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              241,\n              213,\n              144\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skull",\n            "CodeValue": "T-11100",\n            "UMLSConceptUID": "C0037303",\n            "CodeMeaning": "Skull",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "89546000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              205,\n              167,\n              142\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "small bowel",\n            "CodeValue": "T-58000",\n            "UMLSConceptUID": "C0021852",\n            "CodeMeaning": "Small Intestine",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "30315005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              182,\n              105,\n              107\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "soft palate",\n            "CodeValue": "T-51120",\n            "UMLSConceptUID": "C0030219",\n            "CodeMeaning": "Soft palate",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "49460000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              214,\n              49\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "spinal cord",\n            "CodeValue": "T-A7010",\n            "UMLSConceptUID": "C0037925",\n            "CodeMeaning": "Spinal cord",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "2748008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              200,\n              200,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "gray matter of spinal cord",\n            "CodeValue": "T-A7020",\n            "UMLSConceptUID": "C0475853",\n            "CodeMeaning": "Spinal cord gray matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "12958003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              250,\n              225\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "white matter of spinal cord",\n            "CodeValue": "T-A7070",\n            "UMLSConceptUID": "C0458457",\n            "CodeMeaning": "Spinal cord white matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "27088001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              217,\n              154\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "sternum",\n            "CodeValue": "T-11210",\n            "UMLSConceptUID": "C0038293",\n            "CodeMeaning": "Sternum",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "56873002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              132,\n              105\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "stomach",\n            "CodeValue": "T-57000",\n            "UMLSConceptUID": "C0038351",\n            "CodeMeaning": "Stomach",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "69695003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "subarachnoid space",\n            "CodeValue": "T-A1500",\n            "UMLSConceptUID": "C0038527",\n            "CodeMeaning": "Subarachnoid space",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "35951006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Substantia nigra",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0038590",\n            "CodeValue": "T-A5160",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  0,\n                  108,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right substantia nigra",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  0,\n                  108,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left substantia nigra",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "70007007"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Superior longitudinal fasciculus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228270",\n            "CodeValue": "T-A2820",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  127,\n                  150,\n                  88\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right superior longitudinal fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  127,\n                  150,\n                  88\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left superior longitudinal fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "89202009"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Temporal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0039484",\n            "CodeValue": "T-11130",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  243,\n                  152\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right temporal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  243,\n                  152\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left temporal bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "60911003"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Temporal lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0039485",\n            "CodeValue": "T-A2500",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  162,\n                  115,\n                  105\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right temporal lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  162,\n                  115,\n                  105\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left temporal lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "78277001"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Thalamus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0458271",\n            "CodeValue": "T-D0593",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  122,\n                  101,\n                  38\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right thalamus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  122,\n                  101,\n                  38\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left thalamus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "119406000"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Thigh",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0039866",\n            "CodeValue": "T-D9100",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right thigh",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left thigh",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "68367000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              226,\n              202,\n              134\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thoracic vertebral column",\n            "CodeValue": "T-11502",\n            "UMLSConceptUID": "C0581269",\n            "CodeMeaning": "Thoracic spine",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "122495006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thorax",\n            "CodeValue": "T-D3000",\n            "UMLSConceptUID": "C0817096",\n            "CodeMeaning": "Thorax",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "51185008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              47,\n              150,\n              103\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thymus",\n            "CodeValue": "T-C8000",\n            "UMLSConceptUID": "C0040113",\n            "CodeMeaning": "Thymus",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "9875009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              62,\n              162,\n              114\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thyroid gland",\n            "CodeValue": "T-B6000",\n            "UMLSConceptUID": "C0040132",\n            "CodeMeaning": "Thyroid",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "69748006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              166,\n              84,\n              94\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tongue",\n            "CodeValue": "T-53000",\n            "UMLSConceptUID": "C0040408",\n            "CodeMeaning": "Tongue",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "21974007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              250,\n              220\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "teeth",\n            "CodeValue": "T-54010",\n            "UMLSConceptUID": "C0040426",\n            "CodeMeaning": "Tooth",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "38199008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              182,\n              228,\n              255\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "trachea",\n            "CodeValue": "T-25000",\n            "UMLSConceptUID": "C0040578",\n            "CodeMeaning": "Trachea",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "44567001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              166,\n              70,\n              38\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tricuspid valve",\n            "CodeValue": "T-35100",\n            "UMLSConceptUID": "C0040960",\n            "CodeMeaning": "Tricuspid Valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "46030003"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Uncinate fasciculus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228271",\n            "CodeValue": "T-A2830",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  106,\n                  174,\n                  155\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right uncinate fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  106,\n                  174,\n                  155\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left uncinate fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "26230003"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Upper arm",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0446516",\n            "CodeValue": "T-D8200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right arm",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left arm",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "40983000"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Upper limb",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016555",\n            "CodeValue": "T-D8000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right upper limb",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left upper limb",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "53120007"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Upper lobe of lung",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0225756",\n            "CodeValue": "T-28820",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  172,\n                  138,\n                  115\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "superior lobe of right lung",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  172,\n                  138,\n                  115\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "superior lobe of left lung",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "45653009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              124,\n              186,\n              223\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urethra",\n            "CodeValue": "T-75000",\n            "UMLSConceptUID": "C0041967",\n            "CodeMeaning": "Urethra",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "13648007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              203,\n              136,\n              116\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urinary system",\n            "CodeValue": "T-70001",\n            "UMLSConceptUID": "C1508753",\n            "CodeMeaning": "Urinary system",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "122489005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              181,\n              158\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "uterus",\n            "CodeValue": "T-83000",\n            "UMLSConceptUID": "C0042149",\n            "CodeMeaning": "Uterus",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "35039007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              193,\n              123,\n              103\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "vagina",\n            "CodeValue": "T-82000",\n            "UMLSConceptUID": "C0042232",\n            "CodeMeaning": "Vagina",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "76784001"\n          },\n          {\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "cid": "7160",\n            "CodeMeaning": "Vas deferens",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0042360",\n            "CodeValue": "T-96000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  241,\n                  172,\n                  151\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right deferent duct",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  241,\n                  172,\n                  151\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left deferent duct",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "57671007"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Zygoma",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0043539",\n            "CodeValue": "T-11166",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  255,\n                  167\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right zygomatic bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              }\n            ],\n            "SNOMEDCTConceptID": "13881006"\n          }\n        ],\n        "showAnatomy": false\n      },\n      {\n        "CodeMeaning": "Morphologically Altered Structure",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "49755003",\n        "cid": "7051",\n        "UMLSConceptUID": "C0221198",\n        "CodeValue": "M-01000",\n        "contextGroupName": "Segmentation Property Categories",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              145,\n              60,\n              66\n            ],\n            "CodeMeaning": "Blood clot",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "clot",\n            "cid": "7159",\n            "UMLSConceptUID": "C0302148",\n            "CodeValue": "M-35000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "75753009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              205,\n              205,\n              100\n            ],\n            "CodeMeaning": "Cyst",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cyst",\n            "cid": "7159",\n            "UMLSConceptUID": "C0010709",\n            "CodeValue": "M-3340A",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "367643001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              140,\n              224,\n              228\n            ],\n            "CodeMeaning": "Edema",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "edema",\n            "cid": "7159",\n            "UMLSConceptUID": "C0013604",\n            "CodeValue": "M-36300",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "79654002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              150,\n              98,\n              83\n            ],\n            "CodeMeaning": "Embolus",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "embolism",\n            "cid": "7159",\n            "UMLSConceptUID": "C1704212",\n            "CodeValue": "M-35300",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "55584005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              188,\n              65,\n              28\n            ],\n            "CodeMeaning": "Hemorrhage",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "bleeding",\n            "cid": "7159",\n            "UMLSConceptUID": "C0019080",\n            "CodeValue": "M-37000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "50960005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              144,\n              238,\n              144\n            ],\n            "CodeMeaning": "Mass",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mass",\n            "cid": "7159",\n            "UMLSConceptUID": "C0577559",\n            "CodeValue": "M-03000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "4147007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              191,\n              216\n            ],\n            "CodeMeaning": "Necrosis",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "necrosis",\n            "cid": "7159",\n            "UMLSConceptUID": "C0027540",\n            "CodeValue": "M-54000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "6574001"\n          }\n        ],\n        "showAnatomy": true\n      },\n      {\n        "CodeMeaning": "Body Substance",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "91720002",\n        "cid": "",\n        "UMLSConceptUID": "C0504082",\n        "CodeValue": "T-D0080",\n        "contextGroupName": "",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              0,\n              145,\n              30\n            ],\n            "CodeMeaning": "Bile",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "bile",\n            "cid": "7166",\n            "UMLSConceptUID": "C0005388",\n            "CodeValue": "T-60650",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "70150004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              170,\n              250,\n              250\n            ],\n            "CodeMeaning": "Body fluid",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "fluid",\n            "cid": "7166",\n            "UMLSConceptUID": "C0005889",\n            "CodeValue": "T-D0070",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "32457005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              78,\n              63,\n              0\n            ],\n            "CodeMeaning": "Feces",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "feces",\n            "cid": "7166",\n            "UMLSConceptUID": "C0015733",\n            "CodeValue": "T-59666",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "39477002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              218,\n              255,\n              255\n            ],\n            "CodeMeaning": "Gas",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "gas",\n            "cid": "7166",\n            "UMLSConceptUID": "C0017110",\n            "CodeValue": "C-10080",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "74947009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              214,\n              230,\n              130\n            ],\n            "CodeMeaning": "Urine",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urine",\n            "cid": "7166",\n            "UMLSConceptUID": "C0042036",\n            "CodeValue": "T-70060",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "78014005"\n          }\n        ],\n        "showAnatomy": false\n      }\n    ]\n  }\n}').SegmentationCodes.Category;function T(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"T-D0050",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"T-D0050",o=arguments.length>3?arguments[3]:void 0,a=b.find(function(e){return e.CodeValue===n}),i=a.Type.find(function(e){return e.CodeValue===t}),r={SegmentedPropertyCategoryCodeSequence:{CodeValue:a.CodeValue,CodingSchemeDesignator:a.CodingSchemeDesignator,CodeMeaning:a.CodeMeaning},SegmentLabel:e,SegmentAlgorithmType:"MANUAL",SegmentedPropertyTypeCodeSequence:{CodeValue:i.CodeValue,CodingSchemeDesignator:i.CodingSchemeDesignator,CodeMeaning:i.CodeMeaning}};if(o){var l=i.Modifier.find(function(e){return e.CodeValue===o});r.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence={CodeValue:l.CodeValue,CodingSchemeDesignator:l.CodingSchemeDesignator,CodeMeaning:l.CodeMeaning},r.RecommendedDisplayCIELabValue=l.recommendedDisplayRGBValue}else r.RecommendedDisplayCIELabValue=i.recommendedDisplayRGBValue;return r}function M(e){return(M="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function x(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function v(e,n){return!n||"object"!==M(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function I(e){return(I=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function R(e,n){return(R=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var L=o.store.modules.brush,N=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o=Object.assign({},t);return(e=v(this,I(n).call(this,o))).initialConfiguration=o,e}var t,a,i;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&R(e,n)}(n,o["BrushTool"]),t=n,(a=[{key:"_startPainting",value:function(e){var n=e.detail,t=n.element,o=L.getters.getAndCacheLabelmap2D(t),a=o.labelmap3D,i=o.currentImageIdIndex,r=o.activeLabelmapIndex,l=this._isCtrlDown(n)||this.configuration.alwaysEraseOnClick;this.paintEventData={labelmap3D:a,currentImageIdIndex:i,activeLabelmapIndex:r,shouldErase:l};var c=a.activeSegmentIndex,d=a.metadata[c];d||(d=T("Unnamed Segment"),L.setters.metadata(t,r,c,d)),n.currentPoints&&this._paint(e),this._drawing=!0,this._startListeningForMouseUp(t)}}])&&x(t.prototype,a),i&&x(t,i),n}(),O=t(3),U=t.n(O);function G(e){return(G="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function E(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],o=!0,a=!1,i=void 0;try{for(var r,l=e[Symbol.iterator]();!(o=(r=l.next()).done)&&(t.push(r.value),!n||t.length!==n);o=!0);}catch(e){a=!0,i=e}finally{try{o||null==l.return||l.return()}finally{if(a)throw i}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function V(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function w(e,n){return!n||"object"!==G(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function k(e){return(k=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function B(e,n){return(B=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var A=o.store.modules.brush,_=Object(o.importInternalModule)("util/brushUtils"),j=_.getCircle,P=_.drawBrushPixels,F=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o=Object.assign({},t);return(e=w(this,k(n).call(this,o))).initialConfiguration=o,e}var t,a,i;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&B(e,n)}(n,N),t=n,(a=[{key:"preMouseDownCallback",value:function(e){return this.activeGateRange=A.getters.activeGateRange(),this._startPainting(e),!0}},{key:"_paint",value:function(e){var n=e.detail,t=n.element,a=n.image,i=a.rows,l=a.columns,c=n.currentPoints.image,d=c.x,u=c.y;if(!(d<0||d>l||u<0||u>i)){var s=A.state.radius,m=this._gateCircle(a,j(s,i,l,d,u)),p=this.paintEventData,C=p.labelmap3D,g=p.currentImageIdIndex,S=p.activeLabelmapIndex,f=p.shouldErase;P(m,C,g,l,f),r.a.triggerEvent(t,o.EVENTS.LABELMAP_MODIFIED,{activeLabelmapIndex:S}),r.a.updateImage(e.detail.element)}}},{key:"_gateCircle",value:function(e,n){for(var t=e.rows,o=e.getPixelData(),a=this.activeGateRange,i=e.slope||1,r=e.intercept||0,l=[],c=0;c<n.length;c++){var d=o[n[c][0]+n[c][1]*t];(d=d*i+r)>=a[0]&&d<=a[1]&&l.push(n[c])}return this._cleanGatedCircle(n,l)}},{key:"_getEdgePixels",value:function(e){for(var n=[],t=e.length,o=e[0].length,a=0;a<e.length;a++)e[a][0]&&(n.push([a,0]),n.push([a,o-1]));for(var i=1;i<o-1;i++)for(var r=0;r<e.length;r++)if(e[r][i]){n.push([r,i]),n.push([t-1-r,i]);break}return n}},{key:"_cleanGatedCircle",value:function(e,n){var t=this._getBoundingBoxOfCircle(e),o=t.max,a=t.min,i=o[0]-a[0]+1,r=o[1]-a[1]+1,l=this._boxGatedCircle(e,n,a,i,r);function c(e,n){return l[e][n]}this._floodFillEmptyRegionsFromEdges(l,c);for(var d=this._findHolesAndRegions(e,l,c,a),u=d.holes,s=d.regions,m=this._getAreaOfLargestRegion(s),p=0;p<s.length;p++){var C=s[p];if(C.length<=A.state.strayRemove/100*m)for(var g=0;g<C.length;g++)l[C[g][0]][C[g][1]]=3}for(var S=0;S<u.length;S++){var f=u[S];if(f.length<=A.state.holeFill/100*m)for(var h=0;h<f.length;h++)l[f[h][0]][f[h][1]]=5}for(var D=[],y=0;y<i;y++)for(var b=0;b<r;b++)5===l[y][b]&&D.push([y+a[0],b+a[1]]);return D}},{key:"_getBoundingBoxOfCircle",value:function(e){for(var n=[e[0][0],e[0][1]],t=[e[0][0],e[0][1]],o=0;o<e.length;o++){var a=E(e[o],2),i=a[0],r=a[1];i>n[0]?n[0]=i:i<t[0]&&(t[0]=i),r>n[1]?n[1]=r:r<t[1]&&(t[1]=r)}return{max:n,min:t}}},{key:"_boxGatedCircle",value:function(e,n,t,o,a){for(var i=[],r=0;r<o;r++)i[r]=new Uint8ClampedArray(a);for(var l=0;l<e.length;l++){var c=e[l][0]-t[0],d=e[l][1]-t[1];i[c][d]=1}for(var u=0;u<n.length;u++){var s=n[u][0]-t[0],m=n[u][1]-t[1];i[s][m]=2}return i}},{key:"_floodFillEmptyRegionsFromEdges",value:function(e,n){for(var t=this._getEdgePixels(e),o=0;o<t.length;o++){var a=t[o][0],i=t[o][1];if(1===e[a][i])for(var r=U()({getter:n,seed:[a,i]}).flooded,l=0;l<r.length;l++)e[r[l][0]][r[l][1]]=3}}},{key:"_findHolesAndRegions",value:function(e,n,t,o){for(var a=[],i=[],r=0;r<e.length;r++){var l=e[r][0]-o[0],c=e[r][1]-o[1];if(1===n[l][c]){for(var d=U()({getter:t,seed:[l,c]}).flooded,u=0;u<d.length;u++)n[d[u][0]][d[u][1]]=4;a.push(d)}else if(2===n[l][c]){for(var s=U()({getter:t,seed:[l,c]}).flooded,m=0;m<s.length;m++)n[s[m][0]][s[m][1]]=5;i.push(s)}}return{holes:a,regions:i}}},{key:"_getAreaOfLargestRegion",value:function(e){for(var n=0,t=0;t<e.length;t++)e[t].length>n&&(n=e[t].length);return n}}])&&V(t.prototype,a),i&&V(t,i),n}();function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function z(e,n){return!n||"object"!==H(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,n){return(K=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var X=a.a.importInternalModule("util/brushUtils").getCircle,Y=a.a.store.modules.brush,J=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o=Object.assign({},t);return(e=z(this,W(n).call(this,o))).initialConfiguration=o,e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&K(e,n)}(n,F),t=n,(o=[{key:"preMouseDownCallback",value:function(e){return this._setCustomGate(e),this._startPainting(e),!0}},{key:"_setCustomGate",value:function(e){for(var n=e.detail,t=n.image,o=t.rows,a=t.columns,i=n.currentPoints.image,r=i.x,l=i.y,c=Y.state.radius,d=t.getPixelData(),u=t.slope||1,s=t.intercept||0,m=X(c,o,a,r,l),p=d[m[0][0]+m[0][1]*o],C=p,g=0;g<m.length;g++){var S=d[m[g][0]+m[g][1]*o];S<p&&(p=S),S>C&&(C=S)}p=p*u+s,C=C*u+s,this.gate=[p,C]}},{key:"_gateCircle",value:function(e,n){for(var t=e.image,o=e.getPixelData(),a=this.gate,i=e.slope||1,r=e.intercept||0,l=[],c=0;c<n.length;c++){var d=o[n[c][0]+n[c][1]*t];(d=d*i+r)>=a[0]&&d<=a[1]&&l.push(n[c])}return this._cleanGatedCircle(n,l)}}])&&q(t.prototype,o),a&&q(t,a),n}(),Z=t(4);function Q(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var $=o.store.modules,ee=function(){function e(n,t,o,a,i,r,l,c){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this._polyPoints=this._deepCopyPoints(n),this._sopInstanceUid=t,this._seriesInstanceUid=o,this._structureSetUid=a,this._ROIContourUid=i,this._polygonUid=r,this._frameNumber=l,this._interpolated=c}var n,t,o;return n=e,(t=[{key:"_deepCopyPoints",value:function(e){for(var n=[],t=void 0!==e[0].z,o=0;o<e.length;o++)n.push({x:e[o].x,y:e[o].y}),t&&(n[o].z=e[o].z);return n}},{key:"getFreehandToolData",value:function(e){var n=this._seriesInstanceUid,t=this._structureSetUid,o=this._ROIContourUid,a=$.freehand3D,i=a.getters.ROIContour(n,t,o),r=a.getters.structureSet(n,t),l={uid:this._polygonUid,seriesInstanceUid:n,structureSetUid:t,ROIContourUid:o,referencedROIContour:i,referencedStructureSet:r,visible:!0,active:!1,invalidated:!0,handles:{points:[]}};return this._sopInstanceUid&&(l.sopInstanceUID=this._sopInstanceUid),this._interpolated&&(l.interpolated=!0),this._generatePoints(l.handles.points),l.handles.textBox={active:!1,hasMoved:!1,movesIndependently:!1,drawnIndependently:!0,allowedOutsideImage:!0,hasBoundingBox:!0},l.polyBoundingBox={},l.toBeScaled=e,l}},{key:"_generatePoints",value:function(e){for(var n=0;n<this._polyPoints.length;n++)e.push(this._deepCopyOnePoint(n));for(var t=0;t<e.length;t++)t===e.length-1?e[t].lines.push(e[0]):e[t].lines.push(e[t+1])}},{key:"_deepCopyOnePoint",value:function(e){var n={x:this._polyPoints[e].x,y:this._polyPoints[e].y,lines:[]};return void 0!==this._polyPoints[e].z&&(n.z=this._polyPoints[e].z),n}},{key:"polyPoints",get:function(){return this._polyPoints}},{key:"sopInstanceUid",get:function(){return this._sopInstanceUid}},{key:"uid",get:function(){return this._polygonUid}},{key:"frameNumber",get:function(){return this._frameNumber}}])&&Q(n.prototype,t),o&&Q(n,o),e}(),ne=o.globalImageIdSpecificToolStateManager,te=function(e,n){for(var t=e.ROIContourUid,a=function(e,n){for(var t=[],o=ne.saveToolState(),a=0;a<e.length;a++){var i=e[a],r=o[i];if(r&&r.freehandRoi){var l=r.freehandRoi.data.filter(function(e){return e.ROIContourUid===n}),c={imageId:i};l.length&&(c.contours=l),t.push(c)}else t.push({imageId:i})}return t}(function(e){return Object(o.getToolState)(e,"stack").data[0].imageIds}(n),t),i=function(e){for(var n=[],t=0;t<e.length;t++)if(e[t].contours){n.push(t);break}for(var o=e.length-1;o>=0;o--)if(e[o].contours){n.push(o);break}return n}(a),r=function(e,n){for(var t=0;t<e.length;t++)if(e[t].contours)for(var o=e[t].contours,a=0;a<o.length;a++)if(o[a].uid===n)return t;return}(a,e.uid),l=[],c=i[0]+1;c<=i[1]-1;c++)if(oe(a,c)){var d=ie(c,i,a);!d||d[0]!==r&&d[1]!==r||ae(d,l)}return{ROIContourData:a,interpolationList:l}};function oe(e,n){return!e[n].contours||1===e[n].contours.length&&e[n].contours[0].interpolated}function ae(e,n){n[e[0]]||(n[e[0]]={pair:e,list:[]})}function ie(e,n,t){for(var o=[],a=!0,i=e-1;i>=n[0];i--)if(t[i].contours){var r=t[i].contours;if(r[0].interpolated)continue;r.length>1&&(a=!1),o.push(i);break}if(a){for(var l=e+1;l<=n[1];l++)if(t[l].contours){var c=t[l].contours;if(c[0].interpolated)continue;c.length>1&&(a=!1),o.push(l);break}if(a)return o}}var re=o.globalImageIdSpecificToolStateManager,le=.2,ce=o.store.modules,de=function(e,n){for(var t=te(e,n),o=t.ROIContourData,a=t.interpolationList,i=0;i<a.length;i++)a[i]&&ue(a[i].list,a[i].pair,o)};function ue(e,n,t){var o=he(t[n[0]].contours[0].handles.points),a=he(t[n[1]].contours[0].handles.points),i=function(e,n){var t=Se(e),o=Se(n),a=Math.max(Math.ceil(t[t.length-1]/le),Math.ceil(o[o.length-1]/le)),i=fe(t),r=fe(o),l=a+n.x.length,c=a+e.x.length,d=ge(l,i),u=ge(c,r),s=Ce(e,l),m=Ce(n,c),p=pe(d,s),C=pe(u,m),g=me(e,p),S=me(n,C);return function(e,n){for(var t=e.x.length,o={startingNode:0,totalSquaredXYLengths:1/0},a=0;a<t;a++){for(var i=a,r=0,l=0;l<t;l++)r+=Math.pow(e.x[i]-n.x[l],2)+Math.pow(e.y[i]-n.y[l],2),++i===t&&(i=0);r<o.totalSquaredXYLengths&&(o.totalSquaredXYLengths=r,o.startingNode=a)}var c=o.startingNode;se(e.x,c),se(e.y,c),se(e.I,c)}(g,S),function(e,n){for(var t={x:[],y:[],I:[]},o={x:[],y:[],I:[]},a=0;a<e.x.length;a++)(e.I[a]||n.I[a])&&(t.x.push(e.x[a]),t.y.push(e.y[a]),t.I.push(e.I[a]),o.x.push(n.x[a]),o.y.push(n.y[a]),o.I.push(n.I[a]));return{c1Interp:t,c2Interp:o}}(g,S)}(o,a),r=i.c1Interp,c=i.c2Interp;e.forEach(function(e){!function(e,n,t,o,a,i){var r=(t-o[0])/(o[1]-o[0]),c=function(e,n,t,o){for(var a={x:[],y:[]},i=o?e.I:n.I,r=0;r<e.x.length;r++)i[r]&&(a.x.push((1-t)*e.x[r]+t*n.x[r]),a.y.push((1-t)*e.y[r]+t*n.y[r]));return a}(e,n,r,i),d=a[o[0]].contours[0];a[t].contours?function(e,n,t){var o,a=re.saveToolState()[n];if(!a)throw new Error("Image toolstate does not exist. This should not be reached in this case!");for(var i=0;i<a.freehandRoi.data.length;i++)if(a.freehandRoi.data[i].ROIContourUid===t.ROIContourUid){o=i;break}for(var r=a.freehandRoi.data[o],l=[],c=0;c<e.x.length;c++)l.push({x:e.x[c],y:e.y[c]});var d=new ee(l,null,r.seriesInstanceUid,r.structureSetUid,r.ROIContourUid,r.uid,null,!0);a.freehandRoi.data[o]=d.getFreehandToolData(!1)}(c,a[t].imageId,d):function(e,n,t){for(var o=[],a=0;a<e.x.length;a++)o.push({x:e.x[a],y:e.y[a]});var i=new ee(o,null,t.seriesInstanceUid,t.structureSetUid,t.ROIContourUid,l(),null,!0),r=re.saveToolState();r[n]||(r[n]={});var c=r[n];c.freehandRoi?c.freehandRoi.data||(c.freehandRoi.data=[]):(c.freehandRoi={},c.freehandRoi.data=[]);c.freehandRoi.data.push(i.getFreehandToolData(!1)),ce.freehand3D.setters.incrementPolygonCount(t.seriesInstanceUid,t.structureSetUid,t.ROIContourUid)}(c,a[t].imageId,d)}(r,c,e,n,t,o.x.length>a.x.length)})}function se(e,n){return n-=e.length*Math.floor(n/e.length),e.push.apply(e,e.splice(0,n)),e}function me(e,n){for(var t={x:[],y:[],I:[]},o=0;o<e.x.length-1;o++){t.x.push(e.x[o]),t.y.push(e.y[o]),t.I.push(!0);for(var a=(e.x[o+1]-e.x[o])/(n[o]+1),i=(e.y[o+1]-e.y[o])/(n[o]+1),r=0;r<n[o]-1;r++)t.x.push(t.x[t.x.length-1]+a),t.y.push(t.y[t.y.length-1]+i),t.I.push(!1)}return t}function pe(e,n){for(var t=[],o=0;o<e.length;++o)t[o]=o;t.sort(function(n,t){return e[n]<e[t]?-1:e[n]>e[t]});for(var a=[],i=0;i<n.length;i++)a.push(n[t[i]]);for(var r=a.reduce(function(e,n,t){return n&&e.push(t),e},[]),l=[],c=0;c<r.length-1;c++)l.push(r[c+1]-r[c]);return l}function Ce(e,n){for(var t=[],o=0;o<n-2;o++)t.push(!1);for(var a=0;a<e.x.length;a++)t.push(!0);return t}function ge(e,n){for(var t=1/(e-1),o=[t],a=1;a<e-2;a++)o.push(o[o.length-1]+t);return o.concat(n)}function Se(e){for(var n=[0],t=1;t<e.x.length;t++){var o=Math.sqrt(Math.pow(e.x[t]-e.x[t-1],2)+Math.pow(e.y[t]-e.y[t-1],2));n.push(n[t-1]+o)}return n}function fe(e){for(var n=[],t=0;t<e.length;t++)n.push(e[t]/e[e.length-1]);return n}function he(e){for(var n={x:[],y:[]},t=0;t<e.length;t++)n.x[t]=e[t].x,n.y[t]=e[t].y;return n.x.push(n.x[0]),n.y.push(n.y[0]),function(e){for(var n=e.x.length,t=e.x.reduce(De)/n,o=0,a=0,i=1,r=2;a<n;a++)o+=(e.x[i]-t)*(e.y[r]-e.y[a]),++i>=n&&(i=0),++r>=n&&(r=0);o>0&&(e.x.reverse(),e.y.reverse())}(n),n}function De(e,n){return e+n}function ye(e){return(ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function be(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Te(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Me(e){return(Me=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function xe(e,n){return(xe=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function ve(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ie=Object(o.importInternalModule)("util/freehandUtils"),Re=Ie.insertOrDelete,Le=Ie.freehandArea,Ne=Ie.calculateFreehandStatistics,Oe=Object(o.importInternalModule)("drawing/draw"),Ue=Object(o.importInternalModule)("drawing/drawJoinedLines"),Ge=Object(o.importInternalModule)("drawing/drawHandles"),Ee=Object(o.importInternalModule)("drawing/drawLinkedTextBox"),Ve=Object(o.importInternalModule)("manipulators/moveHandleNearImagePoint"),we=Object(o.importInternalModule)("drawing/getNewContext"),ke=o.store.modules,Be=Object(o.importInternalModule)("util/numbersWithCommas"),Ae=Object(o.importInternalModule)("util/pointInsideBoundingBox"),_e=Object(o.importInternalModule)("util/calculateSUV"),je=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o,a,i={configuration:{mouseLocation:{handles:{start:{highlight:!0,active:!0}}},spacing:1,interpolatedHandleRadius:.5,interpolatedAlpha:.5,activeHandleRadius:3,completeHandleRadius:6,completeHandleRadiusTouch:28,alwaysShowHandles:!1,invalidColor:"crimson",currentHandle:0,currentTool:-1}},r=Object.assign(i,t);return o=this,(e=!(a=Me(n).call(this,r))||"object"!==ye(a)&&"function"!=typeof a?ve(o):a).configuration.alwaysShowHandles=!1,e._freehand3DStore=ke.freehand3D,e._onMeasurementRemoved=e._onMeasurementRemoved.bind(ve(ve(e))),e._drawingMouseUpCallback=e._drawingMouseUpCallback.bind(ve(ve(e))),e}var t,a,r;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&xe(e,n)}(n,o["FreehandRoiTool"]),t=n,(a=[{key:"createNewMeasurement",value:function(e){var n=this._freehand3DStore;if(e&&e.currentPoints&&e.currentPoints.image){var t=c(Object(i.getEnabledElement)(this.element)),o=n.getters.structureSet(t,"DEFAULT"),a=n.getters.activeROIContour(t),r={uid:l(),seriesInstanceUid:t,structureSetUid:"DEFAULT",ROIContourUid:a.uid,referencedROIContour:a,referencedStructureSet:o,visible:!0,active:!0,invalidated:!0,handles:{points:[]}};return r.handles.textBox={active:!1,hasMoved:!1,movesIndependently:!1,drawnIndependently:!0,allowedOutsideImage:!0,hasBoundingBox:!0},n.setters.incrementPolygonCount(t,"DEFAULT",a.uid),r}console.error("required eventData not supplied to tool ".concat(this.name,"'s createNewMeasurement"))}},{key:"addNewMeasurement",value:function(e,n){var t=e.detail;this._addAndSetVolumeIfNoVolumes(),this._drawing=!0,this._startDrawing(e),this._addPoint(t),Pe(e)}},{key:"_addAndSetVolumeIfNoVolumes",value:function(){var e=c(Object(i.getEnabledElement)(this.element)),n=ke.freehand3D,t=n.getters.series(e);t||(n.setters.series(e),t=n.getters.series(e)),n.getters.activeROIContour(e)||n.setters.ROIContourAndSetIndexActive(e,"DEFAULT","Unnamed Lesion")}},{key:"_pointNearHandle",value:function(e,n,t){var o=this._freehand3DStore;if(n.handles&&void 0!==n.handles.points&&!1!==n.visible){for(var a=n.handles.points,r=0;r<a.length;r++){var l=Object(i.pixelToCanvas)(e,a[r]);if(Z.point.distance(l,t)<6)return r}return o.state.displayStats&&n.handles.textBox&&Ae(n.handles.textBox,t)?n.handles.textBox:void 0}}},{key:"preMouseDownCallback",value:function(e){var n=e.detail,t=Object(o.getToolState)(e.currentTarget,this.name);if(!t)return!1;var a=this._pointNearHandleAllTools(n),i=this._freehand3DStore;if(n.event.ctrlKey)return void 0!==a&&a.handleNearby.hasBoundingBox||Re.call(this,e,a),Pe(e),!0;if(a){var r=t.data[a.toolIndex];return i.getters.structureSet(r.seriesInstanceUid,r.structureSetUid).isLocked,!1}}},{key:"handleSelectedCallback",value:function(e,n,t){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"mouse",a=this._freehand3DStore,i=e.detail,r=i.element;if(i.event.metaKey)return this._switchROIContour(e,n),void Pe(e);if(t.hasBoundingBox&&a.state.displayStats)Ve(e,this,n,t,o);else{if(a.getters.structureSet(n.seriesInstanceUid,n.structureSetUid).isLocked)return!1;var l=this.configuration;l.dragOrigin={x:t.x,y:t.y};var c=this._pointNearHandleAllTools(i);if(c){var d=c.handleNearby,u=c.toolIndex;this._modifying=!0,l.currentHandle=d,l.currentTool=u,this._activateModify(r),Pe(e)}}}},{key:"_switchROIContour",value:function(e,n){this._freehand3DStore.setters.activeROIContour(n.seriesInstanceUid,n.structureSetUid,n.ROIContourUid),Object(i.updateImage)(e.detail.element)}},{key:"renderToolData",value:function(e){var n=this,t=e.detail,a=this._freehand3DStore,r=Object(o.getToolState)(e.currentTarget,this.name);if(r){var l,c=t.image,d=t.element,u=this.configuration,s=i.metaData.get("generalSeriesModule",c.imageId);s&&(l=s.modality);for(var m=we(t.canvasContext.canvas),p=o.toolStyle.getToolWidth(),C=function(e){var s=r.data[e],C=s.referencedStructureSet,g=s.referencedROIContour;if(!1===s.visible||!C.visible)return"continue";var f=a.getters.ROIContourIndex(s.seriesInstanceUid,s.structureSetUid,s.ROIContourUid)===a.getters.activeROIContourIndex(s.seriesInstanceUid);Oe(m,function(e){var r,m=o.toolColors.getColorIfActive(s),h=s.handles.points;if(s.active&&!C.isLocked?s.handles.invalidHandlePlacement?(m=u.invalidColor,r=u.invalidColor):(m=o.toolColors.getColorIfActive(s),r=o.toolColors.getFillColor()):(m=g.color,r=g.color),f&&s.interpolated&&(e.globalAlpha=u.interpolatedAlpha),s.handles.points.length)for(var D=0;D<h.length;D++){var y=be(h[D].lines);D!==h.length-1||s.polyBoundingBox||y.push(u.mouseLocation.handles.start),Ue(e,t.element,s.handles.points[D],y,{color:m})}e.globalAlpha=1;var b,T,M,x={color:m,fill:r};if(f&&s.interpolated?(x.handleRadius=u.interpolatedHandleRadius,Ge(e,t,h,x)):(u.alwaysShowHandles||s.active&&s.polyBoundingBox)&&(x.handleRadius=u.activeHandleRadius,Ge(e,t,h,x)),s.canComplete&&(x.handleRadius=u.completeHandleRadius,Ge(e,t,[h[0]],x)),s.active&&!s.polyBoundingBox&&(x.handleRadius=u.activeHandleRadius,Ge(e,t,u.mouseLocation.handles,x),Ge(e,t,[h[0]],x)),!1===s.invalidated)T=s.meanStdDev,M=s.meanStdDevSUV,b=s.area;else if(!s.active){for(var v={left:h[0].x,right:h[0].x,bottom:h[0].y,top:h[0].x},I=0;I<h.length;I++)v.left=Math.min(v.left,h[I].x),v.right=Math.max(v.right,h[I].x),v.bottom=Math.min(v.bottom,h[I].y),v.top=Math.max(v.top,h[I].y);var R={left:v.left,top:v.bottom,width:Math.abs(v.right-v.left),height:Math.abs(v.top-v.bottom)};if(s.polyBoundingBox=R,!c.color){var L=Object(i.getPixels)(d,R.left,R.top,R.width,R.height);T=Ne.call(n,L,R,h),"PT"===l&&(M={mean:_e(c,(T.mean-c.intercept)/c.slope),stdDev:_e(c,(T.stdDev-c.intercept)/c.slope)}),T&&!isNaN(T.mean)&&(s.meanStdDev=T,s.meanStdDevSUV=M)}var N=c.columnPixelSpacing||1,O=c.rowPixelSpacing||1;b=Le(h,N*O),isNaN(b)||(s.area=b),s.invalidated=!1}if(s.polyBoundingBox&&(a.state.displayStats||s.active)){s.handles.textBox.hasMoved||(s.handles.textBox.x=s.polyBoundingBox.left+s.polyBoundingBox.width,s.handles.textBox.y=s.polyBoundingBox.top+s.polyBoundingBox.height/2);var U=function(e){var n=e.referencedROIContour,t=e.referencedStructureSet,o=e.meanStdDev,a=e.meanStdDevSUV,i=e.area,r=[];r.push(n.name),"DEFAULT"===t.name?r.push("Working ROI Collection"):r.push(t.name);if(o&&void 0!==o.mean){var d="";"CT"===l&&(d=" HU");var u="Mean: ".concat(Be(o.mean.toFixed(2))).concat(d),s="StdDev: ".concat(Be(o.stdDev.toFixed(2))).concat(d);if(a&&void 0!==a.mean){u+=" SUV: "+Be(a.mean.toFixed(2)),s+=" SUV: "+Be(a.stdDev.toFixed(2))}r.push(u),r.push(s)}if(i){var m=" mm".concat(String.fromCharCode(178));c.rowPixelSpacing&&c.columnPixelSpacing||(m=" pixels".concat(String.fromCharCode(178)));var p="Area: ".concat(Be(i.toFixed(2))).concat(m);r.push(p)}return r.push("".concat(n.polygonCount," contours")),r}.call(n,s);Ee(e,d,s.handles.textBox,U,h,S,m,p,0,!0)}})},g=0;g<r.data.length;g++)C(g)}function S(e){return e}}},{key:"_endDrawing",value:function(e,n){var t=Object(o.getToolState)(e,this.name),a=this.configuration,r=t.data[a.currentTool],l=r.handles.points;r.active=!1,r.highlight=!1,r.handles.invalidHandlePlacement=!1,void 0!==n&&l[a.currentHandle-1].lines.push(l[0]),this._modifying&&(this._modifying=!1,r.invalidated=!0,r.interpolated=!1),a.currentHandle=0,a.currentTool=-1,r.canComplete=!1,this._drawing&&(this._drawing=!1,this._deactivateDraw(e)),ke.freehand3D.state.interpolate&&de(r,e),Object(i.updateImage)(e)}},{key:"_onMeasurementRemoved",value:function(e){var n=e.detail;if(n.toolType===this.name){var t=n.measurementData;this._freehand3DStore.setters.decrementPolygonCount(t.seriesInstanceUid,t.structureSetUid,t.ROIContourUid)}}},{key:"passiveCallback",value:function(e){this._closeToolIfDrawing(e),this._addMeasurementRemovedListener(e)}},{key:"enabledCallback",value:function(e){this._closeToolIfDrawing(e),this._addMeasurementRemovedListener(e)}},{key:"activeCallback",value:function(e){this._addMeasurementRemovedListener(e)}},{key:"disabledCallback",value:function(e){this._closeToolIfDrawing(e),e.removeEventListener(o.EVENTS.MEASUREMENT_REMOVED,this._onMeasurementRemoved)}},{key:"_addMeasurementRemovedListener",value:function(e){e.removeEventListener(o.EVENTS.MEASUREMENT_REMOVED,this._onMeasurementRemoved),e.addEventListener(o.EVENTS.MEASUREMENT_REMOVED,this._onMeasurementRemoved)}}])&&Te(t.prototype,a),r&&Te(t,r),n}();function Pe(e){e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault()}function Fe(e){return(Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function He(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function qe(e){return(qe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ze(e,n){return(ze=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function We(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ke=o.store.modules,Xe=o.store.state,Ye=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var a,i,r={configuration:{mouseLocation:{handles:{start:{highlight:!0,active:!0}}},minSpacing:1,currentTool:null,dragColor:o.toolColors.getActiveColor(),hoverColor:o.toolColors.getToolColor(),showCursorOnHover:!0,limitRadiusOutsideRegion:!0,hoverCursorFadeAlpha:.5,hoverCursorFadeDistance:1.2}},l=Object.assign(r,t);return a=this,(e=!(i=qe(n).call(this,l))||"object"!==Fe(i)&&"function"!=typeof i?We(a):i).activeMouseUpCallback=e.activeMouseUpCallback.bind(We(We(e))),e}var t,a,r;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&ze(e,n)}(n,o["FreehandRoiSculptorTool"]),t=n,(a=[{key:"_selectFreehandTool",value:function(e){var n=this.configuration,t=e.element,a=this._getClosestFreehandToolOnElement(t,e);if(void 0!==a){var i=Object(o.getToolState)(t,this.referencedToolName).data[a];i.referencedStructureSet.isLocked||(n.hoverColor=i.referencedROIContour.color,n.currentTool=a)}}},{key:"_activeEnd",value:function(e){var n=e.detail,t=n.element,a=this.configuration;this._active=!1,Xe.isMultiPartToolActive=!1,this._getMouseLocation(n),this._invalidateToolData(n),a.mouseUpRender=!0,this._deactivateSculpt(t);var r=Object(o.getToolState)(t,this.referencedToolName).data[a.currentTool];Ke.freehand3D.getters.interpolate()&&de(r),Object(i.updateImage)(n.element),function(e){e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault()}(e)}},{key:"_invalidateToolData",value:function(e){var n=this.configuration,t=e.element,a=Object(o.getToolState)(t,this.referencedToolName).data[n.currentTool];a.invalidated=!0,a.interpolated=!1}}])&&He(t.prototype,a),r&&He(t,r),n}();var Je={},Ze=o.store.modules,Qe={maxRadius:64,holeFill:2,holeFillRange:[0,20],strayRemove:5,strayRemoveRange:[0,99],interpolate:!1,showFreehandStats:!1,brush3dToolName:"Brush3DTool",brush3DHUGatedToolName:"Brush3DHUGatedTool",brush3DAutoGatedTool:"Brush3DAutoGatedTool",freehandRoi3DTool:"FreehandRoi3DTool",freehandRoi3DSculptorTool:"FreehandRoi3DSculptorTool",gates:[{name:"adipose",range:[-190,-30]},{name:"muscle",range:[-29,150]},{name:"custom",range:[0,100]}]};function $e(e,n){return(e[n]||{}).dom}var en=Object(o.importInternalModule)("base/BaseBrushTool"),nn=function(e){var n=$e(e.viewportSpecificData,e.activeViewportIndex).element,t=o.store.state.tools;return(t=t.filter(function(e){return e.element===n&&"active"===e.mode})).filter(function(e){return e instanceof en})},tn=o.store.modules.brush,on={nextSegmentForActiveViewport:function(e){var n=e.viewports,t=nn(n);t.length&&t[0].nextSegment()},previousSegmentForActiveViewport:function(e){var n=e.viewports,t=nn(n);t.length&&t[0].previousSegment()},increaseBrushSize:function(){var e=tn.state.radius,n=Math.floor(1.2*e);n===e&&(n+=1),tn.setters.radius(n)},decreaseBrushSize:function(){var e=tn.state.radius,n=Math.floor(.8*e);tn.setters.radius(n)},cancelFreehandDrawing:function(e){var n=e.viewports,t=$e(n.viewportSpecificData,n.activeViewportIndex),a=function(e){var n=$e(e.viewportSpecificData,e.activeViewportIndex).element,t=o.store.state.tools;return(t=t.filter(function(e){return e.element===n&&"active"===e.mode})).filter(function(e){return e instanceof je})}(n);a.length&&a[0].cancelDrawing(t.element)}},an={actions:on,definitions:{nextSegmentForActiveViewport:{commandFn:on.nextSegmentForActiveViewport,storeContexts:["viewports"]},previousSegmentForActiveViewport:{commandFn:on.previousSegmentForActiveViewport,storeContexts:["viewports"]},increaseBrushSize:{commandFn:on.increaseBrushSize},decreaseBrushSize:{commandFn:on.decreaseBrushSize},cancelFreehandDrawing:{commandFn:on.cancelFreehandDrawing,storeContexts:["viewports"]}},defaultContext:"ACTIVE_VIEWPORT::CORNERSTONE"},rn=t(0),ln=t.n(rn);function cn(e){return(cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function un(e,n){return!n||"object"!==cn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function sn(e){return(sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function mn(e,n){return(mn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var pn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),un(this,sn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&mn(e,n)}(n,ln.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.ImportCallbackOrComponent,t=e.ExportCallbackOrComponent,o=e.onImportButtonClick,a=e.onExportButtonClick;return n||t?ln.a.createElement("div",null,n&&ln.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:o},"Import"),t&&ln.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:a},"Export")):null}}])&&dn(t.prototype,o),a&&dn(t,a),n}();function Cn(e){return(Cn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Sn(e,n){return!n||"object"!==Cn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function fn(e){return(fn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function hn(e,n){return(hn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var Dn=document.createElement("style");Dn.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } ",document.head.appendChild(Dn);var yn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Sn(this,fn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&hn(e,n)}(n,ln.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.segmentLabel,t=e.onDeleteConfirmClick,o=e.onDeleteCancelClick;return ln.a.createElement("div",null,ln.a.createElement("div",null,ln.a.createElement("h5",null,"Warning!"),ln.a.createElement("p",null,"Are you sure you want to delete ",n,"? This cannot be undone.")),ln.a.createElement("div",{className:"seg-delete-horizontal-box"},ln.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:t},ln.a.createElement("i",{className:"fa fa fa-check-circle fa-2x"})),ln.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:o},ln.a.createElement("i",{className:"fa fa fa-times-circle fa-2x"}))))}}])&&gn(t.prototype,o),a&&gn(t,a),n}();function bn(e){return(bn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Tn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Mn(e,n){return!n||"object"!==bn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function xn(e){return(xn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function vn(e,n){return(vn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var In=document.createElement("style");In.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } ",document.head.appendChild(In);var Rn=a.a.store.modules.brush,Ln=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Mn(this,xn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&vn(e,n)}(n,ln.a.Component),t=n,(o=[{key:"_getTypeWithModifier",value:function(){var e=this.props.metadata,n=e.SegmentedPropertyTypeCodeSequence.CodeMeaning,t=e.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence;return t&&(n+=" (".concat(t.CodeMeaning,")")),n}},{key:"render",value:function(){var e=this.props,n=e.metadata,t=e.segmentIndex,o=e.onSegmentChange,a=e.onEditClick,i=e.onDeleteClick,r=e.checked,l=e.enabledElement,c=n.SegmentLabel,d=Rn.getters.activeCornerstoneColorMap(l).getColor(t),u="rgba(".concat(d[0],", ").concat(d[1],", ").concat(d[2],", 1.0 )"),s=n.SegmentedPropertyCategoryCodeSequence.CodeMeaning,m=this._getTypeWithModifier();return ln.a.createElement("tr",null,ln.a.createElement("td",{className:"centered-cell"},ln.a.createElement("i",{className:"fa fa-square",style:{color:u}})," ",ln.a.createElement("input",{type:"radio",checked:r,onChange:function(){o(t)}})),ln.a.createElement("td",{className:"left-aligned-cell"},ln.a.createElement("a",{className:"segmentation-menu-name-link",onClick:function(){a(t,n)}},c)),ln.a.createElement("td",null,ln.a.createElement("a",{className:"segmentation-menu-name-link",onClick:function(){a(t,n)}},m," - ",s)),ln.a.createElement("td",{className:"centered-cell"},ln.a.createElement("a",{className:"btn btn-sm btn-secondary",onClick:function(){i(t)}},ln.a.createElement("i",{className:"fa fa-times"}))))}}])&&Tn(t.prototype,o),a&&Tn(t,a),n}(),Nn=o.store.modules.brush;function On(e){if(!e)return[];var n=e.element,t=Nn.getters.metadata(n);Array.isArray(t)||(t=Nn.getters.getAndCacheLabelmap2D(n).labelmap3D.metadata);for(var o=Nn.getters.activeCornerstoneColorMap(n).getNumberOfColors(),a=1;a<o;a++)if(!t[a]){Gn(a,void 0,Un);break}}function Un(e){if(e){var n=e.label,t=e.categoryUID,o=e.typeUID,a=e.modifierUID,i=e.segIndex,r=e.element,l=T(n,t,o,a);Nn.setters.metadata(r,0,i,l),Nn.setters.activeSegmentIndex(r,i)}}function Gn(e,n,t){console.log("TODO: Remake brushMetadata input menu!")}function En(e){return(En="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Vn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function wn(e,n){return!n||"object"!==En(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function kn(e){return(kn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Bn(e,n){return(Bn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var An=document.createElement("style");An.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } ",document.head.appendChild(An);var _n=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),wn(this,kn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Bn(e,n)}(n,ln.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.segments,t=e.activeSegmentIndex,o=e.onSegmentChange,a=e.onEditClick,i=e.onDeleteClick,r=e.enabledElement;return ln.a.createElement(ln.a.Fragment,null,n.map(function(e){return ln.a.createElement(Ln,{key:"".concat(e.metadata.SegmentLabel,"_").concat(e.index),segmentIndex:e.index,metadata:e.metadata,onSegmentChange:o,onEditClick:a,onDeleteClick:i,checked:e.index===t,enabledElement:r})}),ln.a.createElement("tr",null,ln.a.createElement("th",null),ln.a.createElement("th",null,ln.a.createElement("a",{className:"segmentation-menu-new-button btn btn-sm btn-primary",onClick:On},ln.a.createElement("i",{className:"fa fa-plus-circle"})," Segment"))))}}])&&Vn(t.prototype,o),a&&Vn(t,a),n}();function jn(e){return(jn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Fn(e,n){return!n||"object"!==jn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function Hn(e){return(Hn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function qn(e,n){return(qn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var zn=document.createElement("style");zn.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } ",document.head.appendChild(zn);var Wn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Fn(this,Hn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&qn(e,n)}(n,ln.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props.importMetadata;return ln.a.createElement(ln.a.Fragment,null,ln.a.createElement("tr",null,ln.a.createElement("th",{colSpan:"2",className:"left-aligned-cell segmentation-menu-list-bordered"},e.name),ln.a.createElement("th",{colSpan:"2",className:"right-aligned-cell segmentation-menu-list-bordered"},e.label)),e.type&&ln.a.createElement("tr",null,ln.a.createElement("th",{colSpan:"2",className:"left-aligned-cell segmentation-menu-list-bordered"},"Type: ",e.type),ln.a.createElement("th",{colSpan:"2",className:"right-aligned-cell segmentation-menu-list-bordered"},"Modified: ",e.modified)),ln.a.createElement("tr",{className:"segmentation-menu-list-bordered"},ln.a.createElement("th",null,"Paint"),ln.a.createElement("th",null,"Label"),ln.a.createElement("th",{className:"centered-cell"},"Type"),ln.a.createElement("th",{className:"centered-cell"},"Delete")))}}])&&Pn(t.prototype,o),a&&Pn(t,a),n}();function Kn(e){return(Kn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Xn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Yn(e){return(Yn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Jn(e,n){return(Jn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Zn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Qn=a.a.store.modules.brush,$n=Qn.state,et=document.createElement("style");et.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } ",document.head.appendChild(et);var nt=function(e){function n(){var e,t,o,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e=!(o=Yn(n).call(this,a))||"object"!==Kn(o)&&"function"!=typeof o?Zn(t):o;var i=Qn.getters.customGateRange();return e.state={holeFill:$n.holeFill,strayRemove:$n.strayRemove,activeGate:$n.activeGate,customGateRangeMin:i[0],customGateRangeMax:i[1]},e.onGateChange=e.onGateChange.bind(Zn(Zn(e))),e.onCustomGateMinChange=e.onCustomGateMinChange.bind(Zn(Zn(e))),e.onCustomGateMaxChange=e.onCustomGateMaxChange.bind(Zn(Zn(e))),e.onHoleFillChange=e.onHoleFillChange.bind(Zn(Zn(e))),e.onStrayRemoveChange=e.onStrayRemoveChange.bind(Zn(Zn(e))),e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Jn(e,n)}(n,ln.a.Component),t=n,(o=[{key:"onGateChange",value:function(e){var n=e.target.value;this.setState({activeGate:n}),$n.activeGate=n}},{key:"onCustomGateMinChange",value:function(e){var n=Number(e.target.value),t=this.state.customGateRangeMax;n>t-10&&(n=t-10,e.target.value=n),this.setState({customGateRangeMin:n}),Qn.setters.customGateRange(n,null)}},{key:"onCustomGateMaxChange",value:function(e){var n=Number(e.target.value),t=this.state.customGateRangeMin;n<t+10&&(n=t+10,e.target.value=n),this.setState({customGateRangeMax:n}),Qn.setters.customGateRange(null,n)}},{key:"onHoleFillChange",value:function(e){var n=Number(e.target.value);this.setState({holeFill:n}),$n.holeFill=n}},{key:"onStrayRemoveChange",value:function(e){var n=Number(e.target.value);this.setState({strayRemove:n}),$n.strayRemove=n}},{key:"render",value:function(){var e=$n.holeFillRange,n=$n.strayRemoveRange,t=this.state,o=t.holeFill,a=t.strayRemove,i=t.activeGate,r=$n.gates,l=0===o?"Don't fill holes.":"Fill holes <".concat(o,"% area of primary region."),c=0===a?"Paint all non-primary regions.":"Don't paint regions <".concat(a,"% area of primary region."),d=null;if("custom"===i){var u=Qn.getters.customGateRange();d=ln.a.createElement("div",null,ln.a.createElement("div",{className:"brush-settings-horizontal-box"},ln.a.createElement("label",{htmlFor:"customGateMin"},"Min:"),ln.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"customGateMin",min:-1024,max:3072,defaultValue:u[0],onChange:this.onCustomGateMinChange})),ln.a.createElement("div",{className:"brush-settings-horizontal-box"},ln.a.createElement("label",{htmlFor:"customGateMax"},"Max:"),ln.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"customGateMax",min:-1024,max:3072,defaultValue:u[1],onChange:this.onCustomGateMaxChange})))}return ln.a.createElement("div",{className:"segmentation-menu-footer"},ln.a.createElement("h3",null," Smart CT Gate Selection"),ln.a.createElement("select",{className:"form-themed form-control",onChange:this.onGateChange,value:i},r.map(function(e){return ln.a.createElement("option",{key:e.name,value:e.name},"".concat(e.name," [").concat(e.range[0],", ").concat(e.range[1],"]"))})),d,ln.a.createElement("h3",null," Smart/Auto Gate Settings "),ln.a.createElement("label",{htmlFor:"holeFill"},l),ln.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"holeFill",min:e[0],defaultValue:o,max:e[1],onChange:this.onHoleFillChange}),ln.a.createElement("label",{htmlFor:"strayRemove"},c),ln.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"strayRemove",min:n[0],defaultValue:a,max:n[1],onChange:this.onStrayRemoveChange}))}}])&&Xn(t.prototype,o),a&&Xn(t,a),n}();function tt(){this.setState({importing:!1,exporting:!1})}function ot(){console.log(this);var e=this.props.ImportCallbackOrComponent;e.prototype.isReactComponent?this.setState({importing:!0}):e()}function at(){var e=this.props.ExportCallbackOrComponent;e.prototype.isReactComponent?this.setState({exporting:!0}):e()}function it(e){return(it="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function rt(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function lt(e){return(lt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ct(e,n){return(ct=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function dt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var ut=document.createElement("style");ut.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .segmentation-menu {   color: var(--text-primary-color);   z-index: 1000;   text-align: center;   height: 100%; } .segmentation-menu .segmentation-menu-component {   height: 100%;   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center; } .segmentation-menu h3 {   font-weight: 400; } .segmentation-menu .segmentation-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   width: 100%; } .segmentation-menu .segmentation-menu-header a {   height: 30px;   width: 80px; } .segmentation-menu .segmentation-menu-list-bordered {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .segmentation-menu .segmentation-menu-new-button {   float: center;   width: 100%; } .segmentation-menu .segmentation-menu-list {   padding-right: 18px;   padding-left: 18px;   width: 100%;   overflow-y: auto;   overflow-x: hidden;   word-wrap: break-word;   scrollbar-color: var(--text-secondary-color) var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .segmentation-menu .segmentation-menu-list::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link {   color: var(--text-primary-color); } .segmentation-menu .segmentation-menu-list .segmentation-menu-name-link:hover {   color: var(--text-secondary-color); } .segmentation-menu .segmentation-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .segmentation-menu .segmentation-menu-footer select {   width: 80%;   text-align: center;   margin: 0 auto; } .segmentation-menu .segmentation-menu-footer label {   font-weight: 400;   float: left; } ",document.head.appendChild(ut);var st=a.a.store.modules.brush,mt=function(e){function n(){var e,t,o,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,(e=!(o=lt(n).call(this,a))||"object"!==it(o)&&"function"!=typeof o?dt(t):o).getSegmentList=e.getSegmentList.bind(dt(dt(e)));var i=$e(a.viewports,a.activeIndex),r=c(i),l=[],d=1,u=e.constructor._importMetadata(r);if(i){var s=e.getSegmentList(i,r);l=s.segments,d=s.segments}return e.state={importMetadata:u,segments:l,seriesInstanceUid:r,enabledElement:i,deleteConfirmationOpen:!1,segmentToDelete:1,activeSegmentIndex:d,importing:!1,exporting:!1},e.onSegmentChange=e.onSegmentChange.bind(dt(dt(e))),e.onEditClick=e.onEditClick.bind(dt(dt(e))),e.confirmDeleteOnDeleteClick=e.confirmDeleteOnDeleteClick.bind(dt(dt(e))),e.onDeleteCancelClick=e.onDeleteCancelClick.bind(dt(dt(e))),e.onDeleteConfirmClick=e.onDeleteConfirmClick.bind(dt(dt(e))),e.onImportButtonClick=ot.bind(dt(dt(e))),e.onExportButtonClick=at.bind(dt(dt(e))),e.onIOComplete=e.onIOComplete.bind(dt(dt(e))),e.onIOCancel=tt.bind(dt(dt(e))),e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&ct(e,n)}(n,ln.a.Component),t=n,a=[{key:"_importMetadata",value:function(e){var n=st.getters.importMetadata(e);return n?{label:n.label,type:n.type,name:n.name,modified:n.modified?"true":" false"}:{name:"New Segmentation Collection",label:""}}},{key:"_segments",value:function(e){var n=st.getters.metadata(e);if(!n)return[];for(var t=[],o=0;o<n.length;o++)n[o]&&t.push({index:o,metadata:n[o]});return t}}],(o=[{key:"getSegmentList",value:function(e,n){return e=e||this.state.enabledElement,n=n||this.state.seriesInstanceUid,e&&n?{segments:this.constructor._segments(e),activeSegmentIndex:st.getters.activeSegmentIndex(e)}:[]}},{key:"onIOComplete",value:function(){var e=this.state.seriesInstanceUid,n=e.seriesInstanceUid,t=e.enabledElement,o=this.constructor._importMetadata(n),a=this.constructor._segments(t),i=st.getters.activeSegmentIndex(t);this.setState({importMetadata:o,segments:a,activeSegmentIndex:i,importing:!1,exporting:!1})}},{key:"onSegmentChange",value:function(e){var n=this.state.element;st.setters.activeSegmentIndex(n,e),this.setState({activeSegmentIndex:e})}},{key:"onEditClick",value:function(e,n){Gn()}},{key:"confirmDeleteOnDeleteClick",value:function(e){this.setState({deleteConfirmationOpen:!0,segmentToDelete:e})}},{key:"onDeleteConfirmClick",value:function(){var e=this.state,n=e.segmentToDelete,t=e.enabledElement;st.setters.deleteSegment(t,n);var o=this.constructor._segments(t);this.setState({deleteConfirmationOpen:!1,segments:o})}},{key:"onDeleteCancelClick",value:function(){this.setState({deleteConfirmationOpen:!1})}},{key:"render",value:function(){var e,n=this.state,t=n.importMetadata,o=n.segments,a=n.deleteConfirmationOpen,i=n.segmentToDelete,r=n.activeSegmentIndex,l=n.enabledElement,c=n.importing,d=n.exporting,u=this.props,s=u.ImportCallbackOrComponent,m=u.ExportCallbackOrComponent;if(c)e=ln.a.createElement(s,{onImportComplete:this.onIOComplete,onImportCancel:this.onIOCancel});else if(d)e=ln.a.createElement(m,{onExportComplete:this.onIOComplete,onExportCancel:this.onIOCancel});else if(a){var p=o.find(function(e){return e.index===i}).metadata.SegmentLabel;e=ln.a.createElement(yn,{segmentLabel:p,onDeleteConfirmClick:this.onDeleteConfirmClick,onDeleteCancelClick:this.onDeleteCancelClick})}else e=ln.a.createElement("div",{className:"segmentation-menu-component"},ln.a.createElement("div",{className:"segmentation-menu-list"},ln.a.createElement("div",{className:"segmentation-menu-header"},ln.a.createElement("h3",null,"Segments"),ln.a.createElement(pn,{ImportCallbackOrComponent:s,ExportCallbackOrComponent:m,onImportButtonClick:this.onImportButtonClick,onExportButtonClick:this.onExportButtonClick})),ln.a.createElement("table",{className:"peppermint-table"},ln.a.createElement("tbody",null,ln.a.createElement(Wn,{importMetadata:t}),ln.a.createElement(_n,{segments:o,activeSegmentIndex:r,onSegmentChange:this.onSegmentChange,onEditClick:this.onEditClick,onDeleteClick:this.confirmDeleteOnDeleteClick,enabledElement:l})))),ln.a.createElement(nt,null));return ln.a.createElement(ln.a.Fragment,null,e)}}])&&rt(t.prototype,o),a&&rt(t,a),n}();function pt(e){return(pt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ct(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function gt(e,n){return!n||"object"!==pt(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function St(e){return(St=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ft(e,n){return(ft=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var ht=document.createElement("style");ht.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .roi-contour-menu {   color: var(--text-primary-color);   text-align: center;   height: 100%; } .roi-contour-menu .roi-contour-menu-component {   height: 100%; } .roi-contour-menu h3 {   font-weight: 400; } .roi-contour-menu .roi-contour-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   padding-right: 18px;   padding-left: 18px;   width: 100%; } .roi-contour-menu .roi-contour-menu-header a {   height: 30px;   width: 80px; } .roi-contour-menu .roi-contour-menu-collection-list-body {   height: calc(90% - 180px);   padding-right: 18px;   padding-left: 18px;   overflow-y: auto;   overflow-x: hidden;   scrollbar-color: var(--text-secondary-color) var(ui-gray-darkest);   word-wrap: break-word; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link {   color: var(--text-primary-color); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link:hover {   color: var(--text-secondary-color); } .roi-contour-menu .roi-contour-menu-new-button {   float: center;   width: 100%; } .roi-contour-menu .roi-list-header {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .roi-contour-menu .roi-contour-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-align: center;       align-items: center; } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option svg {   background-color: transparent;   width: 50px;   height: 50px; } ",document.head.appendChild(ht);var Dt=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),gt(this,St(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&ft(e,n)}(n,ln.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.roiContourIndex,t=e.metadata,o=e.onRoiChange,a=e.onRenameButtonClick,i=e.activeROIContourIndex===n,r=t.name,l=t.polygonCount,c=t.color;return ln.a.createElement("tr",null,ln.a.createElement("td",{className:"left-aligned-cell"},ln.a.createElement("i",{className:"fa fa-square",style:{color:c}})," ",ln.a.createElement("input",{type:"radio",checked:i,onChange:function(){return o(n)}})),ln.a.createElement("td",{className:"left-aligned-cell"},ln.a.createElement("a",{className:"roi-contour-menu-name-link",onClick:function(){a(t)}},r)),ln.a.createElement("td",null,l))}}])&&Ct(t.prototype,o),a&&Ct(t,a),n}();function yt(e){return(yt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bt(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Tt(e,n){return!n||"object"!==yt(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function Mt(e){return(Mt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function xt(e,n){return(xt=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var vt=document.createElement("style");vt.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .roi-contour-menu {   color: var(--text-primary-color);   text-align: center;   height: 100%; } .roi-contour-menu .roi-contour-menu-component {   height: 100%; } .roi-contour-menu h3 {   font-weight: 400; } .roi-contour-menu .roi-contour-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   padding-right: 18px;   padding-left: 18px;   width: 100%; } .roi-contour-menu .roi-contour-menu-header a {   height: 30px;   width: 80px; } .roi-contour-menu .roi-contour-menu-collection-list-body {   height: calc(90% - 180px);   padding-right: 18px;   padding-left: 18px;   overflow-y: auto;   overflow-x: hidden;   scrollbar-color: var(--text-secondary-color) var(ui-gray-darkest);   word-wrap: break-word; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link {   color: var(--text-primary-color); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link:hover {   color: var(--text-secondary-color); } .roi-contour-menu .roi-contour-menu-new-button {   float: center;   width: 100%; } .roi-contour-menu .roi-list-header {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .roi-contour-menu .roi-contour-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-align: center;       align-items: center; } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option svg {   background-color: transparent;   width: 50px;   height: 50px; } ",document.head.appendChild(vt);var It=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Tt(this,Mt(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&xt(e,n)}(n,ln.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.workingCollection,t=e.activeROIContourIndex,o=e.onRoiChange,a=e.onRenameButtonClick,i=e.onNewRoiButtonClick;return ln.a.createElement(ln.a.Fragment,null,ln.a.createElement("tr",{className:"roi-list-header"},ln.a.createElement("th",null),ln.a.createElement("th",{colSpan:"4"}," New ROI Contour Collection")),ln.a.createElement("tr",null,ln.a.createElement("th",null,"Draw"),ln.a.createElement("th",null,"Name"),ln.a.createElement("th",{className:"centered-cell"},"Contours")),n.map(function(e){return ln.a.createElement(Dt,{key:e.metadata.uid,roiContourIndex:e.index,metadata:e.metadata,activeROIContourIndex:t,onRoiChange:o,onRenameButtonClick:a})}),ln.a.createElement("tr",null,ln.a.createElement("th",null),ln.a.createElement("th",null,ln.a.createElement("a",{className:"roi-contour-menu-new-button btn btn-sm btn-primary",onClick:i},ln.a.createElement("i",{className:"fa fa-plus-circle"})," ROI"))))}}])&&bt(t.prototype,o),a&&bt(t,a),n}();function Rt(e){return(Rt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Lt(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Nt(e){return(Nt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ot(e,n){return(Ot=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Ut(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Gt=a.a.store.modules,Et=function(e){function n(){var e,t,o,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=this;var i=(e=!(o=Nt(n).call(this,a))||"object"!==Rt(o)&&"function"!=typeof o?Ut(t):o).props.collection.metadata.visible;return e.state={expanded:!1,visible:i},e.onToggleVisibilityClick=e.onToggleVisibilityClick.bind(Ut(Ut(e))),e.onShowHideClick=e.onShowHideClick.bind(Ut(Ut(e))),e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Ot(e,n)}(n,ln.a.Component),t=n,(o=[{key:"onToggleVisibilityClick",value:function(){var e=this.state.expanded;this.setState({expanded:!e})}},{key:"onShowHideClick",value:function(){var e=this.props,n=e.collection,t=e.seriesInstanceUid,o=this.state.visible;Gt.freehand3D.getters.structureSet(t,n.metadata.uid).visible=!o,this.setState({visible:!o})}},{key:"render",value:function(){var e=this.props,n=e.collection,t=e.onUnlockClick,o=this.state,a=o.expanded,i=o.visible,r=n.metadata,l=n.ROIContourArray,c=a?"fa fa-minus-square":"fa fa-plus-square",d=i?"fa fa-eye":"fa fa-eye-slash";return ln.a.createElement(ln.a.Fragment,null,ln.a.createElement("tr",{className:"roi-list-header"},ln.a.createElement("td",{className:"centered-cell"},ln.a.createElement("a",{className:"btn btn-sm btn-secondary",onClick:this.onToggleVisibilityClick},ln.a.createElement("i",{className:c}))),ln.a.createElement("th",{colSpan:"2"},r.name),ln.a.createElement("td",{className:"centered-cell"},ln.a.createElement("a",{className:"btn btn-sm btn-secondary",onClick:this.onShowHideClick},ln.a.createElement("i",{className:d}))),ln.a.createElement("td",{className:"centered-cell"},ln.a.createElement("a",{className:"btn btn-sm btn-secondary",onClick:function(){t(r.uid)}},ln.a.createElement("i",{className:"fa fa-unlock"})))),a&&ln.a.createElement(ln.a.Fragment,null,ln.a.createElement("tr",null,ln.a.createElement("th",null),ln.a.createElement("th",null,"Name"),ln.a.createElement("th",{className:"centered-cell"},"Contours")),l.map(function(e){return ln.a.createElement("tr",{key:e.metadata.uid},ln.a.createElement("td",{className:"left-aligned-cell"},ln.a.createElement("i",{className:"fa fa-square",style:{color:e.metadata.color}})),ln.a.createElement("td",{className:"left-aligned-cell"},e.metadata.name),ln.a.createElement("td",{className:"centered-cell"},e.metadata.polygonCount))})))}}])&&Lt(t.prototype,o),a&&Lt(t,a),n}();function Vt(e){return(Vt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wt(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function kt(e,n){return!n||"object"!==Vt(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function Bt(e){return(Bt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function At(e,n){return(At=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var _t=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),kt(this,Bt(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&At(e,n)}(n,ln.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.lockedCollections,t=e.onUnlockClick,o=e.seriesInstanceUid;return ln.a.createElement(ln.a.Fragment,null,n.map(function(e){return ln.a.createElement(Et,{key:e.metadata.uid,collection:e,onUnlockClick:t,seriesInstanceUid:o})}))}}])&&wt(t.prototype,o),a&&wt(t,a),n}();function jt(e){return(jt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Pt(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Ft(e){return(Ft=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ht(e,n){return(Ht=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function qt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var zt=a.a.store.modules,Wt=document.createElement("style");Wt.innerHTML=".peppermint-table {   width: 100%; } .peppermint-table tr, .peppermint-table th, .peppermint-table td {   padding: 0px 5px;   word-wrap: break-word; } .peppermint-table .centered-cell {   text-align: center; } .peppermint-table .left-aligned-cell {   text-align: left; } .peppermint-table .right-aligned-cell {   text-align: right; } .roi-contour-menu {   color: var(--text-primary-color);   text-align: center;   height: 100%; } .roi-contour-menu .roi-contour-menu-component {   height: 100%; } .roi-contour-menu h3 {   font-weight: 400; } .roi-contour-menu .roi-contour-menu-header {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: row;       flex-direction: row;   -ms-flex-pack: justify;       justify-content: space-between;   -ms-flex-align: center;       align-items: center;   padding-right: 18px;   padding-left: 18px;   width: 100%; } .roi-contour-menu .roi-contour-menu-header a {   height: 30px;   width: 80px; } .roi-contour-menu .roi-contour-menu-collection-list-body {   height: calc(90% - 180px);   padding-right: 18px;   padding-left: 18px;   overflow-y: auto;   overflow-x: hidden;   scrollbar-color: var(--text-secondary-color) var(ui-gray-darkest);   word-wrap: break-word; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar {   background: var(--ui-gray-darkest);   width: 10px; } .roi-contour-menu .roi-contour-menu-collection-list-body::-webkit-scrollbar-thumb {   background: var(--text-secondary-color);   border-radius: 10px;   border-right: 2px solid var(--ui-gray-darkest); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link {   color: var(--text-primary-color); } .roi-contour-menu .roi-contour-menu-collection-list-body .roi-contour-menu-name-link:hover {   color: var(--text-secondary-color); } .roi-contour-menu .roi-contour-menu-new-button {   float: center;   width: 100%; } .roi-contour-menu .roi-list-header {   border-width: 1px;   border-top-style: solid;   border-bottom-style: solid; } .roi-contour-menu .roi-contour-menu-footer {   margin: 10px;   padding: 10px;   background: var(--ui-gray-dark);   border: 1px solid var(--ui-border-color); } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option {   display: -ms-flexbox;   display: flex;   -ms-flex-direction: column;       flex-direction: column;   -ms-flex-align: center;       align-items: center; } .roi-contour-menu .roi-contour-menu-footer .roi-contour-menu-option svg {   background-color: transparent;   width: 50px;   height: 50px; } ",document.head.appendChild(Wt);var Kt=function(e){function n(){var e,t,o,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e=!(o=Ft(n).call(this,a))||"object"!==jt(o)&&"function"!=typeof o?qt(t):o;var i=zt.freehand3D.state,r=i.interpolate,l=i.displayStats;return e.state={interpolate:r,displayStats:l},e.onDisplayStatsToggleClick=e.onDisplayStatsToggleClick.bind(qt(qt(e))),e.onInterpolateToggleClick=e.onInterpolateToggleClick.bind(qt(qt(e))),e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Ht(e,n)}(n,ln.a.Component),t=n,(o=[{key:"onDisplayStatsToggleClick",value:function(){zt.freehand3D.setters.toggleDisplayStats(),this.setState({displayStats:zt.freehand3D.state.displayStats})}},{key:"onInterpolateToggleClick",value:function(){zt.freehand3D.setters.toggleInterpolate(),this.setState({interpolate:zt.freehand3D.state.interpolate})}},{key:"render",value:function(){var e=this.state,n=e.interpolate,t=e.displayStats;return ln.a.createElement("div",{className:"roi-contour-menu-footer"},ln.a.createElement("h3",null,"Settings"),ln.a.createElement("a",{className:"btn btn-sm btn-secondary",onClick:this.onInterpolateToggleClick},ln.a.createElement("div",{className:"roi-contour-menu-option"},ln.a.createElement("svg",null,ln.a.createElement("use",{href:n?"assets/icons.svg#icon-freehand-interpolate-on":"assets/icons.svg#icon-freehand-interpolate-off"})),ln.a.createElement("label",null,"Interpolation"))),ln.a.createElement("a",{className:"btn btn-sm btn-secondary",onClick:this.onDisplayStatsToggleClick},ln.a.createElement("div",{className:"roi-contour-menu-option"},ln.a.createElement("svg",null,ln.a.createElement("use",{xlinkHref:t?"assets/icons.svg#icon-freehand-stats-on":"assets/icons.svg#icon-freehand-stats-off"})),ln.a.createElement("label",null,"Stats"))))}}])&&Pt(t.prototype,o),a&&Pt(t,a),n}();var Xt=o.store.modules,Yt=o.globalImageIdSpecificToolStateManager,Jt=function(e,n){for(var t=Xt.freehand3D,o=t.getters.structureSet(e,n).ROIContourCollection,a=t.getters.structureSet(e),i=0;i<o.length;i++){var l=o[i];t.setters.ROIContour(e,"DEFAULT",l.name,{uid:l.uid,polygonCount:l.polygonCount,color:l.color})}var c=Yt.saveToolState();Object.keys(c).forEach(function(n){var t;(t=n,r.a.metaData.get("generalSeriesModule",t).seriesInstanceUID===e)&&(c&&c[n]&&c[n].freehandRoi&&function(e,n,t){for(var o=Xt.freehand3D,a=0;a<n.length;a++){var i=n[a],r=o.getters.ROIContour(t,"DEFAULT",i.ROIContourUid),l=o.getters.structureSet(t,"DEFAULT");i.structureSetUid="DEFAULT",i.referencedROIContour=r,i.referencedStructureSet=l}}(0,c[n].freehandRoi.data,e))}),t.setters.deleteStructureSet(e,n),null===a.activeROIContourIndex&&(a.activeROIContourIndex=0)};function Zt(e){return(Zt="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Qt(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function $t(e){return($t=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function eo(e,n){return(eo=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function no(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var to=a.a.store.modules,oo=function(e){function n(){var e,t,o,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e=!(o=$t(n).call(this,a))||"object"!==Zt(o)&&"function"!=typeof o?no(t):o;var i=c($e(a.viewports,a.activeIndex));e.getRoiContourList=e.getRoiContourList.bind(no(no(e)));var r=[],l=[],d=1;if(i){var u=e.getRoiContourList(i);r=u.workingCollection,l=u.lockedCollections,d=u.activeROIContourIndex}return e.state={workingCollection:r,lockedCollections:l,unlockConfirmationOpen:!1,roiCollectionToUnlock:"",activeROIContourIndex:d,importing:!1,exporting:!1,seriesInstanceUid:i},e.onNewRoiButtonClick=e.onNewRoiButtonClick.bind(no(no(e))),e.onRoiChange=e.onRoiChange.bind(no(no(e))),e.onRenameButtonClick=e.onRenameButtonClick.bind(no(no(e))),e.confirmUnlockOnUnlockClick=e.confirmUnlockOnUnlockClick.bind(no(no(e))),e.onUnlockCancelClick=e.onUnlockCancelClick.bind(no(no(e))),e.onUnlockConfirmClick=e.onUnlockConfirmClick.bind(no(no(e))),e.onIOComplete=e.onIOComplete.bind(no(no(e))),e.onIOCancel=tt.bind(no(no(e))),e.onImportButtonClick=ot.bind(no(no(e))),e.onExportButtonClick=at.bind(no(no(e))),e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&eo(e,n)}(n,ln.a.Component),t=n,a=[{key:"_workingCollection",value:function(e){var n=to.freehand3D,t=n.getters.series(e);t||(n.setters.series(e),t=n.getters.series(e));for(var o=n.getters.structureSet(e).ROIContourCollection,a=[],i=0;i<o.length;i++)o[i]&&a.push({index:i,metadata:o[i]});return a}},{key:"_lockedCollections",value:function(e){var n=to.freehand3D,t=n.getters.series(e);t||(n.setters.series(e),t=n.getters.series(e));for(var o=t.structureSetCollection,a=[],i=0;i<o.length;i++){var r=o[i];if("DEFAULT"!==r.uid){for(var l=r.ROIContourCollection,c=[],d=0;d<l.length;d++)l[d]&&c.push({index:d,metadata:l[d]});a.push({metadata:r,ROIContourArray:c})}}return a}}],(o=[{key:"getRoiContourList",value:function(e){var n=[],t=[],o=0;if(e=e||this.state.seriesInstanceUid){var a=to.freehand3D;to.freehand3D.getters.series(e)&&(o=a.getters.activeROIContourIndex(e)),n=this.constructor._workingCollection(e),t=this.constructor._lockedCollections(e)}return{workingCollection:n,lockedCollections:t,activeROIContourIndex:o}}},{key:"refreshRoiContourList",value:function(){var e=this.state.seriesInstanceUid,n=this.getRoiContourList(e),t=n.workingCollection,o=n.lockedCollections,a=n.activeROIContourIndex;this.setState({workingCollection:t,lockedCollections:o,activeROIContourIndex:a})}},{key:"onIOComplete",value:function(){var e=this.state.seriesInstanceUid,n=to.freehand3D,t=0;to.freehand3D.getters.series(e)&&(t=n.getters.activeROIContourIndex(e));var o=this.constructor._workingCollection(e),a=this.constructor._lockedCollections(e);this.setState({workingCollection:o,lockedCollections:a,activeROIContourIndex:t,importing:!1,exporting:!1})}},{key:"onNewRoiButtonClick",value:function(){var e=this.state.seriesInstanceUid,n=to.freehand3D,t=n.getters.series(e);t||(n.setters.series(e),t=n.getters.series(e));var o=n.setters.ROIContourAndSetIndexActive(e,"DEFAULT","Unnamed Lesion"),a=this.constructor._workingCollection(e);this.setState({workingCollection:a,activeROIContourIndex:o})}},{key:"onRoiChange",value:function(e){var n=this.state.seriesInstanceUid;to.freehand3D.setters.activeROIContourIndex(e,n),this.setState({activeROIContourIndex:e})}},{key:"onRenameButtonClick",value:function(e){}},{key:"confirmUnlockOnUnlockClick",value:function(e){this.setState({unlockConfirmationOpen:!0,roiCollectionToUnlock:e})}},{key:"onUnlockConfirmClick",value:function(){var e=this.state,n=e.seriesInstanceUid,t=e.roiCollectionToUnlock;Jt(n,t);var o=this.constructor._workingCollection(n),a=this.constructor._lockedCollections(n);this.setState({unlockConfirmationOpen:!1,workingCollection:o,lockedCollections:a})}},{key:"onUnlockCancelClick",value:function(){this.setState({unlockConfirmationOpen:!1})}},{key:"render",value:function(){var e,n=this.state,t=n.workingCollection,o=n.lockedCollections,a=n.unlockConfirmationOpen,i=n.roiCollectionToUnlock,r=n.activeROIContourIndex,l=n.importing,c=n.exporting,d=n.seriesInstanceUid,u=this.props,s=u.ImportCallbackOrComponent,m=u.ExportCallbackOrComponent,p=to.freehand3D;if(l)e=ln.a.createElement(s,{onImportComplete:this.onIOComplete,onImportCancel:this.onIOCancel});else if(c)e=ln.a.createElement(m,{onExportComplete:this.onIOComplete,onExportCancel:this.onIOCancel});else if(a){var C=p.getters.structureSet(d,i).name;e=ln.a.createElement("div",null,ln.a.createElement("div",null,ln.a.createElement("h5",null,"Unlock"),ln.a.createElement("p",null,"Unlock ",C," for editing? The ROIs will be moved to the Working ROI Collection.")),ln.a.createElement("div",null,ln.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:this.onUnlockConfirmClick},ln.a.createElement("i",{className:"fa fa fa-check-circle fa-2x"})),ln.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:this.onUnlockCancelClick},ln.a.createElement("i",{className:"fa fa fa-times-circle fa-2x"}))))}else e=ln.a.createElement("div",{className:"roi-contour-menu-component"},ln.a.createElement("div",{className:"roi-contour-menu-header"},ln.a.createElement("h3",null,"ROI Contour Collections"),ln.a.createElement(pn,{ImportCallbackOrComponent:s,ExportCallbackOrComponent:m,onImportButtonClick:this.onImportButtonClick,onExportButtonClick:this.onExportButtonClick})),ln.a.createElement("div",{className:"roi-contour-menu-collection-list-body"},ln.a.createElement("table",{className:"peppermint-table"},ln.a.createElement("tbody",null,d&&ln.a.createElement(It,{workingCollection:t,activeROIContourIndex:r,onRoiChange:this.onRoiChange,onRenameButtonClick:this.onRenameButtonClick,onNewRoiButtonClick:this.onNewRoiButtonClick}),0!==o.length&&ln.a.createElement(_t,{lockedCollections:o,onUnlockClick:this.confirmUnlockOnUnlockClick,seriesInstanceUid:d})))),ln.a.createElement(Kt,null));return ln.a.createElement(ln.a.Fragment,null,e)}}])&&Qt(t.prototype,o),a&&Qt(t,a),n}(),ao="setToolActive";n.default={id:"ohif-segmentation-extension",preRegistration:function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Ze.brush,t=Object.assign({},Qe,e);!function(e,n){var t=e.state,o=e.getters,a=e.setters;t.holeFill=n.holeFill,t.holeFillRange=n.holeFillRange,t.strayRemove=n.strayRemove,t.strayRemoveRange=n.strayRemoveRange,t.gates=n.gates,t.activeGate=t.gates[0].name,t.maxRadius=n.maxRadius,o.activeGateRange=function(){var e=t.activeGate,n=t.gates.findIndex(function(n){return n.name===e});return t.gates[n].range},o.customGateRange=function(){var e=t.gates.findIndex(function(e){return"custom"===e.name});return t.gates[e].range},a.customGateRange=function(e,n){var o=t.gates.findIndex(function(e){return"custom"===e.name}),a=t.gates[o].range;null!==e&&(a[0]=e),null!==n&&(a[1]=n)},o.importMetadata=function(n){if(e.state.import&&e.state.import[n])return e.state.import[n]},a.importMetadata=function(n,t){e.state.import||(e.state.import={}),e.state.import[n]=t},a.importModified=function(n){var t=e.state.import[n];t.modified||(t.modified=!0)}}(n,t),Object(o.register)("module","freehand3D",h);var a=Ze.freehand3D;a.state.interpolate=t.interpolate,a.state.displayStats=t.showFreehandStats,Object(o.addTool)(N,{name:t.brush3dToolName}),Object(o.addTool)(F,{name:t.brush3DHUGatedToolName}),Object(o.addTool)(J,{name:t.brush3DAutoGatedTool}),Object(o.addTool)(je,{name:t.freehandRoi3DTool}),Object(o.addTool)(Ye,{name:t.freehandRoi3DSculptorTool,referencedToolName:t.freehandRoi3DTool}),Je.FREEHAND_ROI_3D_TOOL=t.freehandRoi3DTool,Je.FREEHAND_ROI_3D_SCULPTOR_TOOL=t.freehandRoi3DSculptorTool,Je.BRUSH_3D_TOOL=t.brush3dToolName,Je.BRUSH_3D_AUTO_GATED_TOOL=t.brush3DAutoGatedTool,Je.BRUSH_3D_HU_GATED_TOOL=t.brush3DHUGatedToolName,console.log(t),console.log(Je)}(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},getCommandsModule:function(){return an},getToolbarModule:function(){return{definitions:[{id:"freehandRoiTools",label:"ROI",icon:"level",buttons:[{id:"FreehandRoi",label:"Draw",icon:"level",type:ao,commandName:"setToolActive",commandOptions:{toolName:Je.FREEHAND_ROI_3D_TOOL}},{id:"FreehandRoiSculptor",label:"Sculpt",icon:"level",type:ao,commandName:"setToolActive",commandOptions:{toolName:Je.FREEHAND_ROI_3D_SCULPTOR_TOOL}}]},{id:"brushTools",label:"Segment",icon:"level",buttons:[{id:"Brush",label:"Manual",icon:"level",type:ao,commandName:"setToolActive",commandOptions:{toolName:Je.BRUSH_3D_TOOL}},{id:"Brush3DHUGatedTool",label:"Smart CT",icon:"level",type:ao,commandName:"setToolActive",commandOptions:{toolName:Je.BRUSH_3D_HU_GATED_TOOL}},{id:"Brush3DAutoGatedTool",label:"Auto",icon:"level",type:ao,commandName:"setToolActive",commandOptions:{toolName:Je.BRUSH_3D_AUTO_GATED_TOOL}}]}],defaultContext:"ACTIVE_VIEWPORT::CORNERSTONE"}},getPanelModule:function(){return{menuOptions:[{icon:"th-list",label:"Segments",target:"segment-panel"},{icon:"th",label:"Contours",target:"contour-panel"}],components:[{id:"segment-panel",component:mt},{id:"contour-panel",component:oo}],defaultContext:["VIEWER"]}}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,