!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n(require("react"),require("cornerstone-tools"),require("cornerstone-core"),require("cornerstone-math")):"function"==typeof define&&define.amd?define("ohif-segmentation-plugin",["react","cornerstone-tools","cornerstone-core","cornerstone-math"],n):"object"==typeof exports?exports["ohif-segmentation-plugin"]=n(require("react"),require("cornerstone-tools"),require("cornerstone-core"),require("cornerstone-math")):e["ohif-segmentation-plugin"]=n(e.react,e["cornerstone-tools"],e["cornerstone-core"],e["cornerstone-math"])}("undefined"!=typeof self?self:this,function(e,n,t,o){return function(e){var n={};function t(o){if(n[o])return n[o].exports;var a=n[o]={i:o,l:!1,exports:{}};return e[o].call(a.exports,a,a.exports,t),a.l=!0,a.exports}return t.m=e,t.c=n,t.d=function(e,n,o){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:o})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(t.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var a in e)t.d(o,a,function(n){return e[n]}.bind(null,a));return o},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=5)}([function(n,t){n.exports=e},function(e,t){e.exports=n},function(e,n){e.exports=t},function(e,n,t){"use strict";e.exports=function(e){var n,t,o,a,i,r,c,l,d,u,s,C,m=function(e){var n=e.currentArgs,t=e.previousArgs;p(n)||(g(n),S(n)?(D(n),h(n)):f(t))},p=function(e){return!0===s[e]},g=function(e){s[e]=!0},S=function(e){var n=T(y,[e]);return T(i,[n,c])},D=function(e){u.push(e),o.apply(void 0,e)},f=function(e){C[e]=e,a.apply(void 0,e)},h=function(e){for(var n=0;n<l.length;n+=1){for(var t=l[n],o=e.slice(0),a=0;a<e.length;a+=1)o[a]+=t[a];d.push({currentArgs:o,previousArgs:e})}},y=function(e){return n.apply(void 0,e)},T=function(e,n){try{return e.apply(void 0,n)}catch(e){}},M=function(){},b=function(e,n){return e===n},I=function(){return R(t.length).filter(function(e){var n=N(e);return 0!==n&&(1===n||r)})},R=function(e){for(var n=[],t=function(e){return e.split("").map(function(e){return parseInt(e,10)-1})},o=0;o<Math.pow(3,e);o+=1){var a=L(o.toString(3),"0",e);n.push(t(a))}return n},L=function(e,n,t){return(new Array(t+1).join(n)+e).slice(-t)},N=function(e){for(var n=0,t=0;t<e.length;t+=1)0!==e[t]&&(n+=1);return n},v=function(){var e=[];for(var n in C)C.hasOwnProperty(n)&&e.unshift(C[n]);return e};return n=e.getter,t=e.seed,o=e.onFlood||M,a=e.onBoundary||M,i=e.equals||b,r=e.diagonals||!1,c=y(t),l=I(),d=[],u=[],s={},C={},function(){for(d.push({currentArgs:t});d.length>0;)m(d.pop());return{flooded:u,boundaries:v()}}()}},function(e,n){e.exports=o},function(e,n,t){"use strict";t.r(n);var o=t(1),a=t.n(o),i=t(2),r=t.n(i),c=function(){var e=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(e+=performance.now()),"x.x.x.x.x.x.xxxx.xxx.x.x.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx".replace(/[xy]/g,function(n){var t=(e+16*Math.random())%16|0;return e=Math.floor(e/16),("x"===n?t:3&t|8).toString(16)})};function l(e){if(e){var n=e.image.imageId;return r.a.metaData.get("generalSeriesModule",n).seriesInstanceUID}}var d={seriesCollection:[],interpolate:!1,displayStats:!1};function u(e,n){if(!e)throw new Error("Insufficient information provided, must provide ".concat(n,"."))}function s(e){return u(e,"seriesInstanceUid"),d.seriesCollection.find(function(n){return n.uid===e})}function C(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT";u(n,"structureSetUid");var t=s(e);if(t)return t.structureSetCollection.find(function(e){return e.uid===n})}function m(e,n,t){u(t,"ROIContourUid");var o=C(e,n);if(o)return o.ROIContourCollection.find(function(e){return e&&e.uid===t})}function p(e){u(e);var n={uid:e,activeStructureSetIndex:null,structureSetCollection:[]};d.seriesCollection.push(n),g(e,"default",{uid:"DEFAULT"})}function g(e,n){var t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};u(n,"name");var o=s(e);o||(p(e),o=s(e));var a={uid:t.uid?t.uid:c(),name:n,isLocked:!!t.isLocked&&t.isLocked,visible:!t.visible||t.visible,activeROIContourIndex:void 0!==t.activeROIContourIndex?t.activeROIContourIndex:null,ROIContourCollection:[]};o.structureSetCollection.push(a)}function S(e,n,t){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};u(t,"name");var a=C(e,n);if(!a)throw new Error("Cannot generate ROIContour, as the structureSet with ".concat(n," does not exist."));var i={uid:o.uid?o.uid:c(),name:t,color:o.color?o.color:function(){++y>=h.length&&(y=0);return h[y]}(),polygonCount:o.polygonCount?o.polygonCount:0};return a.ROIContourCollection.push(i),i.uid}var D={series:p,structureSet:g,ROIContour:S,ROIContourAndSetIndexActive:function(e,n,t){S(e,n,t,arguments.length>3&&void 0!==arguments[3]?arguments[3]:{});var o=C(e,n),a=o.ROIContourCollection.length-1;return o.activeROIContourIndex=a,a},deleteROIFromStructureSet:function(e,n,t){var o=C(e,n).ROIContourCollection,a=o.findIndex(function(e){return e.uid===t});o.splice(a,1)},deleteStructureSet:function(e,n){var t=s(e).structureSetCollection,o=t.findIndex(function(e){return e.uid===n});t.splice(o,1)},structureSetName:function(e,n,t){u(e,"name"),C(n,t).name=e},ROIContourName:function(e,n,t,o){u(e,"name"),m(n,t,o).name=e},activeStructureSetIndex:function(e,n){u(e,"index"),s(n).activeStructureSetIndex=e},activeStructureSet:function(e,n){u(n,"structureSetUid");var t=s(e),o=t.structureSetCollection.findIndex(function(e){return e.uid===n});t.activeStructureSetIndex=o},activeROIContourIndex:function(e,n){C(n,arguments.length>2&&void 0!==arguments[2]?arguments[2]:"DEFAULT").activeROIContourIndex=e},activeROIContour:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT",t=arguments.length>2?arguments[2]:void 0;u(t,"ROIContourUid");var o=C(e,n),a=o.ROIContourCollection.findIndex(function(e){return e.uid===t});o.activeROIContourIndex=a},incrementPolygonCount:function(e,n,t){m(e,n,t).polygonCount++},decrementPolygonCount:function(e,n,t){m(e,n,t).polygonCount--},toggleInterpolate:function(){d.interpolate=!d.interpolate},toggleDisplayStats:function(){d.displayStats=!d.displayStats}};var f={state:d,enabledElementCallback:function(e){var n=r.a.getEnabledElement(e);if(n.image){var t=l(n);s(t)||p(t)}},getters:{series:s,structureSet:C,ROIContour:m,ROIContourIndex:function(e,n,t){u(t,"ROIContourUid");var o=C(e,n);if(o)return o.ROIContourCollection.findIndex(function(e){return e.uid===t})},activeStructureSetIndex:function(e){return s(e).activeStructureSetIndex},activeROIContourIndex:function(e){return C(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT").activeROIContourIndex},activeROIContour:function(e){var n=C(e,arguments.length>1&&void 0!==arguments[1]?arguments[1]:"DEFAULT"),t=n.activeROIContourIndex;if(null!=t)return n.ROIContourCollection[t]}},setters:D},h=["cornflowerblue","firebrick","goldenrod","blueviolet","indianred","orange","mediumturquoise","lightcoral","khaki","darkmagenta","lightseagreen","tomato","aquamarine","darksalmon","moccasin","orchid","skyblue","peru"],y=h.length;var T=JSON.parse('{\n  "SegmentationCategoryTypeContextName": "Segmentation category and type - 3D Slicer General Anatomy list",\n  "@schema": "https://raw.githubusercontent.com/qiicr/dcmqi/master/doc/schemas/segment-context-schema.json#",\n  "SegmentationCodes": {\n    "Category": [\n      {\n        "CodeMeaning": "Tissue",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "85756007",\n        "cid": "7051",\n        "UMLSConceptUID": "C0040300",\n        "CodeValue": "T-D0050",\n        "contextGroupName": "Segmentation Property Categories",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              128,\n              174,\n              128\n            ],\n            "CodeMeaning": "Tissue",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tissue",\n            "cid": "7166",\n            "UMLSConceptUID": "C0040300",\n            "CodeValue": "T-D0050",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "85756007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              101,\n              79\n            ],\n            "CodeMeaning": "Artery",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "artery",\n            "cid": "7166",\n            "UMLSConceptUID": "C0555806",\n            "CodeValue": "T-41066",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "275989006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              230,\n              220,\n              70\n            ],\n            "CodeMeaning": "Body fat",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "fat",\n            "cid": "7166",\n            "UMLSConceptUID": "C0344335",\n            "CodeValue": "F-03D38",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "248300009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              241,\n              214,\n              145\n            ],\n            "CodeMeaning": "Bone",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "bone",\n            "cid": "7166",\n            "UMLSConceptUID": "C0262950",\n            "CodeValue": "T-D016E",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "272673000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              183,\n              156,\n              220\n            ],\n            "CodeMeaning": "Capillary",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "capillary",\n            "cid": "7166",\n            "UMLSConceptUID": "C0006901",\n            "CodeValue": "T-40050",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "20982000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              111,\n              184,\n              210\n            ],\n            "CodeMeaning": "Cartilage",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cartilage",\n            "cid": "7166",\n            "UMLSConceptUID": "C0007301",\n            "CodeValue": "T-D021B",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "309312004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              111,\n              184,\n              210\n            ],\n            "CodeMeaning": "Connective tissue",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "connective tissue",\n            "cid": "7166",\n            "UMLSConceptUID": "C0009780",\n            "CodeValue": "T-1A200",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "21793004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              183,\n              214,\n              211\n            ],\n            "CodeMeaning": "Ligament",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "ligament",\n            "cid": "7166",\n            "UMLSConceptUID": "C0023685",\n            "CodeValue": "T-18010",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "52082005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              68,\n              172,\n              100\n            ],\n            "CodeMeaning": "Lymph node",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lymph node",\n            "cid": "7166",\n            "UMLSConceptUID": "C0024204",\n            "CodeValue": "T-C4000",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "59441001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              111,\n              197,\n              131\n            ],\n            "CodeMeaning": "Lymphatic vessel",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lymphatic vessel",\n            "cid": "7166",\n            "UMLSConceptUID": "C0229889",\n            "CodeValue": "T-C6010",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "83555006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              178,\n              212,\n              242\n            ],\n            "CodeMeaning": "Meniscus",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "meniscus",\n            "cid": "7166",\n            "UMLSConceptUID": "C0224498",\n            "CodeValue": "T-15009",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "74135004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              192,\n              104,\n              88\n            ],\n            "CodeMeaning": "Muscle",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscle",\n            "cid": "7166",\n            "UMLSConceptUID": "C0026845",\n            "CodeValue": "T-13001",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "71616004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              214,\n              49\n            ],\n            "CodeMeaning": "Nerve",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "nerve",\n            "cid": "7166",\n            "UMLSConceptUID": "C1268169",\n            "CodeValue": "T-D0598",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "119410002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              221,\n              130,\n              101\n            ],\n            "CodeMeaning": "Organ",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "organ",\n            "cid": "7166",\n            "UMLSConceptUID": "C1285092",\n            "CodeValue": "T-1A310",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "2861001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "CodeMeaning": "Skin",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skin",\n            "cid": "7166",\n            "UMLSConceptUID": "C1123023",\n            "CodeValue": "T-01000",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "39937001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              152,\n              189,\n              207\n            ],\n            "CodeMeaning": "Tendon",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tendon",\n            "cid": "7166",\n            "UMLSConceptUID": "C0039508",\n            "CodeValue": "T-17010",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "13024002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              0,\n              151,\n              206\n            ],\n            "CodeMeaning": "Vein",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "vein",\n            "cid": "7166",\n            "UMLSConceptUID": "C0447146",\n            "CodeValue": "T-4806E",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "181378009"\n          }\n        ],\n        "showAnatomy": true\n      },\n      {\n        "CodeMeaning": "Anatomical Structure",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "123037004",\n        "cid": "7051",\n        "UMLSConceptUID": "C1268086",\n        "CodeValue": "T-D000A",\n        "contextGroupName": "Segmentation Property Categories",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "abdomen",\n            "CodeValue": "T-D4000",\n            "UMLSConceptUID": "C0000726",\n            "CodeMeaning": "Abdomen",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "113345001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              186,\n              124,\n              161\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "abdominal cavity",\n            "CodeValue": "T-D4010",\n            "UMLSConceptUID": "C0230168",\n            "CodeMeaning": "Abdominal cavity",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "52731004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              171,\n              85,\n              68\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of abdominal wall",\n            "CodeValue": "T-14001",\n            "UMLSConceptUID": "C1279385",\n            "CodeMeaning": "Abdominal wall muscle",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "195879000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              60,\n              143,\n              83\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "adenohypophysis",\n            "CodeValue": "T-B1100",\n            "UMLSConceptUID": "C0032008",\n            "CodeMeaning": "Adenohypophysis",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "62818001"\n          },\n          {\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "cid": "7154",\n            "CodeMeaning": "Adrenal gland",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0001625",\n            "CodeValue": "T-B3000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  249,\n                  186,\n                  150\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right adrenal gland",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  249,\n                  186,\n                  150\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left adrenal gland",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "23451007"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Amygdala",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0002708",\n            "CodeValue": "T-A3230",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  98,\n                  153,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right amygdaloid complex",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  98,\n                  153,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left amygdaloid complex",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "4958002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              224,\n              199\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "anus",\n            "CodeValue": "T-59900",\n            "UMLSConceptUID": "C0003461",\n            "CodeMeaning": "Anus",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "53505006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              224,\n              97,\n              76\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "aorta",\n            "CodeValue": "T-42000",\n            "UMLSConceptUID": "C0003483",\n            "CodeMeaning": "Aorta",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "15825003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              218,\n              123,\n              97\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "aortic valve",\n            "CodeValue": "T-35400",\n            "UMLSConceptUID": "C0003501",\n            "CodeMeaning": "Aortic Valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "34202007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "arachnoid",\n            "CodeValue": "T-A1220",\n            "UMLSConceptUID": "C0003707",\n            "CodeMeaning": "Arachnoid",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "75042008"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Arcuate Fasciculus",\n            "CodingSchemeDesignator": "FMA",\n            "UMLSConceptUID": "C2329633",\n            "CodeValue": "276650",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  125,\n                  102,\n                  154\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right arcuate fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  125,\n                  102,\n                  154\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left arcuate fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": ""\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              226,\n              77\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "autonomic nerve",\n            "CodeValue": "T-A9605",\n            "UMLSConceptUID": "C0206250",\n            "CodeMeaning": "Autonomic nerve",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "53520000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              0,\n              145,\n              30\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "biliary tree",\n            "CodeValue": "T-60610",\n            "UMLSConceptUID": "C0005400",\n            "CodeMeaning": "Bile Duct",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "28273000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              222,\n              154,\n              132\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urinary bladder",\n            "CodeValue": "T-74000",\n            "UMLSConceptUID": "C0005682",\n            "CodeMeaning": "Bladder",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "89837001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              239,\n              172\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skeleton of thorax",\n            "CodeValue": "T-D0170",\n            "UMLSConceptUID": "C0448157",\n            "CodeMeaning": "Bone of thorax",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "272710004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              242,\n              206,\n              142\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skeleton of neck",\n            "CodeValue": "T-D006D",\n            "UMLSConceptUID": "C0730130",\n            "CodeMeaning": "Bone structure of head and/or neck",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "312779009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              250,\n              225\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "brain",\n            "CodeValue": "T-A0100",\n            "UMLSConceptUID": "C0006104",\n            "CodeMeaning": "Brain",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "12738006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              85,\n              188,\n              255\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "CSF space",\n            "CodeValue": "T-A0109",\n            "UMLSConceptUID": "C0459387",\n            "CodeMeaning": "Brain cerebrospinal fluid pathway",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "280371009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "ventricles of brain",\n            "CodeValue": "T-A1600",\n            "UMLSConceptUID": "C0007799",\n            "CodeMeaning": "Brain ventricle",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "35764002"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Caudate nucleus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0007461",\n            "CodeValue": "T-A3200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  30,\n                  111,\n                  85\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right caudate nucleus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  30,\n                  111,\n                  85\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left caudate nucleus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "11000004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              214,\n              49\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "central nervous system",\n            "CodeValue": "T-A0090",\n            "UMLSConceptUID": "C0927232",\n            "CodeMeaning": "Central nervous system",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "21483005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              194,\n              195,\n              164\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebellar white matter",\n            "CodeValue": "T-A6080",\n            "UMLSConceptUID": "C0152381",\n            "CodeMeaning": "Cerebellar white matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "33060004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebral aqueduct",\n            "CodeValue": "T-A1800",\n            "UMLSConceptUID": "C0007769",\n            "CodeMeaning": "Cerebral aqueduct",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "80447000"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Cerebral fornix",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152334",\n            "CodeValue": "T-A2970",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  64,\n                  123,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right fornix",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  64,\n                  123,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left fornix",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "87463005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              128,\n              174,\n              128\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebral cortex",\n            "CodeValue": "T-A2020",\n            "UMLSConceptUID": "C0007776",\n            "CodeMeaning": "Cerebral Grey Matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "40146001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              250,\n              225\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cerebral white matter",\n            "CodeValue": "T-A2030",\n            "UMLSConceptUID": "C0152295",\n            "CodeMeaning": "Cerebral White Matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "68523003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              255,\n              207\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cervical vertebral column",\n            "CodeValue": "T-11501",\n            "UMLSConceptUID": "C0728985",\n            "CodeMeaning": "Cervical spine",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "122494005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              188,\n              95,\n              76\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of thoracic wall",\n            "CodeValue": "T-14122",\n            "UMLSConceptUID": "C1269825",\n            "CodeMeaning": "Chest wall muscle",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "372074006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Cingulum",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228272",\n            "CodeValue": "T-A2840",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  146,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right cingulum bundle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  146,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left cingulum bundle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "37035000"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Clavicle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0008913",\n            "CodeValue": "T-12310",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  205,\n                  179,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right clavicle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  205,\n                  179,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left clavicle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "51299004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              204,\n              168,\n              143\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "colon",\n            "CodeValue": "T-59300",\n            "UMLSConceptUID": "C0009368",\n            "CodeMeaning": "Colon",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "71854001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              97,\n              113,\n              158\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "corpus callosum",\n            "CodeValue": "T-A2700",\n            "UMLSConceptUID": "C0010090",\n            "CodeMeaning": "Corpus callosum",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "88442005"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Corpus striatum",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0010097",\n            "CodeValue": "T-A3100",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  140,\n                  190\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right striatum",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  140,\n                  190\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left striatum",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "31428008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              234,\n              92\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cranial nerves",\n            "CodeValue": "T-A8000",\n            "UMLSConceptUID": "C0010268",\n            "CodeMeaning": "Cranial nerve",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "25238003"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Diencephalon",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0012144",\n            "CodeValue": "T-A0102",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  69,\n                  110,\n                  53\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "diencephalon",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              }\n            ],\n            "SNOMEDCTConceptID": "87563008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              253,\n              229\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "duodenum",\n            "CodeValue": "T-58200",\n            "UMLSConceptUID": "C0013303",\n            "CodeMeaning": "Duodenum",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "38848004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "dura mater",\n            "CodeValue": "T-A1120",\n            "UMLSConceptUID": "C0013313",\n            "CodeMeaning": "Dura mater",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "18545000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              211,\n              171,\n              143\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "esophagus",\n            "CodeValue": "T-56000",\n            "UMLSConceptUID": "C0014876",\n            "CodeMeaning": "Esophagus",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "32849002"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "External ear",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0013453",\n            "CodeValue": "T-AB100",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  122,\n                  90\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right external ear",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  122,\n                  90\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left external ear",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "28347008"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Eyeball",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0229242",\n            "CodeValue": "T-AA770",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  194,\n                  142,\n                  0\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right eyeball",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  194,\n                  142,\n                  0\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left eyeball",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "79652003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              185,\n              135,\n              134\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "female external genitalia",\n            "CodeValue": "T-80010",\n            "UMLSConceptUID": "C0227747",\n            "CodeMeaning": "Female external genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "86969008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              170,\n              147\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "female internal genitalia",\n            "CodeValue": "T-80020",\n            "UMLSConceptUID": "C0227748",\n            "CodeMeaning": "Female internal genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "87759004"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Foot",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016504",\n            "CodeValue": "T-D9700",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right foot",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left foot",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "56459004"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Forearm",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016536",\n            "CodeValue": "T-D8500",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right forearm",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left forearm",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "14975008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "fourth ventricle",\n            "CodeValue": "T-A1820",\n            "UMLSConceptUID": "C0149556",\n            "CodeMeaning": "Fourth ventricle",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "35918002"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Frontal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016732",\n            "CodeValue": "T-11110",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  203,\n                  179,\n                  77\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right frontal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  203,\n                  179,\n                  77\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left frontal bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "74872008"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Frontal lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016733",\n            "CodeValue": "T-A2200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  83,\n                  146,\n                  164\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right frontal lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  83,\n                  146,\n                  164\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left frontal lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "83251001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              139,\n              150,\n              98\n            ],\n            "cid": "4040",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "gallbladder",\n            "CodeValue": "T-63000",\n            "UMLSConceptUID": "C0016976",\n            "CodeMeaning": "Gallbladder",\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "SNOMEDCTConceptID": "28231008"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Globus pallidus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0017651",\n            "CodeValue": "T-A3500",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  48,\n                  129,\n                  126\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right pallidum",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  48,\n                  129,\n                  126\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left pallidum",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "14738005"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Hand",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0018563",\n            "CodeValue": "T-D8700",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right hand",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left hand",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "85562004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "head",\n            "CodeValue": "T-D1100",\n            "UMLSConceptUID": "C0018670",\n            "CodeMeaning": "Head",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "69536005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              206,\n              110,\n              84\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "heart",\n            "CodeValue": "T-32000",\n            "UMLSConceptUID": "C0018787",\n            "CodeMeaning": "Heart",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "80891009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              210,\n              139\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "hyoid bone",\n            "CodeValue": "T-11190",\n            "UMLSConceptUID": "C0020417",\n            "CodeMeaning": "Hyoid bone",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "21387005"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Inferior cerebellar peduncle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152393",\n            "CodeValue": "T-A6640",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  186,\n                  135,\n                  135\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right inferior cerebellar peduncle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  186,\n                  135,\n                  135\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left inferior cerebellar peduncle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "67701001"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Inferior longitudinal fasciculus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228273",\n            "CodeValue": "T-A2850",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  159,\n                  116,\n                  163\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right inferior longitudinal fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  159,\n                  116,\n                  163\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left inferior longitudinal fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "55233005"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Inner ear",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0022889",\n            "CodeValue": "T-AB700",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  147,\n                  118\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right inner ear",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  147,\n                  118\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left inner ear",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "22945000"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Insula",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0021640",\n            "CodeValue": "T-A2610",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  188,\n                  135,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right insular lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  188,\n                  135,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left insular lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "36169008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              233,\n              138,\n              112\n            ],\n            "cid": "6116",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "atrial septum",\n            "CodeValue": "T-32150",\n            "UMLSConceptUID": "C0225836",\n            "CodeMeaning": "Interatrial septum",\n            "contextGroupName": "Muscular Anatomy",\n            "SNOMEDCTConceptID": "58095006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              195,\n              100,\n              73\n            ],\n            "cid": "6116",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "ventricular septum",\n            "CodeValue": "T-32410",\n            "UMLSConceptUID": "C0225870",\n            "CodeMeaning": "Interventricular septum",\n            "contextGroupName": "Muscular Anatomy",\n            "SNOMEDCTConceptID": "589001"\n          },\n          {\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "cid": "7154",\n            "CodeMeaning": "Kidney",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0022646",\n            "CodeValue": "T-71000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  185,\n                  102,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right kidney",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  185,\n                  102,\n                  83\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left kidney",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "64033007"\n          },\n          {\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "cid": "4040",\n            "CodeMeaning": "Knee",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C1456798",\n            "CodeValue": "T-D9200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right knee",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left knee",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "72696002"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Lacrimal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0222733",\n            "CodeValue": "T-1115A",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  250,\n                  160\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lacrimal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              }\n            ],\n            "SNOMEDCTConceptID": "6229007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              150,\n              208,\n              243\n            ],\n            "cid": "4040",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "larynx",\n            "CodeValue": "T-24100",\n            "UMLSConceptUID": "C0023078",\n            "CodeMeaning": "Larynx",\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "SNOMEDCTConceptID": "4596009"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Lateral corticospinal tract",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152402",\n            "CodeValue": "T-A7093",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  160,\n                  133\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right corticospinal tract",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  160,\n                  133\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left corticospinal tract",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "461002"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Lateral ventricle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152279",\n            "CodeValue": "T-A1650",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  88,\n                  106,\n                  215\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lateral ventricle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  88,\n                  106,\n                  215\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left lateral ventricle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "66720007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              152,\n              55,\n              13\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "left ventricle of heart",\n            "CodeValue": "T-32600",\n            "UMLSConceptUID": "C0225897",\n            "CodeMeaning": "Left Ventricle",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "87878005"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Limbic lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0458337",\n            "CodeValue": "T-A0036",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  150,\n                  201\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right limbic lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  154,\n                  150,\n                  201\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left limbic lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "279215006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              188,\n              91,\n              95\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lips",\n            "CodeValue": "T-52000",\n            "UMLSConceptUID": "C0023759",\n            "CodeMeaning": "Lip",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "48477009"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Lower leg",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C1140621",\n            "CodeValue": "T-D9400",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right leg",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left leg",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "30021000"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Lower limb",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0023216",\n            "CodeValue": "T-D9000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lower limb",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left lower limb",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "61685007"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Lower lobe of lung",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0225758",\n            "CodeValue": "T-28830",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  224,\n                  186,\n                  162\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "inferior lobe of right lung",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  224,\n                  186,\n                  162\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "inferior lobe of left lung",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "90572001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              212,\n              188,\n              102\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "lumbar vertebral column",\n            "CodeValue": "T-11503",\n            "UMLSConceptUID": "C0024091",\n            "CodeMeaning": "Lumbar spine",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "122496007"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Lung",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0024109",\n            "CodeValue": "T-28000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  197,\n                  165,\n                  145\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right lung",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  197,\n                  165,\n                  145\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left lung",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "39607008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              185,\n              135,\n              134\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "male external genitalia",\n            "CodeValue": "T-90010",\n            "UMLSConceptUID": "C0227922",\n            "CodeMeaning": "Male external genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "90418005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              146,\n              127\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "male internal genitalia",\n            "CodeValue": "T-90020",\n            "UMLSConceptUID": "C0227923",\n            "CodeMeaning": "Male internal genitalia",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "38242008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              222,\n              198,\n              101\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mandible",\n            "CodeValue": "T-11180",\n            "UMLSConceptUID": "C0024687",\n            "CodeMeaning": "Mandible",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "91609006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Medial Lemniscus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228420",\n            "CodeValue": "T-A5271",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  140,\n                  103\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right medial lemniscus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  174,\n                  140,\n                  103\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left medial lemniscus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "30114003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mediastinum",\n            "CodeValue": "T-D3300",\n            "UMLSConceptUID": "C0025066",\n            "CodeMeaning": "Mediastinum",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "72410000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "meninges",\n            "CodeValue": "T-A1110",\n            "UMLSConceptUID": "C0025285",\n            "CodeMeaning": "Meninges",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "1231004"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Middle cerebellar peduncle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152392",\n            "CodeValue": "T-A6630",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  148,\n                  120,\n                  72\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right middle cerebellar peduncle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  148,\n                  120,\n                  72\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left middle cerebellar peduncle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "33723005"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Middle ear",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0013455",\n            "CodeValue": "T-AB300",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  112,\n                  73\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right middle ear",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  201,\n                  112,\n                  73\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left middle ear",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "25342003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              202,\n              164,\n              140\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "middle lobe of right lung",\n            "CodeValue": "T-28300",\n            "UMLSConceptUID": "C0225757",\n            "CodeMeaning": "Middle lobe of right lung",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "72481006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              159,\n              63,\n              27\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mitral valve",\n            "CodeValue": "T-35300",\n            "UMLSConceptUID": "C0026264",\n            "CodeMeaning": "Mitral Valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "91134007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              201,\n              121,\n              77\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of head",\n            "CodeValue": "T-13100",\n            "UMLSConceptUID": "C0224097",\n            "CodeMeaning": "Muscle of head",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "22688005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              213,\n              124,\n              109\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "muscles of neck",\n            "CodeValue": "T-13300",\n            "UMLSConceptUID": "C0027532",\n            "CodeMeaning": "Muscle of neck",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "81727001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "neck",\n            "CodeValue": "T-D1600",\n            "UMLSConceptUID": "C0027530",\n            "CodeMeaning": "Neck",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "45048000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              92,\n              162,\n              109\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "neurohypophysis",\n            "CodeValue": "T-B1200",\n            "UMLSConceptUID": "C0032009",\n            "CodeMeaning": "Neurohypophysis",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "37512009"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Occipital lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0028785",\n            "CodeValue": "T-A2400",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  182,\n                  166,\n                  110\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right occipital lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  182,\n                  166,\n                  110\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left occipital lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "31065004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              234,\n              234,\n              194\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "omentum",\n            "CodeValue": "T-D4600",\n            "UMLSConceptUID": "C0028977",\n            "CodeMeaning": "Omentum",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "27398004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              99,\n              106,\n              24\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "optic chiasm",\n            "CodeValue": "T-A800B",\n            "UMLSConceptUID": "C0029126",\n            "CodeMeaning": "Optic chiasm",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "244453006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Optic radiation",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228277",\n            "CodeValue": "T-A2880",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  78,\n                  152,\n                  141\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right optic radiation",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  78,\n                  152,\n                  141\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left optic radiation",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "70105001"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Optic tract",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0152405",\n            "CodeValue": "T-A8060",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  156,\n                  171,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right optic tract",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  156,\n                  171,\n                  108\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left optic tract",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "53238003"\n          },\n          {\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "cid": "7160",\n            "CodeMeaning": "Ovary",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0029939",\n            "CodeValue": "T-87000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  213,\n                  141,\n                  113\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right ovary",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  213,\n                  141,\n                  113\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left ovary",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "15497006"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Palatine bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0222734",\n            "CodeValue": "T-11160",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  242,\n                  217,\n                  123\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right palatine bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  242,\n                  217,\n                  123\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left palatine bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "51283005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              249,\n              180,\n              111\n            ],\n            "cid": "4030",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pancreas",\n            "CodeValue": "T-65000",\n            "UMLSConceptUID": "C0030274",\n            "CodeMeaning": "Pancreas",\n            "contextGroupName": "CT, MR and PET Anatomy Imaged",\n            "SNOMEDCTConceptID": "15776009"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Parietal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0030558",\n            "CodeValue": "T-11120",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  204,\n                  109\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right parietal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  229,\n                  204,\n                  109\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left parietal bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "24924006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Parietal lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0030560",\n            "CodeValue": "T-A2300",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  141,\n                  93,\n                  137\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right parietal lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  141,\n                  93,\n                  137\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left parietal lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "16630005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              184,\n              122,\n              154\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pericardial cavity",\n            "CodeValue": "T-39050",\n            "UMLSConceptUID": "C0225972",\n            "CodeMeaning": "Pericardial cavity",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "25489000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pericardium",\n            "CodeValue": "T-39000",\n            "UMLSConceptUID": "C0031050",\n            "CodeMeaning": "Pericardium",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "76848001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              224,\n              194,\n              0\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peripheral nerve",\n            "CodeValue": "T-A0500",\n            "UMLSConceptUID": "C0031119",\n            "CodeMeaning": "Peripheral nerve",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "84782009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              186,\n              0\n            ],\n            "cid": "7167",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peripheral nervous system",\n            "CodeValue": "T-A0140",\n            "UMLSConceptUID": "C0206417",\n            "CodeMeaning": "Peripheral nervous system",\n            "contextGroupName": "Peripheral Nervous System Segmentation Types",\n            "SNOMEDCTConceptID": "3058005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              255,\n              220\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peritoneum",\n            "CodeValue": "T-D4400",\n            "UMLSConceptUID": "C0031153",\n            "CodeMeaning": "Peritioneum",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "15425007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              204,\n              142,\n              178\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "peritoneal cavity",\n            "CodeValue": "T-D4425",\n            "UMLSConceptUID": "C1704247",\n            "CodeMeaning": "Peritoneal cavity",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "83670000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              184,\n              105,\n              108\n            ],\n            "cid": "4040",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pharynx",\n            "CodeValue": "T-55000",\n            "UMLSConceptUID": "C0031354",\n            "CodeMeaning": "Pharynx",\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "SNOMEDCTConceptID": "54066008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              244,\n              209\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pia mater",\n            "CodeValue": "T-A1280",\n            "UMLSConceptUID": "C0031869",\n            "CodeMeaning": "Pia mater",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "23180006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              253,\n              135,\n              192\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pineal gland",\n            "CodeValue": "T-B2000",\n            "UMLSConceptUID": "C0031939",\n            "CodeMeaning": "Pineal Gland",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "45793000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              57,\n              157,\n              110\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pituitary gland",\n            "CodeValue": "T-B1000",\n            "UMLSConceptUID": "C0032005",\n            "CodeMeaning": "Pituitary",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "56329008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              126,\n              161,\n              197\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "posterior commissure",\n            "CodeValue": "T-A4904",\n            "UMLSConceptUID": "C0152327",\n            "CodeMeaning": "Posterior cerebral commissure",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "279336005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              230,\n              158,\n              140\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "prostate",\n            "CodeValue": "T-92000",\n            "UMLSConceptUID": "C0033572",\n            "CodeMeaning": "Prostate",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "41216001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              225,\n              130,\n              104\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "pulmonary valve",\n            "CodeValue": "T-35200",\n            "UMLSConceptUID": "C0034086",\n            "CodeMeaning": "Pulmonary valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "39057004"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Putamen",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0034169",\n            "CodeValue": "T-A3400",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  210,\n                  157,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right putamen",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  210,\n                  157,\n                  166\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left putamen",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "89278009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              180,\n              119,\n              153\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "retroperitoneal space",\n            "CodeValue": "T-D4900",\n            "UMLSConceptUID": "C0035359",\n            "CodeMeaning": "Retroperitoneal space",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "82849001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              181,\n              85,\n              57\n            ],\n            "cid": "7152",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "right ventricle of heart",\n            "CodeValue": "T-32500",\n            "UMLSConceptUID": "C0225883",\n            "CodeMeaning": "Right Ventricle",\n            "contextGroupName": "Cardiac Structure Segmentation Types",\n            "SNOMEDCTConceptID": "53085002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              70,\n              163,\n              117\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "salivary glands",\n            "CodeValue": "T-61007",\n            "UMLSConceptUID": "C0036098",\n            "CodeMeaning": "Salivary gland",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "385294005"\n          },\n          {\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "cid": "7160",\n            "CodeMeaning": "Seminal Vesicle",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0036628",\n            "CodeValue": "T-93000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  245,\n                  172,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right seminal vesicle",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  245,\n                  172,\n                  147\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left seminal vesicle",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "64739004"\n          },\n          {\n            "contextGroupName": "Endoscopy Anatomic Regions",\n            "cid": "4040",\n            "CodeMeaning": "Shoulder",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0037004",\n            "CodeValue": "T-D2220",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right shoulder",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left shoulder",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "16982005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              124,\n              92\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skin of abdominal wall",\n            "CodeValue": "T-02480",\n            "UMLSConceptUID": "C0222166",\n            "CodeMeaning": "Skin of abdomen",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "75093004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              173,\n              121,\n              88\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skin of thoracic wall",\n            "CodeValue": "T-02424",\n            "UMLSConceptUID": "C0222149",\n            "CodeMeaning": "Skin of chest",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "74160004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              241,\n              213,\n              144\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "skull",\n            "CodeValue": "T-11100",\n            "UMLSConceptUID": "C0037303",\n            "CodeMeaning": "Skull",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "89546000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              205,\n              167,\n              142\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "small bowel",\n            "CodeValue": "T-58000",\n            "UMLSConceptUID": "C0021852",\n            "CodeMeaning": "Small Intestine",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "30315005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              182,\n              105,\n              107\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "soft palate",\n            "CodeValue": "T-51120",\n            "UMLSConceptUID": "C0030219",\n            "CodeMeaning": "Soft palate",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "49460000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              214,\n              49\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "spinal cord",\n            "CodeValue": "T-A7010",\n            "UMLSConceptUID": "C0037925",\n            "CodeMeaning": "Spinal cord",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "2748008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              200,\n              200,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "gray matter of spinal cord",\n            "CodeValue": "T-A7020",\n            "UMLSConceptUID": "C0475853",\n            "CodeMeaning": "Spinal cord gray matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "12958003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              250,\n              250,\n              225\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "white matter of spinal cord",\n            "CodeValue": "T-A7070",\n            "UMLSConceptUID": "C0458457",\n            "CodeMeaning": "Spinal cord white matter",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "27088001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              244,\n              217,\n              154\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "sternum",\n            "CodeValue": "T-11210",\n            "UMLSConceptUID": "C0038293",\n            "CodeMeaning": "Sternum",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "56873002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              132,\n              105\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "stomach",\n            "CodeValue": "T-57000",\n            "UMLSConceptUID": "C0038351",\n            "CodeMeaning": "Stomach",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "69695003"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              88,\n              106,\n              215\n            ],\n            "cid": "7153",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "subarachnoid space",\n            "CodeValue": "T-A1500",\n            "UMLSConceptUID": "C0038527",\n            "CodeMeaning": "Subarachnoid space",\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "35951006"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Substantia nigra",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0038590",\n            "CodeValue": "T-A5160",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  0,\n                  108,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right substantia nigra",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  0,\n                  108,\n                  112\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left substantia nigra",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "70007007"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Superior longitudinal fasciculus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228270",\n            "CodeValue": "T-A2820",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  127,\n                  150,\n                  88\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right superior longitudinal fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  127,\n                  150,\n                  88\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left superior longitudinal fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "89202009"\n          },\n          {\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "cid": "4028",\n            "CodeMeaning": "Temporal bone",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0039484",\n            "CodeValue": "T-11130",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  243,\n                  152\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right temporal bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  243,\n                  152\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left temporal bone",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "60911003"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Temporal lobe",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0039485",\n            "CodeValue": "T-A2500",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  162,\n                  115,\n                  105\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right temporal lobe",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  162,\n                  115,\n                  105\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left temporal lobe",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "78277001"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Thalamus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0458271",\n            "CodeValue": "T-D0593",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  122,\n                  101,\n                  38\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right thalamus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  122,\n                  101,\n                  38\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left thalamus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "119406000"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Thigh",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0039866",\n            "CodeValue": "T-D9100",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right thigh",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left thigh",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "68367000"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              226,\n              202,\n              134\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thoracic vertebral column",\n            "CodeValue": "T-11502",\n            "UMLSConceptUID": "C0581269",\n            "CodeMeaning": "Thoracic spine",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "122495006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              177,\n              122,\n              101\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thorax",\n            "CodeValue": "T-D3000",\n            "UMLSConceptUID": "C0817096",\n            "CodeMeaning": "Thorax",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "51185008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              47,\n              150,\n              103\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thymus",\n            "CodeValue": "T-C8000",\n            "UMLSConceptUID": "C0040113",\n            "CodeMeaning": "Thymus",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "9875009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              62,\n              162,\n              114\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "thyroid gland",\n            "CodeValue": "T-B6000",\n            "UMLSConceptUID": "C0040132",\n            "CodeMeaning": "Thyroid",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "69748006"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              166,\n              84,\n              94\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tongue",\n            "CodeValue": "T-53000",\n            "UMLSConceptUID": "C0040408",\n            "CodeMeaning": "Tongue",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "21974007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              250,\n              220\n            ],\n            "cid": "4028",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "teeth",\n            "CodeValue": "T-54010",\n            "UMLSConceptUID": "C0040426",\n            "CodeMeaning": "Tooth",\n            "contextGroupName": "Craniofacial Anatomic Regions",\n            "SNOMEDCTConceptID": "38199008"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              182,\n              228,\n              255\n            ],\n            "cid": "7155",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "trachea",\n            "CodeValue": "T-25000",\n            "UMLSConceptUID": "C0040578",\n            "CodeMeaning": "Trachea",\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "44567001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              166,\n              70,\n              38\n            ],\n            "cid": "6113",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "tricuspid valve",\n            "CodeValue": "T-35100",\n            "UMLSConceptUID": "C0040960",\n            "CodeMeaning": "Tricuspid Valve",\n            "contextGroupName": "Mediastinum Anatomy Finding or Feature",\n            "SNOMEDCTConceptID": "46030003"\n          },\n          {\n            "contextGroupName": "CNS Tissue Segmentation Types",\n            "cid": "7153",\n            "CodeMeaning": "Uncinate fasciculus",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0228271",\n            "CodeValue": "T-A2830",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  106,\n                  174,\n                  155\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right uncinate fasciculus",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  106,\n                  174,\n                  155\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left uncinate fasciculus",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "26230003"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Upper arm",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0446516",\n            "CodeValue": "T-D8200",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right arm",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left arm",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "40983000"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Upper limb",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0016555",\n            "CodeValue": "T-D8000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right upper limb",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  177,\n                  122,\n                  101\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left upper limb",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "53120007"\n          },\n          {\n            "contextGroupName": "Thoracic Tissue Segmentation Types",\n            "cid": "7155",\n            "CodeMeaning": "Upper lobe of lung",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0225756",\n            "CodeValue": "T-28820",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  172,\n                  138,\n                  115\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "superior lobe of right lung",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  172,\n                  138,\n                  115\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "superior lobe of left lung",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "45653009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              124,\n              186,\n              223\n            ],\n            "cid": "4031",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urethra",\n            "CodeValue": "T-75000",\n            "UMLSConceptUID": "C0041967",\n            "CodeMeaning": "Urethra",\n            "contextGroupName": "Common Anatomic Regions",\n            "SNOMEDCTConceptID": "13648007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              203,\n              136,\n              116\n            ],\n            "cid": "7154",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urinary system",\n            "CodeValue": "T-70001",\n            "UMLSConceptUID": "C1508753",\n            "CodeMeaning": "Urinary system",\n            "contextGroupName": "Abdominal Organ Segmentation Types",\n            "SNOMEDCTConceptID": "122489005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              255,\n              181,\n              158\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "uterus",\n            "CodeValue": "T-83000",\n            "UMLSConceptUID": "C0042149",\n            "CodeMeaning": "Uterus",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "35039007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              193,\n              123,\n              103\n            ],\n            "cid": "7160",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "vagina",\n            "CodeValue": "T-82000",\n            "UMLSConceptUID": "C0042232",\n            "CodeMeaning": "Vagina",\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "SNOMEDCTConceptID": "76784001"\n          },\n          {\n            "contextGroupName": "Pelvic Organ Segmentation Types",\n            "cid": "7160",\n            "CodeMeaning": "Vas deferens",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0042360",\n            "CodeValue": "T-96000",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  241,\n                  172,\n                  151\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right deferent duct",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              },\n              {\n                "recommendedDisplayRGBValue": [\n                  241,\n                  172,\n                  151\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "left deferent duct",\n                "CodeValue": "G-A101",\n                "UMLSConceptUID": "C0205091",\n                "CodeMeaning": "Left",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "7771000"\n              }\n            ],\n            "SNOMEDCTConceptID": "57671007"\n          },\n          {\n            "contextGroupName": "Common Anatomic Regions",\n            "cid": "4031",\n            "CodeMeaning": "Zygoma",\n            "CodingSchemeDesignator": "SRT",\n            "UMLSConceptUID": "C0043539",\n            "CodeValue": "T-11166",\n            "Modifier": [\n              {\n                "recommendedDisplayRGBValue": [\n                  255,\n                  255,\n                  167\n                ],\n                "cid": "244",\n                "CodingSchemeDesignator": "SRT",\n                "3dSlicerLabel": "right zygomatic bone",\n                "CodeValue": "G-A100",\n                "UMLSConceptUID": "C0205090",\n                "CodeMeaning": "Right",\n                "contextGroupName": "Laterality",\n                "SNOMEDCTConceptID": "24028007"\n              }\n            ],\n            "SNOMEDCTConceptID": "13881006"\n          }\n        ],\n        "showAnatomy": false\n      },\n      {\n        "CodeMeaning": "Morphologically Altered Structure",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "49755003",\n        "cid": "7051",\n        "UMLSConceptUID": "C0221198",\n        "CodeValue": "M-01000",\n        "contextGroupName": "Segmentation Property Categories",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              145,\n              60,\n              66\n            ],\n            "CodeMeaning": "Blood clot",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "clot",\n            "cid": "7159",\n            "UMLSConceptUID": "C0302148",\n            "CodeValue": "M-35000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "75753009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              205,\n              205,\n              100\n            ],\n            "CodeMeaning": "Cyst",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "cyst",\n            "cid": "7159",\n            "UMLSConceptUID": "C0010709",\n            "CodeValue": "M-3340A",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "367643001"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              140,\n              224,\n              228\n            ],\n            "CodeMeaning": "Edema",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "edema",\n            "cid": "7159",\n            "UMLSConceptUID": "C0013604",\n            "CodeValue": "M-36300",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "79654002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              150,\n              98,\n              83\n            ],\n            "CodeMeaning": "Embolus",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "embolism",\n            "cid": "7159",\n            "UMLSConceptUID": "C1704212",\n            "CodeValue": "M-35300",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "55584005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              188,\n              65,\n              28\n            ],\n            "CodeMeaning": "Hemorrhage",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "bleeding",\n            "cid": "7159",\n            "UMLSConceptUID": "C0019080",\n            "CodeValue": "M-37000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "50960005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              144,\n              238,\n              144\n            ],\n            "CodeMeaning": "Mass",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "mass",\n            "cid": "7159",\n            "UMLSConceptUID": "C0577559",\n            "CodeValue": "M-03000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "4147007"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              216,\n              191,\n              216\n            ],\n            "CodeMeaning": "Necrosis",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "necrosis",\n            "cid": "7159",\n            "UMLSConceptUID": "C0027540",\n            "CodeValue": "M-54000",\n            "contextGroupName": "Lesion Segmentation Types",\n            "SNOMEDCTConceptID": "6574001"\n          }\n        ],\n        "showAnatomy": true\n      },\n      {\n        "CodeMeaning": "Body Substance",\n        "CodingSchemeDesignator": "SRT",\n        "SNOMEDCTConceptID": "91720002",\n        "cid": "",\n        "UMLSConceptUID": "C0504082",\n        "CodeValue": "T-D0080",\n        "contextGroupName": "",\n        "Type": [\n          {\n            "recommendedDisplayRGBValue": [\n              0,\n              145,\n              30\n            ],\n            "CodeMeaning": "Bile",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "bile",\n            "cid": "7166",\n            "UMLSConceptUID": "C0005388",\n            "CodeValue": "T-60650",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "70150004"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              170,\n              250,\n              250\n            ],\n            "CodeMeaning": "Body fluid",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "fluid",\n            "cid": "7166",\n            "UMLSConceptUID": "C0005889",\n            "CodeValue": "T-D0070",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "32457005"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              78,\n              63,\n              0\n            ],\n            "CodeMeaning": "Feces",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "feces",\n            "cid": "7166",\n            "UMLSConceptUID": "C0015733",\n            "CodeValue": "T-59666",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "39477002"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              218,\n              255,\n              255\n            ],\n            "CodeMeaning": "Gas",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "gas",\n            "cid": "7166",\n            "UMLSConceptUID": "C0017110",\n            "CodeValue": "C-10080",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "74947009"\n          },\n          {\n            "recommendedDisplayRGBValue": [\n              214,\n              230,\n              130\n            ],\n            "CodeMeaning": "Urine",\n            "CodingSchemeDesignator": "SRT",\n            "3dSlicerLabel": "urine",\n            "cid": "7166",\n            "UMLSConceptUID": "C0042036",\n            "CodeValue": "T-70060",\n            "contextGroupName": "Common Tissue Segmentation Types",\n            "SNOMEDCTConceptID": "78014005"\n          }\n        ],\n        "showAnatomy": false\n      }\n    ]\n  }\n}').SegmentationCodes.Category;function M(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"T-D0050",t=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"T-D0050",o=arguments.length>3?arguments[3]:void 0,a=T.find(function(e){return e.CodeValue===n}),i=a.Type.find(function(e){return e.CodeValue===t}),r={SegmentedPropertyCategoryCodeSequence:{CodeValue:a.CodeValue,CodingSchemeDesignator:a.CodingSchemeDesignator,CodeMeaning:a.CodeMeaning},SegmentLabel:e,SegmentAlgorithmType:"MANUAL",SegmentedPropertyTypeCodeSequence:{CodeValue:i.CodeValue,CodingSchemeDesignator:i.CodingSchemeDesignator,CodeMeaning:i.CodeMeaning}};if(o){var c=i.Modifier.find(function(e){return e.CodeValue===o});r.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence={CodeValue:c.CodeValue,CodingSchemeDesignator:c.CodingSchemeDesignator,CodeMeaning:c.CodeMeaning},r.RecommendedDisplayCIELabValue=c.recommendedDisplayRGBValue}else r.RecommendedDisplayCIELabValue=i.recommendedDisplayRGBValue;return r}function b(e){return(b="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function I(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function R(e,n){return!n||"object"!==b(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function L(e){return(L=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function N(e,n){return(N=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var v=o.store.modules.brush,U=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o=Object.assign({},t);return(e=R(this,L(n).call(this,o))).initialConfiguration=o,e}var t,a,i;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&N(e,n)}(n,o["BrushTool"]),t=n,(a=[{key:"_startPainting",value:function(e){var n=e.detail,t=n.element,o=v.getters.getAndCacheLabelmap2D(t),a=o.labelmap3D,i=o.currentImageIdIndex,r=o.activeLabelmapIndex,c=this._isCtrlDown(n)||this.configuration.alwaysEraseOnClick;this.paintEventData={labelmap3D:a,currentImageIdIndex:i,activeLabelmapIndex:r,shouldErase:c};var l=a.activeSegmentIndex,d=a.metadata[l];d||(d=M("Unnamed Segment"),v.setters.metadata(t,r,l,d)),n.currentPoints&&this._paint(e),this._drawing=!0,this._startListeningForMouseUp(t)}}])&&I(t.prototype,a),i&&I(t,i),n}(),G=t(3),O=t.n(G);function x(e){return(x="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function V(e,n){return function(e){if(Array.isArray(e))return e}(e)||function(e,n){var t=[],o=!0,a=!1,i=void 0;try{for(var r,c=e[Symbol.iterator]();!(o=(r=c.next()).done)&&(t.push(r.value),!n||t.length!==n);o=!0);}catch(e){a=!0,i=e}finally{try{o||null==c.return||c.return()}finally{if(a)throw i}}return t}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function E(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function A(e,n){return!n||"object"!==x(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function B(e){return(B=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function _(e,n){return(_=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var w=o.store.modules.brush,k=Object(o.importInternalModule)("util/brushUtils"),P=k.getCircle,j=k.drawBrushPixels,F=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o=Object.assign({},t);return(e=A(this,B(n).call(this,o))).initialConfiguration=o,e}var t,a,i;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&_(e,n)}(n,U),t=n,(a=[{key:"preMouseDownCallback",value:function(e){return this.activeGateRange=w.getters.activeGateRange(),this._startPainting(e),!0}},{key:"_paint",value:function(e){var n=e.detail,t=n.element,a=n.image,i=a.rows,c=a.columns,l=n.currentPoints.image,d=l.x,u=l.y;if(!(d<0||d>c||u<0||u>i)){var s=w.state.radius,C=this._gateCircle(a,P(s,i,c,d,u)),m=this.paintEventData,p=m.labelmap3D,g=m.currentImageIdIndex,S=m.activeLabelmapIndex,D=m.shouldErase;j(C,p,g,c,D),r.a.triggerEvent(t,o.EVENTS.LABELMAP_MODIFIED,{activeLabelmapIndex:S}),r.a.updateImage(e.detail.element)}}},{key:"_gateCircle",value:function(e,n){for(var t=e.rows,o=e.getPixelData(),a=this.activeGateRange,i=e.slope||1,r=e.intercept||0,c=[],l=0;l<n.length;l++){var d=o[n[l][0]+n[l][1]*t];(d=d*i+r)>=a[0]&&d<=a[1]&&c.push(n[l])}return this._cleanGatedCircle(n,c)}},{key:"_getEdgePixels",value:function(e){for(var n=[],t=e.length,o=e[0].length,a=0;a<e.length;a++)e[a][0]&&(n.push([a,0]),n.push([a,o-1]));for(var i=1;i<o-1;i++)for(var r=0;r<e.length;r++)if(e[r][i]){n.push([r,i]),n.push([t-1-r,i]);break}return n}},{key:"_cleanGatedCircle",value:function(e,n){var t=this._getBoundingBoxOfCircle(e),o=t.max,a=t.min,i=o[0]-a[0]+1,r=o[1]-a[1]+1,c=this._boxGatedCircle(e,n,a,i,r);function l(e,n){return c[e][n]}this._floodFillEmptyRegionsFromEdges(c,l);for(var d=this._findHolesAndRegions(e,c,l,a),u=d.holes,s=d.regions,C=this._getAreaOfLargestRegion(s),m=0;m<s.length;m++){var p=s[m];if(p.length<=w.state.strayRemove/100*C)for(var g=0;g<p.length;g++)c[p[g][0]][p[g][1]]=3}for(var S=0;S<u.length;S++){var D=u[S];if(D.length<=w.state.holeFill/100*C)for(var f=0;f<D.length;f++)c[D[f][0]][D[f][1]]=5}for(var h=[],y=0;y<i;y++)for(var T=0;T<r;T++)5===c[y][T]&&h.push([y+a[0],T+a[1]]);return h}},{key:"_getBoundingBoxOfCircle",value:function(e){for(var n=[e[0][0],e[0][1]],t=[e[0][0],e[0][1]],o=0;o<e.length;o++){var a=V(e[o],2),i=a[0],r=a[1];i>n[0]?n[0]=i:i<t[0]&&(t[0]=i),r>n[1]?n[1]=r:r<t[1]&&(t[1]=r)}return{max:n,min:t}}},{key:"_boxGatedCircle",value:function(e,n,t,o,a){for(var i=[],r=0;r<o;r++)i[r]=new Uint8ClampedArray(a);for(var c=0;c<e.length;c++){var l=e[c][0]-t[0],d=e[c][1]-t[1];i[l][d]=1}for(var u=0;u<n.length;u++){var s=n[u][0]-t[0],C=n[u][1]-t[1];i[s][C]=2}return i}},{key:"_floodFillEmptyRegionsFromEdges",value:function(e,n){for(var t=this._getEdgePixels(e),o=0;o<t.length;o++){var a=t[o][0],i=t[o][1];if(1===e[a][i])for(var r=O()({getter:n,seed:[a,i]}).flooded,c=0;c<r.length;c++)e[r[c][0]][r[c][1]]=3}}},{key:"_findHolesAndRegions",value:function(e,n,t,o){for(var a=[],i=[],r=0;r<e.length;r++){var c=e[r][0]-o[0],l=e[r][1]-o[1];if(1===n[c][l]){for(var d=O()({getter:t,seed:[c,l]}).flooded,u=0;u<d.length;u++)n[d[u][0]][d[u][1]]=4;a.push(d)}else if(2===n[c][l]){for(var s=O()({getter:t,seed:[c,l]}).flooded,C=0;C<s.length;C++)n[s[C][0]][s[C][1]]=5;i.push(s)}}return{holes:a,regions:i}}},{key:"_getAreaOfLargestRegion",value:function(e){for(var n=0,t=0;t<e.length;t++)e[t].length>n&&(n=e[t].length);return n}}])&&E(t.prototype,a),i&&E(t,i),n}();function H(e){return(H="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function q(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function z(e,n){return!n||"object"!==H(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function W(e){return(W=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function K(e,n){return(K=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var X=a.a.importInternalModule("util/brushUtils").getCircle,Y=a.a.store.modules.brush,J=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o=Object.assign({},t);return(e=z(this,W(n).call(this,o))).initialConfiguration=o,e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&K(e,n)}(n,F),t=n,(o=[{key:"preMouseDownCallback",value:function(e){return this._setCustomGate(e),this._startPainting(e),!0}},{key:"_setCustomGate",value:function(e){for(var n=e.detail,t=n.image,o=t.rows,a=t.columns,i=n.currentPoints.image,r=i.x,c=i.y,l=Y.state.radius,d=t.getPixelData(),u=t.slope||1,s=t.intercept||0,C=X(l,o,a,r,c),m=d[C[0][0]+C[0][1]*o],p=m,g=0;g<C.length;g++){var S=d[C[g][0]+C[g][1]*o];S<m&&(m=S),S>p&&(p=S)}m=m*u+s,p=p*u+s,this.gate=[m,p]}},{key:"_gateCircle",value:function(e,n){for(var t=e.image,o=e.getPixelData(),a=this.gate,i=e.slope||1,r=e.intercept||0,c=[],l=0;l<n.length;l++){var d=o[n[l][0]+n[l][1]*t];(d=d*i+r)>=a[0]&&d<=a[1]&&c.push(n[l])}return this._cleanGatedCircle(n,c)}}])&&q(t.prototype,o),a&&q(t,a),n}(),Z=t(4);function Q(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}var $=o.store.modules,ee=function(){function e(n,t,o,a,i,r,c,l){!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,e),this._polyPoints=this._deepCopyPoints(n),this._sopInstanceUid=t,this._seriesInstanceUid=o,this._structureSetUid=a,this._ROIContourUid=i,this._polygonUid=r,this._frameNumber=c,this._interpolated=l}var n,t,o;return n=e,(t=[{key:"_deepCopyPoints",value:function(e){for(var n=[],t=void 0!==e[0].z,o=0;o<e.length;o++)n.push({x:e[o].x,y:e[o].y}),t&&(n[o].z=e[o].z);return n}},{key:"getFreehandToolData",value:function(e){var n=this._seriesInstanceUid,t=this._structureSetUid,o=this._ROIContourUid,a=$.freehand3D,i=a.getters.ROIContour(n,t,o),r=a.getters.structureSet(n,t),c={uid:this._polygonUid,seriesInstanceUid:n,structureSetUid:t,ROIContourUid:o,referencedROIContour:i,referencedStructureSet:r,visible:!0,active:!1,invalidated:!0,handles:{points:[]}};return this._sopInstanceUid&&(c.sopInstanceUID=this._sopInstanceUid),this._interpolated&&(c.interpolated=!0),this._generatePoints(c.handles.points),c.handles.textBox={active:!1,hasMoved:!1,movesIndependently:!1,drawnIndependently:!0,allowedOutsideImage:!0,hasBoundingBox:!0},c.polyBoundingBox={},c.toBeScaled=e,c}},{key:"_generatePoints",value:function(e){for(var n=0;n<this._polyPoints.length;n++)e.push(this._deepCopyOnePoint(n));for(var t=0;t<e.length;t++)t===e.length-1?e[t].lines.push(e[0]):e[t].lines.push(e[t+1])}},{key:"_deepCopyOnePoint",value:function(e){var n={x:this._polyPoints[e].x,y:this._polyPoints[e].y,lines:[]};return void 0!==this._polyPoints[e].z&&(n.z=this._polyPoints[e].z),n}},{key:"polyPoints",get:function(){return this._polyPoints}},{key:"sopInstanceUid",get:function(){return this._sopInstanceUid}},{key:"uid",get:function(){return this._polygonUid}},{key:"frameNumber",get:function(){return this._frameNumber}}])&&Q(n.prototype,t),o&&Q(n,o),e}(),ne=o.globalImageIdSpecificToolStateManager,te=function(e,n){for(var t=e.ROIContourUid,a=function(e,n){for(var t=[],o=ne.saveToolState(),a=0;a<e.length;a++){var i=e[a],r=o[i];if(r&&r.freehandRoi){var c=r.freehandRoi.data.filter(function(e){return e.ROIContourUid===n}),l={imageId:i};c.length&&(l.contours=c),t.push(l)}else t.push({imageId:i})}return t}(function(e){return Object(o.getToolState)(e,"stack").data[0].imageIds}(n),t),i=function(e){for(var n=[],t=0;t<e.length;t++)if(e[t].contours){n.push(t);break}for(var o=e.length-1;o>=0;o--)if(e[o].contours){n.push(o);break}return n}(a),r=function(e,n){for(var t=0;t<e.length;t++)if(e[t].contours)for(var o=e[t].contours,a=0;a<o.length;a++)if(o[a].uid===n)return t;return}(a,e.uid),c=[],l=i[0]+1;l<=i[1]-1;l++)if(oe(a,l)){var d=ie(l,i,a);!d||d[0]!==r&&d[1]!==r||ae(d,c)}return{ROIContourData:a,interpolationList:c}};function oe(e,n){return!e[n].contours||1===e[n].contours.length&&e[n].contours[0].interpolated}function ae(e,n){n[e[0]]||(n[e[0]]={pair:e,list:[]})}function ie(e,n,t){for(var o=[],a=!0,i=e-1;i>=n[0];i--)if(t[i].contours){var r=t[i].contours;if(r[0].interpolated)continue;r.length>1&&(a=!1),o.push(i);break}if(a){for(var c=e+1;c<=n[1];c++)if(t[c].contours){var l=t[c].contours;if(l[0].interpolated)continue;l.length>1&&(a=!1),o.push(c);break}if(a)return o}}var re=o.globalImageIdSpecificToolStateManager,ce=.2,le=o.store.modules,de=function(e,n){for(var t=te(e,n),o=t.ROIContourData,a=t.interpolationList,i=0;i<a.length;i++)a[i]&&ue(a[i].list,a[i].pair,o)};function ue(e,n,t){var o=fe(t[n[0]].contours[0].handles.points),a=fe(t[n[1]].contours[0].handles.points),i=function(e,n){var t=Se(e),o=Se(n),a=Math.max(Math.ceil(t[t.length-1]/ce),Math.ceil(o[o.length-1]/ce)),i=De(t),r=De(o),c=a+n.x.length,l=a+e.x.length,d=ge(c,i),u=ge(l,r),s=pe(e,c),C=pe(n,l),m=me(d,s),p=me(u,C),g=Ce(e,m),S=Ce(n,p);return function(e,n){for(var t=e.x.length,o={startingNode:0,totalSquaredXYLengths:1/0},a=0;a<t;a++){for(var i=a,r=0,c=0;c<t;c++)r+=Math.pow(e.x[i]-n.x[c],2)+Math.pow(e.y[i]-n.y[c],2),++i===t&&(i=0);r<o.totalSquaredXYLengths&&(o.totalSquaredXYLengths=r,o.startingNode=a)}var l=o.startingNode;se(e.x,l),se(e.y,l),se(e.I,l)}(g,S),function(e,n){for(var t={x:[],y:[],I:[]},o={x:[],y:[],I:[]},a=0;a<e.x.length;a++)(e.I[a]||n.I[a])&&(t.x.push(e.x[a]),t.y.push(e.y[a]),t.I.push(e.I[a]),o.x.push(n.x[a]),o.y.push(n.y[a]),o.I.push(n.I[a]));return{c1Interp:t,c2Interp:o}}(g,S)}(o,a),r=i.c1Interp,l=i.c2Interp;e.forEach(function(e){!function(e,n,t,o,a,i){var r=(t-o[0])/(o[1]-o[0]),l=function(e,n,t,o){for(var a={x:[],y:[]},i=o?e.I:n.I,r=0;r<e.x.length;r++)i[r]&&(a.x.push((1-t)*e.x[r]+t*n.x[r]),a.y.push((1-t)*e.y[r]+t*n.y[r]));return a}(e,n,r,i),d=a[o[0]].contours[0];a[t].contours?function(e,n,t){var o,a=re.saveToolState()[n];if(!a)throw new Error("Image toolstate does not exist. This should not be reached in this case!");for(var i=0;i<a.freehandRoi.data.length;i++)if(a.freehandRoi.data[i].ROIContourUid===t.ROIContourUid){o=i;break}for(var r=a.freehandRoi.data[o],c=[],l=0;l<e.x.length;l++)c.push({x:e.x[l],y:e.y[l]});var d=new ee(c,null,r.seriesInstanceUid,r.structureSetUid,r.ROIContourUid,r.uid,null,!0);a.freehandRoi.data[o]=d.getFreehandToolData(!1)}(l,a[t].imageId,d):function(e,n,t){for(var o=[],a=0;a<e.x.length;a++)o.push({x:e.x[a],y:e.y[a]});var i=new ee(o,null,t.seriesInstanceUid,t.structureSetUid,t.ROIContourUid,c(),null,!0),r=re.saveToolState();r[n]||(r[n]={});var l=r[n];l.freehandRoi?l.freehandRoi.data||(l.freehandRoi.data=[]):(l.freehandRoi={},l.freehandRoi.data=[]);l.freehandRoi.data.push(i.getFreehandToolData(!1)),le.freehand3D.setters.incrementPolygonCount(t.seriesInstanceUid,t.structureSetUid,t.ROIContourUid)}(l,a[t].imageId,d)}(r,l,e,n,t,o.x.length>a.x.length)})}function se(e,n){return n-=e.length*Math.floor(n/e.length),e.push.apply(e,e.splice(0,n)),e}function Ce(e,n){for(var t={x:[],y:[],I:[]},o=0;o<e.x.length-1;o++){t.x.push(e.x[o]),t.y.push(e.y[o]),t.I.push(!0);for(var a=(e.x[o+1]-e.x[o])/(n[o]+1),i=(e.y[o+1]-e.y[o])/(n[o]+1),r=0;r<n[o]-1;r++)t.x.push(t.x[t.x.length-1]+a),t.y.push(t.y[t.y.length-1]+i),t.I.push(!1)}return t}function me(e,n){for(var t=[],o=0;o<e.length;++o)t[o]=o;t.sort(function(n,t){return e[n]<e[t]?-1:e[n]>e[t]});for(var a=[],i=0;i<n.length;i++)a.push(n[t[i]]);for(var r=a.reduce(function(e,n,t){return n&&e.push(t),e},[]),c=[],l=0;l<r.length-1;l++)c.push(r[l+1]-r[l]);return c}function pe(e,n){for(var t=[],o=0;o<n-2;o++)t.push(!1);for(var a=0;a<e.x.length;a++)t.push(!0);return t}function ge(e,n){for(var t=1/(e-1),o=[t],a=1;a<e-2;a++)o.push(o[o.length-1]+t);return o.concat(n)}function Se(e){for(var n=[0],t=1;t<e.x.length;t++){var o=Math.sqrt(Math.pow(e.x[t]-e.x[t-1],2)+Math.pow(e.y[t]-e.y[t-1],2));n.push(n[t-1]+o)}return n}function De(e){for(var n=[],t=0;t<e.length;t++)n.push(e[t]/e[e.length-1]);return n}function fe(e){for(var n={x:[],y:[]},t=0;t<e.length;t++)n.x[t]=e[t].x,n.y[t]=e[t].y;return n.x.push(n.x[0]),n.y.push(n.y[0]),function(e){for(var n=e.x.length,t=e.x.reduce(he)/n,o=0,a=0,i=1,r=2;a<n;a++)o+=(e.x[i]-t)*(e.y[r]-e.y[a]),++i>=n&&(i=0),++r>=n&&(r=0);o>0&&(e.x.reverse(),e.y.reverse())}(n),n}function he(e,n){return e+n}function ye(e){return(ye="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Te(e){return function(e){if(Array.isArray(e)){for(var n=0,t=new Array(e.length);n<e.length;n++)t[n]=e[n];return t}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}function Me(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function be(e){return(be=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Ie(e,n){return(Ie=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Re(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Le=Object(o.importInternalModule)("util/freehandUtils"),Ne=Le.insertOrDelete,ve=Le.freehandArea,Ue=Le.calculateFreehandStatistics,Ge=Object(o.importInternalModule)("drawing/draw"),Oe=Object(o.importInternalModule)("drawing/drawJoinedLines"),xe=Object(o.importInternalModule)("drawing/drawHandles"),Ve=Object(o.importInternalModule)("drawing/drawLinkedTextBox"),Ee=Object(o.importInternalModule)("manipulators/moveHandleNearImagePoint"),Ae=Object(o.importInternalModule)("drawing/getNewContext"),Be=o.store.modules,_e=Object(o.importInternalModule)("util/numbersWithCommas"),we=Object(o.importInternalModule)("util/pointInsideBoundingBox"),ke=Object(o.importInternalModule)("util/calculateSUV"),Pe=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var o,a,i={configuration:{mouseLocation:{handles:{start:{highlight:!0,active:!0}}},spacing:1,interpolatedHandleRadius:.5,interpolatedAlpha:.5,activeHandleRadius:3,completeHandleRadius:6,completeHandleRadiusTouch:28,alwaysShowHandles:!1,invalidColor:"crimson",currentHandle:0,currentTool:-1}},r=Object.assign(i,t);return o=this,(e=!(a=be(n).call(this,r))||"object"!==ye(a)&&"function"!=typeof a?Re(o):a).configuration.alwaysShowHandles=!1,e._freehand3DStore=Be.freehand3D,e._onMeasurementRemoved=e._onMeasurementRemoved.bind(Re(Re(e))),e._drawingMouseUpCallback=e._drawingMouseUpCallback.bind(Re(Re(e))),e}var t,a,r;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Ie(e,n)}(n,o["FreehandRoiTool"]),t=n,(a=[{key:"createNewMeasurement",value:function(e){var n=this._freehand3DStore;if(e&&e.currentPoints&&e.currentPoints.image){var t=l(Object(i.getEnabledElement)(this.element)),o=n.getters.structureSet(t,"DEFAULT"),a=n.getters.activeROIContour(t),r={uid:c(),seriesInstanceUid:t,structureSetUid:"DEFAULT",ROIContourUid:a.uid,referencedROIContour:a,referencedStructureSet:o,visible:!0,active:!0,invalidated:!0,handles:{points:[]}};return r.handles.textBox={active:!1,hasMoved:!1,movesIndependently:!1,drawnIndependently:!0,allowedOutsideImage:!0,hasBoundingBox:!0},n.setters.incrementPolygonCount(t,"DEFAULT",a.uid),r}console.error("required eventData not supplied to tool ".concat(this.name,"'s createNewMeasurement"))}},{key:"addNewMeasurement",value:function(e,n){var t=e.detail;this._addAndSetVolumeIfNoVolumes(),this._drawing=!0,this._startDrawing(e),this._addPoint(t),je(e)}},{key:"_addAndSetVolumeIfNoVolumes",value:function(){var e=l(Object(i.getEnabledElement)(this.element)),n=Be.freehand3D,t=n.getters.series(e);t||(n.setters.series(e),t=n.getters.series(e)),n.getters.activeROIContour(e)||n.setters.ROIContourAndSetIndexActive(e,"DEFAULT","Unnamed Lesion")}},{key:"_pointNearHandle",value:function(e,n,t){var o=this._freehand3DStore;if(n.handles&&void 0!==n.handles.points&&!1!==n.visible){for(var a=n.handles.points,r=0;r<a.length;r++){var c=Object(i.pixelToCanvas)(e,a[r]);if(Z.point.distance(c,t)<6)return r}return o.state.displayStats&&n.handles.textBox&&we(n.handles.textBox,t)?n.handles.textBox:void 0}}},{key:"preMouseDownCallback",value:function(e){var n=e.detail,t=Object(o.getToolState)(e.currentTarget,this.name);if(!t)return!1;var a=this._pointNearHandleAllTools(n),i=this._freehand3DStore;if(n.event.ctrlKey)return void 0!==a&&a.handleNearby.hasBoundingBox||Ne.call(this,e,a),je(e),!0;if(a){var r=t.data[a.toolIndex];return i.getters.structureSet(r.seriesInstanceUid,r.structureSetUid).isLocked,!1}}},{key:"handleSelectedCallback",value:function(e,n,t){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"mouse",a=this._freehand3DStore,i=e.detail,r=i.element;if(i.event.metaKey)return this._switchROIContour(e,n),void je(e);if(t.hasBoundingBox&&a.state.displayStats)Ee(e,this,n,t,o);else{if(a.getters.structureSet(n.seriesInstanceUid,n.structureSetUid).isLocked)return!1;var c=this.configuration;c.dragOrigin={x:t.x,y:t.y};var l=this._pointNearHandleAllTools(i);if(l){var d=l.handleNearby,u=l.toolIndex;this._modifying=!0,c.currentHandle=d,c.currentTool=u,this._activateModify(r),je(e)}}}},{key:"_switchROIContour",value:function(e,n){this._freehand3DStore.setters.activeROIContour(n.seriesInstanceUid,n.structureSetUid,n.ROIContourUid),Object(i.updateImage)(e.detail.element)}},{key:"renderToolData",value:function(e){var n=this,t=e.detail,a=this._freehand3DStore,r=Object(o.getToolState)(e.currentTarget,this.name);if(r){var c,l=t.image,d=t.element,u=this.configuration,s=i.metaData.get("generalSeriesModule",l.imageId);s&&(c=s.modality);for(var C=Ae(t.canvasContext.canvas),m=o.toolStyle.getToolWidth(),p=function(e){var s=r.data[e],p=s.referencedStructureSet,g=s.referencedROIContour;if(!1===s.visible||!p.visible)return"continue";var D=a.getters.ROIContourIndex(s.seriesInstanceUid,s.structureSetUid,s.ROIContourUid)===a.getters.activeROIContourIndex(s.seriesInstanceUid);Ge(C,function(e){var r,C=o.toolColors.getColorIfActive(s),f=s.handles.points;if(s.active&&!p.isLocked?s.handles.invalidHandlePlacement?(C=u.invalidColor,r=u.invalidColor):(C=o.toolColors.getColorIfActive(s),r=o.toolColors.getFillColor()):(C=g.color,r=g.color),D&&s.interpolated&&(e.globalAlpha=u.interpolatedAlpha),s.handles.points.length)for(var h=0;h<f.length;h++){var y=Te(f[h].lines);h!==f.length-1||s.polyBoundingBox||y.push(u.mouseLocation.handles.start),Oe(e,t.element,s.handles.points[h],y,{color:C})}e.globalAlpha=1;var T,M,b,I={color:C,fill:r};if(D&&s.interpolated?(I.handleRadius=u.interpolatedHandleRadius,xe(e,t,f,I)):(u.alwaysShowHandles||s.active&&s.polyBoundingBox)&&(I.handleRadius=u.activeHandleRadius,xe(e,t,f,I)),s.canComplete&&(I.handleRadius=u.completeHandleRadius,xe(e,t,[f[0]],I)),s.active&&!s.polyBoundingBox&&(I.handleRadius=u.activeHandleRadius,xe(e,t,u.mouseLocation.handles,I),xe(e,t,[f[0]],I)),!1===s.invalidated)M=s.meanStdDev,b=s.meanStdDevSUV,T=s.area;else if(!s.active){for(var R={left:f[0].x,right:f[0].x,bottom:f[0].y,top:f[0].x},L=0;L<f.length;L++)R.left=Math.min(R.left,f[L].x),R.right=Math.max(R.right,f[L].x),R.bottom=Math.min(R.bottom,f[L].y),R.top=Math.max(R.top,f[L].y);var N={left:R.left,top:R.bottom,width:Math.abs(R.right-R.left),height:Math.abs(R.top-R.bottom)};if(s.polyBoundingBox=N,!l.color){var v=Object(i.getPixels)(d,N.left,N.top,N.width,N.height);M=Ue.call(n,v,N,f),"PT"===c&&(b={mean:ke(l,(M.mean-l.intercept)/l.slope),stdDev:ke(l,(M.stdDev-l.intercept)/l.slope)}),M&&!isNaN(M.mean)&&(s.meanStdDev=M,s.meanStdDevSUV=b)}var U=l.columnPixelSpacing||1,G=l.rowPixelSpacing||1;T=ve(f,U*G),isNaN(T)||(s.area=T),s.invalidated=!1}if(s.polyBoundingBox&&(a.state.displayStats||s.active)){s.handles.textBox.hasMoved||(s.handles.textBox.x=s.polyBoundingBox.left+s.polyBoundingBox.width,s.handles.textBox.y=s.polyBoundingBox.top+s.polyBoundingBox.height/2);var O=function(e){var n=e.referencedROIContour,t=e.referencedStructureSet,o=e.meanStdDev,a=e.meanStdDevSUV,i=e.area,r=[];r.push(n.name),"DEFAULT"===t.name?r.push("Working ROI Collection"):r.push(t.name);if(o&&void 0!==o.mean){var d="";"CT"===c&&(d=" HU");var u="Mean: ".concat(_e(o.mean.toFixed(2))).concat(d),s="StdDev: ".concat(_e(o.stdDev.toFixed(2))).concat(d);if(a&&void 0!==a.mean){u+=" SUV: "+_e(a.mean.toFixed(2)),s+=" SUV: "+_e(a.stdDev.toFixed(2))}r.push(u),r.push(s)}if(i){var C=" mm".concat(String.fromCharCode(178));l.rowPixelSpacing&&l.columnPixelSpacing||(C=" pixels".concat(String.fromCharCode(178)));var m="Area: ".concat(_e(i.toFixed(2))).concat(C);r.push(m)}return r.push("".concat(n.polygonCount," contours")),r}.call(n,s);Ve(e,d,s.handles.textBox,O,f,S,C,m,0,!0)}})},g=0;g<r.data.length;g++)p(g)}function S(e){return e}}},{key:"_endDrawing",value:function(e,n){var t=Object(o.getToolState)(e,this.name),a=this.configuration,r=t.data[a.currentTool],c=r.handles.points;r.active=!1,r.highlight=!1,r.handles.invalidHandlePlacement=!1,void 0!==n&&c[a.currentHandle-1].lines.push(c[0]),this._modifying&&(this._modifying=!1,r.invalidated=!0,r.interpolated=!1),a.currentHandle=0,a.currentTool=-1,r.canComplete=!1,this._drawing&&(this._drawing=!1,this._deactivateDraw(e)),Be.freehand3D.state.interpolate&&de(r,e),Object(i.updateImage)(e)}},{key:"_onMeasurementRemoved",value:function(e){var n=e.detail;if(n.toolType===this.name){var t=n.measurementData;this._freehand3DStore.setters.decrementPolygonCount(t.seriesInstanceUid,t.structureSetUid,t.ROIContourUid)}}},{key:"passiveCallback",value:function(e){this._closeToolIfDrawing(e),this._addMeasurementRemovedListener(e)}},{key:"enabledCallback",value:function(e){this._closeToolIfDrawing(e),this._addMeasurementRemovedListener(e)}},{key:"activeCallback",value:function(e){this._addMeasurementRemovedListener(e)}},{key:"disabledCallback",value:function(e){this._closeToolIfDrawing(e),e.removeEventListener(o.EVENTS.MEASUREMENT_REMOVED,this._onMeasurementRemoved)}},{key:"_addMeasurementRemovedListener",value:function(e){e.removeEventListener(o.EVENTS.MEASUREMENT_REMOVED,this._onMeasurementRemoved),e.addEventListener(o.EVENTS.MEASUREMENT_REMOVED,this._onMeasurementRemoved)}}])&&Me(t.prototype,a),r&&Me(t,r),n}();function je(e){e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault()}function Fe(e){return(Fe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function He(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function qe(e){return(qe=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function ze(e,n){return(ze=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function We(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ke=o.store.modules,Xe=o.store.state,Ye=function(e){function n(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n);var a,i,r={configuration:{mouseLocation:{handles:{start:{highlight:!0,active:!0}}},minSpacing:1,currentTool:null,dragColor:o.toolColors.getActiveColor(),hoverColor:o.toolColors.getToolColor(),showCursorOnHover:!0,limitRadiusOutsideRegion:!0,hoverCursorFadeAlpha:.5,hoverCursorFadeDistance:1.2}},c=Object.assign(r,t);return a=this,(e=!(i=qe(n).call(this,c))||"object"!==Fe(i)&&"function"!=typeof i?We(a):i).activeMouseUpCallback=e.activeMouseUpCallback.bind(We(We(e))),e}var t,a,r;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&ze(e,n)}(n,o["FreehandRoiSculptorTool"]),t=n,(a=[{key:"_selectFreehandTool",value:function(e){var n=this.configuration,t=e.element,a=this._getClosestFreehandToolOnElement(t,e);if(void 0!==a){var i=Object(o.getToolState)(t,this.referencedToolName).data[a];i.referencedStructureSet.isLocked||(n.hoverColor=i.referencedROIContour.color,n.currentTool=a)}}},{key:"_activeEnd",value:function(e){var n=e.detail,t=n.element,a=this.configuration;this._active=!1,Xe.isMultiPartToolActive=!1,this._getMouseLocation(n),this._invalidateToolData(n),a.mouseUpRender=!0,this._deactivateSculpt(t);var r=Object(o.getToolState)(t,this.referencedToolName).data[a.currentTool];Ke.freehand3D.getters.interpolate()&&de(r),Object(i.updateImage)(n.element),function(e){e.stopImmediatePropagation(),e.stopPropagation(),e.preventDefault()}(e)}},{key:"_invalidateToolData",value:function(e){var n=this.configuration,t=e.element,a=Object(o.getToolState)(t,this.referencedToolName).data[n.currentTool];a.invalidated=!0,a.interpolated=!1}}])&&He(t.prototype,a),r&&He(t,r),n}();var Je={},Ze=o.store.modules,Qe={maxRadius:64,holeFill:2,holeFillRange:[0,20],strayRemove:5,strayRemoveRange:[0,99],interpolate:!1,showFreehandStats:!1,brush3dToolName:"Brush3DTool",brush3DHUGatedToolName:"Brush3DHUGatedTool",brush3DAutoGatedTool:"Brush3DAutoGatedTool",freehandRoi3DTool:"FreehandRoi3DTool",freehandRoi3DSculptorTool:"FreehandRoi3DSculptorTool",gates:[{name:"adipose",range:[-190,-30]},{name:"muscle",range:[-29,150]},{name:"custom",range:[0,100]}]};var $e=t(0),en=t.n($e);function nn(e){return(nn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function tn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function on(e,n){return!n||"object"!==nn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function an(e){return(an=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function rn(e,n){return(rn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var cn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),on(this,an(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&rn(e,n)}(n,en.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.ImportCallbackOrComponent,t=e.ExportCallbackOrComponent,o=e.onImportButtonClick,a=e.onExportButtonClick;return n||t?en.a.createElement("div",null,n&&en.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:o},"Import"),t&&en.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:a},"Export")):null}}])&&tn(t.prototype,o),a&&tn(t,a),n}();function ln(e){return(ln="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function dn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function un(e,n){return!n||"object"!==ln(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function sn(e){return(sn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Cn(e,n){return(Cn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var mn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),un(this,sn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Cn(e,n)}(n,en.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.segmentLabel,t=e.onDeleteConfirmClick,o=e.onDeleteCancelClick;return en.a.createElement("div",null,en.a.createElement("div",null,en.a.createElement("h5",null,"Warning!"),en.a.createElement("p",null,"Are you sure you want to delete ",n,"? This cannot be undone.")),en.a.createElement("div",{className:"seg-delete-horizontal-box"},en.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:t},en.a.createElement("i",{className:"fa fa fa-check-circle fa-2x"})),en.a.createElement("a",{className:"btn btn-sm btn-primary",onClick:o},en.a.createElement("i",{className:"fa fa fa-times-circle fa-2x"}))))}}])&&dn(t.prototype,o),a&&dn(t,a),n}();function pn(e){return(pn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function gn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Sn(e,n){return!n||"object"!==pn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function Dn(e){return(Dn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function fn(e,n){return(fn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var hn=a.a.store.modules.brush,yn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Sn(this,Dn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&fn(e,n)}(n,en.a.Component),t=n,(o=[{key:"_getTypeWithModifier",value:function(){var e=this.props.metadata,n=e.SegmentedPropertyTypeCodeSequence.CodeMeaning,t=e.SegmentedPropertyTypeCodeSequence.SegmentedPropertyTypeModifierCodeSequence;return t&&(n+=" (".concat(t.CodeMeaning,")")),n}},{key:"render",value:function(){var e=this.props,n=e.metadata,t=e.segmentIndex,o=e.onSegmentChange,a=e.onEditClick,i=e.onDeleteClick,r=e.checked,c=e.enabledElement,l=n.SegmentLabel,d=hn.getters.activeCornerstoneColorMap(c).getColor(t),u="rgba(".concat(d[0],", ").concat(d[1],", ").concat(d[2],", 1.0 )"),s=n.SegmentedPropertyCategoryCodeSequence.CodeMeaning,C=this._getTypeWithModifier();return en.a.createElement("tr",null,en.a.createElement("td",{className:"centered-cell"},en.a.createElement("i",{className:"fa fa-square",style:{color:u}})," ",en.a.createElement("input",{type:"radio",checked:r,onChange:function(){o(t)}})),en.a.createElement("td",{className:"left-aligned-cell"},en.a.createElement("a",{className:"segmentation-menu-name-link",onClick:function(){a(t,n)}},l)),en.a.createElement("td",null,en.a.createElement("a",{className:"segmentation-menu-name-link",onClick:function(){a(t,n)}},C," - ",s)),en.a.createElement("td",{className:"centered-cell"},en.a.createElement("a",{className:"btn btn-sm btn-secondary",onClick:function(){i(t)}},en.a.createElement("i",{className:"fa fa-times"}))))}}])&&gn(t.prototype,o),a&&gn(t,a),n}(),Tn=o.store.modules.brush;function Mn(e){if(!e)return[];var n=e.element,t=Tn.getters.metadata(n);Array.isArray(t)||(t=Tn.getters.getAndCacheLabelmap2D(n).labelmap3D.metadata);for(var o=Tn.getters.activeCornerstoneColorMap(n).getNumberOfColors(),a=1;a<o;a++)if(!t[a]){In(a,void 0,bn);break}}function bn(e){if(e){var n=e.label,t=e.categoryUID,o=e.typeUID,a=e.modifierUID,i=e.segIndex,r=e.element,c=M(n,t,o,a);Tn.setters.metadata(r,0,i,c),Tn.setters.activeSegmentIndex(r,i)}}function In(e,n,t){console.log("TODO: Remake brushMetadata input menu!")}function Rn(e){return(Rn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Ln(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Nn(e,n){return!n||"object"!==Rn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function vn(e){return(vn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Un(e,n){return(Un=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var Gn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Nn(this,vn(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Un(e,n)}(n,en.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props,n=e.segments,t=e.activeSegmentIndex,o=e.onSegmentChange,a=e.onEditClick,i=e.onDeleteClick,r=e.enabledElement;return en.a.createElement(en.a.Fragment,null,n.map(function(e){return en.a.createElement(yn,{key:"".concat(e.metadata.SegmentLabel,"_").concat(e.index),segmentIndex:e.index,metadata:e.metadata,onSegmentChange:o,onEditClick:a,onDeleteClick:i,checked:e.index===t,enabledElement:r})}),en.a.createElement("tr",null,en.a.createElement("th",null),en.a.createElement("th",null,en.a.createElement("a",{className:"segmentation-menu-new-button btn btn-sm btn-primary",onClick:Mn},en.a.createElement("i",{className:"fa fa-plus-circle"})," Segment"))))}}])&&Ln(t.prototype,o),a&&Ln(t,a),n}();function On(e){return(On="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function xn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Vn(e,n){return!n||"object"!==On(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function En(e){return(En=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function An(e,n){return(An=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var Bn=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),Vn(this,En(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&An(e,n)}(n,en.a.Component),t=n,(o=[{key:"render",value:function(){var e=this.props.importMetadata;return en.a.createElement(en.a.Fragment,null,en.a.createElement("tr",null,en.a.createElement("th",{colSpan:"2",className:"left-aligned-cell segmentation-menu-list-bordered"},e.name),en.a.createElement("th",{colSpan:"2",className:"right-aligned-cell segmentation-menu-list-bordered"},e.label)),e.type&&en.a.createElement("tr",null,en.a.createElement("th",{colSpan:"2",className:"left-aligned-cell segmentation-menu-list-bordered"},"Type: ",e.type),en.a.createElement("th",{colSpan:"2",className:"right-aligned-cell segmentation-menu-list-bordered"},"Modified: ",e.modified)),en.a.createElement("tr",{className:"segmentation-menu-list-bordered"},en.a.createElement("th",null,"Paint"),en.a.createElement("th",null,"Label"),en.a.createElement("th",{className:"centered-cell"},"Type"),en.a.createElement("th",{className:"centered-cell"},"Delete")))}}])&&xn(t.prototype,o),a&&xn(t,a),n}();function _n(e){return(_n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function wn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function kn(e){return(kn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Pn(e,n){return(Pn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function jn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Fn=a.a.store.modules.brush,Hn=Fn.state,qn=function(e){function n(){var e,t,o,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,e=!(o=kn(n).call(this,a))||"object"!==_n(o)&&"function"!=typeof o?jn(t):o;var i=Fn.getters.customGateRange();return e.state={holeFill:Hn.holeFill,strayRemove:Hn.strayRemove,activeGate:Hn.activeGate,customGateRangeMin:i[0],customGateRangeMax:i[1]},e.onGateChange=e.onGateChange.bind(jn(jn(e))),e.onCustomGateMinChange=e.onCustomGateMinChange.bind(jn(jn(e))),e.onCustomGateMaxChange=e.onCustomGateMaxChange.bind(jn(jn(e))),e.onHoleFillChange=e.onHoleFillChange.bind(jn(jn(e))),e.onStrayRemoveChange=e.onStrayRemoveChange.bind(jn(jn(e))),e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Pn(e,n)}(n,en.a.Component),t=n,(o=[{key:"onGateChange",value:function(e){var n=e.target.value;this.setState({activeGate:n}),Hn.activeGate=n}},{key:"onCustomGateMinChange",value:function(e){var n=Number(e.target.value),t=this.state.customGateRangeMax;n>t-10&&(n=t-10,e.target.value=n),this.setState({customGateRangeMin:n}),Fn.setters.customGateRange(n,null)}},{key:"onCustomGateMaxChange",value:function(e){var n=Number(e.target.value),t=this.state.customGateRangeMin;n<t+10&&(n=t+10,e.target.value=n),this.setState({customGateRangeMax:n}),Fn.setters.customGateRange(null,n)}},{key:"onHoleFillChange",value:function(e){var n=Number(e.target.value);this.setState({holeFill:n}),Hn.holeFill=n}},{key:"onStrayRemoveChange",value:function(e){var n=Number(e.target.value);this.setState({strayRemove:n}),Hn.strayRemove=n}},{key:"render",value:function(){var e=Hn.holeFillRange,n=Hn.strayRemoveRange,t=this.state,o=t.holeFill,a=t.strayRemove,i=t.activeGate,r=Hn.gates,c=0===o?"Don't fill holes.":"Fill holes <".concat(o,"% area of primary region."),l=0===a?"Paint all non-primary regions.":"Don't paint regions <".concat(a,"% area of primary region."),d=null;if("custom"===i){var u=Fn.getters.customGateRange();d=en.a.createElement("div",null,en.a.createElement("div",{className:"brush-settings-horizontal-box"},en.a.createElement("label",{htmlFor:"customGateMin"},"Min:"),en.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"customGateMin",min:-1024,max:3072,defaultValue:u[0],onChange:this.onCustomGateMinChange})),en.a.createElement("div",{className:"brush-settings-horizontal-box"},en.a.createElement("label",{htmlFor:"customGateMax"},"Max:"),en.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"customGateMax",min:-1024,max:3072,defaultValue:u[1],onChange:this.onCustomGateMaxChange})))}return en.a.createElement("div",{className:"segmentation-menu-footer"},en.a.createElement("h3",null," Smart CT Gate Selection"),en.a.createElement("select",{className:"form-themed form-control",onChange:this.onGateChange,value:i},r.map(function(e){return en.a.createElement("option",{key:e.name,value:e.name},"".concat(e.name," [").concat(e.range[0],", ").concat(e.range[1],"]"))})),d,en.a.createElement("h3",null," Smart/Auto Gate Settings "),en.a.createElement("label",{htmlFor:"holeFill"},c),en.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"holeFill",min:e[0],defaultValue:o,max:e[1],onChange:this.onHoleFillChange}),en.a.createElement("label",{htmlFor:"strayRemove"},l),en.a.createElement("input",{className:"form-themed form-control",type:"range",id:"start",name:"strayRemove",min:n[0],defaultValue:a,max:n[1],onChange:this.onStrayRemoveChange}))}}])&&wn(t.prototype,o),a&&wn(t,a),n}();function zn(e){return(zn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function Wn(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function Kn(e){return(Kn=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function Xn(e,n){return(Xn=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}function Yn(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Jn=a.a.store.modules.brush,Zn=function(e){function n(){var e,t,o,a=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),t=this,(e=!(o=Kn(n).call(this,a))||"object"!==zn(o)&&"function"!=typeof o?Yn(t):o).getSegmentList=e.getSegmentList.bind(Yn(Yn(e)));var i,r,c=(i=a.viewports,r=a.activeIndex,(i[r]||{}).dom),d=l(c),u=[],s=1,C=e.constructor._importMetadata(d);if(c){var m=e.getSegmentList(c,d);u=m.segments,s=m.segments}return e.state={importMetadata:C,segments:u,seriesInstanceUid:d,enabledElement:c,deleteConfirmationOpen:!1,segmentToDelete:1,activeSegmentIndex:s,importing:!1,exporting:!1},e.onSegmentChange=e.onSegmentChange.bind(Yn(Yn(e))),e.onEditClick=e.onEditClick.bind(Yn(Yn(e))),e.confirmDeleteOnDeleteClick=e.confirmDeleteOnDeleteClick.bind(Yn(Yn(e))),e.onDeleteCancelClick=e.onDeleteCancelClick.bind(Yn(Yn(e))),e.onDeleteConfirmClick=e.onDeleteConfirmClick.bind(Yn(Yn(e))),e.onImportButtonClick=function(){console.log(this);var e=this.props.ImportCallbackOrComponent;e.prototype.isReactComponent?this.setState({importing:!0}):e()}.bind(Yn(Yn(e))),e.onExportButtonClick=function(){var e=this.props.ExportCallbackOrComponent;e.prototype.isReactComponent?this.setState({exporting:!0}):e()}.bind(Yn(Yn(e))),e.onIOComplete=e.onIOComplete.bind(Yn(Yn(e))),e.onIOCancel=function(){this.setState({importing:!1,exporting:!1})}.bind(Yn(Yn(e))),e}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&Xn(e,n)}(n,en.a.Component),t=n,a=[{key:"_importMetadata",value:function(e){var n=Jn.getters.importMetadata(e);return n?{label:n.label,type:n.type,name:n.name,modified:n.modified?"true":" false"}:{name:"New Segmentation Collection",label:""}}},{key:"_segments",value:function(e){var n=Jn.getters.metadata(e);if(!n)return[];for(var t=[],o=0;o<n.length;o++)n[o]&&t.push({index:o,metadata:n[o]});return t}}],(o=[{key:"getSegmentList",value:function(e,n){return e=e||this.state.enabledElement,n=n||this.state.seriesInstanceUid,e&&n?{segments:this.constructor._segments(e),activeSegmentIndex:Jn.getters.activeSegmentIndex(e)}:[]}},{key:"onIOComplete",value:function(){var e=this.state.seriesInstanceUid,n=e.seriesInstanceUid,t=e.enabledElement,o=this.constructor._importMetadata(n),a=this.constructor._segments(t),i=Jn.getters.activeSegmentIndex(t);this.setState({importMetadata:o,segments:a,activeSegmentIndex:i,importing:!1,exporting:!1})}},{key:"onSegmentChange",value:function(e){var n=this.state.element;Jn.setters.activeSegmentIndex(n,e),this.setState({activeSegmentIndex:e})}},{key:"onEditClick",value:function(e,n){In()}},{key:"confirmDeleteOnDeleteClick",value:function(e){this.setState({deleteConfirmationOpen:!0,segmentToDelete:e})}},{key:"onDeleteConfirmClick",value:function(){var e=this.state,n=e.segmentToDelete,t=e.enabledElement;Jn.setters.deleteSegment(t,n);var o=this.constructor._segments(t);this.setState({deleteConfirmationOpen:!1,segments:o})}},{key:"onDeleteCancelClick",value:function(){this.setState({deleteConfirmationOpen:!1})}},{key:"render",value:function(){var e,n=this.state,t=n.importMetadata,o=n.segments,a=n.deleteConfirmationOpen,i=n.segmentToDelete,r=n.activeSegmentIndex,c=n.enabledElement,l=n.importing,d=n.exporting,u=this.props,s=u.ImportCallbackOrComponent,C=u.ExportCallbackOrComponent;if(l)e=en.a.createElement(s,{onImportComplete:this.onIOComplete,onImportCancel:this.onIOCancel});else if(d)e=en.a.createElement(C,{onExportComplete:this.onIOComplete,onExportCancel:this.onIOCancel});else if(a){var m=o.find(function(e){return e.index===i}).metadata.SegmentLabel;e=en.a.createElement(mn,{segmentLabel:m,onDeleteConfirmClick:this.onDeleteConfirmClick,onDeleteCancelClick:this.onDeleteCancelClick})}else e=en.a.createElement("div",{className:"segmentation-menu-component"},en.a.createElement("div",{className:"segmentation-menu-list"},en.a.createElement("div",{className:"segmentation-menu-header"},en.a.createElement("h3",null,"Segments"),en.a.createElement(cn,{ImportCallbackOrComponent:s,ExportCallbackOrComponent:C,onImportButtonClick:this.onImportButtonClick,onExportButtonClick:this.onExportButtonClick})),en.a.createElement("table",{className:"peppermint-table"},en.a.createElement("tbody",null,en.a.createElement(Bn,{importMetadata:t}),en.a.createElement(Gn,{segments:o,activeSegmentIndex:r,onSegmentChange:this.onSegmentChange,onEditClick:this.onEditClick,onDeleteClick:this.confirmDeleteOnDeleteClick,enabledElement:c})))),en.a.createElement(qn,null));return en.a.createElement(en.a.Fragment,null,e)}}])&&Wn(t.prototype,o),a&&Wn(t,a),n}();function Qn(e){return(Qn="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function $n(e,n){for(var t=0;t<n.length;t++){var o=n[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function et(e,n){return!n||"object"!==Qn(n)&&"function"!=typeof n?function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e):n}function nt(e){return(nt=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function tt(e,n){return(tt=Object.setPrototypeOf||function(e,n){return e.__proto__=n,e})(e,n)}var ot=function(e){function n(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return function(e,n){if(!(e instanceof n))throw new TypeError("Cannot call a class as a function")}(this,n),et(this,nt(n).call(this,e))}var t,o,a;return function(e,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(n&&n.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),n&&tt(e,n)}(n,en.a.Component),t=n,(o=[{key:"render",value:function(){return en.a.createElement(en.a.Fragment,null,en.a.createElement("div",null,"Hello Panel"))}}])&&$n(t.prototype,o),a&&$n(t,a),n}(),at="setToolActive";n.default={id:"ohif-segmentation-extension",preRegistration:function(){!function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=Ze.brush,t=Object.assign({},Qe,e);!function(e,n){var t=e.state,o=e.getters,a=e.setters;t.holeFill=n.holeFill,t.holeFillRange=n.holeFillRange,t.strayRemove=n.strayRemove,t.strayRemoveRange=n.strayRemoveRange,t.gates=n.gates,t.activeGate=t.gates[0].name,t.maxRadius=n.maxRadius,o.activeGateRange=function(){var e=t.activeGate,n=t.gates.findIndex(function(n){return n.name===e});return t.gates[n].range},o.customGateRange=function(){var e=t.gates.findIndex(function(e){return"custom"===e.name});return t.gates[e].range},a.customGateRange=function(e,n){var o=t.gates.findIndex(function(e){return"custom"===e.name}),a=t.gates[o].range;null!==e&&(a[0]=e),null!==n&&(a[1]=n)},o.importMetadata=function(n){if(e.state.import&&e.state.import[n])return e.state.import[n]},a.importMetadata=function(n,t){e.state.import||(e.state.import={}),e.state.import[n]=t},a.importModified=function(n){var t=e.state.import[n];t.modified||(t.modified=!0)}}(n,t),Object(o.register)("module","freehand3D",f);var a=Ze.freehand3D;a.state.interpolate=t.interpolate,a.state.displayStats=t.showFreehandStats,Object(o.addTool)(U,{name:t.brush3dToolName}),Object(o.addTool)(F,{name:t.brush3DHUGatedToolName}),Object(o.addTool)(J,{name:t.brush3DAutoGatedTool}),Object(o.addTool)(Pe,{name:t.freehandRoi3DTool}),Object(o.addTool)(Ye,{name:t.freehandRoi3DSculptorTool,referencedToolName:t.freehandRoi3DTool}),Je.FREEHAND_ROI_3D_TOOL=t.freehandRoi3DTool,Je.FREEHAND_ROI_3D_SCULPTOR_TOOL=t.freehandRoi3DSculptorTool,Je.BRUSH_3D_TOOL=t.brush3dToolName,Je.BRUSH_3D_AUTO_GATED_TOOL=t.brush3DAutoGatedTool,Je.BRUSH_3D_HU_GATED_TOOL=t.brush3DHUGatedToolName,console.log(t),console.log(Je)}(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{})},getCommandsModule:function(){return{defaultContext:"VIEWER",actions:[],definitions:[]}},getToolbarModule:function(){return{definitions:[{id:"freehandRoiTools",label:"ROI",icon:"level",buttons:[{id:"FreehandRoi",label:"Draw",icon:"level",type:at,commandName:"setToolActive",commandOptions:{toolName:Je.FREEHAND_ROI_3D_TOOL}},{id:"FreehandRoiSculptor",label:"Sculpt",icon:"level",type:at,commandName:"setToolActive",commandOptions:{toolName:Je.FREEHAND_ROI_3D_SCULPTOR_TOOL}}]},{id:"brushTools",label:"Segment",icon:"level",buttons:[{id:"Brush",label:"Manual",icon:"level",type:at,commandName:"setToolActive",commandOptions:{toolName:Je.BRUSH_3D_TOOL}},{id:"Brush3DHUGatedTool",label:"Smart CT",icon:"level",type:at,commandName:"setToolActive",commandOptions:{toolName:Je.BRUSH_3D_HU_GATED_TOOL}},{id:"Brush3DAutoGatedTool",label:"Auto",icon:"level",type:at,commandName:"setToolActive",commandOptions:{toolName:Je.BRUSH_3D_AUTO_GATED_TOOL}}]}],defaultContext:"ACTIVE_VIEWPORT::CORNERSTONE"}},getPanelModule:function(){return{menuOptions:[{icon:"th-list",label:"Segments",target:"segment-panel"},{icon:"th",label:"Contours",target:"contour-panel"}],components:[{id:"segment-panel",component:Zn},{id:"contour-panel",component:ot}],defaultContext:["VIEWER"]}}}}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,